

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}                                                                                               

shared interface IBroadcastBuffer
{
	string GetString();
	
	void SetType(int type);
	int GetType();
	void SetTime(int time);
	int GetTime();
	void SetSetup(int setup);
	int GetSetup();
	void SetMessage(string message);
	void AppendMessage(string message);
	string GetMessage();
	void SetData(array<int>data);
	
	void SetStart(int time);
	void ResetStart();
	
	void SetLifetime(int lifetime);
	
	void SetFilters(int filters);
	void SetFilter(int filter);
	void SetFilter(int filter,int data);
	void UnsetFilter(int filter);
	bool Filter(int filter);
	bool CheckFilters(Critter@player);
	
	bool Send(Critter@player);
	uint SendToAll();
	
	void SetGM(int id);
	void UnsetGM();
	
	void ToDelete();
};  

import void UpdateBroadcast()from"broadcast";

import IBroadcastBuffer@AddBroadcastBuffer(int type,int time,int setup,string&message,array<int>&data,int lifetime,int flags)from"broadcast";
import void DumpBroadcastBuffer(Critter@player)from"broadcast";
import uint FindBroadcastBufferByType(int type,array<IBroadcastBuffer@>&buf)from"broadcast";
import uint FindBroadcastBufferByGM(int id,array<IBroadcastBuffer@>&buf)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int&time)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message)from"broadcast"; 

import void Broadcast_TownControl_Set(string&message,int location,int time,int faction)from"broadcast";
import void Broadcast_TownControl_Set(int location,int time,int faction,Critter&player)from"broadcast";
import void Broadcast_TownControl_Stop(int location)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Influence(int location,int time,string&message)from"broadcast"; 

import uint Broadcast_RequestHelp(Critter@player,string&message)from"broadcast";
import void Broadcast_CheckRequestHelpBuffer(Critter@gm)from"broadcast";
import void Broadcast_DumpRequestHelpBuffer(Critter@gm)from"broadcast"; 

import void baseControl(string msg,int mapId,uint time)from"broadcast";
import void baseControlRadio(string msg,uint time,int mapId,uint factionId)from"broadcast"; 

import void ServerEventMSG(uint time,string msg)from"broadcast"; 

import IBroadcastBuffer@GetEventCountDownBuffer(int location,int type)from"broadcast";
import void ServerEventCNTSet(string message,uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTSet(uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTStop(uint location,uint type)from"broadcast

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                            

shared class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(!IsAnyData(name))
		return false;
		if(!GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const bool&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const string&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const float&value)
	{
		int dummy=FloatToInt(value);
		return Set(dummy);
	}
	
	Serializator@opShl(const float&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const array<int64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<bool>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<bool>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<string>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<string>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<float>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(FloatToInt(values[i]));
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<float>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Critter&cr)
	{
		return Set(cr);
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Item&item)
	{
		return Set(item);
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@opShr(bool&value)
	{
		return Get(value);
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@opShr(string&str)
	{
		return Get(str);
	}
	
	Serializator@Get(float&value)
	{
		int dummy=0;
		Get(dummy);
		value=IntToFloat(dummy);
		return this;
	}
	
	Serializator@opShr(float&value)
	{
		return Get(value);
	}
	
	Serializator@Get(array<int64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<float>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		{
			int dummy=0;
			Get(dummy);
			values[i]=IntToFloat(dummy);
		}
		return this;
	}
	
	Serializator@opShr(array<float>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<bool>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<bool>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<string>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<string>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@opShr(Critter@&cr)
	{
		return Get(cr);
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	Serializator@opShr(Item@&item)
	{
		return Get(item);
	}
	
	array<uint8>Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};                                                                                                                                                                                         

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";                                                                                                                                                                                                                                                                                                                                                                                              

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                                       

import void InitEconomy()from"economy";
import void SendLevelThresholds(Critter&)from"economy"; 

import bool BankAccountExists(uint bankid,uint account)from"economy";
import bool BankAccountRemoveMoney(uint bankid,uint account,uint amount)from"economy";
import bool BankHasAccess(uint bankid,uint account,uint playerid)from"economy";
import int BankGetAccountBalance(uint bankid,uint account)from"economy";
import int BankGetAccountID(uint bankid,uint playerid)from"economy";
import uint BankAddAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankCreateAccount(uint bankid,uint playerid)from"economy";
import uint BankDepositMoney(uint bankid,uint playerid,uint account,int amount)from"economy";
import uint BankGetAccessCount(uint bankid,uint account)from"economy";
import uint BankGetAccountOwner(uint bankid,uint account)from"economy";
import uint BankGetAccountType(uint bankid,uint account)from"economy";
import uint BankGetCreditRating(uint bankid,uint account)from"economy";
import uint BankGetLoan(uint bankid,uint account)from"economy";
import uint BankRemoveAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankSetAccountType(uint bankid,uint account,uint accounttype)from"economy";
import uint BankSetCreditRating(uint bankid,uint account,uint rating)from"economy";
import uint BankSetLoan(uint bankid,uint account,uint loan)from"economy";
import uint BankTakeLoan(uint bankid,uint account,uint amount)from"economy";
import uint BankTransferMoney(uint bankid,uint fromaccount,uint toaccount,uint amount)from"economy";
import uint BankWithdrawMoney(uint bankid,uint playerid,uint account,int amount)from"economy"; 

import bool BanksTransferFromCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import bool BanksTransferToCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import uint BanksGetTotalMoney()from"economy";
import void BanksAddMoney(uint amount)from"economy";
import void BanksRemoveMoney(uint amount)from"economy"; 

import bool BankAddMoney(uint bankid,uint amount)from"economy";
import bool BankRemoveMoney(uint bankid,uint amount)from"economy";
import bool BankSetMoney(uint bankid,uint amount)from"economy";
import uint BankGetLoanInterest(uint bankid)from"economy";
import uint BankGetNumberOfAccounts(uint bankid)from"economy";
import float BankGetSaveInterest(uint bankid)from"economy";
import uint BankGetTotalMoney(uint bankid)from"economy";
import uint BankGetTotalBalance(uint bankid)from"economy";
import float BankGetReserveRatio(uint bankid)from"economy";
import uint BankSetLoanInterest(uint bankid,uint interest)from"economy";
import uint BankSetSaveInterest(uint bankid,float interest)from"economy";
import bool BankTransferFromCritter(uint bankId,Critter&critter,uint amount,uint type,bool virtual)from"economy";

import void SaveBankData()from"economy";   

import int GetItemSellModifier(Critter&player,Critter&trader)from"economy";
import int GetItemBuyModifier(Critter&player,Critter&trader)from"economy";
import uint GetItemCost(Item&item,Critter&cr,Critter&trader,bool sell)from"economy";
import uint GetItemCostPlain(Item&item,Critter&cr,Critter&trader)from"economy";

import array<int>GetTraderLevels(Critter@npc)from"economy";
import uint GetTraderLevel(Critter@npc,uint type)from"economy";

import uint ItemLevel(Item&item)from"economy";
import uint ItemLevel(uint pid)from"economy";
import uint TraderCapacity(Critter@npc)from"economy";
import uint TraderCapacity(Critter@npc,uint type,uint level)from"economy";
import uint TraderMoneyCapacity(Critter@npc)from"economy";
import uint TradingItemType(Item&item)from"economy";
import uint TradingItemType(uint pid)from"economy";                                                                                                          

const string@FD_Bank_Result2String(uint res)
{
	if(res==(1))
	return"FD_BANK_RESULT_SUCCESS";
	else if(res==(2))
	return"FD_BANK_RESULT_UNKNOWN";
	else if(res==(3))
	return"FD_BANK_RESULT_TOO_MANY_ACCOUNTS";
	else if(res==(4))
	return"FD_BANK_RESULT_ALREADY_HAS_ACCOUNT";
	else if(res==(5))
	return"FD_BANK_RESULT_NOT_ENOUGH_MONEY";
	else if(res==(6))
	return"FD_BANK_RESULT_BANK_FULL";
	else if(res==(7))
	return"FD_BANK_RESULT_BANK_EMPTY";
	else if(res==(8))
	return"FD_BANK_RESULT_DATA_ERROR";
	else if(res==(9))
	return"FD_BANK_RESULT_INVALID_PLAYER";
	else if(res==(10))
	return"FD_BANK_RESULT_NO_ACCOUNT";
	else
	return"FD_Result: Unknown error code";
}                        

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                                                                                          

import ICaravan@GetCaravan(uint id)from"caravans";
import ICaravan@GetCaravan(Critter&cr)from"caravans";

import void InitCaravans()from"caravans"; 

import bool TakeNextLine(file&f,string&line)from"trains";
import array<int>@TakeNextNumLine(file&f)from"trains";   

bool IsCaravanLeader(Critter&cr)
{
	ICaravan@caravan=GetCaravan(cr); 
	
	return(@caravan!=null)&&(caravan.GetLeaderId()==cr.Id||caravan.GetWMLeaderId()==cr.Id);
}     

void CaravanStart(Critter&leader)
{
	ICaravan@caravan=GetCaravan(leader.Id);
	if(!(@caravan!=null))
	{
		
		return;
	}
	
	caravan.Start();
}

void CaravanProcessStartFast()
{}

void CaravanProcessMove()
{}  

shared interface ICaravan
{
	void Init();
	
	uint GetState();
	
	uint GetLeaderId();
	uint GetWMLeaderId();
	
	bool IsCaravanMember(Critter&);
	
	ICaravan@Route(uint16 origLoc,uint8 origMap,uint16 destLoc,uint8 destMap);
	ICaravan@Route(uint16 x,uint16 y);
	ICaravan@_AddNpc(uint16 pid,uint dialogId,uint bagId,uint level);
	
	void Assign(Critter&cr);
	void Leave(Critter&cr);
	void GetCurrentCoords(float&,float&);
	bool EndOfTrack();
	void IncRoutePosition();
	
	string GetName();
	string GetNextDestinationName();
	uint GetActPay();
	uint GetDepartTime(); 
	
	void Start();
	void PrepareDeparture(uint);
	void Arrive();
	void PrepareRespawn();
	void Respawn();
};   

class CCaravanNpc
{
	uint16 Pid;
	uint DialogId;
	uint BagId;
	uint Level;
	
	CCaravanNpc(uint16 pid,uint dialogId,uint bagId,uint level)
	{
		this.Pid=pid;
		this.DialogId=dialogId;
		this.BagId=bagId;
		this.Level=level;
	}
};  

class Coord
{
	uint16 X;
	uint16 Y;
	Coord(uint16 x,uint16 y)
	{
		this.X=x;
		this.Y=y;
	}
};    

class CRoute
{
	private uint Id;
	private uint HeadId;
	private uint TailId;
	private array<float>X;
	private array<float>Y;
	
	uint GetId(){return Id;}
	uint GetHeadId(){return HeadId;}
	uint GetTailId(){return TailId;}
	
	CRoute(uint id,uint headId,uint tailId)
	{
		Id=id;
		HeadId=headId;
		TailId=tailId;
	}
	uint NodesCount(){return X.length();}
	float GetX(uint node){return X[node];}
	float GetY(uint node){return Y[node];}
	void GetXY(uint node,float&x,float&y){x=X[node];y=Y[node];}
	void AddNode(float x,float y){X.insertLast(x);Y.insertLast(y);}
	bool IsLast(uint idx){return idx+1==NodesCount();}
};

class CCaravanStation
{
	private uint Id;
	private Map@MapPtr;
	private Location@LocPtr;
	
	CCaravanStation(uint id,uint map_pid)
	{
		Id=id;
		@MapPtr=GetMapByPid(map_pid,0);
		if(!(@MapPtr!=null))
		{
			WLog("trains","wrong map pid="+map_pid,20);
			return;
		}
		@LocPtr=MapPtr.GetLocation();
	}
	
	uint GetId(){return Id;}
	float GetX(){return LocPtr.WorldX;}
	float GetY(){return LocPtr.WorldY;}
	Map@GetMap(){return MapPtr;}
	Location@GetLocation(){return LocPtr;}
}; 

class CaravanManager
{
	
	array<CRoute@>Routes;
	array<CCaravanStation@>Stations;
	array<ICaravan@>Caravans;
	
	CCaravanStation@GetStation(uint id)
	{
		if(id>=Stations.length())
		return null;
		return Stations[id];
	}
	ICaravan@GetCaravan(uint id)
	{
		if(id>=Caravans.length())
		return null;
		return Caravans[id];
	}
	CRoute@GetRoute(uint id)
	{
		if(id>=Routes.length())
		return null;
		return Routes[id];
	}
	
	void Load(string&filename)
	{
		Caravans.insertLast(null);
		file f;
		
		f.open(filename,"r"); 
		
		array<int>@data=TakeNextNumLine(f);
		array<int>@data1;
		array<int>@data2;
		for(uint i=0,j=data.length();i<j;i++)
		{
			CCaravanStation@station=@CCaravanStation(i,data[i]);
			Stations.insertLast(station);
		}
		WLog("caravans","loaded "+Stations.length()+" stations"); 
		
		@data=TakeNextNumLine(f);
		uint routes=data[0];
		for(uint i=0;i<routes;i++)
		{
			@data=TakeNextNumLine(f);
			CRoute@route=CRoute(i,data[0],data[1]);
			Routes.insertLast(route);
			for(uint k=2;k<data.length();k+=2)
			route.AddNode(data[k],data[k+1]);
			CCaravanStation@station=GetStation(data[1]);
			route.AddNode(station.GetX(),station.GetY());
		}
		for(uint i=0;i<routes;i++)
		{
			CRoute@toInvert=Routes[i];
			CRoute@inverted=CRoute(i+routes,toInvert.GetTailId(),toInvert.GetHeadId());
			for(int j=toInvert.NodesCount()-2;j>=0;j--)
			{
				float x=0;
				float y=0;
				toInvert.GetXY(j,x,y);
				inverted.AddNode(x,y);
			}
			CCaravanStation@station=GetStation(toInvert.GetHeadId());
			inverted.AddNode(station.GetX(),station.GetY());
			Routes.insertLast(inverted);
		}
		WLog("caravans","loaded "+Routes.length()+" caravan routes");  
		
		@data=TakeNextNumLine(f);
		uint caravans=data[0];
		for(uint i=0;i<caravans;i++)
		{
			string name="";
			TakeNextLine(f,name);
			@data=TakeNextNumLine(f);
			@data2=TakeNextNumLine(f);
			
			@data1=TakeNextNumLine(f);
			
			CCaravan@caravan=CCaravan(i+1,data,data2,data1[0],data1[1],data1[2],data1[3],data1[4],name,this);
			@data=TakeNextNumLine(f);
			uint townPid=data[0];
			uint townBag=data[1];
			
			@data=TakeNextNumLine(f);
			uint leaderPid=data[0];
			uint leaderBag=data[1];
			
			@data=TakeNextNumLine(f);
			uint guardTypeCount=data.length()/2;
			array<uint>@guardPids=array<uint>(guardTypeCount);
			
			array<uint>@guardBags=array<uint>(guardTypeCount); 
			
			for(uint k=0,l=0;k<guardTypeCount;k++)
			{
				guardPids[k]=data[l];
				guardBags[k]=data[l+1];
				l+=2;
			}
			caravan.SetBagsAndPids(townPid,townBag,leaderPid,leaderBag,guardPids,guardBags);
			Caravans.insertLast(caravan);
		}
		WLog("caravans","loaded "+Caravans.length()+" caravans");
		
		f.close(); 
		
		for(uint i=1;i<Caravans.length();i++)
		Caravans[i].Init();
		
	}
};       

class CCaravan:ICaravan
{
	
	uint id;
	
	CaravanManager@mgr; 
	
	array<uint>players;
	
	array<uint>critters; 
	
	array<CCaravanNpc>npcs; 
	
	uint wagon;
	
	uint routeIndex;
	uint routePosition;
	
	uint originStationId;
	uint destinationStationId; 
	
	uint16 destLoc;
	
	uint8 destMap;
	
	uint16 origLoc;
	uint8 origMap;
	
	uint currLoc;
	uint8 currMap;
	
	uint entire;
	uint timeInTown;
	
	uint timeEvent;
	uint departure;
	
	uint state; 
	
	int target;
	array<Coord>route;
	
	array<int>@routes;
	array<int>@rewards;
	string name;
	
	uint townDlg;
	uint wmDlg;
	
	uint townLeaderPid;
	uint townLeaderBag;
	uint leaderPid;
	uint leaderBag;
	uint factionId;
	array<uint>@guardPids;
	array<uint>@guardBags;
	
	Serializator serializer;
	
	CCaravan(uint id,array<int>@routes,array<int>@rewards,int entire,int timeInTown,int townDlg,int wmDlg,int factionId,string name,CaravanManager@mgr)
	{
		this.id=id;
		@this.routes=routes;
		@this.rewards=rewards;
		this.entire=entire;
		this.timeInTown=timeInTown;
		this.name=name;
		this.townDlg=townDlg;
		this.factionId=factionId;
		this.wmDlg=wmDlg;
		@this.mgr=mgr;
		timeEvent=0;
	}
	
	void SetBagsAndPids(uint townLeaderPid,uint townLeaderBag,uint leaderPid,uint leaderBag,array<uint>@guardPids,array<uint>@guardBags)
	{
		this.townLeaderPid=townLeaderPid;
		this.townLeaderBag=townLeaderBag;
		this.leaderPid=leaderPid;
		this.leaderBag=leaderBag;
		@this.guardPids=guardPids;
		@this.guardBags=guardBags;
	}   
	
	void LoadData()
	{
		serializer.Load("Caravan_"+id);
		uint num=0;
		
		serializer.Get(routeIndex);
		routeIndex=(routeIndex%routes.length());        
		
		serializer.Get(num);
		critters.resize(num);
		for(uint i=0;i<num;i++)
		serializer.Get(critters[i]); 
		
	}
	
	void SetDefault()
	{
		routeIndex=0;
		
	}  
	
	void SaveData()
	{
		serializer.Clear();
		uint num=0;
		
		serializer.Set(routeIndex);         
		
		num=critters.length();
		serializer.Set(num);
		for(uint i=0;i<num;i++)
		serializer.Set(critters[i]);  
		
		serializer.Save("Caravan_"+id);
	}     
	
	void SetId(uint id)
	{
		this.id=id;
	}   
	
	void Init()
	{
		
		{;};
		
		if(IsAnyData("Caravan_"+id))
		{
			
			LoadData();
		}
		else
		{
			
			SetDefault();
			SaveData();
		}
		
		ClearCaravan(); 
		
		SpawnCaravan();
	}
	
	void ClearCaravan()
	{
		for(uint i=0,j=critters.length();i<j;i++)
		{
			Critter@cr=GetCritter(critters[i]);
			if((@cr!=null))
			DeleteNpc(cr);
		}
		critters.resize(2);
		
		CRoute@actRoute=mgr.GetRoute(routes[routeIndex]);
		originStationId=actRoute.GetHeadId();
		
		destinationStationId=actRoute.GetTailId();
	}   
	
	void SpawnCaravan()
	{
		
		CCaravanStation@origin=mgr.GetStation(originStationId);
		Map@map=origin.GetMap();
		int[]params={(104),townDlg,(107),townLeaderBag,(106),factionId,(122),1,(532),1,(511),1};
		uint16 x=0;
		uint16 y=0;
		map.GetEntireCoords(entire,0,x,y);
		Critter@cr=map.AddNpc(townLeaderPid,x,y,3,params,null,"caravans@_CaravanTownNpc");
		
		if(!(@cr!=null))
		return;
		cr.ParamBase[(84)]=((1)*60);
		SetLvar(cr.Id,(3006),id);
		
		critters[0]=cr.Id;
		critters[1]=0;
		
		state=(0);
		
		uint fullSec=((__FullSecond)+(((timeInTown)*60)));
		departure=fullSec-fullSec%3600+3600;
		
		array<uint>departData={id,departure};
		timeEvent=CreateTimeEvent(departure-3600,"caravans@e_PrepareCaravan",departData,false);                                       
		
	}
	
	void PrepareDeparture(uint departTime)
	{
		state=(1);
		timeEvent=CreateTimeEvent(departTime,"caravans@e_DepartCaravan",id,false);
		int[]params={(104),wmDlg,(107),leaderBag,(106),factionId,(122),1};
		
		CCaravanStation@origin=mgr.GetStation(originStationId);
		Map@map=origin.GetMap();
		Critter@leader=map.AddNpc(leaderPid,0,0,0,params,null,"caravans@_CaravanDriver");
		SetLvar(leader.Id,(3006),id);
		leader.TransitToGlobal(false);
		critters[1]=leader.Id;
	}
	
	void GetCurrentCoords(float&x,float&y)
	{
		CRoute@route=mgr.GetRoute(routes[routeIndex]);
		route.GetXY(routePosition,x,y);
	}
	
	bool EndOfTrack()
	{
		CRoute@route=mgr.GetRoute(routes[routeIndex]);
		return route.IsLast(routePosition);
	}
	
	void IncRoutePosition()
	{
		routePosition++;
	}   
	
	uint GetLeaderId()
	{
		return critters[0];
	}
	
	uint GetWMLeaderId()
	{
		return critters[1];
	}
	
	bool IsCaravanMember(Critter&crit)
	{
		if(crit.IsPlayer())
		{
			for(uint i=0,j=players.length();i<j;i++)
			{
				if(players[i]==crit.Id)
				return true;
			}
		}
		else
		{
			for(uint i=0,j=critters.length();i<j;i++)
			{
				if(critters[i]==crit.Id)
				return true;
			}
		}
		return false;
	}  
	
	ICaravan@Route(uint16 origLoc,uint8 origMap,uint16 destLoc,uint8 destMap)
	{
		{;};
		this.origLoc=origLoc;
		this.origMap=origMap;
		this.destLoc=destLoc;
		this.destMap=destMap;
		
		this.currLoc=origLoc;
		this.currMap=origMap;
		
		return this;
	}   
	
	ICaravan@Route(uint16 x,uint16 y)
	{
		route.insertLast(Coord(x,y));
		return this;
	}    
	
	ICaravan@_AddNpc(uint16 pid,uint dialogId,uint bagId,uint level)
	{
		npcs.insertLast(CCaravanNpc(pid,dialogId,bagId,level));
		return this;
	}  
	
	void Assign(Critter&cr)
	{
		GameVar@var=GetLocalVar((3006),cr.Id);
		var=id;
		
		cr.ParamBase[(81)]=GetWMLeaderId();
	}  
	
	void Leave(Critter&cr)
	{
		if(cr.IsPlayer())
		{
			for(uint i=0,j=players.length();i<j;i++)
			{
				if(players[i]==cr.Id)
				players[i]=0;
			}
		}
		else
		{
			for(uint i=0,j=critters.length();i<j;i++)
			{
				if(critters[i]==cr.Id)
				critters[i]=0;
			}
		}
		GameVar@var=GetLocalVar((3006),cr.Id);
		var=0;
		
	}
	
	uint GetState()
	{
		return state;
	}
	
	string GetName()
	{
		return name;
	}
	
	string GetNextDestinationName()
	{
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		return GetLocationName(destination.GetLocation());
	}
	
	uint GetActPay()
	{
		return rewards[routeIndex];
	}
	
	uint GetDepartTime()
	{
		return departure;
	}   
	
	void Start()
	{
		Map@map;
		Critter@townNpc=GetCritter(critters[0]);
		if((@townNpc!=null))
		{
			@map=townNpc.GetMap();
			DeleteNpc(townNpc);
		}
		critters[0]=0;
		routePosition=0;
		state=(2);
		
		Critter@wmNpc=GetCritter(critters[1]);
		
		array<Critter@>crits=wmNpc.GetGlobalGroup();
		uint playerCount=crits.length()-1;
		players.resize(playerCount);
		for(uint i=1,j=crits.length();i<j;i++)
		{
			players[i-1]=crits[i].Id;
			SetLvar(crits[i].Id,(3006),id);
			crits[i].Say((11),"You have departed with caravan.");
		}  
		
		uint neededGuards;
		if(playerCount>5)neededGuards=0;
		else neededGuards=6-playerCount; 
		
		critters.resize(2+neededGuards);
		if((@map!=null))
		{
			uint guardTypeCount=guardPids.length();
			for(uint i=0;i<neededGuards;i++)
			{
				uint guardType=Random(0,guardTypeCount-1);
				int[]params={(107),guardBags[guardType],(106),factionId,(122),1};
				Critter@npc=map.AddNpc(guardPids[guardType],1,1,0,params,null,"caravans@_CaravanGuard");
				npc.ParamBase[(91)]=critters[1];
				critters[2+i]=npc.Id;
				npc.TransitToGlobalGroup(GetWMLeaderId());
				SetLvar(npc.Id,(3006),id);
			}
		}
		CCaravanStation@origin=mgr.GetStation(originStationId);
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		
	}
	
	void Reward()
	{
		Critter@leader=GetCritter(GetWMLeaderId());
		if((@leader!=null))
		{
			array<Critter@>crits=leader.GetGlobalGroup();
			uint playerCount=crits.length()-1;
			players.resize(playerCount);
			for(uint i=1,j=crits.length();i<j;i++)
			{
				if(crits[i].IsPlayer())
				{
					uint reward=GetActPay()*2+crits[i].Param[(77)]*25;
					uint reward2=GetActPay()*2;
					BanksTransferToCritter(crits[i],reward,(0),false);
					crits[i].Say((11),"You have received "+reward+" caps as your pay.");
					int expAmount=(crits[i].Param[(77)]*reward2/10)*(GetGvar((62003)))*(GetGvar((62001)));
					crits[i].ParamBase[(76)]+=expAmount;
					crits[i].AddItem((41),crits[i].Param[(77)]*25);
					crits[i].Say((11),"|0xFFFFFF You have gained "+expAmount+" experience points.");
					AddScore(crits[i],(58),1);
				}
			}
		}
	}
	
	void Arrive()
	{
		CCaravanStation@origin=mgr.GetStation(originStationId);
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		
		Reward();
		routeIndex=(routeIndex+1)%routes.length();
		ClearCaravan();
		SpawnCaravan();
	}
	
	void PrepareRespawn()
	{
		CCaravanStation@origin=mgr.GetStation(originStationId);
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		
		routeIndex=(routeIndex+1)%routes.length();
		ClearCaravan();
		CreateTimeEvent(((__FullSecond)+(((7)*__TimeMultiplier*60))),"caravans@e_RespawnCaravan",id,false);
	}
	
	void Respawn()
	{
		SpawnCaravan();
		CCaravanStation@origin=mgr.GetStation(originStationId);
		
	}
};          

import void InitializeGame()from"config";               

shared interface IConfigVar
{
	string GetName();
	string GetValue();
	array<string>GetValueAsArray();
	array<string>GetValueAsArray(string&delimeter);
	void SetValue(int val);
	void SetValue(uint val);
	void SetValue(string&val);
	void SetValue(array<string>&val);
	void SetValue(array<string>&val,string&delimeter);
};

shared interface IConfigSection
{
	string GetName();
	bool AddVar(string&var,string&val);
	bool DeleteVar(string&var);
	bool DeleteVar(string&var,bool caseSensitive);
	IConfigVar@GetVar(string&var);
	IConfigVar@GetVar(string&varname,bool caseSensitive);
	void GetVars(array<string>&list);
	bool SetVar(string&varname,string val);
	bool VarExists(string&var);
	bool VarExists(string&var,bool caseSensitive);
};

shared interface IConfigFile
{
	bool IsVirtual();
	string GetName();
	bool AddSection(string&section);
	IConfigSection@GetSection(string&section);
	IConfigSection@GetSection(string&sectioname,bool caseSensitive);
	void GetSections(array<string>&list);
	bool SectionExists(string&section);
	bool SectionExists(string&section,bool caseSensitive);
};  

import IConfigFile@NewConfig(string&filename)from"config_file";
import bool LoadConfig(string&filename)from"config_file";
import bool SaveConfig(string&filename)from"config_file";
import bool UnloadConfig(string&filename)from"config_file";

import IConfigFile@GetConfigFile(string&filename)from"config_file";
import IConfigFile@GetConfigFile(string&filename,bool caseSensitive)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname,bool caseSensitive)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import string@GetConfigValue(string&filename,string&section,string@varname)from"config_file";
import string@GetConfigValue(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import bool SetConfigValue(string&filename,string&sectioname,string@varname,string&value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,bool value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,int value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,uint value)from"config_file";                

import void SetBirthDate(Critter&cr)from"critter_age";
import void CheckBirthDate(Critter&cr)from"critter_age";
import void CritterAgeInit(Critter&cr)from"critter_age";
import void SynchronizeAge(Critter&cr)from"critter_age

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}      

import bool IsBigFaction(uint faction)from"factions";
import bool IsTheSameFaction(uint player1Id,uint player2Id)from"factions";
import void _Resign(uint playerId)from"factions"; 

import int RegisterFaction(uint id,const string@name,bool playerDriven)from"factions";
import int RegisterFaction(const string@name,bool playerDriven,uint&out id)from"factions";

import bool RemoveFaction(uint faction)from"factions"; 

import bool GetFactionNameStr(uint faction,string&out name)from"factions";
import bool GetFactionId(const string@name,uint&out id)from"factions"; 

import bool IsFactionNameFree(const string&)from"factions";
import bool IsFactionNameValid(const string&)from"factions";

import bool IsGang(uint faction)from"factions";

import uint16 GetFactionRadioChannel(uint faction)from"factions";
import void SetFactionRadioChannel(uint faction,uint16 channel)from"factions"; 

import int AddPlayer(uint faction,uint id)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)from"factions"; 

import int RemovePlayer(uint faction,uint id)from"factions"; 

import int GetFaction(uint faction,uint id)from"factions";
import int GetStatus(uint faction,uint id)from"factions";
import int GetRank(uint faction,uint id)from"factions";
import bool IsMember(uint faction,Critter&cr)from"factions";
import bool IsMemberOffline(uint faction,uint id)from"factions";
import bool StoredInDB(uint faction,uint id)from"factions";
import uint GetRecordsCount(uint faction)from"factions";
import uint GetMembersCount(uint faction)from"factions";
import uint GetMembers(uint faction,array<uint>&ids)from"factions";
import uint GetLeaderId(uint faction)from"factions";
import void SetLeaderId(uint faction,uint id)from"factions";
import uint GetClaimId(uint faction)from"factions";
import void SetClaimId(uint faction,uint id)from"factions";
import uint GetLeaderTime(uint faction)from"factions";
import void SetLeaderTime(uint faction,uint time)from"factions";
import uint GetClaimTime(uint faction)from"factions";
import void SetClaimTime(uint faction,uint time)from"factions";
import uint GetFactionLocationId(uint faction)from"factions";
import bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)from"factions";

import void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)from"factions";

import uint GetFactionScore(uint faction)from"factions";
import void ModifyFactionScore(uint faction,int amount)from"factions";
import void UpdateLastUsed(uint faction)from"factions";
import uint GetFactionsCount()from"factions"; 

import int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)from"factions";
import int GetNextId(uint faction,uint currId,bool members,uint&out nextId)from"factions";
import int GetFirstId(uint faction,bool members,uint&out id)from"factions"; 

import int ModifyRank(uint faction,uint id,uint newRank)from"factions";
import int ModifyStatus(uint faction,uint id,uint newStatus)from"factions";
import int ModifyFaction(uint faction,uint id,uint newFaction)from"factions"; 

import int InvitePlayer(uint faction,uint playerId)from"factions";
import int ConfirmInvitation(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId,bool applyModifiers)from"factions";
import int ChangeRank(uint faction,uint playerId,uint newRank)from"factions";
import int ExpelMember(uint faction,uint playerId)from"factions";
import int ExpelMember(uint faction,uint playerId,bool applyModifiers)from"factions";

import uint GetPlayerFaction(uint playerId)from"factions";
import uint GetPlayerRank(uint playerId)from"factions"; 

import void AddFactionNews(uint faction,uint master,uint slave,uint type)from"factions";
import bool GetFactionNews(uint faction,uint index,uint&out master,uint&out slave,uint&out type,uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)from"factions";
import uint GetFactionNewsCount(uint faction)from"factions"; 

import uint CheckFactionBaseCoords(uint x,uint y)from"factions";

import bool SaveFactionData(uint faction)from"factions";
import bool FactionExists(uint faction)from"factions"; 

import uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)from"factions";   

import void InitFactions()from"factions";
import void UpdateFactionsInfo(Critter&cr)from"factions";
import IFaction@GetFaction(int)from"factions";
import IFaction@GetFaction(const string&)from"factions";
import IFaction@GetFactionByIdx(int idx)from"factions";
import void UpdateGroupVars(Critter&player)from"factions";     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);
	void settag(int index,int tag,int r,int g,int b);
	int get_tag(int index);
	int get_b(int index);
	int get_r(int index);
	int get_g(int index);  
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
}

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                                                                                                                                                                                                                                                                                                                         

import string GetRandomFirstName(uint gender)from"npc_names";
import string GetRandomFirstName(uint gender,int&index)from"npc_names";

import string GetRandomNick(uint gender)from"npc_names";

import string GetRandomSurname()from"npc_names";

import string GetRandomFullName(uint gender)from"npc_names";
import string GetRandomFullName(uint gender,int&firstName,bool&genderNick,int&nick,int&surname)from"npc_names"; 

import string GetFirstName(uint gender,uint index)from"npc_names";
import string GetNick(uint gender,uint index,bool genderNick)from"npc_names";
import string GetSurname(uint index)from"npc_names";  

import void LogNames(bool printNames)from"npc_names

import bool AddToFollowerlist(Critter&master,Critter&follower)from"follower_common";  

uint e_DisableBagRefresh(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))
	{
		cr.SetBagRefreshTime((uint(-1)));
		{;};
	}
	return 0;
}

void NerfWeaponSkills(Critter&cr,uint primary,uint secondary)
{
	for(uint i=(200);i<=(205);i++)
	{
		if(i!=primary&&i!=secondary)
		{
			if(i==(201))
			cr.ParamBase[i]=-80;
			else
			cr.ParamBase[i]=-30;
		}
	}
}

shared interface IMerc
{
	IMerc@Dialog(int dialogid);
	IMerc@Script(string&script);
	IMerc@AI(int aipack);
	IMerc@Bag(int bagid);
	IMerc@Team(int teamid);
	IMerc@Level(int level);
	IMerc@PID(int pid);
	IMerc@PID(array<int>npcpids);
	IMerc@Type(int type);
	IMerc@ID(int id);
	IMerc@Cost(int cost);
	IMerc@StartCost(int cost);
	IMerc@SellPrice(int price);
	IMerc@DynamicPrice();
	
	bool IsDynamicPrice();
	int GetDialog();
	string@GetScript();
	int GetAIPack();
	int GetBagID();
	int GetBagValue();
	int GetTeamID();
	int GetLevel();
	int GetLastPID();
	array<int>GetPIDs();
	uint GetType();
	int8 GetBaseType();
	int GetCost();
	int GetSellPrice();
	uint GetID();
	string@GetName();
	
	bool Spawn(Critter&master);
}; 

class CMerc:IMerc
{
	bool dynamicprice;
	int dir;
	int dialogid;
	string script;
	int aipack;
	int8 basetype;
	int bagid;
	int teamid;
	int level;
	int respawnTime;
	array<int>npcpids;
	int npcpid;
	int cost;
	int bagvalue;
	int startcost;
	uint type;
	int sellprice;
	uint id;
	string name;
	
	Serializator serializer;
	
	CMerc()
	{
		dir=Random(0,6);
		dialogid=(9310);
		script="follower@critter_init";
		basetype=-1;
		aipack=0;
		bagid=0;
		teamid=0;
		level=1;
		respawnTime=(-2);
		cost=0;
		sellprice=0;
		id=0;
		type=0;
		dynamicprice=false;
	}
	
	bool Spawn(Critter&master)
	{
		npcpid=(npcpids[Random(0,npcpids.length()-1)]);
		
		Critter@SpawnedNpc=AddNpc(master.GetMap(),npcpid,master.HexX,master.HexY,dir,dialogid,script,aipack,bagid,teamid,false,level);
		if((@SpawnedNpc!=null))
		{
			SpawnedNpc.FollowerVarBase[(929)]=(master.Param[(106)]);
			SpawnedNpc.FollowerVarBase[(932)]=type;
			SpawnedNpc.FollowerVarBase[(930)]=id;
			basetype=SpawnedNpc.CrType;
			SpawnedNpc.FollowerVarBase[(933)]=master.Id;
			SpawnedNpc.ParamBase[(84)]=respawnTime;
			
			if(type==(3)||type==(4)||type==(2))
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			switch(type)
			{
				case(6):
				case(12):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(7):
				case(13):
				NerfWeaponSkills(SpawnedNpc,(200),0);
				break;
				case(8):
				case(11):
				NerfWeaponSkills(SpawnedNpc,(201),0);
				break;
				case(5):
				case(10):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(9):
				NerfWeaponSkills(SpawnedNpc,(202),0);
				break;
				default:
				break;
			}
			
			SpawnedNpc.ChangeCrType(SpawnedNpc.ParamBase[(112)]);
			
			CreateTimeEvent(((__FullSecond)+(((3)*60))),"e_DisableBagRefresh",SpawnedNpc.Id,true);
			ArmBestWeapon(SpawnedNpc);
			
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(306)]+=1;
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(315)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(405)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(309)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(313)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(330)]+=1;
			
			for(uint i=0;i<=6;i++)SpawnedNpc.ParamBase[i]+=Random(-1,1);   
			
			SpawnedNpc.ParamBase[(7)]+=(Random(0,20));
			SpawnedNpc.ParamBase[(7)]-=10;
			
			SpawnedNpc.ParamBase[(72)]=SpawnedNpc.Param[(7)];
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			if(!AddToFollowerlist(master,SpawnedNpc))
			Log("Failed to assign merc's id to master("+master.Id+") followerlist");
			
			this.name=GenerateNewName(SpawnedNpc);
			
			if(this.name.length()>0)
			SetLexem(SpawnedNpc,"$name",this.name);
			
			return true;
		}
		else
		{
			Log("Failed to create mercenary of PID "+npcpid+" with mercid "+id+" on map id "+master.GetMapId());
			master.Say((11),"Failed to create mercenary, report this error immediately");
		} 
		
		return false;
	}
	
	IMerc@Dialog(int dialogid)
	{
		this.dialogid=dialogid;
		return this;
	}
	
	IMerc@Script(string&script)
	{
		this.script=script;
		return this;
	}
	
	IMerc@AI(int aipack)
	{
		this.aipack=aipack;
		return this;
	}
	
	IMerc@Bag(int bagid)
	{
		this.bagid=bagid;
		
		bagvalue=0;
		array<uint>mincounts,maxcounts;
		array<int>slots;
		array<uint16>pids;
		uint num=GetBagItems(bagid,pids,mincounts,maxcounts,slots);
		uint cost=0;
		for(uint i=0;i<num;i++)
		{
			bagvalue+=BaseItemValue(pids[i],7,80,true)*(mincounts[i]+maxcounts[i])/2;
		}
		
		return this;
	}
	
	IMerc@Team(int teamid)
	{
		this.teamid=teamid;
		return this;
	}
	
	IMerc@Level(int level)
	{
		this.level=level;
		return this;
	}
	
	IMerc@PID(int npcpid)
	{
		this.npcpids.insertLast(npcpid);
		return this;
	}
	
	IMerc@PID(array<int>npcpids)
	{
		for(uint i=0;i<npcpids.length();i++)
		{
			this.npcpids.insertLast(npcpids[i]);
		}
		return this;
	}
	
	IMerc@Type(int type)
	{
		this.type=type;
		return this;
	}
	
	IMerc@ID(int id)
	{
		this.id=id;
		return this;
	}
	
	IMerc@DynamicPrice()
	{
		dynamicprice=true;
		return this;
	}
	
	bool IsDynamicPrice()
	{
		return dynamicprice;
	}
	
	IMerc@StartCost(int cost)
	{
		serializer.Clear();
		if(!serializer.Load("merc_"+id)||GetGvar((12000))==0)
		{
			this.cost=cost;
			serializer.Clear();
			serializer.Set(this.cost).Save("merc_"+id);
		}
		else
		serializer.Get(this.cost);
		
		return this;
	}
	
	IMerc@Cost(int cost)
	{
		{;};
		this.cost=cost;
		
		serializer.Clear();
		serializer.Set(this.cost).Save("merc_"+id);
		
		return this;
	}
	
	IMerc@SellPrice(int sellprice)
	{
		this.sellprice=sellprice;
		return this;
	}
	
	int GetDialog(){return dialogid;}
	string@GetScript(){return script;}
	int8 GetBaseType(){return basetype;}
	int GetAIPack(){return aipack;}
	int GetBagID(){return bagid;}
	int GetTeamID(){return teamid;}
	int GetLevel(){return level;}
	int GetLastPID(){return npcpid;}
	array<int>GetPIDs(){return npcpids;}
	int GetCost(){return cost;}
	int GetBagValue(){return bagvalue;}
	int GetSellPrice(){return sellprice;}
	uint GetID(){return id;}
	uint GetType(){return type;}
	string@GetName(){return name;}
}; 

import bool IsFollowing(Critter&critter)from"follower_common";
import bool IsOwnersFollower(Critter&owner,Critter&critter)from"follower_common";
import bool CanHaveMoreFollowers(Critter&player,uint FollowerType)from"follower_common";
import Critter@GetFollowersOwner(Critter&critter)from"follower_common";
import bool RightDistance(Critter&follower,Critter&owner)from"follower_common";
import bool HasFollowerOfBaseType(Critter&owner,uint basetype)from"follower_common";
import Critter@GetFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import bool RemoveFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import int GetNumberOfFollowingFollowersOfPlayer(Critter&player)from"follower_common";
import int GetNumberOfFollowersOfPlayer(Critter&player)from"follower_common";
import uint GetSlaveTypes(Critter&player)from"follower_common";
import void ClearFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import void AddFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import uint NumberOfFollowersOnMap(Map@map)from"follower_common";
import uint GetFollowerType(Critter&critter)from"follower_common";
import bool DisbandFollower(Critter&player,Critter&cr,bool reset)from"follower_common";
import bool MakeFollower(Critter&critter,uint type,string&script,uint dialogid,Critter&owner,bool FreeBarter)from"follower_common";
import Critter@LocateFollowerByType(IMerc@merc,Critter&owner)from"follower_common";
import Critter@LocateFollowerByID(uint id,Critter&owner)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers,bool OnlyIsSeen)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers)from"follower_common";
import int GetFollowers(Critter&player,bool all,array<Critter@>&followers)from"follower_common";
import uint CountFollowers(Critter&player,bool all)from"follower_common";
import uint CountFollowers(Critter&player,Map@map)from"follower_common";
import uint GetPartyPointsMax(Critter&player)from"follower_common";
import uint GetPartyPointsUsed(Critter&player)from"follower_common";
import bool IsMerc(Critter&follower)from"follower_common";  

import int GetMercId(int pid,uint type)from"mercs";

bool CaptureRoll(Critter&capturer)
{
	
	return Random(0,199-capturer.Param[(6)]*10)<capturer.Param[(217)];
}

bool CaptureBrahmin(Critter&capturer,Critter&target,bool&out sub)
{
	if(target.CrType==(15)&&!((target.Param[(534)]&((0x00000001)))!=0)&&!target.IsDead())
	{
		if(IsEncounterMap(capturer.GetMap()))
		{
			if(!CanHaveMoreFollowers(capturer,(4)))
			{
				capturer.Say((11),"You can't tame the brahmin, because your party is already full.");
				AttackCritter(target,capturer);
				sub=false;
				return true;
			}
			
			if(CaptureRoll(capturer))
			{
				MakeFollower(target,(4),"follower@critter_init",(9312),capturer,true);
				ClearEnemyStack(target);
				ClearFollowersEnemy(capturer,target);
				target.FollowerVarBase[(930)]=9;
				target.FollowerVarBase[(932)]=(4);
				capturer.Say((11),"You've tamed the wild brahmin.");
				sub=true;
				return true;
			}
			else
			{
				capturer.Say((11),"You've failed to tame the wild brahmin.");
				AttackCritter(target,capturer);
				sub=false;
				return true;
			}
		}
	}
	return false;
}    

bool CaptureSlave(Critter&capturer,Critter&target,bool&out sub)
{
	if(!CanHaveMoreFollowers(capturer,(2)))
	{
		capturer.Say((11),"You can't enslave this person, your party is already full.");
		sub=false;
		return true;
	}
	if(target.Param[(7)]>199)
	{
		capturer.Say((11),"you can't enslave so strong person");
		sub=false;
		return true;
	}
	if((((target.Param[(534)]&((0x00000020)))!=0))&&target.FollowerVar[(933)]==int(capturer.Id))
	{
		capturer.Say((11),"This is already your slave.");
		sub=false;
		return true;
	}
	
	if(CanHaveMoreFollowers(capturer,(2))&&IsEncounterMap(capturer.GetMap())&&target.IsKnockout()&&!target.IsDead()&&
	capturer.Karma[(493)]>0&&!((target.Param[(534)]&((0x00000001)))!=0))
	{
		int id=GetMercId(target.GetProtoId(),(2));
		if(id!=-1)
		{
			MakeFollower(target,(2),"follower@_Slave",(9314),capturer,true);
			ClearEnemyStack(target);
			ClearFollowersEnemy(capturer,target);
			target.SetBagRefreshTime(uint(-1));
			target.FollowerVarBase[(930)]=id;
			capturer.Say((11),(target.Param[(71)]==(0)?"He":"She")+" will make a fine slave.");
			sub=true;
			return true;
		}
		else
		{
			capturer.Say((11),"You've failed to enslave this person.");
			sub=false;
			return true;
		}
	}
	return false;
}                                                                                                                                                                                                                                                                                                                   

import Item@DogTag(Critter@cr)from"item_dogtags"; 

import Item@DogTag(Critter@holder,Critter@target)from"item_dogtags";

import Item@DogTagBlank(Critter@holder)from"item_dogtags";                      

import void DisableItemPerk(Critter&cr,uint8 type)from"item_perks";
import void DisableItemPerk(Critter&cr,Item&item,uint8 type)from"item_perks";
import void EnableItemPerk(Critter&cr,Item&item,uint8 type)from"item_perks";                                                                                                                                                    

import void InitTents()from"map_tent";

import uint GetTentVars(array<uint>&vars)from"map_tent";
import uint GetTentVarsCount()from"map_tent";
import bool GetFreeTentVar(Critter&cr,uint&var)from"map_tent";
import uint GetFreeTentVars(Critter&cr,array<uint>&vars)from"map_tent";
import uint GetTakenTentVars(Critter&cr,array<uint>&vars)from"map_tent";
import uint GetTakenTentVars(uint crId,array<uint>&vars)from"map_tent";

import uint GetAllTents(array<Location@>&locations)from"map_tent";
import uint GetAllShelters(array<Location@>&locations)from"map_tent";
import uint GetAllHouses(array<Location@>&locations)from"map_tent";

import uint GetTentLocations(Critter&tentOwner,array<Location@>&locations)from"map_tent";
import uint GetTentLocations(uint tentOwnerId,array<Location@>&locations)from"map_tent";

import Location@GetNearestTentLocation(Critter&tentOwner,uint16 wx,uint16 wy)from"map_tent";
import Location@GetNearestTentLocation(uint tentOwnerId,uint16 wx,uint16 wy)from"map_tent";

import bool CanCreateTent(Map&map)from"map_tent";
import void TryCreateTent(Critter&cr)from"map_tent";

import bool RemoveTent(Critter&cr,Location&tent,bool recycle)from"map_tent";
import bool RemoveTentByVar(Critter&cr,uint var,bool recycle)from"map_tent";
import void RemoveAllTents(Critter&cr,bool recycle)from"map_tent";

import bool IsTentOwner(Map&tent,Critter&cr)from"map_tent";

import void myinfo_tent(Critter&cr)from"map_tent";                                                                                                                                                         

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}                                                                                                                                                    

import void SetMinigame(Critter&cr,int team,int id,int flags,int data)from"minigames";
import void UnsetMinigame(Critter&cr)from"minigames";
import void UnsetMinigame(Critter&cr,bool refreshColors)from"minigames";
import void ChangeMinigameTeam(Critter&cr,int team)from"minigames";
import int GetMinigameTeamColor(int minigameTeam)from"minigames";

import Item@GetDSpawn(Map@map,int minigameData)from"minigames";
import Item@GetNextDSpawn(Item@dSpawn,int minigameTeamAndId,bool reverse)from"minigames";

import void _DSpawn(Item&item,bool firstTime)from"minigames";
import void _DSpawnWalk(Item&item,Critter&crit,bool entered,uint8 dir)from"minigames";
import bool _DSpawnSkill(Item&item,Critter&crit,int skill)from"minigames";

import bool TryCaptureDSpawn(Item@dSpawn,Critter@crit)from"minigames";
import void CaptureDSpawn(Item@dSpawn,Critter@crit,uint minigameTeamAndId)from"minigames";
import uint CaptureDSpawnTick(array<int>@eventValues)from"minigames";             

enum MobWaveType
{
	
	MOB_WAVE_TYPE_ENCOUNTER,
	MOB_WAVE_TYPE_ZOMBIES,
	MOB_WAVE_TYPE_OIL_RIG,
	MOB_WAVE_TYPE_BOS,
	MOB_WAVE_TYPE_NCR,
	MOB_WAVE_TYPE_VC,
	MOB_WAVE_TYPE_MUTANT,
	MOB_WAVE_TYPE_RAIDERS,
	MOB_WAVE_TYPE_ROBOTS,
	MOB_WAVE_TYPE_CUSTOM
};                 

import void TryStartEncounterMobWave(Map&map)from"mob_wave

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";           

enum NpcTaskType
{
	TASK_NONE=0,
	
	TASK_FIRST_CALL,
	
	TASK_TIME,
	TASK_HOUR,
	TASK_MINUTE,
	TASK_NIGHT,
	TASK_DAY,
	TASK_MORNING,
	TASK_AFTERNOON,
	TASK_EVENING,
	TASK_IDLE
};

enum NpcTaskActionType
{
	ACTION_NONE=0,  
	
	ACTION_CONTAINER,
	ACTION_EDITITEM,
	ACTION_HOME,
	ACTION_IF,
	ACTION_ENDIF,
	ACTION_INVENTORY,
	ACTION_MAP,
	ACTION_SAY,
	ACTION_TASK,
	ACTION_TASKVAR,
	ACTION_WAIT,  
	
	ACTION_DEMANDANSWER,
	ACTION_VERBOSE,
	
	ACTION_ANIMATE,
	ACTION_SLEEP,
	ACTION_WAKEUP,
	
	ACTION_FIXFORCEFIELD,
	
	ACTION_CUSTOM
};

enum NpcTaskState
{
	TASKSTATE_UNKNOWN=0, 
	
	TASKSTATE_SKIP, 
	
	TASKSTATE_READY, 
	
	TASKSTATE_STARTING, 
	
	TASKSTATE_RUNNING, 
	
	TASKSTATE_FINISHED
};

enum NpcActionContainer
{
	CONTAINER_OPEN,
	CONTAINER_CLOSE,
	CONTAINER_OPEN_NEAR,
	CONTAINER_CLOSE_NEAR
};

enum NpcActionEditItem
{
	EDITITEM_UPDATE,
	
	EDITITEM_SETFLAG,
	EDITITEM_UNSETFLAG,
	EDITITEM_FLAGS,
	
	EDITITEM_SETSCRIPT,
	EDITITEM_SETEVENT,
	
	EDITITEM_PICMAP,
	EDITITEM_PICINV
};

enum NpcActionHome
{
	HOME_SET,
	HOME_SETRANDOM,
	HOME_SAVE,
	HOME_LOAD,
	HOME_RESET
};

enum NpcActionIf
{
	IF_NEVER=0,
	IF_ALWAYS=1,
	
	IF_TASKVAR_LOWER,
	IF_TASKVAR_LOWEREQUAL,
	IF_TASKVAR_EQUAL,
	IF_TASKVAR_NOTEQUAL,
	IF_TASKVAR_GREATER,
	IF_TASKVAR_GREATEREQUAL,
	
	IF_PERCENT,
	
	IF_NIGHT,
	IF_DAY,
	IF_MORNING,
	IF_AFTERNOON,
	IF_EVENING,
	IF_YEAR,
	IF_MONTH,
	IF_DAYOFMONTH,
	IF_HOUR,
	IF_MINUTE,
	
	IF_WORLDMAP,
	IF_NOT_WORLDMAP,
	IF_MAP_PID,
	IF_MAP_PIDS,
	IF_NOT_MAP_PID,
	IF_NOT_MAP_PIDS,
	
	IF_CONTAINER_OPENED,
	IF_CONTAINER_CLOSED,
	
	IF_PARAMBASE_LOWER,
	IF_PARAMBASE_LOWEREQUAL,
	IF_PARAMBASE_EQUAL,
	IF_PARAMBASE_NOTEQUAL,
	IF_PARAMBASE_GREATER,
	IF_PARAMBASE_GREATEREQUAL,
	IF_PARAM_LOWER,
	IF_PARAM_LOWEREQUAL,
	IF_PARAM_EQUAL,
	IF_PARAM_NOTEQUAL,
	IF_PARAM_GREATER,
	IF_PARAM_GREATEREQUAL
};

enum NpcActionInventory
{
	INV_ADDITEM=0,
	INV_SUBITEM,
	INV_FAVITEM
};

enum NpcActionMap
{
	MAP_CREATEITEM,
	MAP_DELETEITEM,
};

enum NpcActionSay
{
	SAY_SINGLE=0,
	SAY_RANDOM,
	
	SAY_TASKVAR=100
};

enum NpcActionTask
{
	
};
enum NpcActionTaskVar
{
	TASKVAR_DELETE=0,
	TASKVAR_SET,
	TASKVAR_ADD,
	TASKVAR_SUB,
	TASKVAR_SETRANDOM,
	TASKVAR_ADDRANDOM,
	TASKVAR_SUBRANDOM,
	TASKVAR_COPYTO,
	TASKVAR_COPYFROM
};

enum NpcActionWait
{
	WAIT_TIME=0,
	WAIT_RANDOM,
	WAIT_HOME,
	WAIT_FAVITEM
};

shared interface INpcSchedule
{
	
	uint PID{get;}
	string Name{get;}
	string FullName{get;} 
	
	INpcTask@AddTask_OnFirstCall(string&name); 
	
	INpcTask@AddTask_OnIdle(string&name);
	
	INpcTask@AddTask_OnTime(string&name,uint8 hour,uint8 minute);
	INpcTask@AddTask_OnTimes(string&name,array<uint8>&hours,array<uint8>&minutes);
	INpcTask@AddTask_OnHour(string&name,uint8 hour);
	INpcTask@AddTask_OnMinute(string&name,uint8 minute);
	INpcTask@AddTask_OnHours(string&name,array<uint8>&hours);
	INpcTask@AddTask_OnMinutes(string&name,array<uint8>&minutes); 
	
	INpcTask@AddTask_OnNight(string&name);
	INpcTask@AddTask_OnDay(string&name);
	INpcTask@AddTask_OnMorning(string&name);
	INpcTask@AddTask_OnAfternoon(string&name);
	INpcTask@AddTask_OnEvening(string&name); 
	
	INpcTask@AddTask_EveryNight(string&name);
	INpcTask@AddTask_EveryDay(string&name);
	INpcTask@AddTask_EveryMorning(string&name);
	INpcTask@AddTask_EveryAfternoon(string&name);
	INpcTask@AddTask_EveryEvening(string&name);
	
	INpcTask@AddTask_EveryFullHour(string&name);
	
	uint GetTasks(array<INpcTask@>&tasks);
};

shared interface INpcScheduleInstance
{
	
	uint Owner{get;}
	string FullName{get;} 
	
	uint Run(Critter&npc);
};

shared interface INpcTask
{
	
	string Name{get;}
	string FullName{get;}
	
	array<uint8>Hours{get;}
	array<uint8>Minutes{get;} 
	
	INpcSchedule@ParentSchedule();
	uint GetActions(array<INpcTaskAction@>&actions); 
	
	INpcTask@Roll(uint max);  
	
	INpcTask@Container_Open(uint16 pid,uint16 hexX,uint16 hexY,uint anim2);
	INpcTask@Container_Close(uint16 pid,uint16 hexX,uint16 hexY,uint anim2);
	INpcTask@Container_OpenNear(uint anim2);
	INpcTask@Container_CloseNear(uint anim2);
	
	INpcTask@EditItem_Update();
	INpcTask@EditItem_SetFlag(uint flag);
	INpcTask@EditItem_UnsetFlag(uint flag);
	INpcTask@EditItem_Flags(uint flags);
	INpcTask@EditItem_SetScript(string&script);
	INpcTask@EditItem_SetEvent(int event,string&function);
	INpcTask@EditItem_PicMap(string&picmap);
	INpcTask@EditItem_PicInv(string&picinv);
	
	INpcTask@Home_Set(uint16 hexX,uint16 hexY,uint8 dir);
	INpcTask@Home_SetRandom(array<array<uint16>>positions);
	INpcTask@Home_Save();
	INpcTask@Home_Load();
	INpcTask@Home_Reset();
	
	INpcTask@If_Never();
	INpcTask@If_Always();
	INpcTask@If_TaskVarLower(string&name,int value);
	INpcTask@If_TaskVarLowerEqual(string&name,int value);
	INpcTask@If_TaskVarEqual(string&name,int value);
	INpcTask@If_TaskVarNotEqual(string&name,int value);
	INpcTask@If_TaskVarGreater(string&name,int value);
	INpcTask@If_TaskVarGreaterEqual(string&name,int value);
	INpcTask@If_Percent(uint8 percent);
	INpcTask@If_Night();
	INpcTask@If_Day();
	INpcTask@If_Morning();
	INpcTask@If_Afternoon();
	INpcTask@If_Evening();
	INpcTask@If_Year(uint8 year);
	INpcTask@If_Month(uint8 month);
	INpcTask@If_DayOfMonth(uint8 day);
	INpcTask@If_Hour(uint8 hour);
	INpcTask@If_Minute(uint8 minute);
	INpcTask@If_Worldmap();
	INpcTask@If_NotWorldmap();
	INpcTask@If_MapPid(uint16 pid);
	INpcTask@If_NotMapPid(uint16 pid);
	INpcTask@If_MapPids(array<uint16>pids);
	INpcTask@If_NotMapPids(array<uint16>pids);
	INpcTask@If_ContainerOpened(uint16 pid,uint16 hexX,uint16 hexY);
	INpcTask@If_ContainerClosed(uint16 pid,uint16 hexX,uint16 hexY);
	INpcTask@If_ParamBaseLower(uint16 param,int value);
	INpcTask@If_ParamBaseLowerEqual(uint16 param,int value);
	INpcTask@If_ParamBaseEqual(uint16 param,int value);
	INpcTask@If_ParamBaseNotEqual(uint16 param,int value);
	INpcTask@If_ParamBaseGreater(uint16 param,int value);
	INpcTask@If_ParamBaseGreaterEqual(uint16 param,int value);
	INpcTask@If_ParamLower(uint16 param,int value);
	INpcTask@If_ParamLowerEqual(uint16 param,int value);
	INpcTask@If_ParamEqual(uint16 param,int value);
	INpcTask@If_ParamNotEqual(uint16 param,int value);
	INpcTask@If_ParamGreater(uint16 param,int value);
	INpcTask@If_ParamGreaterEqual(uint16 param,int value);
	INpcTask@EndIf();
	
	INpcTask@Inventory_AddItem(uint16 pid);
	INpcTask@Inventory_AddItem(uint16 pid,uint count);
	INpcTask@Inventory_SubItem(uint16 pid);
	INpcTask@Inventory_SubItem(uint16 pid,uint count);
	INpcTask@Inventory_SetFavouriteItem(uint8 slot,uint16 pid);
	INpcTask@Inventory_UseFavouriteItem(uint8 slot,uint16 pid);
	
	INpcTask@Map_CreateItem(uint16 pid,uint16 hexX,uint16 hexY,uint count);
	INpcTask@Map_DeleteItem(uint16 pid,uint16 hexX,uint16 hexY);
	
	INpcTask@Say(uint8 sayType,string&text);
	INpcTask@Say_Wait(uint8 sayType,string&text);
	INpcTask@Say_Random(uint8 sayType,array<string>&text);
	INpcTask@Say_TaskVar(string&name);      
	
	INpcTask@TaskVar_Delete(string&name);
	INpcTask@TaskVar_Set(string&name,int value);
	INpcTask@TaskVar_Add(string&name);
	INpcTask@TaskVar_Sub(string&name);
	INpcTask@TaskVar_Add(string&name,int value_add);
	INpcTask@TaskVar_Sub(string&name,int value_sub);
	INpcTask@TaskVar_SetRandom(string&name,int from,int to);
	INpcTask@TaskVar_AddRandom(string&name,int from,int to);
	INpcTask@TaskVar_SubRandom(string&name,int from,int to);
	INpcTask@TaskVar_CopyToGlobalVar(string&name,uint16 GVAR);
	INpcTask@TaskVar_CopyFromGlobalVar(string&name,uint16 GVAR);
	INpcTask@TaskVar_CopyToLocationVar(string&name,uint16 LLVAR);
	INpcTask@TaskVar_CopyFromLocationVar(string&name,uint16 LLVAR);
	INpcTask@TaskVar_CopyToMapVar(string&name,uint16 LMVAR);
	INpcTask@TaskVar_CopyFromMapVar(string&name,uint16 LMVAR);
	INpcTask@TaskVar_CopyToCritterVar(string&name,uint16 LVAR);
	INpcTask@TaskVar_CopyFromCritterVar(string&name,uint16 LVAR);
	
	INpcTask@Wait(uint time);
	INpcTask@Wait_Random(uint min,uint max);
	INpcTask@Wait_Home();
	INpcTask@Wait_FavouriteItem(uint8 slot);  
	
	INpcTask@VerboseAction(string&text);
	INpcTask@DemandAnswer(uint8 sayType,string&text);
	
	INpcTask@Animate(uint anim2,bool clearSequence,bool delayPlay);
	
	INpcTask@Sleep();
	INpcTask@WakeUp();    
	
	INpcTask@Walk_Home(uint16 hexX,uint16 hexY,uint8 dir);
	INpcTask@Walk_Home(array<uint16>&position);
	INpcTask@Walk_RandomHome(array<array<uint16>>positions);
	INpcTask@Walk_Patrol(array<array<uint16>>&patrol,bool saveHome);
	
	INpcTask@CustomAction(string&functionName,bool requireMap);
};

shared interface INpcTaskInstance
{
	
	uint WaitTime{get;set;}  
	
	void SetData(string&name,array<uint8>&data);
	bool GetData(string&name,array<uint8>&data);
	void ClearData(string&name);
};

shared interface INpcTaskAction
{
	
	uint8 Type{get;}
	array<uint8>Data{get;} 
	
	INpcTask@ParentTask();
};  

class NpcTaskCustomAction:IObject
{
	INpcTaskAction@self;
	INpcTaskInstance@task;
	Critter@npc;
};

funcdef bool FTaskAction(INpcTaskAction&,INpcTaskInstance&,Critter&);  

import void InitNpcSchedules()from"npc_schedule";
import void SaveNpcSchedules()from"npc_schedule";

import INpcSchedule@CreateNpcSchedule(string&name)from"npc_schedule";
import bool AddNpcSchedule(INpcSchedule@schedule)from"npc_schedule";
import void RemoveNpcSchedule(Critter&npc)from"npc_schedule";                                                  

import void OnlineStats_TrySave(Critter&target)from"online_stats";
import void OnlineStats_SendSetup(Critter&target)from"online_stats";                                                      

shared enum RecyclerType
{
	ENCOUNTER_RECYCLER,
	TENT_RECYCLER
};                   

import void ConnectRecycler(Item@item,uint recyclerId)from"recycler";
import void DisconnectRecycler(Item@item,uint recyclerId)from"recycler";

import void RecycleEncounter(Location@loc)from"recycler";
import void RecycleTent(Location@loc)from"recycler";

import Item@GetRecycler(int type)from"recycler";
import uint GetRecyclers(array<int>recyclersTypes,array<Item@>&recyclers)from"recycler";
import uint GetRecyclers(array<Item@>&recyclers)from"recycler";

import Item@GetRecycledItem(int recyclerType,uint16 pid)from"recycler";
import uint GetRecycledItems(int recyclerType,uint16 pid,array<Item@>&items)from"recycler";
import uint GetRecycledItems(int recyclerType,array<uint16>pids,array<bool>&pidFound,array<Item@>&items)from"recycler";                                                                  

import void SaveAlertMaps()from"reinforcements";
import void SetAlertMap(Map&map,array<uint>@maxes)from"reinforcements";
import bool InitAlertMaps()from"reinforcements";
import bool IsAlertMap(Map&map)from"reinforcements";
import uint GetAlertLevel(Map&map)from"reinforcements";
import void ProcessDeath(Map&map,Critter&cr,Critter@killer)from"reinforcements";                                                                                                                                                                        

import void AddReputation(Critter@cr,uint index,int val)from"reputations";
import void SubReputation(Critter@cr,uint index,int val)from"reputations";
import void AddReputation(Critter@cr,uint index,int val,int cap)from"reputations";
import void SubReputation(Critter@cr,uint index,int val,int cap)from"reputations";
import uint ReputationIndex(uint locid)from"reputations";
import void ProcessProfitReputation(Critter@cr,uint index,int profit)from"reputations";

import void InitGroups()from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index)from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index,float fraction)from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index,int num,int den)from"reputations_modifiers";
import int GetReputationModifier(uint fac1,uint fac2)from"reputations_modifiers";
import int GetGroupsStatus(uint fac1,uint fac2)from"reputations_modifiers";
import int GetGroupsStatus(Critter&c1,Critter&c2)from"reputations_modifiers";
import void ReputationsInit(Critter&cr)from"reputations_modifiers";
import void FeedReputations(Critter@cr,uint index,int cap)from"reputations_modifiers";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       

shared interface IPolygon
{
	IPolygon@AddVertex(uint16 x,uint16 y);
	IPolygon@AddVertices(array<uint16>&hexes);   
	
	bool IsWithin(Critter&cr);
	bool IsWithin(Item&item);  
	
	bool IsWithin(uint16 x,uint16 y);
};  

import IPolygon@NewPolygon()from"polygon"; 

import IPolygon@LoadShapeFromEntires(Map&map,uint first,uint last)from"polygon";          

import ITown@GetTownByIndex(uint index)from"towns";
import ITown@GetTown(uint id)from"towns";
import uint GetTownCount()from"towns";
import uint GetTowns(array<ITown@>@towns)from"towns";  

import bool AddMilitia(Map@map)from"town";
import void InitMilitia()from"town";
import bool IsTCTown(Map@map)from"town";
import uint RetrieveTownId(Map@map)from"town";
import uint RetrieveTownId(Critter&critter)from"town";
import ITown@RetrieveTown(Critter&critter)from"town";
import bool ValidTown(ITown@town)from"town";
import void GainControl(Critter&player)from"town";
import uint GetNearMembers(Critter&player)from"town";
import bool IsPolicy(Critter&player,uint policy)from"town";
import bool IsControllingTown(Critter&player)from"town";
import bool AlertMilitia(Critter&cr)from"town";
import int SelectBag(uint crpid)from"town";
import void SpawnInitMilitia(Map@map)from"town";
import int CountMilitia(Map@map)from"town";
import void ClearInfluenceBuffer(Critter&cr)from"town";  

class PresenceStruct
{
	uint factionId;
	uint count;
	PresenceStruct(uint factionId)
	{
		this.factionId=factionId;
		this.count=1;
	}
};

shared interface ITown
{
	ITown@SetMapID(uint id);
	ITown@SetTownID(uint id);
	ITown@SetBaseRewardValue(uint value);
	ITown@SetInfluenceMemberRequirement(uint number);
	ITown@SetNearbyMemberRequirement(uint number);
	ITown@SetTotalMemberRequirement(uint number);
	ITown@SetLimboContainer(Item@container);
	ITown@SetRewardContainer(Item@container);
	ITown@SetTownLeader(Critter@leader);
	ITown@SetSpeechModifier(int modifier);
	ITown@SetHour(uint hour);
	ITown@SetCaptureArea(IPolygon@capturearea);
	ITown@SetMilitiaEnabled();
	ITown@SetRewardStartCaps(uint caps);
	ITown@SetVersion(uint version);
	
	uint GetVersion();
	
	uint GetTownID();
	string GetTownName();
	bool LoadData();
	bool SaveData();
	bool IsMilitiaEnabled();
	bool IsFriendlyFaction(uint factionid);
	bool IsFriend(Critter&cr);
	bool IsValidCaptor(Critter&cr);
	bool IsWithinCaptureArea(Critter&cr);
	void AreaCheck();
	bool AddFriendlyFaction(uint factionid);
	bool RemoveFriendlyFaction(uint factionid);
	array<uint>GetFriendlyFactions();
	float GetControllingInfluence();
	uint GetMilitiaMax();
	uint GetControllingFaction();
	uint GetNumberOfKilledNPCs();
	uint GetControlCycles();
	uint GetStatus();
	void SetStatus(uint status);
	void SetScore();
	void SetPreviousFaction(uint previous);
	uint GetlastSecond();
	void SetlastSecond(uint sec);
	uint GetAreaCount();
	uint GetCountdown();
	void SetCountdownStatus(bool enabled);
	bool GetCountdownStatus();
	void SendCountdownTime(Critter&player);
	uint GetMemberNearbyRequirement();
	uint GetMemberTotalRequirement();
	Item@GetLimboContainer();
	Item@GetRewardContainer();
	uint GetTownLeaderId();
	uint GetMapID();
	int GetSpeechModifier();
	bool GainControl(Critter&player);
	void IncreaseNPCDeath(uint num);
	void ModifyInfluence(uint factionId,float value);
	void SetInfluence(uint factionId,float value);
	void ResetStats();
	void ResetControl();
	void RevertControl();
	void ClearRewardContainer();
	void ClearLimboContainer();
	void ClearContainers();
	void Update(uint hour,uint minute);
	void UpdateCountdown();
	void UpdateTick();
	void TownCheck();
	
	bool IsLaw(uint law);
	void SetLaw(uint law,bool enabled);
	
	void AddMoney(int money);
	int GetMoney(); 
	
	float GetInfluence(uint faction);
	
	Location@GetLocation();
};                                                                                                                                                                                                                                                                                                                                                                                                                     

shared interface IWeatherZone
{
	uint GetID();
	bool Load();
	bool Save();
	
	string GetName();
	void SetName(string name);
	
	uint GetTimeEvent();
	void SetTimeEvent(uint id);
	
	int GetFlags();
	bool GetFlag(int flag);
	void SetFlag(int flag);
	void UnsetFlag(int flag);
	
	uint GetSpeedMove();
	bool SetSpeedMove(uint speed);
	uint GetSpeedLevel();
	bool SetSpeedLevel(uint speed);
	uint GetSpeedRadius();
	bool SetSpeedRadius(uint speed);
	uint GetSubZones();
	bool SetSubZones(uint subzones);
	
	bool SetType(uint type);
	bool Position(uint coords_x,uint coords_y);
	bool Move(uint coords_x,uint coords_y);
	bool Level(uint level);
	bool Radius(uint radius);
	
	bool LoadActions(string&filename);
	void Action(uint action,uint data1,uint data2);
	void Update();
	void UpdateFast(Location@loc);
	void Lock();
	void Unlock();
	uint GetUpdateTime();
	uint SetUpdateTime(uint time);
	void Delete();
};  

import void InitWeather()from"weather";
import void SaveWeather()from"weather";

import uint AddWeatherZone(string&name)from"weather";
import uint AddWeatherZone(uint coords_x,uint coords_y,uint type)from"weather";

import IWeatherZone@GetWeatherZone(uint id)from"weather";
import IWeatherZone@GetWeatherZone(string&name)from"weather";

import void WeatherUpdate(Critter@critter,uint&type,int&level)from"weather";
import void WeatherUpdate(Location@loc,uint&type,int&level)from"weather";
import void WeatherUpdate(int locid,uint type,int level)from"weather";

import void WeatherUpdateFast(Location@loc)from"weather";

import void DeleteWeatherZone(uint&id,uint&speed_level,uint&speed_radius)from"weather";
import void DeleteWeatherZone(string&name,uint&speed_level,uint&speed_radius)from"weather";
import void DeleteWeatherZone(IWeatherZone@zone,uint&speed_level,uint&speed_radius)from"weather";              

import bool IsNight()from"world_common";
import bool IsDay()from"world_common";
import bool IsMorning()from"world_common";
import bool IsAfternoon()from"world_common";
import bool IsEvening()from"world_common";
import bool IsHospital(Map@map)from"world_common";
import bool IsCave(Map@map)from"world_common";
import bool IsMine(Map@map)from"world_common";
import bool IsJail(Map@map)from"world_common";
import bool IsBase(Map@map)from"world_common";
import bool IsTent(Map@map)from"world_common";
import bool IsWarzone(Map@map)from"world_common";                                                                                                                    

uint[][]PositionDirs=
{
	{0},
	
	{1,4,3,2,1,0,5,2,3,4,5,0,1},
	{1,5,0,1,2,3,4,1,0,5,4,3,2},
	{1,4,2},
	{1,5,1},
	{2,1,2,0,0,1,2,3,3,0,0,4,5,3,3,4,5},
	{2,1,2,4,5},
	{2,4,4,0,0,4,4,3,3,0,0,2,2,3,3,2,2},
	{2,5,5,0,0,5,5,3,3,0,0,1,1,3,3,1,1},
	{2,1,2,0,0,0,0,1,2,3,3,3,3,0,0,0,0,4,5,3,3,3,3,4,5}
};                                                                                                                                                                           

shared interface IZone
{
	uint GetX();
	uint GetY();
	uint GetTerrain();
	uint8 GetFactor();
	void SetFactor(uint8 factor);
	int GetValue();
	void SetValue(int val);
	void AddValue(int val);
	void SubValue(uint val);
	bool ContainsFlag(uint flag);
	void SetQuantity(uint group,uint quantity);
	void ChangeQuantity(uint group,int mod);
	uint GetBaseQuantity(uint group);
	uint GetQuantity(uint group);
	uint GetLocationPids(array<uint16>&pids);
}; 

import IZone@GetZone(uint wx,uint wy)from"worldmap";            

import void XFireClient_Update(Critter&player)from"online_stats";

import void XFireClient_SetInfo(Critter&player,string&name,string&value)from"online_stats";
import void XFireClient_SetInfoRaw(Critter&player,string&raw)from"online_stats";
import void XFireClient_SetInfoMsg(Critter&player,string&name,int msg,int id)from"online_stats";
import void XFireClient_ClearInfo(Critter&player)from"online_stats";                                                                                                                                                                                                                                                                                                                                                                      

import void speedboost(Critter&cr)from"critter_item_movement";

import void DropDrugEffects(Critter&cr)from"drugs";
import bool FindBaseEncounter(array<Critter@>&group,Item@car,uint x,uint y,uint&encounterDescriptor,bool&waitForAnswer)from"factions_player";
import bool IsArenaCombatant(Critter&cr)from"arena";
import bool IsInsideArena(Critter&cr)from"arena";
import bool IsCarTrunk(Item@item)from"car";
import bool OnUseExplode(Critter&cr,Item&explode,Critter@targetCr,Item@targetItem,Scenery@targetScen,uint timer)from"explode";
import bool PerkCheck(Critter&cr,uint perk,bool always)from"perks";
import bool ReversableItem(Item&item)from"fix_boy";
import bool ReverseItem(Critter&cr,Item&item)from"fix_boy";
import uint GetItemRecipe(uint16 itemPid,array<uint16>&pids,array<uint>&cnt)from"fix_boy";
import bool TryRepairItem(Critter&cr,Item&item)from"repair";
import bool TryRechargeItem(Critter&cr,Item&item)from"teslaRecharge";
import bool UseItemOnCar(Critter&cr,Item&car,Item&item)from"car";
import bool UseProspectMap(Critter&cr,Item&map)from"prospects";
import bool UseSkillOnCar(Critter&cr,Item&car,int skill)from"car";
import bool UseSkillOnLocker(Critter&cr,Item&locker,int skill)from"lockers";
import bool WantedSignSet(Item&wantedSign,string&name,uint cost)from"wanted";
import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId)from"combat";
import void CreateCompanion()from"companion";
import uint GetSkillTime(int sk,Critter@crit)from"wait_time";
import int GetCarTrunkComplexity(Item@item)from"car";
import uint GetRandomDeathAnimation()from"cheats";
import void AddCrittersKilled()from"cavelog";
import void AddPlayerDeaths()from"cavelog";
import void ApplyTimeout(array<Item@>&items,array<uint>&itemsCount,array<Item@>&resources,Critter&crafter)from"fix_boy";
import void CheckBountyHunters(Critter&cr,Critter@killer)from"bounties";
import void CombatAttack(Critter&cr,Critter&target,ProtoItem&weapon,uint8 weaponMode,ProtoItem@ammo)from"combat";
import void CritterGenerate(Critter&cr)from"parameters";
import void CritterDescription_Set(Critter&player,int&description1,int&description2)from"critter_description";
import void EditRadioSettings(Critter&player,Item&radio)from"radio";
import void FlushInfluenceBuffer(Critter&cr,ITown@town)from"town";
import uint GMTrack(uint targetId,string@message)from"cheats";
import void GreetPlayer(Critter@player,Map@map)from"map_greet";
import void InitCheats(bool fromGame)from"cheats";
import void InitBrahminPens()from"brahmin_pens";
import void InitBrahminTraders()from"brahmin_traders";
import void InitCars()from"car_seller";
import void InitCaveLog()from"cavelog";
import void InitCaveRandomization()from"cave";
import void InitCompanions()from"companion";
import void InitMercs()from"mercs";
import void InitReverseItem()from"fix_boy";
import void InitRoutes()from"patrolroutes";
import void InitSlaveruns()from"slaverun";
import void InitTowns()from"towns";
import void InitTrains()from"trains";
import void InitBlueprints()from"blueprints";
import void InitPerks()from"perks";
import void InitProduction()from"production";
import void InitShufflingSpawns()from"shuffling_spawner";
import bool IsArenaItem(Item@item)from"arena";
import void LogAction(Critter&cr,string&s)from"logging_critter";
import void NpcProcessLevel(Critter&cr)from"parameters";
import void PlaySound(Critter&cr,string&soundName)from"media";
import string PrepareSound_Pick(Item&item)from"media";
import void ProcessCrippling()from"crippling";
import void RemoveAuthed(uint id)from"cheats";
import void RemoveWorkbenches(Critter&player)from"workbench";
import void ReplicateCritter(Critter&cr)from"replication";
import void RemoveArenaItems(Critter&cr)from"arena";
import void RemoveOnlinePlayer(Critter&cr)from"utils";
import void SaveBrahminPenData()from"brahmin_pens";
import void SaveEventSpawns()from"cheats";
import void SaveCarPriceData()from"car_seller";
import void SaveCompanionData()from"companion";
import void SetReplicationTime(Critter&cr)from"replication";
import void SetSpectator(Critter&cr,bool on)from"utils";
import void SetStartLocation(Critter&cr)from"replication";
import void SetTimeoutForAll(Map&map,int timeout,int time)from"cheats";
import void UseDrug(Critter&cr,Item&drug)from"drugs";
import void UseDrugOn(Critter&cr,Critter&onCr,Item&drug)from"drugs";
import void WearItem(Critter&cr,Item&item,int wearCount)from"repair";
import void WorldmapInit()from"worldmap";
import void WorldmapUpdatePlayer(Critter@player)from"worldmap_players";
import void WorldmapRemovePlayer(Critter@player)from"worldmap_players";
import void TrackLocation(Critter&player)from"globalmap_group";
import bool UseFirstAidOnCritter(Critter&cr,Critter&targetCr,Item@item)from"skills";
import bool UseDoctorOnCritter(Critter&cr,Critter&targetCr,Item@item)from"skills";
import bool UseRepairOnCritter(Critter&cr,Critter&targetCr,Item@item)from"skills";
import bool UseScienceOnCritter(Critter&cr,Critter&targetCr,Item@item)from"skills";
import array<Critter@>WorldmapGetPlayers(uint zx,uint zy)from"worldmap_players";
import uint CheckPlayerName(const string&name)from"parameters";
import string getdialogtext(Critter&cr)from"dialog";
import void FixDrugs(Critter&cr)from"utils";

import bool GuardNotLegit(Critter@cr,Item@item,bool deleteItem)from"cheats";
import void RemoveNotLegit(Critter@cr)from"cheats";
import bool IsReadableBook(uint16 pid)from"books";
import void TryReadBook(Critter&cr,Item&book)from"books";
import void AddBonuses(Item@item,string@crafter)from"item_bonus";
import uint BonusNumber(Item@item)from"item_bonus";

import void UpdateDrugs(Critter&cr)from"drugs";

import string IntToIp(int d)from"utils";
import string GetTimeString(uint fullsecond)from"time";
import void InitBaseControl()from"base_control";
import void init_events()from"event_encounter";
import void init_boss_events()from"event_encounter";
import void init_treasures()from"event_utils";
import bool LoadBaseData()from"base_control";
import bool SaveBaseData()from"base_control";
import void CallMobsToTakeBase(uint playerid,uint location,uint baseLocId,uint NPCFaction)from"base_control";
import void SpawnBCReward(uint16 locPid)from"base_control";
import bool IsNukaColaWorker(Critter&mob)from"mob_dynamic";
import void Reno_event()from"cheats";
dictionary ItemPids;
dictionary VarIds;
dictionary BaseTypes;
dictionary MapData;
array<string>ItemNames;
array<string>VarNames;
array<uint>BannedIDs;
array<uint>BanEvents;
array<string>BannedReason;  

bool GetItemPid(const string&in identifier,int&out pid)
{
	return ItemPids.get(identifier,pid);
}
bool GetVarId(const string&in identifier,int&out id)
{
	return VarIds.get(identifier,id);
}

bool GetBaseType(const string&in identifier,int&out id)
{
	return BaseTypes.get(identifier,id);
}

bool GetMapData(const string&in identifier,int&out id)
{
	return MapData.get(identifier,id);
}  

void init()
{
	InitLogs();
	InitDebug();
	InitializeGame();
	InitPerks();
	
	FLog((14),"START");
}
void rolltcwindows(Critter&cr,int,int,int){rolltcwindows();}

void rolltcwindows()
{
	uint tc_zones=0;
	SetGvar((62019),0);
	SetGvar((62020),0);
	SetGvar((62021),0);
	SetGvar((62022),0);
	SetGvar((62023),0);
	SetGvar((62024),0);
	SetGvar((62025),0);
	for(uint i=1;i<8;i++)
	{
		while(tc_zones!=i)
		{
			switch(Random(1,7))
			{
				case 1:if(GetGvar((62019))==0){SetGvar((62019),i);SetBestScore((92),null,getwindowtime(i));tc_zones++;}break;
				case 2:if(GetGvar((62020))==0){SetGvar((62020),i);SetBestScore((93),null,getwindowtime(i));tc_zones++;}break;
				case 3:if(GetGvar((62021))==0){SetGvar((62021),i);SetBestScore((94),null,getwindowtime(i));tc_zones++;}break;
				case 4:if(GetGvar((62022))==0){SetGvar((62022),i);SetBestScore((95),null,getwindowtime(i));tc_zones++;}break;
				case 5:if(GetGvar((62023))==0){SetGvar((62023),i);SetBestScore((97),null,getwindowtime(i));tc_zones++;}break;
				case 6:if(GetGvar((62024))==0){SetGvar((62024),i);SetBestScore((96),null,getwindowtime(i));tc_zones++;}break;
				case 7:if(GetGvar((62025))==0){SetGvar((62025),i);SetBestScore((98),null,getwindowtime(i));tc_zones++;}break; 
				
			}
		}
	}
}  

string getwindowtime(uint i)
{
	switch(i)
	{
		case 1:return"16:00-19:00 CET";
		case 2:return"18:00-21:00 CET";
		case 3:return"20:00-23:00 CET";
		case 4:return"22:00-01:00 CET";
		case 5:return"24:00-03:00 CET";
	}
	
	return"anytime";
	
} 

bool start()
{   
	
	for(uint i=0;i<1200;i++)
	SetSendParameter(i,true);   
	
	int8[]mask0={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0};
	
	int8[]mask1={0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	int8[]mask2={0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0};
	
	int8[]mask3={-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0};
	
	int8[]mask4={-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0};
	SetItemDataMask((0),mask0);
	SetItemDataMask((1),mask1);
	SetItemDataMask((2),mask2);
	SetItemDataMask((3),mask3);
	SetItemDataMask((4),mask4);
	
	InitDBLogs();
	
	WorldmapInit();
	ReadDefines("scripts/ITEMPID.H",ItemPids,ItemNames);
	ReadDefines("scripts/_vars.fos",VarIds,VarNames);
	ReadDefines("scripts/_basetypes.fos",BaseTypes,null);
	ReadDefines("scripts/mapdata_h.fos",MapData,null);
	
	InitCheats(true); 
	
	InitFactions();
	
	RegisterFaction((2),"Brotherhood Of Steel",false);
	RegisterFaction((3),"Enclave",false);
	RegisterFaction((4),"The Unity",false);
	RegisterFaction((5),"New California Republic",false);
	RegisterFaction((6),"Vault City",false);
	RegisterFaction((7),"Raiders",false);
	RegisterFaction((8),"The Mordinos",false);
	RegisterFaction((9),"Slavers",false);
	RegisterFaction((10),"Slag Bandits",false);
	RegisterFaction((11),"Kokoweef Miners",false);
	RegisterFaction((12),"Morning Star Miners",false);
	RegisterFaction((13),"Broken Hills Humans",false);
	RegisterFaction((14),"Broken Hills Mutants",false);
	RegisterFaction((15),"The Wrights",false);
	RegisterFaction((16),"The Bishops",false);
	RegisterFaction((17),"Salvatores's Family",false);
	RegisterFaction((18),"NCR Rangers",false);
	RegisterFaction((19),"Vortis",false);
	RegisterFaction((20),"Communists",false);
	RegisterFaction((21),"Vargrants",false);
	RegisterFaction((22),"The Fools",false);
	RegisterFaction((23),"Vault-Tec",false);
	RegisterFaction((24),"Hub Criminals",false);
	RegisterFaction((25),"Crimson Caravan",false);
	RegisterFaction((26),"The Far-Go Traders",false);
	RegisterFaction((27),"The Water Merchants",false);
	RegisterFaction((28),"The Heights",false);
	RegisterFaction((29),"The Regulators",false);
	RegisterFaction((30),"Scavengers",false);
	RegisterFaction((31),"Gun Runners",false);
	RegisterFaction((32),"Followers",false);
	RegisterFaction((33),"Bounty Hunters",false);
	RegisterFaction((34),"Free Traders",false);
	RegisterFaction((35),"Redding Gang",false);
	RegisterFaction((35),"Gang",false);
	RegisterFaction((36),"FLC",false);
	RegisterFaction((37),"Slaves",false);
	RegisterFaction((38),"Lara's Gang",false);
	RegisterFaction((39),"Children",false);
	RegisterFaction((40),"New Reno Pimps",false);
	RegisterFaction((41),"Elecronologists",false);
	RegisterFaction((42),"Cathedral",false);
	RegisterFaction((43),"Corsican Brothers",false);
	RegisterFaction((80),"Klamath",false);
	RegisterFaction((81),"Den",false);
	RegisterFaction((82),"Modoc",false);
	RegisterFaction((83),"Courtyard",false);
	RegisterFaction((84),"Gecko",false);
	RegisterFaction((85),"Redding",false);
	RegisterFaction((86),"Broken Hills Ghouls",false);
	RegisterFaction((87),"New Reno",false);
	RegisterFaction((88),"Necropolis",false);
	RegisterFaction((89),"Junktown Scouts",false);
	RegisterFaction((90),"Hub",false);
	RegisterFaction((91),"Los Angeles",false);
	RegisterFaction((92),"Vegas",false);
	RegisterFaction((93),"Salt Lake",false);
	RegisterFaction((94),"Carpenter",false);
	RegisterFaction((95),"Repex",false);
	RegisterFaction((96),"Brahmin Farms",false);
	RegisterFaction((97),"Mariposa Mutants",false);
	RegisterFaction((98),"Area51",false);
	RegisterFaction((99),"Army of Hawthorne",false);  
	
	RegisterFaction((21),"The Tanker Vagrants",true);
	RegisterFaction((35),"The Redding Guttersnipes",true);
	
	__TimeoutBattle=((10)*__TimeMultiplier);
	
	InitTents();
	InitCars(); 
	
	InitEconomy();   
	
	InitMercs();
	
	InitNpcSchedules();
	
	InitRoutes();
	
	InitBrahminPens();
	
	InitBrahminTraders();
	
	InitTowns();
	rolltcwindows();
	if(when_tc_modoc>5)
	can_tc_modoc=true;
	if(when_tc_gecko>5)
	can_tc_gecko=true;
	if(when_tc_den>5)
	can_tc_den=true;
	if(when_tc_klamath>5)
	can_tc_klamath=true;
	if(when_tc_redding>5)
	can_tc_redding=true;
	if(when_tc_bh>5)
	can_tc_bh=true;
	if(when_tc_necro>5)
	can_tc_necro=true;
	InitCaveRandomization();
	InitSlaveruns();
	
	InitCaveLog();
	InitCompanions();
	
	InitCaravans();
	
	InitGroups(); 
	
	InitTrains();
	InitAlertMaps();
	InitWeather();
	InitReverseItem();
	InitProduction();
	InitShufflingSpawns();
	ProcessCrippling();
	
	LoadBaseData();
	InitBaseControl();
	LoadBannedCharacters();
	init_events();
	init_boss_events();
	init_treasures();
	
	array<Map@>allMaps;
	uint allMapsCount=GetAllMaps(0,allMaps);
	uint noGridsMaps=0;
	for(uint m=0;m<allMapsCount;m++)
	{
		if(!(@allMaps[m]!=null)||allMaps[m].IsNotValid)
		continue;
		
		if(((allMaps[m].GetData((10))&((0x00000080)))!=0))
		{
			
			allMaps[m].SetEvent((4),"cheats@_LockMap");
			allMaps[m].SetLoopTime(3,500);
			SetTimeoutForAll(allMaps[m],(944),((2238)*__TimeMultiplier));
			noGridsMaps++;
		}
		
	}     
	
	if((GetGvar((2))==1))
	{
		array<Location@>locations;
		uint locationsNum=GetAllLocations(0,locations);
		for(uint l=0;l<locationsNum;l++)
		{
			if(locations[l].IsDungeon()&&locations[l].IsPublic())
			locations[l].Color=(uint(((120)<<24)|(((138)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)));
			
			if(locations[l].IsTown()&&!locations[l].IsGuarded()&&(locations[l].Radius>6)&&locations[l].IsPublic())
			locations[l].Color=(uint(((90)<<24)|(((206)&0xFF)<<16)|(((154)&0xFF)<<8)|((50)&0xFF)));
		}
	}
	
	StartPersonalDataCleanup();
	
	SetGvar((2),0);
	SetGvar((62001),1);
	SetGvar((62002),1);
	SetGvar((62003),1);
	CreateTimeEvent(((__FullSecond)+(((30)*__TimeMultiplier))),"e_KickMultilogs",false);
	return true;
}
array<uint>Tents;
void GotoTent(Critter&cr,int p0,int p1,int p2)
{
	cr.TransitToMap(Tents[p0],0);
}         

void get_start_time(uint16&multiplier,uint16&year,uint16&month,uint16&day,uint16&hour,uint16&minute)
{
	multiplier=20;
	year=2278;
	month=6;
	day=19;
	hour=3;
	minute=3;
}  

void finish()
{
	FLog((14),"FINISH");
	CloseLogs();
}   

uint lastsecond=0;
uint last_os_save=0;
uint last_os_mod=0;
bool BCRewardSpawned=false;
uint renos=0;
bool reno=true;
bool renotry=false;
bool exp_event=false;
uint companionSpawned=0;
uint companioncheck=0;
void forceloop(Critter&cr,int,int,int)
{
	loop();
	
}
uint loop()
{ 
	
	uint16 second=0;
	uint16 minute=0;
	uint16 hour=0;
	uint16 d=0;
	uint16 a,b,c,g;
	GetTime(a,b,c,d,hour,minute,second,g);
	
	UpdateBroadcast();
	if(hour>12&&hour<20)
	{
		if(minute==0&&second<20&&!reno&&!renotry)
		{
			if(Random(1+renos,6)==6)
			{
				
				reno=true;
				renotry=true;
			}
			else
			{
				renos++;
				renotry=true;
			}
		}
		else if(minute==0&&second<20&&renotry)
		{
			
		}
		else if(renotry)
		renotry=false;
	}
	if(hour==12&&minute==0&&second<20&&reno)
	{
		reno=false;
		renos=0;
		renotry=false;
	}
	if((minute==0||minute==30)&&second<20)
	{
		for(uint i=1;i<(7)+1;i++)
		{
			ITown@town=GetTown(i);
			town.Update(hour,minute);
		}
		
	}
	if(companionSpawned<75)
	{
		if((minute==59||minute==19||minute==39)&&second<20&&companionSpawned!=companioncheck)
		{
			companioncheck=companionSpawned;
		}
		if((minute==0||minute==20||minute==40)&&second<20&&companionSpawned==companioncheck)
		{
			CreateCompanion();
			companionSpawned++;
		}
	}
	
	if(minute==0&&second<20&&BCRewardSpawned==false)
	{
		if(hour%1==0)
		{
			
			SpawnBCReward((362));
			
			SpawnBCReward((98));
			
			SpawnBCReward((12));
			
			SpawnBCReward((99));
		}
		if(hour==23||hour==11)
		SpawnBCReward((95));
		
		BCRewardSpawned=true;
	}
	else if(minute==0&&second<20&&BCRewardSpawned==true)
	{
		
	}
	else if(BCRewardSpawned==true)
	{
		BCRewardSpawned=false;
	}  
	
	if(last_os_save==0)
	last_os_save=(__FullSecond);
	else if((__FullSecond)>last_os_save+(((12)*__TimeMultiplier*60)))
	{
		array<Critter@>players;
		uint n=GetAllOnlinePlayers(players);
		for(uint i=0;i<n;i++)
		if(players[i].Id%(5)==last_os_mod)
		OnlineStats_TrySave(players[i]);
		last_os_save+=(((12)*__TimeMultiplier*60));
		last_os_mod++;
		if(last_os_mod==(5))
		last_os_mod=0;
	}
	if(d==6&&hour==23&&minute==0&&second<20&&!exp_event&&week_patch>1)
	rollexpevent();
	lastsecond=second;
	return 500;
}

void rollexpevent()
{
	if(exp_event)
	return;
	uint8 multipler=0;
	uint eventtype=Random(1,2);
	uint eventtime=Random(23,30);
	string eventname="";
	switch(Random(1,20))
	{
		case 1:if(Random(1,100)==1)multipler=3;else multipler=2;break;
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		multipler=2;break;
		default:multipler=2;break;
	}  
	
	if(eventtype==1)
	{
		eventtype=(100);
		eventname="Multi experience (x"+multipler+") event for %COUNTDOWN_HUMAN%.";
		if(GetGvar((62001))==1)
		{
			SetGvar((62001),multipler);
		}
		else
		{
			Log("ERROR: EXP EVENT");
			return;
		}
	}
	
	if(eventtype==2)
	{
		eventtype=(101);
		eventname="Multi experience (x"+multipler+") for killing event for %COUNTDOWN_HUMAN%.";
		if(GetGvar((62002))==1)
		{
			SetGvar((62002),multipler);
		}
		else
		{
			Log("ERROR: EXP EVENT");
			return;
		}
	}
	exp_event=true;
	CreateTimeEvent(((__FullSecond)+(((eventtime)*__TimeMultiplier*3600))),"_erasegmevent",eventtype,false);
	ServerEventCNTSet(eventname,0,eventtype,((eventtime)*__TimeMultiplier*3600));
}

uint _erasegmevent(array<uint>@eventtype)
{
	switch(eventtype[0])
	{
		case(100):SetGvar((62001),1);break;
		case(101):SetGvar((62002),1);break;
		case(102):SetGvar((62003),1);break;
	}
	exp_event=false;
	return 0;
}   

void critter_attack(Critter&cr,Critter&target,ProtoItem&weapon,uint8 weaponMode,ProtoItem@ammo)
{
	
	speedboost(cr);
	if(cr.Param[(1170)]==0&&cr.IsPlayer())
	CombatAttack(cr,target,weapon,weaponMode,ammo);
	if(!cr.IsPlayer())
	CombatAttack(cr,target,weapon,weaponMode,ammo);
}
uint _SHOT(array<uint>@cr)
{
	GetCritter(cr[0]).ParamBase[(249)]=0;
	return 0;
}                       

void critter_attacked(Critter&cr,Critter&attacker)
{
	speedboost(cr);
	if(attacker.Id==cr.Id)
	return;
	
	Map@map=cr.GetMap();
	if((GetLvar(attacker,(500))==1)||IsArenaCombatant(attacker))
	return;
	uint crGroup=(cr.Param[(106)]);
	uint attackerGroup=(attacker.Param[(106)]);
	
	{};
	
	if(crGroup==attackerGroup&&(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))))
	return;
	
	if(attacker.IsPlayer()&&!(crGroup>=(5000))&&!IsFlaggedAsIllegal(cr))
	{
		if(IsTown(map))
		SubReputation(attacker,crGroup,(25)*(((1)>((cr.Param[(121)])))?(1):((cr.Param[(121)]))));
		else
		TryReportOffense(cr,attacker,(25)*(((1)>((cr.Param[(121)])))?(1):((cr.Param[(121)]))));
	}
	if(!cr.IsPlayer()&&(!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0)))||(crGroup!=attackerGroup)))
	AddAttackPlane(cr,0,attacker); 
	
	if(IsBaseControl(map)&&
	(map.GetLocation().GetProtoId()==(362)&&GetGvar((61011))==attacker.Param[(106)])||
	(map.GetLocation().GetProtoId()==(98)&&GetGvar((61012))==attacker.Param[(106)])||
	(map.GetLocation().GetProtoId()==(95)&&GetGvar((61013))==attacker.Param[(106)]&&IsNukaColaWorker(cr))||
	(map.GetLocation().GetProtoId()==(12)&&GetGvar((61014))==attacker.Param[(106)])||
	(map.GetLocation().GetProtoId()==(99)&&GetGvar((61015))==attacker.Param[(106)]))
	{
		Location@baseLoc=map.GetLocation();
		uint16 location=baseLoc.GetProtoId(),NPCFaction=0;
		
		switch(location)
		{
			case(362):
			NPCFaction=(10);
			break;
			case(98):
			NPCFaction=(98);
			break;
			case(95):
			NPCFaction=(93);
			break;
			case(12):
			NPCFaction=(97);
			break;
			case(99):
			NPCFaction=(99);
			break;
		}
		
		array<uint>controllingdata={0,location,baseLoc.Id,NPCFaction};
		
		CallMobsToTakeBase(0,location,baseLoc.Id,NPCFaction);
	} 
	
	uint crHelpers=10-attacker.Param[(3)];
	crHelpers=(((crHelpers)>(8))?(8):(((crHelpers)<(2))?(2):(crHelpers)));
	if(((cr.Param[(122)])!=0&&(cr.Param[(122)])!=4))
	crHelpers+=4;
	uint attackerHelpers=10-cr.Param[(3)];
	attackerHelpers=(((attackerHelpers)>(4))?(4):(((attackerHelpers)<(2))?(2):(attackerHelpers)));
	if(((attacker.Param[(122)])!=0&&(attacker.Param[(122)])!=4))
	attackerHelpers+=4; 
	
	bool override=GetAlertLevel(map)>=__AlertLevelReact;  
	
	array<Critter@>critters;
	uint k=0;
	
	if(override)
	k=map.GetCritters(0,(0x03)|(0x20),critters);
	else
	{
		uint n=cr.GetCritters(true,(0x03)|(0x20),critters);
		uint m=attacker.GetCritters(true,(0x03)|(0x20),critters);
		m+=n;
		if(m==0)
		return;
		
		k=m;
		if(n!=0&&m!=n)
		{
			k=n;
			
			m-=1;
			while(k!=m)
			{
				if(critters[k].IsSee(cr))
				{
					
					Critter@temp=critters[k];
					@critters[k]=critters[m];
					@critters[m]=temp;
					m--;
				}
				else
				k++;
			}
			if(!critters[k].IsSee(cr))
			k++;
		}
	}   
	
	for(uint i=0;i<k;i++)
	{
		if(!(critters[i].IsNpc()&&!(((critters[i].Param[(534)]&((0x00000020)))!=0)))||critters[i].Id==cr.Id||critters[i].Id==attacker.Id)
		{
			@critters[i]=null;
			continue;
		}
		if(((critters[i].Param[(534)]&((0x00000008)))!=0))
		{
			uint crRepIndex=(critters[i].Param[(106)]);
			if(!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0)))&&
			!IsFlaggedAsIllegal(attacker)&&
			!IsFlaggedAsIllegal(cr)&&
			(crRepIndex>=((__ReputationEnd)-(__ReputationBegin)+1)||(attacker.Reputation[crRepIndex]<__ReputationLoved)||
			(cr.Reputation[crRepIndex]>=__ReputationHated))&&!(cr.Param[(89)]==200||cr.Param[(89)]==201||cr.Param[(89)]==202||cr.Param[(89)]==203)
			)
			SetCritterIllegalFlag(attacker,(0x00000002));
		} 
		
		NpcPlane@plane=critters[i].GetCurPlane();
		if((@plane!=null)&&plane.Type==(1)&&plane.Attack_TargId==attacker.Id)
		{
			if(crHelpers>0)
			crHelpers--;
			@critters[i]=null;
		}
		if((@plane!=null)&&plane.Type==(1)&&plane.Attack_TargId==cr.Id)
		{
			if(attackerHelpers>0)
			attackerHelpers--;
			@critters[i]=null;
		}
	}
	
	int crRep=0;
	int attackerRep=0;
	uint npcGroup=0;
	int crStatus=(0);
	int attackerStatus=(0); 
	
	for(uint i=0;i<k;i++)
	{
		if(!(@critters[i]!=null))
		continue;
		npcGroup=(critters[i].Param[(106)]);
		
		if(((critters[i].Param[(534)]&((0x00000008)))!=0))
		{
			if(attackerHelpers==0&&crHelpers==0&&!override)
			continue; 
			
			if(cr.Param[(89)]==(203)&&(attacker.IsPlayer()||(attacker.IsNpc()&&(((attacker.Param[(534)]&((0x00000020)))!=0))&&attacker.FollowerVar[(933)]>0)))
			continue;
			
			if(attacker.Param[(89)]==(203)&&(cr.IsPlayer()||(cr.IsNpc()&&(((cr.Param[(534)]&((0x00000020)))!=0))&&cr.FollowerVar[(933)]>0)))
			continue;        
			
			if((npcGroup==attackerGroup)&&(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))))
			{
				if(attackerHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):true))) continue;attackerHelpers--;AddAttackPlane(critters[i],0,cr);continue;
			} 
			
			crStatus=GetGroupsStatus(cr,critters[i]);
			attackerStatus=GetGroupsStatus(attacker,critters[i]);
			
			if(crStatus==(1))
			{
				if(attackerStatus!=(1))
				{
					if(crHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):true))) continue;crHelpers--;AddAttackPlane(critters[i],0,attacker);continue;
				}
				else
				continue;
			}
			else if(crStatus==(0))
			{
				if(attackerStatus==(1))
				{
					if(attackerHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):true))) continue;attackerHelpers--;AddAttackPlane(critters[i],0,cr);continue;
				}
			}
			else if(crStatus==(2))
			{
				if(attackerStatus!=(2))
				{
					if(attackerHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):true))) continue;attackerHelpers--;AddAttackPlane(critters[i],0,cr);continue;
				}
			} 
			
			if(IsFlaggedAsIllegal(cr))
			continue; 
			
			if((crGroup==npcGroup)&&(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))))
			{
				if(crHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):true))) continue;crHelpers--;AddAttackPlane(critters[i],0,attacker);continue;
			} 
			
			crRep=npcGroup<((__ReputationEnd)-(__ReputationBegin)+1)?cr.Reputation[npcGroup]:0;
			attackerRep=npcGroup<((__ReputationEnd)-(__ReputationBegin)+1)?attacker.Reputation[npcGroup]:0;
			if((attackerRep>=__ReputationLoved)&&(crRep<__ReputationHated))
			{
				if(attackerHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):true))) continue;attackerHelpers--;AddAttackPlane(critters[i],0,cr);continue;
			} 
			
			if(attackerRep-crRep>(1400))
			continue; 
			
			if(crHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):true))) continue;crHelpers--;AddAttackPlane(critters[i],0,attacker);continue;
		}
		else if((critters[i].Param[(106)])>1&&(critters[i].Param[(122)])>0&&(critters[i].Param[(122)])<4)
		{        
			
			crStatus=GetGroupsStatus(cr,critters[i]);
			attackerStatus=GetGroupsStatus(attacker,critters[i]);
			
			if(crStatus==(1))
			{
				if(attackerStatus!=(1))
				{
					if(crHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):true))) continue;crHelpers--;AddAttackPlane(critters[i],0,attacker);continue;
				}
			}
			else if(crStatus==(0))
			{
				if(attackerStatus==(1))
				{
					if(attackerHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):true))) continue;attackerHelpers--;AddAttackPlane(critters[i],0,cr);continue;
				}
			}
			else if(crStatus==(2))
			{
				if(attackerStatus!=(2))
				{
					if(attackerHelpers==0&&!override) continue;if(!((critters[i].Param[(122)])==(2)?(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):true))) continue;attackerHelpers--;AddAttackPlane(critters[i],0,cr);continue;
				}
			}
			
			if(npcGroup==crGroup)
			{
				if(npcGroup==attackerGroup)
				{
					if((attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))))
					continue;
					else
					{
						if(!((critters[i].Param[(122)])==(2)?(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):true))) continue;if(!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))){if(crHelpers==0&&!override) continue;crHelpers--;}AddAttackPlane(critters[i],0,attacker);continue;
					}
				}
				else
				{
					if((attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))))
					continue;
					else
					if(!((critters[i].Param[(122)])==(2)?(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):true))) continue;if(!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))){if(crHelpers==0&&!override) continue;crHelpers--;}AddAttackPlane(critters[i],0,attacker);continue;
				}
			}
			else
			{
				if(npcGroup==attackerGroup)
				{
					if(!((critters[i].Param[(122)])==(2)?(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):true))) continue;if(!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0)))){if(attackerHelpers==0&&!override) continue;attackerHelpers--;}AddAttackPlane(critters[i],0,cr);continue;
				}
				else
				{
					crRep=npcGroup<((__ReputationEnd)-(__ReputationBegin)+1)?cr.Reputation[npcGroup]:0;
					attackerRep=npcGroup<((__ReputationEnd)-(__ReputationBegin)+1)?attacker.Reputation[npcGroup]:0;
					if((attackerRep>=__ReputationLoved)&&(crRep<__ReputationHated))
					{
						if(!((critters[i].Param[(122)])==(2)?(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0))):true))) continue;if(!(attacker.IsNpc()&&!(((attacker.Param[(534)]&((0x00000020)))!=0)))){if(attackerHelpers==0&&!override) continue;attackerHelpers--;}AddAttackPlane(critters[i],0,cr);continue;
					}
					else if((crRep>=__ReputationLoved)&&(attackerRep<__ReputationHated))
					{
						if(!((critters[i].Param[(122)])==(2)?(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))):true))) continue;if(!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))){if(crHelpers==0&&!override) continue;crHelpers--;}AddAttackPlane(critters[i],0,attacker);continue;
					}
				}
			}
		}
		else if((npcGroup>=(5000)))
		{
			if(npcGroup==crGroup)
			AddAttackPlane(critters[i],0,attacker);
			else if(npcGroup==attackerGroup)
			AddAttackPlane(critters[i],0,cr);
		}
	}
}  

void PostDamage(Critter&cr)
{
	if((@cr.GetMap()!=null)&&cr.GetMap().IsTurnBased())
	return;
	if(cr.IsPlayer()||!IsHumanoid(cr)||cr.Cond==(3))
	return;
	if(cr.IsInjured())
	{
		if(cr.Param[(231)]<=0)
		{
			if(cr.Param[(4)]>=Random(1,10))
			{
				array<NpcPlane@>planes;
				cr.GetPlanes((34),planes);
				if(planes.length()>0)
				planes[0].IdentifierExt=cr.Id;
				else
				AddDoctorCritterPlane(cr,(@cr.GetCurPlane()!=null)?cr.GetCurPlane().Priority+5:0,cr,false);
			}
		}
	}
	if(cr.Param[(72)]!=cr.Param[(7)])
	{
		if(cr.Param[(230)]<=0)
		{
			if(cr.Param[(4)]>=Random(1,10))
			{
				if(cr.Param[(72)]<=cr.Param[(7)]/2||(cr.Param[(7)]-cr.Param[(72)]>cr.Param[(206)]))
				{
					array<NpcPlane@>planes;
					cr.GetPlanes((33),planes);
					if(planes.length()>0)
					planes[0].IdentifierExt=cr.Id;
					else
					AddHealCritterPlane(cr,(@cr.GetCurPlane()!=null)?cr.GetCurPlane().Priority+5:0,cr,false);
				}
			}
		}
		else _TryUseSS(cr);
	}
	
}  

bool critter_stealing(Critter&cr,Critter&thief,Item&item,uint count)
{
	if(cr.IsDead()||cr.Param[(238)]>0||thief.Param[(238)]>0)
	{
		thief.ParamBase[(108)]=0;
		thief.ParamBase[(109)]=0;
		return false;
	}
	
	switch(item.GetProtoId())
	{
		case(157):
		case(571):
		case(1864):
		case(3167):
		case(4608):
		case(1865):
		case(9913):
		case(9914):
		case(9636):
		case(22096):
		case(22098):
		case(22100):
		case(22102):
		case(22104):
		case(22106):
		case(22108):
		case(22109):
		case(22110):
		case(22111):
		case(22112):
		case(22113):
		case(22114):
		case(22115):
		case(22116):
		case(22117):
		
		return false;
	}
	
	int dir1=cr.Dir;
	int dir2=thief.Dir;
	int kDir=(((dir1)>(dir2))?(dir1):(dir2))-(((dir1)<(dir2))?(dir1):(dir2));
	if(kDir>3)
	kDir=6-kDir;
	
	int steal=thief.Param[(209)];
	if(steal<=0)
	steal=1;
	int size=item.Proto.Volume;
	if(size<=0)
	size=1; 
	
	bool pickpocket=thief.Param[(338)]!=0; 
	
	int kCount=count/steal;
	if(kCount<=0)
	kCount=1; 
	
	uint lastStealCrId=thief.Param[(108)];
	uint stealCount=thief.Param[(109)];
	if(lastStealCrId==cr.Id&&thief.Param[(234)]>0)
	steal-=steal*stealCount*10/100; 
	
	int k=(steal-kDir*(pickpocket?5:10))/(((1)>((size*kCount)/(pickpocket?2:1)))?(1):((size*kCount)/(pickpocket?2:1)));
	k=(((k)>(95))?(95):(((k)<(5))?(5):(k)));
	
	GameVar@var=GetUnicumVar((11200),cr.Id,thief.Id);
	if(var.GetValue()==1)
	k/=2;
	
	bool success=!(Random(1,100)>k); 
	
	Map@map=cr.GetMap();
	if(((map.GetData((10))&((0x00000020)))!=0))
	{
		thief.Say((11),"|4291317840 "+"You cannot steal here.");
		success=false;
	}    
	
	if(success||cr.Param[(406)]!=0||Random(1,50)<=cr.Param[(6)])
	thief.TimeoutBase[(234)]=((__FullSecond)+((thief.Param[(334)]!=0?((15)*__TimeMultiplier):((30)*__TimeMultiplier)+thief.Param[(395)])));
	
	if(success)
	{  
		
		const int[]stealExp={50,100,150,250,300,400,500,600,700,1000};
		
		if(lastStealCrId==cr.Id&&thief.Param[(234)]>0)
		{
			stealCount++;
			if(stealCount>9)
			stealCount=9;
			thief.ParamBase[(109)]=stealCount;
		}
		else
		{
			thief.ParamBase[(108)]=cr.Id;
			thief.ParamBase[(109)]=0;
		}
		
		if((((cr.Param[(534)]&((0x00000020)))!=0))||IsBase(cr.GetMap())||IsTent(cr.GetMap()))
		return success;
		
		if(cr.IsNpc())
		{
			thief.ParamBase[(76)]+=stealExp[stealCount];
			LogExperience(thief,stealExp[stealCount],(209),cr.GetProtoId());
			AddScore(thief,(13),1);
		}
	}
	else
	{
		if(IsTown(thief.GetMap()))
		SetCritterIllegalFlag(thief,(0x00000001));
		
		thief.ParamBase[(108)]=0;
		thief.ParamBase[(109)]=0;
		
		if(cr.IsNpc())
		{
			int thiefHp=thief.Param[(72)];
			if(!((((cr.Param[(534)]&((0x00000020)))!=0))&&IsTown(thief.GetMap())))
			AddAttackPlane(cr,0,thief,thiefHp<10||Random(1,10)>cr.Param[(6)]?__DeadHitPoints:Random(thiefHp/4,thiefHp/2));
			
			uint crGroup=(cr.Param[(106)]);
			if((crGroup>=2&&crGroup<=99))
			SubReputation(thief,crGroup,(100)*(((1)>((cr.Param[(121)])))?(1):((cr.Param[(121)]))));
		}
		else
		{
			cr.Say((11),"|4291317840 "+thief.Name+" failed to steal from you.");
			cr.RunClientScript("_ActionStealing",thief.Id,0,0,null,null);
		}
	}
	
	return success;
}

uint e_as(array<uint>@mobdata)
{
	
	Critter@cr=GetCritter(mobdata[0]);
	cr.ParamBase[(1170)]=0;
	if(cr.Param[(345)]==0)
	cr.ParamBase[(540)]=0;
	cr.ParamBase[(539)]=0;
	
	return 0;
}

uint get_as(Critter&cr)
{
	int val=1700;

	
	return val;
}  

bool critter_use_item(Critter&cr,Item&item,Critter@targetCr,Item@targetItem,Scenery@targetScen,uint param)
{ 
	
	bool isPlayer=cr.IsPlayer();
	uint16 pid=item.GetProtoId();
	bool useOnSelf=(!(@targetCr!=null)&&!(@targetItem!=null)&&!(@targetScen!=null));
	
	{;};           
	
	if(OnUseExplode(cr,item,targetCr,targetItem,targetScen,param))
	return true;  
	
	if((@targetItem!=null))
	{
		if(targetItem.GetType()==(13)&&UseItemOnCar(cr,targetItem,item))
		{
			return true;
		}
	} 
	
	if(item.GetType()==(2))
	{     
		
		if(useOnSelf)
		UseDrug(cr,item);
		else if((@targetCr!=null))
		UseDrugOn(cr,targetCr,item);
		else
		cr.SayMsg((11),(3),(10202));
		return true;
	} 
	
	if(!(@targetScen!=null)&&!(@targetItem!=null)&&item.GetType()==(5))
	{
		if(item.Proto.Misc_ToolSkillNum==(206))
		{
			if(!(@targetCr!=null))
			@targetCr=cr;
			if(UseFirstAidOnCritter(cr,targetCr,item))
			return true;
		}
		else if(item.Proto.Misc_ToolSkillNum==(207))
		{
			if(!(@targetCr!=null))
			@targetCr=cr;
			if(UseDoctorOnCritter(cr,targetCr,item))
			return true;
		}
		else if(item.Proto.Misc_ToolSkillNum==(213))
		{
			if(!(@targetCr!=null))
			@targetCr=cr;
			if(UseRepairOnCritter(cr,targetCr,item))
			return true;
		}
		else if(item.Proto.Misc_ToolSkillNum==(212))
		{
			if(!(@targetCr!=null))
			@targetCr=cr;
			if(UseScienceOnCritter(cr,targetCr,item))
			return true;
		}
	} 
	
	if((((item.Flags)&((0x40000000)))!=0)&&useOnSelf)
	{
		if(isPlayer)
		EditRadioSettings(cr,item);
		return true;
	} 
	
	if(pid==(127)&&(@targetCr!=null))
	{
		bool sub=false;
		if(CaptureBrahmin(cr,targetCr,sub))
		{
			if(sub)
			cr.DeleteItem((127),1);
			return true;
		}
		if(CaptureSlave(cr,targetCr,sub))
		{
			if(sub)
			cr.DeleteItem((127),1);
			return true;
		}
	} 
	
	if(pid==(325))
	{
		cr.SayMsg((6),(0),(500),"$result"+Random(1,6));
		return true;
	}
	if(pid==(326))
	{
		cr.SayMsg((6),(0),(500),"$result"+uint((item.Id%6)+1));
		return true;
	} 
	
	if(pid==(328))
	{
		cr.SayMsg((6),(0),Random(1,2)==1?(510):(511));
		return true;
	} 
	
	if(pid==(317)&&cr.Param[(71)]==(1))
	{
		cr.SayMsg((6),(0),(520));
		return true;
	} 
	
	if(item.GetProtoId()==(1850))
	{
		return UseProspectMap(cr,item);
	} 
	
	if(useOnSelf&&IsReadableBook(pid))
	{
		TryReadBook(cr,item);
		return true;
	}
	if(item.GetProtoId()==(9935))
	{
		if(item.GetCount()>1)
		item.SetCount(item.GetCount()-1);
		else
		DeleteItem(item);
		if(targetItem.GetType()==(3))
		{ 
			
			targetItem.Val0+=Random(7500,15000);
			targetItem.Update();
			_weapon_perk(targetItem,false);
			return true;
		}
		if(targetItem.GetType()==(1))
		{
			
			targetItem.Val0+=Random(7500,15000);
			targetItem.Update();
			_armor_perk(targetItem,false);
			return true;
		}
	}
	if(item.GetProtoId()==(9936))
	{
		if(item.GetCount()>1)
		item.SetCount(item.GetCount()-1);
		else
		DeleteItem(item);
		if(targetItem.GetType()==(3))
		{
			for(uint i=0;i<10;i++)
			targetItem.Val0+=Random(7500,15000);
			targetItem.Update();
			_weapon_perk(targetItem,false);
			return true;
		}
		if(targetItem.GetType()==(1))
		{
			
			for(uint i=0;i<10;i++)
			targetItem.Val0+=Random(7500,15000);
			targetItem.Update();
			_armor_perk(targetItem,false);
			return true;
		}
	}
	if(item.GetProtoId()==(9937))
	{
		if(item.GetCount()>1)
		item.SetCount(item.GetCount()-1);
		else
		DeleteItem(item);
		if(targetItem.GetType()==(3))
		{
			for(uint i=0;i<100;i++)
			targetItem.Val0+=Random(7500,15000);
			targetItem.Update();
			_weapon_perk(targetItem,false);
			return true;
		}
		if(targetItem.GetType()==(1))
		{
			
			for(uint i=0;i<100;i++)
			targetItem.Val0+=Random(7500,15000);
			targetItem.Update();
			_armor_perk(targetItem,false);
			return true;
		}
	}
	
	return false;
}  

bool critter_use_skill(Critter&cr,int skill,Critter@targetCr,Item@targetItem,Scenery@targetScen)
{
	
	bool isPlayer=cr.IsPlayer();
	cr.Wait(GetSkillTime(skill,cr));
	if((@targetItem!=null))
	{
		if(GuardNotLegit(cr,targetItem,false))
		{
			cr.Say((11),"You can't do this with not legit item.");
			return true;
		}
		if(targetItem.GetType()==(13))
		if(cr.IsPlayer())
		if(cr.GetMap().GetLocation().IsTent()||cr.GetMap().GetLocation().IsBase())
		{
			uint16 year=0,month=0,day=0,dayofweek=0,hour=0,minute=0,second=0;
			GetGameTime(__FullSecond,year,month,day,dayofweek,hour,minute,second);
			file f;
			f.open("logs/carsuse.txt","w");
			f.writeString(day+"."+month+" "+cr.Name+" using car number: "+targetItem.Id+" in map: "+cr.GetMap().Id);
			f.close();
		}
		
		if(targetItem.GetType()==(13)&&UseSkillOnCar(cr,targetItem,skill))
		return true; 
		
		if((targetItem.GetType()==(9)||targetItem.GetType()==(8))&&UseSkillOnLocker(cr,targetItem,skill))
		return true;
	}
	if(isPlayer)
	{
		if(skill==(-4))
		{
			cr.ParamBase[(75)]-=500;
		}
	}
	Map@baseMap=cr.GetMap();
	Location@baseLoc=null;
	if((@baseMap!=null))@baseLoc=baseMap.GetLocation();
	uint16 location,NPCFaction=0;
	if((@baseLoc!=null))location=baseLoc.GetProtoId();
	IPolygon@HawthorneMilitaryBase=null;
	bool IsBCRewardContainer=false;
	
	if((@baseLoc!=null))switch(location)
	{
		case(362):
		NPCFaction=(10);
		break;
		case(98):
		NPCFaction=(98);
		break;
		case(95):
		NPCFaction=(93);
		break;
		case(12):
		NPCFaction=(97);
		break;
		case(99):
		NPCFaction=(99);
		break;
	}
	
	switch(skill)
	{
		case(-1):
		{ 
			
			if((@targetScen!=null))
			{
				cr.SayMsg((11),(3),(10202));
				return true;
			} 
			
			if((@targetItem!=null)&&targetItem.GetProtoId()==(545)&&OnUseExplode(cr,targetItem,null,null,null,0))
			return true; 
			
			if((@targetItem!=null))
			{
				if(targetItem.GetType()==(8))cr.ParamBase[(189)]=int(targetItem.Id);
				
				if((@baseLoc!=null))
				if(IsBaseControl(baseMap)&&targetItem.GetType()==(8)&&targetItem.GetScriptId()>0)
				if(GetScriptName(targetItem.GetScriptId())=="base_control@RewardSpawner")
				IsBCRewardContainer=true; 
				
				Item@item=targetItem;
				if(!(((item.Flags)&((0x08000000)))!=0))
				{
					cr.SayMsg((11),(3),(10202));
					break;
				}
				
				bool picked=true;
				int freeWeight=cr.Param[(11)]*2-cr.ItemsWeight();
				if(freeWeight>=int(item.Proto.Weight*item.GetCount()))
				{
					
					MoveItem(item,0,cr);
					if(cr.Param[(510)]!=0&&cr.GetAccess()<(1))
					{
						int sk=cr.Param[(209)]-10*((item.Proto.Weight*item.GetCount())/453);
						sk=(((sk)>(95))?(95):(((sk)<(5))?(5):(sk)));
						if(sk<Random(1,100))
						cr.ParamBase[(510)]=0;
					}
				}
				else
				{
					
					if(item.IsStackable()&&freeWeight>=int(item.Proto.Weight))
					{
						MoveItem(item,freeWeight/item.Proto.Weight,cr);
						if(cr.Param[(510)]!=0&&cr.GetAccess()<(1))
						{
							int sk=cr.Param[(209)]-10*((item.Proto.Weight*(((int(freeWeight/item.Proto.Weight))>(int(item.GetCount())))?(int(freeWeight/item.Proto.Weight)):(int(item.GetCount()))))/453);
							sk=(((sk)>(95))?(95):(((sk)<(5))?(5):(sk)));
							if(sk<Random(1,100))
							cr.ParamBase[(510)]=0;
						}
					}
					
					else
					{
						cr.SayMsg((11),(3),(425));
						picked=false;
					}
				}
				if(picked)
				{
					string sound=PrepareSound_Pick(item);
					if(sound.length()>4)
					cr.PlaySound(sound,true);
				}
			}
		}
		break;
		case(-2):
		case(-3):
		{             
			
			switch(targetItem.GetProtoId())
			{
				case(157):
				case(571):
				case(1864):
				case(3167):
				case(4608):
				case(1865):
				case(9913):
				case(9914):
				case(9636):
				case(22096):
				case(22098):
				case(22100):
				case(22102):
				case(22104):
				case(22106):
				case(22108):
				case(22109):
				case(22110):
				case(22111):
				case(22112):
				case(22113):
				case(22114):
				case(22115):
				case(22116):
				case(22117):
				DeleteItem(targetItem);
				return true;
			}
			
			if(cr.Param[(510)]!=0&&cr.GetAccess()<(1))
			{
				int sk=cr.Param[(209)]-10*((targetItem.Proto.Weight*targetItem.GetCount())/453);
				sk=(((sk)>(95))?(95):(((sk)<(5))?(5):(sk)));
				if(sk<Random(1,100))
				cr.ParamBase[(510)]=0;
			}
			return false;
		}
		case(-4):
		{
			
			if(cr.Param[(510)]!=0&&cr.GetAccess()<(1))
			cr.ParamBase[(510)]=0;
			return false; 
			
		}
		case(-5):
		{
			
			CritterTrophy(targetCr,cr);
			cr.Action((10),0,null);
			cr.ShowContainer(targetCr,null,(4));
			if(cr.Param[(510)]!=0&&Random(0,1)==1&&cr.GetAccess()<(1))
			cr.ParamBase[(510)]=0;
			return true;
		}
		case(-6):
		cr.Action((10),2,null);
		if((cr.Param[(238)]==0&&targetCr.Param[(238)]==0)&&(targetCr.IsPlayer()||(targetCr.IsNoPlanes()&&targetCr.GetTalkedPlayers(null)==0)))
		{
			targetCr.MoveRandom();
			if(targetCr.IsPlayer())targetCr.Wait(450);
			CreateTimeEvent(((__FullSecond)+(((500)*__TimeMultiplier/1000))),"e_CritterMove",cr.Id,false);
		}
		return true;
		case(212):
		{
			if((@targetItem!=null)&&(!(((targetItem.Flags)&((0x08000000)))!=0)||IsArenaItem(targetItem)))
			{
				cr.SayMsg((11),(3),(10202));
				return true;
			}
			
			if((@targetItem!=null)&&ReversableItem(targetItem))
			{     
				
				Map@map=cr.GetMap();
				if((@map!=null)&&((map.GetData((10))&((0x00000040)))!=0))
				{
					cr.SayMsg((11),(3),(10202));
					return(true);
				} 
				
				if(cr.Param[(238)]>0)
				{
					cr.SayMsg((11),(3),(791));
					return true;
				}
				if(ReverseItem(cr,targetItem))
				{
					if((cr.Param[(510)]!=0)&&(cr.IsPlayer()&&cr.GetAccess()==(0)))
					{
						cr.ParamBase[(510)]=0;
					}
					return true;
				}
			}
			
			if(UseScienceOnCritter(cr,targetCr,null))
			return true;
			cr.SayMsg((11),(3),(10202));
		}
		break;
		case(213):
		{
			
			if((@targetItem!=null)&&targetItem.Accessory==(1)&&targetItem.IsDeteriorable())
			{
				TryRepairItem(cr,targetItem);
				return true;
			}
			if(UseRepairOnCritter(cr,targetCr,null))
			return true;
			cr.SayMsg((11),(3),(10202));
		}
		break;
		case(208):
		{
			if(cr.Param[(510)]!=0)
			cr.ParamBase[(510)]=0;
			else if(!isPlayer)
			cr.ParamBase[(510)]=1;
			else
			{
				if(cr.Param[(244)]>0)
				cr.SayMsg((11),(3),(792));
				else if((cr.Timeout[(238)]>100000))
				cr.SayMsg((11),(3),(791));
				else if((cr.IsPlayer()&&cr.GetAccess()==(0)))
				{
					
					Item@armor=cr.GetItem(0,(3));
					if((@armor!=null))
					{
						switch(armor.GetProtoId())
						{
							case(3):
							case(232):
							case(348):
							case(349):
							{
								cr.Say((11),"You can't sneak while wearing powered armor.");
								return true;
							}
						}
					}
					
					array<Critter@>critters;
					uint num=cr.GetCritters(true,(0x01)|(0x10),critters);
					
					for(uint i=0;i<num;i++)
					{ 
						
						if(critters[i].Param[(510)]!=0)
						continue;
						
						if((critters[i].GetSocket()==-1))
						continue;
						
						if(!(critters[i].IsPlayer()&&critters[i].GetAccess()==(0)))
						continue;
						
						if(cr.ParamBase[(147)]!=0)
						{
							if(((cr.ParamBase[(147)])&0xFF)==((critters[i].ParamBase[(147)])&0xFF))
							continue;
						}
						else
						{
							if((critters[i].Param[(106)])>1&&IsGang((critters[i].Param[(106)])))
							{
								if((critters[i].Param[(106)])==(cr.Param[(106)]))
								continue;
								if(GetStatus((critters[i].Param[(106)]),cr.Id)==(1))
								continue;
							}
							
							if(critters[i].Param[(81)]>0)
							{
								if(uint(critters[i].Param[(81)])==cr.Id)
								continue;
								
								Critter@taggedCr=GetCritter(critters[i].Param[(81)]);
								if((@taggedCr!=null)&&uint(taggedCr.Param[(81)])==cr.Id)
								continue;
							}
						}
						cr.Say((11),"You can't enter sneak while being seen by players who aren't in your team, unless they are sneaking.");
						return true;
					}
					cr.ParamBase[(510)]=1;
				}
				else
				{
					cr.ParamBase[(510)]=1;
				}
			}
		}
		break;
		case(210):{
			cr.SayMsg((11),(3),(10202));
			break;
		}
		case(209):
		{
			if((@targetItem!=null))
			{
				cr.SayMsg((11),(3),(10202));
			}
			else if((@targetCr!=null)&&(@cr.GetMap()!=null))
			{
				
				if(targetCr.IsPlayer()&&targetCr.Param[(535)]>0)
				{
					if(cr.GetAccess()>=(1))
					{
						
						cr.Say((11),"You sense a bad aura around "+targetCr.Name+" and decided to not steal anything.");
					}
					else
					{
						SetLvar(cr,(1207),cr.ParamBase[(72)]);
						cr.ParamBase[(532)]=1;
						cr.ParamBase[(511)]=1;
						int deathAnim=(113);
						if(targetCr.Param[(535)]==2)
						{
							deathAnim=GetRandomDeathAnimation();
						}
						else if(targetCr.Param[(535)]>=(100)&&
						targetCr.Param[(535)]<(120))
						{
							deathAnim=targetCr.Param[(535)];
						}
						cr.ToDead(deathAnim,null);
					}
				}
				else if(targetCr.Cond==(3))
				{
					CritterTrophy(targetCr,cr);
					cr.Action((10),0,null);
					if(cr.Param[(510)]!=0&&Random(0,1)==1&&cr.GetAccess()<(1))
					cr.ParamBase[(510)]=0;
					cr.ShowContainer(targetCr,null,(4));
				}
				else if(targetCr.Param[(72)]<=0||targetCr.Cond==(2))
				{
					cr.Action((10),0,null);
					if(cr.Param[(510)]!=0&&Random(0,1)==1&&cr.GetAccess()<(1))
					cr.ParamBase[(510)]=0;
					cr.ShowContainer(targetCr,null,(4));
				}
				
				else
				{
					if(isPlayer&&cr.Param[(234)]>0)
					cr.SayMsg((11),(3),(3401));
					else if((@baseMap!=null)
					&&baseMap.GetProtoId()==(221)&&
					(targetCr.IsPlayer()||((((targetCr.Param[(534)]&((0x00000020)))!=0))&&targetCr.ParamBase[(933)]!=0)))
					cr.Say((11),"This town is protected from stealing.");
					else
					{
						cr.Action((10),1,null);
						cr.ShowContainer(targetCr,null,(5));
						cr.TimeoutBase[(234)]=((__FullSecond)+((cr.Param[(334)]!=0?((15)*__TimeMultiplier):((30)*__TimeMultiplier)+cr.Param[(395)])));
						cr.ParamBase[(108)]=0;
						cr.ParamBase[(109)]=0;
					}
				}
			}
			else
			{
				cr.SayMsg((11),(3),(10202));
			}
		}
		break;
		case(206):
		{
			if((@targetItem!=null)||(@targetScen!=null))
			{
				cr.SayMsg((11),(3),(10202));
				break;
			}
			
			if(!(@targetCr!=null))
			@targetCr=cr;
			if(UseFirstAidOnCritter(cr,targetCr,null))
			return true;
		}
		break;
		case(207):
		{
			if((@targetItem!=null)||(@targetScen!=null))
			{
				cr.SayMsg((11),(3),(10202));
				break;
			}
			
			if(!(@targetCr!=null))
			@targetCr=cr;
			if(UseDoctorOnCritter(cr,targetCr,null))
			return true;
		}
		break;
		case(211):
		{
			
			if((@targetItem!=null))
			{
				uint16 pid=targetItem.GetProtoId();
				if((pid==(206)||pid==(209)||pid==(545))&&
				OnUseExplode(cr,targetItem,null,null,null,0))
				return true;
				
				if(targetItem.GetType()==(1))
				{
					TryRechargeItem(cr,targetItem);
					return true;
				}
			}
			
			cr.SayMsg((11),(3),(10202));
		}
		break;
		default:
		{
			cr.SayMsg((11),(3),(10202));
		}
		break;
	}
	
	return true;
}   

void critter_reload_weapon(Critter&cr,Item&weapon,Item@ammo)
{
	speedboost(cr);
	
	if(weapon.Proto.Weapon_Caliber==0)
	{
		if(weapon.GetProtoId()==(390))
		{
			if(((__Hour)>=22||(__Hour)<=6))
			cr.SayMsg((11),(3),(10230));
			else
			{
				weapon.AmmoCount=weapon.Proto.Weapon_MaxAmmoCount;
				if(cr.Param[(544)]!=0)
				{
					weapon.SetMode(cr.Param[(544)]);
					cr.ParamBase[(544)]=0;
				}
				weapon.Update();
			}
		}
		
		return;
	}  
	
	if(!(@ammo!=null)||(weapon.AmmoCount>0&&weapon.AmmoPid!=ammo.GetProtoId()))
	{
		if(weapon.AmmoPid!=0)
		{
			Item@existAmmo=cr.GetItem(weapon.AmmoPid,-1);
			if(!(@existAmmo!=null))
			cr.AddItem(weapon.AmmoPid,weapon.AmmoCount);
			else
			existAmmo.SetCount(existAmmo.GetCount()+(weapon.AmmoCount));
		}
		weapon.AmmoCount=0;
	} 
	
	if((@ammo!=null))
	{
		uint count=(((ammo.GetCount())<(weapon.Proto.Weapon_MaxAmmoCount-weapon.AmmoCount))?(ammo.GetCount()):(weapon.Proto.Weapon_MaxAmmoCount-weapon.AmmoCount));
		weapon.AmmoCount+=count;
		weapon.AmmoPid=ammo.GetProtoId();
		do{if(ammo.GetCount()>(count)) ammo.SetCount(ammo.GetCount()-(count));else DeleteItem(ammo);}while(false);
		if(cr.Param[(544)]!=0)
		{
			weapon.SetMode(cr.Param[(544)]);
			cr.ParamBase[(544)]=0;
		}
	}
	
	weapon.Update();
}

uint e_CritterInitRun(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if(!(@cr!=null))
	return 0;
	cr.RunClientScript("_PingServer",0,0,0,null,null);
	
	if(GetLvar(cr,(4125))==1)
	{
		cr.RunClientScript("client_messages@_Listen",0,0,0,null,null);
		SetCritterEvents(cr);
	}
	
	return 0;
}

uint e_CritterMove(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))cr.MoveToDir(cr.Dir);
	return 0;
}   

import void AddOnlinePlayer(Critter&cr)from"utils";
import void SetCritterEvents(Critter&cr)from"logging_critter";   

bool MustInitWalkProcessing=true;

void critter_init(Critter&cr,bool firstTime)
{
	speedboost(cr);
	if(cr.IsPlayer())
	{
		cr.ParamBase[(89)]=0;
		cr.ParamBase[(523)]=0;
		cr.ParamBase[(532)]=0;
		cr.ParamBase[(1182)]=30000+cr.ParamBase[(362)]*1000;
	}
	if(!cr.IsPlayer())
	{
		cr.ParamBase[(1182)]=5000;
		
	}
	cr.ClearExtEvents();
	if(MustInitWalkProcessing)
	{
		MustInitWalkProcessing=false;
		cr.Wait(0);
		InitWalkProcessing(cr);
		cr.Wait(0);
		InitWalkProcessing2(cr);
	}
	SetCritterEvents(cr);
	FixDrugs(cr);
	
	if(firstTime)
	{
		GameVar@var=GetLocalVar((60002),cr.Id);
		var=1;
	}
	if(cr.Trait[(555)]!=0)
	{
		GameVar@var=GetLocalVar((60002),cr.Id);
		if(var.GetValue()==0)
		{
			for(uint i=(23);i<=(29);i++)
			cr.ParamBase[i]-=10;
			for(uint i=(16);i<=(22);i++)
			cr.ParamBase[i]+=10;
			var=1;
		}
	} 
	
	if(IsCompanion(cr)&&!cr.IsPlayer())
	{
		cr.ParamBase[(139)]=7;
	}
	if(cr.IsNpc())
	{
		cr.SetEvent((38),"trader@_OnBarter");
		if((((cr.Param[(534)]&((0x00000020)))!=0)))
		{
			cr.SetBagRefreshTime((uint(-1)));
		}
	}
	
	if(cr.IsPlayer())
	{                          
		
		if(cr.Param[(106)]>0)
		{
			uint faction=GetGroupIndex(cr);
			string factionname;
			
			GetFactionNameStr(faction,factionname);
			SetLexem(cr,"$faction",factionname);
		}
		AddOnlinePlayer(cr);
		CreateTimeEvent(((__FullSecond)+(((5)*__TimeMultiplier))),"e_CritterInitRun",cr.Id,false);
		if(GetLvar(cr,(4125))==0)
		SetSpectator(cr,false); 
		
		CreateTimeEvent(((__FullSecond)+(((5)*__TimeMultiplier))),"e_CritterInit_Broadcast",cr.Id,false);
		CreateTimeEvent(((__FullSecond)+(((6)*__TimeMultiplier))),"e_CritterInit_OnlineStats",cr.Id,false);
		CreateTimeEvent(((__FullSecond)+(((7)*__TimeMultiplier))),"e_CritterInit_XFire",cr.Id,false);
		
		int modeRun=0;        
		
		UpdateFactionsInfo(cr);
		
		cr.ParamBase[(184)]=0;
		cr.ParamBase[(185)]=0;
		cr.ParamBase[(186)]=0;
		
		if(cr.IsPlayer())
		{
			cr.ParamBase[(187)]=(0);
		} 
		
		cr.ParamBase[(1070)]=66;
		cr.ParamBase[(1071)]=66;
		cr.ParamBase[(1072)]=66;
		cr.ParamBase[(1073)]=66;
		cr.ParamBase[(1074)]=66;
		cr.ParamBase[(1075)]=1;
		cr.ParamBase[(1076)]=1;
		cr.ParamBase[(1077)]=1;
		cr.ParamBase[(1078)]=1;
		cr.ParamBase[(1079)]=1;
		cr.ParamBase[(1080)]=1;
		cr.ParamBase[(1081)]=1;
		cr.ParamBase[(1082)]=1;
		cr.ParamBase[(1083)]=1;
		cr.ParamBase[(1084)]=1;
		cr.ParamBase[(1085)]=1;
		cr.ParamBase[(1086)]=1;
		cr.ParamBase[(1087)]=1;
		cr.ParamBase[(1088)]=1;
		cr.ParamBase[(1089)]=1;
		
	}
	if(firstTime)
	{
		
		if(cr.IsPlayer())
		{
			if(int(cr.Id)>GetGvar((9009)))
			SetGvar((9009),cr.Id);
			
			GameVar@var=GetLocalVar((4101),cr.Id);
			var=(cr.Param[(106)]);
			GameVar@var2=GetLocalVar((4102),cr.Id);
			var2=(cr.Param[(121)]);  
			
			uint traits=0;
			for(uint i=(__TraitBegin);i<=(__TraitEnd);i++)
			{
				if(cr.ParamBase[i]!=0&&traits<2)
				{
					cr.ParamBase[i]=1;
					traits++;
				}
				else
				cr.ParamBase[i]=0;
			}
			
			if(cr.ParamBase[(71)]<0||cr.ParamBase[(71)]>1)
			cr.ParamBase[(71)]=0;
			if(cr.ParamBase[(70)]<14||cr.ParamBase[(70)]>80)
			cr.ParamBase[(70)]=25;
			for(uint i=(0);i<=(6);i++)
			cr.ParamBase[i]=(((cr.ParamBase[i])>(10))?(10):(((cr.ParamBase[i])<(1))?(1):(cr.ParamBase[i])));
			
			if((cr.ParamBase[(0)]+cr.ParamBase[(1)]+cr.ParamBase[(2)]+
			cr.ParamBase[(3)]+cr.ParamBase[(4)]+cr.ParamBase[(5)]+cr.ParamBase[(6)])!=__StartSpecialPoints)
			{
				for(uint i=(0);i<=(6);i++)
				cr.ParamBase[i]=5;
			}
			
			cr.ParamBase[(28)]=500;
			cr.ParamBase[(301)]=1;                        
			
			cr.ParamBase[(112)]=(cr.Param[(71)]==(0)?((69)):((4)));
			cr.ChangeCrType(cr.ParamBase[(112)]); 
			
			cr.ParamBase[(181)]=1;
			cr.ParamBase[(182)]=0;
			cr.ParamBase[(183)]=0;
		}             
		
		CritterGenerate(cr);
		cr.ParamBase[(72)]=cr.Param[(7)];
		cr.ParamBase[(75)]=cr.Param[(8)]*100;
		
		for(uint i=(__ReputationBegin);i<=(__ReputationEnd);i++)
		cr.ParamBase[i]=int(0x80000000);
		ReputationsInit(cr);
		
		if(cr.IsPlayer())
		{
			string charSpecialStr=cr.ParamBase[(0)]+" "+cr.ParamBase[(1)]+" "+cr.ParamBase[(2)]+" "+cr.ParamBase[(3)]+" "+cr.ParamBase[(4)]+" "+cr.ParamBase[(5)]+" "+cr.ParamBase[(6)];
			
			string charTraitsStr;
			for(uint i=(__TraitBegin);i<=(__TraitEnd);i++)
			if(cr.ParamBase[i]!=0)
			charTraitsStr+=" "+i;
			
			FLog((17),cr.Name+"("+cr.Id+") special: "+charSpecialStr+" traits:"+charTraitsStr);
		} 
		
		if(cr.IsPlayer())
		{
			for(uint i=(0);i<=(6);i++)
			cr.ParamBase[i]=(((cr.ParamBase[i])>(10))?(10):(((cr.ParamBase[i])<(1))?(1):(cr.ParamBase[i])));
			cr.ParamBase[(69)]=(1);
			
			SetStartLocation(cr); 
			
			array<uint16>pids;
			array<uint>minCounts;
			array<uint>maxCounts;
			array<int>slots;
			
			uint bagId=2;
			uint num=0;
			uint[]bags={131,132,133,134,135,136,137,138,139,144,145};
			bagId=(bags[Random(0,bags.length()-1)]);
			num=GetBagItems(bagId,pids,minCounts,maxCounts,slots); 
			
			for(uint i=0;i<num;i++)
			{
				Item@it=cr.AddItem(pids[i],Random(minCounts[i],maxCounts[i]));
				it.Cost=1;
			}
			SetGroupIndex(cr,(1));
		}
		else
		{
			cr.ChangeCrType(cr.ParamBase[(112)]);
			
			if(cr.Param[(140)]!=0)
			{
				Item@armor=cr.AddItem(cr.Param[(140)],1);
				if((@armor!=null))
				{
					cr.MoveItem(armor.Id,1,(3));
					if(cr.Param[(143)]!=0)
					cr.ChangeCrType(cr.ParamBase[(143)]);
				}
				cr.SetFavoriteItem((3),cr.Param[(140)]);
			}
			
			if(cr.Param[(141)]!=0)
			{
				Item@helmet=cr.AddItem(cr.Param[(141)],1);
				if((@helmet!=null))
				cr.MoveItem(helmet.Id,1,(4));
				
			}     
			
			if((@cr.GetMap()!=null)&&!cr.GetMap().GetLocation().IsInstancedQuest())
			{
				array<Item@>trophies;
				switch(cr.Param[(112)])
				{
					case(15):
					{
						{Item@__item=cr.AddItem((9932),1);if((@__item!=null)) trophies.insertLast(__item); };
						break;
					}
					case(22):
					case(59):
					{Item@__item=cr.AddItem((92),1);if((@__item!=null)) trophies.insertLast(__item); };
					break;
					case(67):
					{Item@__item=cr.AddItem((276),1);if((@__item!=null)) trophies.insertLast(__item); };
					break;
					case(68):
					{Item@__item=cr.AddItem((277),1);if((@__item!=null)) trophies.insertLast(__item); };
					break;
					case(81):
					{Item@__item=cr.AddItem((9630),1);if((@__item!=null)) trophies.insertLast(__item); };
					break;
				}
				for(uint t=0,tlen=trophies.length();t<tlen;t++)
				{
					cr.MoveItem(trophies[t].Id,trophies[t].GetCount(),(5));
				}
			}
			
			if(cr.Param[(77)]!=0)
			NpcProcessLevel(cr);
			
		}
		SetBloodType(cr);
		SetBirthDate(cr);                                       
		
		if(cr.IsPlayer())
		CritterAgeInit(cr);
	}
	else
	{
		CheckBirthDate(cr); 
		
		if(cr.IsPlayer())
		CritterAgeInit(cr);
		
		if(cr.Trait[(557)]!=0)
		cr.ParamBase[(538)]=1; 
		
		cr.EraseTimeEvents(0); 
		
		Item@armor=cr.GetItem(0,(3));
		if(!(@armor!=null))
		{
			uint crType=cr.Param[(112)];
			if(crType==0)
			crType=(cr.Param[(71)]==(0)?((69)):((4)));
			if(cr.CrType!=crType)
			cr.ChangeCrType(crType);
		}
		
		int[]slots={(3),(1),(4),(2)};
		for(uint s=0,slen=slots.length();s<slen;s+=2)
		{
			Item@item=cr.GetItem(0,slots[s]);
			if(!(@item!=null)&&cr.Param[slots[s+1]]!=0)
			DisableItemPerk(cr,slots[s+1]);
		} 
		
		if(cr.IsPlayer())
		{
			UpdateGroupVars(cr);
		}
		
		if(cr.IsPlayer())
		{
			if(GetLvar(cr,(3005))!=0)
			{
				Location@loc=GetLocation(GetLvar(cr,(3005)));
				if((@loc!=null))
				cr.SetKnownLoc(true,loc.Id);
				Map@map;
				if((@loc!=null))
				@map=loc.GetMapByIndex(0);
				if((@map!=null))
				map.SetData((6),(__FullSecond));
			}
		}
		
		for(uint i=(__TimeoutBegin);i<=(__TimeoutEnd);i++)
		if(i!=(238)&&cr.Param[i]>(10000000))
		cr.ParamBase[i]=(__FullSecond);   
		
		if((cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&(cr.Param[(106)])>0&&(cr.Param[(106)])<1&&(0)<(cr.Param[(122)])&&(cr.Param[(122)])<(4)&&cr.GetScriptId()==0)
		{
			
			if(IsTown(cr.GetMap()))
			cr.SetScript("generic_guard@_FactionGuard");
			else
			cr.SetScript("encounter_guard@critter_init");
		} 
		
		if(cr.IsPlayer()&&cr.GetMapId()==0)
		{
			array<Critter@>followers;
			uint n=GetFollowers(cr,true,followers);
			for(uint i=0;i<n;i++)
			if(followers[i].GetMapId()==0)
			{
				followers[i].LeaveGlobalGroup();
				TransferToNPCMap(followers[i]);
				followers[i].TransitToGlobalGroup(cr.Id);
				followers[i].ParamBase[(934)]=0;
			}
		}
	}
	
	if(IsCompanion(cr)&&cr.Param[(139)]==7)
	cr.SetEvent((38),"_barter_logs");
	
}

bool _barter_logs(Critter&trader,Critter&player,bool attach,uint barterCount)
{
	uint16 second=0;
	uint16 minute=0;
	uint16 hour=0;
	uint16 year=0,month=0,c=0,day=0,ms=0;
	GetTime(year,month,c,day,hour,minute,second,ms);
	
	file f;
	f.open("logs/player_shop.txt","a");
	f.writeString(day+"."+month+"."+year+" "+hour+":"+minute+":"+second+player.Name+" trading with player Shop ID: "+trader.Id+" with value of items: "+barterCount);
	f.close();
	return true;
	
}

uint e_CritterInit_SendFactionData(array<int>@data)
{
	Critter@cr=GetCritter(data[0]);   
	
	return(0);
}
uint e_CritterInit_Broadcast(array<int>@data)
{
	Critter@cr=GetCritter(data[0]);
	if((@cr!=null)&&cr.IsPlayer())
	DumpBroadcastBuffer(cr);
	
	return(0);
}

uint e_CritterInit_OnlineStats(array<int>@data)
{
	Critter@cr=GetCritter(data[0]);
	if((@cr!=null)&&cr.IsPlayer())
	OnlineStats_SendSetup(cr);
	
	return(0);
}

uint e_CritterInit_XFire(array<int>@data)
{
	Critter@cr=GetCritter(data[0]);
	if((@cr!=null)&&cr.IsPlayer())
	XFireClient_Update(cr);
	
	return(0);
}   

void critter_finish(Critter&cr,bool toDelete)
{
	speedboost(cr);
	if(!(((((((cr.Param[(147)])>>8)&0xF))&((0x1)))!=0)))
	UnsetMinigame(cr,false);
	
	if(cr.IsPlayer())
	{
		if((cr.IsPlayer()&&cr.GetAccess()==(0)))
		RemoveNotLegit(cr);
		RemoveOnlinePlayer(cr);
		WorldmapRemovePlayer(cr);
		RemoveWorkbenches(cr);
		RemoveAuthed(cr.Id);
		GMTrack(cr.Id,"TARGET logged out.");
		if(IsBaseControl(cr.GetMap()))
		{
			array<uint>logoutdata={cr.Id,cr.GetMap().GetLocation().Id};
			CreateTimeEvent(((__FullSecond)+(((2)*__TimeMultiplier*60))),"base_control@e_AntiLogOut",logoutdata,true);
		}
	}
	if(toDelete&&cr.Param[(113)]!=0)
	{
		Item@block=::GetItem(cr.Param[(113)]);
		if((@block!=null))
		DeleteItem(block);
		cr.ParamBase[(113)]=0;
	}
	if(toDelete&&!cr.IsPlayer())
	{
		{
			
			RemoveNpcSchedule(cr);
			GMTrack(cr.Id,"TARGET deleted.");
			
		}
	}
}   

void critter_idle(Critter&cr)
{
	
	Map@map=cr.GetMap();
	if(cr.IsDead()&&cr.Param[(241)]==0)
	ReplicateCritter(cr);
	if(!(@cr!=null))
	return;
	if((@map!=null)&&map.IsTurnBased())
	return;  
	
	if(cr.Param[(1107)]==0)
	{
		cr.ParamBase[(1100)]=cr.ParamBase[(0)]+cr.ParamBase[(564)];
		cr.ParamBase[(1101)]=cr.ParamBase[(1)]+cr.ParamBase[(564)];
		cr.ParamBase[(1102)]=cr.ParamBase[(2)]+cr.ParamBase[(564)];
		cr.ParamBase[(1103)]=cr.ParamBase[(3)]+cr.ParamBase[(564)];
		cr.ParamBase[(1104)]=cr.ParamBase[(4)]+cr.ParamBase[(564)];
		cr.ParamBase[(1105)]=cr.ParamBase[(5)]+cr.ParamBase[(564)];
		cr.ParamBase[(1106)]=cr.ParamBase[(6)]+cr.ParamBase[(564)];
		
		cr.ParamBase[(1107)]=1;
	}
	float healingrate=cr.Param[(2)]/16.7f;
	if(cr.ParamBase[(382)]>0)healingrate+=0.01f*cr.Param[(2)];
	if(cr.Param[(245)]<=0)
	{
		if(!cr.IsDead()&&cr.Param[(526)]==0&&cr.Param[(384)]==0)
		{
			int heal=0;
			heal+=cr.Param[(13)]*(cr.Param[(382)]>0?2:1);
			if(cr.Param[(73)]>0)
			heal=heal*(0.50);
			heal=heal*healingrate;
			cr.ParamBase[(72)]+=heal;
		}
		
		if(cr.ParamBase[(72)]>cr.Param[(7)])
		cr.ParamBase[(72)]=cr.Param[(7)];
		
		int toheal=25;
		if(cr.Param[(550)]>0)
		toheal-=10;
		if(cr.Param[(308)]>0)
		toheal-=5;
		if(cr.Param[(462)]>2)
		toheal-=5;
		
		Item@realWeapon=cr.GetItem(0,(1));
		Item@armorek=cr.GetItem(0,(3));
		
		if((@armorek!=null)&&armorek.Val3==(107)&&(@cr!=null)&&cr.IsPlayer())toheal-=4;
		if((@armorek!=null)&&armorek.Val4==(107)&&(@cr!=null)&&cr.IsPlayer())toheal-=4;
		if((@armorek!=null)&&armorek.Val5==(107)&&(@cr!=null)&&cr.IsPlayer())toheal-=4;
		if((@armorek!=null)&&armorek.Val6==(107)&&(@cr!=null)&&cr.IsPlayer())toheal-=4;
		if((@armorek!=null)&&armorek.Val7==(107)&&(@cr!=null)&&cr.IsPlayer())toheal-=4;
		if((@armorek!=null)&&armorek.Val8==(107)&&(@cr!=null)&&cr.IsPlayer())toheal-=4;
		if((@armorek!=null)&&armorek.Val2==(107)&&(@cr!=null)&&cr.IsPlayer())toheal-=4;
		
		cr.TimeoutBase[(245)]=((__FullSecond)+(((toheal)*__TimeMultiplier)));
	}
	if(cr.IsPlayer())
	{
		if(cr.Param[(75)]>cr.Param[(8)]*100)
		cr.ParamBase[(75)]=cr.Param[(8)]*100;
		cr.AddScoreVal((21),cr.Param[(76)]);
	}
	if(cr.GetProtoId()==1485&&cr.Param[(72)]>10)
	cr.ParamBase[(72)]-=5;
	if(cr.GetProtoId()==1485&&cr.Param[(72)]<10)
	DeleteNpc(cr); 
	
	if(cr.IsInjured()&&cr.IsNpc()&&IsHumanoid(cr)&&cr.Param[(231)]<=0&&cr.Param[(238)]==0)
	{
		if(cr.Param[(4)]>=Random(1,10))
		{
			array<NpcPlane@>planes;
			cr.GetPlanes((34),planes);
			if(planes.length()>0)
			planes[0].IdentifierExt=cr.Id;
			else
			AddDoctorCritterPlane(cr,(@cr.GetCurPlane()!=null)?cr.GetCurPlane().Priority+5:0,cr,false);
		}
	}
	if(IsCompanion(cr))
	cr.ParamBase[(937)]=100; 
	
	if((cr.GetSocket()==-1)&&cr.Param[(89)]>1&&cr.IsPlayer()&&cr.Param[(523)]!=0&&cr.Param[(797)]==0)
	{
		cr.ParamBase[(797)]+=1;
		CreateTimeEvent(__FullSecond+((120)*__TimeMultiplier),"e_checkafk",cr.Id,false);
	}
	
	if(!(@cr!=null))
	return;
	
	if(cr.IsPlayer())
	{
		
		UpdateDrugs(cr);
	}
	array<Item@>items;
	uint num=cr.GetItems(-1,items);
	for(uint i=0;i<num;i++)
	{
		if(items[i].GetType()==(3)&&items[i].IsStackable())
		{
			items[i].Val0=0;
			items[i].Val1=0;
			items[i].Val2=0;
			items[i].Val3=0;
			items[i].Val4=0;
			items[i].Val5=0;
			items[i].Val6=0;
			items[i].Val7=0;
			items[i].Val8=0;
			items[i].Update();
		}
		
	}
	
}
uint e_checkafk(array<int>@data)
{
	Critter@cr=GetCritter(data[0]);
	if((cr.GetSocket()==-1)&&cr.Param[(89)]>1&&cr.IsPlayer()&&cr.Param[(523)]!=0)
	{
		cr.ParamBase[(796)]+=1;
		return((120)*__TimeMultiplier);
	}
	if(cr.Param[(796)]>10&&cr.IsPlayer())
	AddBan(cr,cr.Id,0,24,"Autoban: War Event AFK");
	
	cr.ParamBase[(797)]==0;
	return 0;
	
}
void CritterTrophy(Critter&critter,Critter&looter)
{
	uint count=critter.CountItem((9932));
	if(count>0)
	{
		critter.DeleteItem((9932),count);
		critter.AddItem((1803),count);
	}
	
	if(looter.Param[(430)]<=0&&
	(critter.CrType==(68)||
	critter.CrType==(67)||
	critter.CrType==(81)))
	return;
	
	bool geckoSkinning=false;
	array<Item@>trophies;
	count=critter.GetItems((5),trophies);
	for(uint t=0;t<count;t++)
	{
		if(!geckoSkinning&&
		(trophies[t].GetProtoId()==(276)||
		trophies[t].GetProtoId()==(277)||
		trophies[t].GetProtoId()==(9630)))
		{
			geckoSkinning=true;
			looter.Say((11),"You have skinned the gecko.");
		}
		
		critter.MoveItem(trophies[t].Id,trophies[t].GetCount(),(0));
	}
}

void TownCitizenKilled(Critter&critter,Critter@killer)
{
	if(!(@killer!=null))
	return;
	uint mapid=critter.GetMapId();
	
	for(uint i=1;i<GetTownCount()+1;i++)
	{  
		
		ITown@town=GetTown(i);
		if(mapid==town.GetMapID())
		{
			uint factionId=town.GetControllingFaction();
			if(GetGroupIndex(killer)==factionId)
			town.ModifyInfluence(factionId,-0.05);
		}
	}
	
}   

void death(Critter&cr,int p0,int p1,int p2)
{
	cr.ToDead(p0,null);
}

void critter_dead(Critter&cr,Critter@killer)
{   
	
	Map@map=cr.GetMap();
	if(!(@map!=null)||!(@cr!=null))
	{
		
		return;
	} 
	
	if((@cr!=null)&&cr.IsPlayer())
	{
		
		RemoveWorkbenches(cr);
	}
	
	if(cr.IsNpc()&&(@cr!=null))
	{
		
		cr.ClearEnemyStack();
	}
	
	Item@armor=cr.GetItem(0,(3));
	Item@helmet=cr.GetItem(0,(4));
	array<Item@>trophies;
	array<Item@>items;
	
	cr.GetItems((5),trophies);
	cr.GetItems((1),items);
	cr.GetItems((2),items);
	cr.GetItems((0),items);
	cr.ParamBase[(197)]=0;
	cr.ParamBase[(803)]=0;
	bool isArmor=((@armor!=null));
	bool isHelmet=((@helmet!=null));
	bool isTrophy=(trophies.length()>0);
	
	if((isArmor||isHelmet)&&
	(cr.Anim2Dead==(112)||cr.Anim2Dead==(110)||cr.Anim2Dead==(111)||
	cr.Anim2Dead==(113)||cr.Anim2Dead==(114)||cr.Anim2Dead==(115)||
	cr.Anim2Dead==(117)||cr.Anim2Dead==(116)||cr.Anim2Dead==(118)||cr.Anim2Dead==(119))
	)
	{
		
		if(isArmor)
		WearItem(cr,armor,(((10000)-armor.Deterioration)/5)*((IsT4Item(armor)&&cr.IsPlayer())?GetGvar((62008)):1));
		if(isHelmet)
		WearItem(cr,helmet,(((10000)-helmet.Deterioration)/5)*((IsT4Item(helmet)&&cr.IsPlayer())?GetGvar((62008)):1));
		
	}
	
	if(isArmor)
	{
		items.insertLast(armor);
		
	}
	if(isHelmet)
	{
		items.insertLast(helmet);
		
	} 
	
	if(cr.Param[(84)]<0&&cr.IsNpc()&&(@killer!=null))
	{
		for(uint i=0,j=items.length();i<j;i++)
		if(items[i].GetType()==(1)&&items[i].CritSlot!=(0))
		{
			
			if((((items[i].Flags)&((0x00100000)))!=0)||(((items[i].Flags)&((0x00080000)))!=0))
			DeleteItem(items[i]);
			else
			cr.MoveItem(items[i].Id,1,(0));
			
		}
	}  
	
	if(!(cr.Param[(532)]>0)&&(@killer!=null)&&killer.Param[(89)]!=(203))
	{
		
		uint mappid=0;
		if((@cr.GetMap()!=null))
		mappid=cr.GetMap().GetProtoId(); 
		
		if(IsEncounterMap(cr.GetMap())||mappid==(45)||mappid==(70)||mappid==(221)||mappid==(137))
		{
			{};
			array<Critter@>crits;
			uint num=cr.GetCritters(true,(0x01)|(0x20),crits);
			
			for(uint i=0;i<num;i++)
			{
				
				if((cr.IsPlayer()||IsHumanoid(cr))&&IsHumanoid(crits[i])&&crits[i].GetPlanes((30),null)==0&&(crits[i].IsNpc()&&!(((crits[i].Param[(534)]&((0x00000020)))!=0))))
				{
					string scriptName="";
					if(crits[i].GetScriptId()>0)
					scriptName=GetScriptName(crits[i].GetScriptId()); 
					
					if(crits[i].GetScriptId()==0||!(scriptName=="caravans@_CaravanGuard"||scriptName=="caravans@_CaravanDriver"))
					{
						{};
						AddWalkPlane(crits[i],0,(30),cr.Id,cr.HexX,cr.HexY,6,true,1);
						break;
					}
				}
			}
		}
		
	}
	
	if((@killer!=null)&&killer.IsPlayer())
	{ 
		
		if(cr.Param[(67)]==(2))
		{
			uint8 current=killer.Param[(485)];
			if(current<200)
			{
				killer.ParamBase[(485)]=current+1;
			}
		}
		
	}
	
	SetReplicationTime(cr); 
	
	if(cr.IsNpc()&&(@killer!=null)&&(@cr!=null))
	{
		cr.DropPlanes();
		
	} 
	
	if(cr.IsNpc())
	{
		
		TownCitizenKilled(cr,killer);
		
		if((@map!=null)&&(cr.CrType==(15))&&IsBase(map))
		cr.ParamBase[(84)]=(-2);
		
		if((@map!=null)&&IsCave(map))
		AddCrittersKilled();
		
		if((@map!=null))
		ProcessDeath(map,cr,killer);
		
	}
	else if(cr.IsPlayer())
	{
		
		if((@map!=null))
		{
			
			array<Critter@>followers;
			uint num=GetFollowers(cr,map,followers);
			for(uint i=0;i<num;i++)
			{
				
				if(map.GetLocation().IsEncounter())
				{
					if(!Flee(followers[i]))
					{
						followers[i].ParamBase[(925)]=(2);
						followers[i].ParamBase[(518)]=0;
						
					}
				}
				else
				{
					if(followers[i].GetMapId()!=0&&(IsTent(map)||IsBase(map)||!Flee(followers[i])))
					followers[i].ParamBase[(925)]=(2);
					
				}
			}
			
			cr.SendMessage((1012),cr.Id,(2));
			
			if(IsCave(map))
			AddPlayerDeaths(); 
			
			if((@killer!=null))
			{
				int locPid=map.GetLocation().GetProtoId();
				
				if((locPid==(40)||
				locPid==(41)||
				locPid==(42)||
				locPid==(43)||
				locPid==(45)||
				locPid==(46)||
				locPid==(47)||
				locPid==(48))
				&&
				(cr.IsPlayer()&&cr.GetAccess()==(0)&&
				killer.IsPlayer()&&killer.GetAccess()==(0))
				)
				{
					
					Broadcast_Message(
					"Player "+killer.Name+"("+killer.Id+") killed "+
					cr.Name+"("+cr.Id+") at respawn point (map "+map.Id+")",
					0,((0x00000001)),true
					);
				}
			}
		}
		
	}             
	
	if(cr.Param[(781)]>0&&cr.IsPlayer()&&(@killer!=null))
	cr.ParamBase[(781)]=0;
	if(cr.Param[(782)]>0&&cr.IsPlayer()&&(@killer!=null))
	cr.ParamBase[(782)]=0;
	if(cr.Param[(783)]>0&&cr.IsPlayer()&&(@killer!=null))
	cr.ParamBase[(783)]=0;
	if(cr.Param[(784)]>0&&cr.IsPlayer()&&(@killer!=null))
	cr.ParamBase[(784)]=0;
	if(cr.Param[(785)]>0&&cr.IsPlayer()&&(@killer!=null))
	cr.ParamBase[(785)]=0;
	if(cr.Param[(786)]>0&&cr.IsPlayer()&&(@killer!=null))
	cr.ParamBase[(786)]=0;
	
	int bt=cr.Param[(67)];
	
	if((@killer!=null))
	{
		
		if(killer.Param[(562)]>0&&(bt==(0)||bt==(1)||bt==(2)||bt==(4)||bt==(3)))
		{
			
			addhumanparts(cr);
			
		}
		
	}  
	
} 

void addhumanparts(Critter&item)
{
	
	if(!(@item!=null))
	return;
	
	switch(Random(1,6))
	{
		case 1:{item.AddItem((25592),1);break;}
		case 2:{item.AddItem((25593),1);break;}
		case 3:{item.AddItem((25594),1);break;}
		case 4:{item.AddItem((25595),1);break;}
		case 5:{item.AddItem((25596),1);break;}
		case 6:{item.AddItem((25597),1);break;}
	}
	
}
uint e_DeathSpeech(array<uint>@values)
{
	if(!(@values!=null)||values.length()<1)
	return(0);
	
	Critter@cr=GetCritter(values[0]);
	if(!(@cr!=null))
	return(0);
	
	string[]death=
	{
		"4",
		"5",
		"6",
		"dth2",
		"jdd1",
		"jdd3",
		"jdd4",
		"jdd6"
		"7",
	};
	
	PlaySound(cr,"sound\\speech\\narrator\\nar_"+death[Random(0,death.length()-1)]+".acm");
	
	return(0);
}  

void critter_respawn(Critter&cr)
{
	speedboost(cr);
	
}
import bool IsCompanion(Critter&follower)from"follower";
uint e_check(array<uint>@mobdata)
{
	Critter@cr=GetCritter(mobdata[0]);
	if(cr.ParamBase[(527)]==0)
	return 0;
	if(cr.GetMap().GetProtoId()==(16)||cr.GetMap().GetProtoId()==(45))
	{
		array<uint>filldata={cr.Id};
		return CreateTimeEvent(((__FullSecond)+(((100)*__TimeMultiplier))),"e_check",filldata,false);
	}
	else
	{
		cr.ParamBase[(89)]=0;
		cr.ParamBase[(532)]=0;
		cr.ParamBase[(511)]=0;
		cr.ParamBase[(527)]=0;
		cr.ParamBase[(139)]=0;
		return 0;
	}
}
uint e_preseason(array<uint>@mobdata)
{
	GetCritter(mobdata[0]).TransitToMap(254,0,false);
	return 0;
} 

void map_critter_in(Map&map,Critter&cr)
{
	speedboost(cr);
	SetWalkRunTimeForNpcs(map,0); 
	
	Location@loc=map.GetLocation();
	array<uint>filldata={cr.Id};
	array<Critter@>critters;
	if(map.GetLocation().IsTent()||map.GetLocation().IsBase())
	cr.ParamBase[(1183)]=cr.Param[(363)];
	else cr.ParamBase[(1183)]=0;
	uint n=map.GetCritters(0,(0x20)|(0x03),critters);
	for(uint i=0;i<n;i++)
	{
		
		if((@critters[i]!=null)&&!IsCompanion(critters[i])&&critters[i].Param[(139)]<6&&critters[i].Param[(104)]!=760&&critters[i].Param[(104)]!=741)
		{
			cr.ParamBase[(139)]=critters[i].Param[(139)];
			break;
		}
	}
	if(IsCompanion(cr)&&cr.ParamBase[(527)]>0&&!cr.IsPlayer())
	CreateTimeEvent(((__FullSecond)+(((10)*__TimeMultiplier))),"e_check",filldata,false);
	
	if(cr.IsPlayer())
	{
		
		cr.ParamBase[(184)]=0;
		cr.ParamBase[(185)]=0;
		cr.ParamBase[(186)]=0;
	}
	if(cr.IsPlayer())
	if(map.GetLocation().IsTent()||map.GetLocation().IsBase())
	{
		uint16 year=0,month=0,day=0,dayofweek=0,hour=0,minute=0,second=0;
		GetGameTime(__FullSecond,year,month,day,dayofweek,hour,minute,second);
		file f;
		f.open("logs/baseenter.txt","w");
		f.writeString(day+"."+month+" "+cr.Name+" Enter tent/base ID: "+map.Id);
		f.close();
	} 
	
	if(cr.IsPlayer()||(((cr.Param[(534)]&((0x00000020)))!=0)))
	{
		
		if(loc.IsEncounter())
		{
			if((cr.IsPlayer()&&cr.GetAccess()==(0)))
			TryStartEncounterMobWave(map);
			
			if(map.IsTurnBasedAvailability()&&map.IsTurnBased()&&cr.IsPlayer())
			cr.ParamBase[(75)]=0;
		}
		else if(IsTent(map)||IsBase(map))
		{
			cr.ParamBase[(252)]=(((uint(cr.Param[(252)]))>((__FullSecond)+(((20)*__TimeMultiplier))))?(uint(cr.Param[(252)])):((__FullSecond)+(((20)*__TimeMultiplier))));
		}
	}
	
	if(cr.EventExtMapIn(map))
	return;
	if(cr.IsPlayer()&&cr.GetAccess()<(1))
	map.SetData((6),(__FullSecond));
	
	if(cr.IsPlayer()&&IsFlaggedAsIllegal(cr))
	cr.SayMsg((11),(0),(4501));
	
	if((((cr.Param[(534)]&((0x00000020)))!=0)))
	{
		if(IsTown(map))
		PutAwayItems(cr);
		cr.ParamBase[(934)]=0;
	}
	
	if(GetLvar(cr,(4125))==0)
	SetSpectator(cr,false);
	
	if(((map.GetData((10))&((0x00000004)))!=0)&&(GetLvar(cr,(4125))==0))
	SetSpectator(cr,true);
	
	if((cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&(((cr.Param[(534)]&((0x00000008)))!=0)))
	{
		cr.SetBagRefreshTime(1);
		int bagbug=cr.GetBagRefreshTime();
	}
	else if((cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))))
	{
		if(map.GetLocation().GetProtoId()==(8)||map.GetLocation().GetProtoId()==(19))
		cr.SetBagRefreshTime(60);
		else
		cr.SetBagRefreshTime(360);
		int bagbug=cr.GetBagRefreshTime();
	}
	if((cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&IsTown(cr.GetMap()))
	
	{
		uint bt=cr.Param[(67)];
		
		if(bt==(0)||bt==(1)||bt==(2)||bt==(4)||bt==(3))
		{
			cr.ParamBase[(84)]=((10)*60);
		}
	}  
	
	if(cr.IsPlayer())
	{
		WorldmapUpdatePlayer(cr);     
		
		if(cr.GetAccess()>(0)&&(((((map.GetData((9))))&((0x80000000)))!=0)))
		{
			cr.Say((11),"Warning: This map is not legit (players can use not-legit items here).");
		}
	} 
	
	GMTrack(cr.Id,"TARGET has entered map"+cr.GetMapId());
	
	if(GetLvar(cr,(4125))==1&&cr.IsPlayer())
	LogAction(cr,GetCritterInfo(cr)+" has entered map "+cr.GetMapId());
	
	if(cr.IsPlayer())
	{
		GreetPlayer(cr,map);
		XFireClient_Update(cr);
		
		uint16 locPid=loc.GetProtoId();     
		
		if((locPid==(40)||
		locPid==(41)||
		locPid==(42)||
		locPid==(43)||
		locPid==(45)||
		locPid==(46)||
		locPid==(47)||
		locPid==(48))&&
		cr.GetAccess()==(0)
		)
		{
			
		}
	}                                  
	
} 

uint e_refresh_fov(uint[]@values)
{
	Critter@cr=GetCritter(values[0]);
	GameVar@spawn_blocker=GetLocalVar((62004),values[0]);
	if((@spawn_blocker!=null))
	{
		Item@block=::GetItem(spawn_blocker.GetValue());
		if((@block!=null))
		DeleteItem(block);
		
		spawn_blocker=0;
	}
	if((@cr!=null)&&cr.IsPlayer())
	{     
		
		return 5;
	}
	return 0;
}   

void map_critter_out(Map&map,Critter&cr)
{
	speedboost(cr); 
	
	if((((((map.GetData((9))))&((0x80000000)))!=0))&&(cr.IsNpc()||(cr.IsPlayer()&&cr.GetAccess()==(0))))
	{
		
		Map@newMap=cr.GetMap();
		if(!(@newMap!=null)||(!((((newMap.GetData((9))))&((0x80000000)))!=0)))
		{
			RemoveNotLegit(cr);
		}
	}
	
	if(cr.IsPlayer())
	{
		cr.ParamBase[(184)]=0;
		cr.ParamBase[(185)]=0;
		cr.ParamBase[(186)]=0;
	}
	
	if(cr.EventExtMapOut(map))
	return;
	if(GetLvar(cr,(4125))==0)
	SetSpectator(cr,false);
	
	RemoveWorkbenches(cr);
	
	GMTrack(cr.Id,"TARGET has entered the worldmap");
	
	if(GetLvar(cr,(4125))==1)
	LogAction(cr,GetCritterInfo(cr)+" has entered worldmap"); 
	
	if(!cr.IsDead())
	{
		array<Critter@>crits;
		int n=GetFollowers(cr,map,crits);
		for(int i=0;i<n;i++)
		{
			if(!crits[i].IsLife())
			{
				string cond=crits[i].Cond==(2)?"unconscious":"dead";
				cr.Say((11),"You've left your "+cond+" follower "+GetLexem(crits[i],"$name")+" behind.");
				continue;
			}
			
			if(crits[i].Param[(238)]>0)
			{
				cr.Say((11),"You've left behind your follower "+GetLexem(crits[i],"$name")+", who is still fighting.");
				continue;
			}
			
			if(!(crits[i].FollowerVar[(925)]==(0)||crits[i].FollowerVar[(925)]==(1)))
			{
				cr.Say((11),"You've left your follower "+GetLexem(crits[i],"$name")+" behind.");
				continue;
			}
			
			crits[i].ErasePlane((2),true);
			crits[i].ErasePlane((1),true);
			crits[i].ErasePlane((0),true);
			if(cr.GetMapId()!=0)
			crits[i].TransitToMap(cr.GetMapId(),cr.HexX,cr.HexY,crits[i].Dir);
			else
			{
				array<Critter@>critsOnGlobal=cr.GetGlobalGroup();
				if(critsOnGlobal.length<10)crits[i].TransitToGlobalGroup(cr.Id);
			}
		}
	}
	
	if(cr.IsPlayer())
	{
		XFireClient_Update(cr);
		if(cr.GetMapId()==0)
		{
			ITown@town=RetrieveTown(cr);
			if((@town!=null))
			FlushInfluenceBuffer(cr,town);  
			
			Location@loc=map.GetLocation();
			if(!loc.IsNotValid)
			{      
				
				if(IsDisposableEncounter(loc)&&Random(0,2)==0)
				{
					RecycleEncounter(loc);
				}
				
			}
			
			array<Critter@>@players=WorldmapGetPlayers(((cr.WorldX)/(50)),((cr.WorldY)/(50)));
			string characters;
			if(players.length()-1>0)
			{
				characters+="Other characters on worldmap in zone: ";
				for(uint i=0,j=players.length();i<j;i++)if(cr.Id!=players[i].Id)characters+=""+(IsLexem(players[i],"$@")?GetLexem(players[i],"$@"):players[i].Name)+",";
				cr.Say((11),characters);
			}
			
		}
	}
	if(cr.IsPlayer())
	check_fast_relog(cr.Id,map.Id);
}

void check_fast_relog(uint cr_id,uint map_id)
{
	
	if(IsTent(GetMap(map_id))||IsBase(GetMap(map_id)))
	return;
	array<uint>filldata={cr_id,map_id};
	
	CreateTimeEvent(((__FullSecond)+(((180)*__TimeMultiplier))),"e_check_fr",filldata,false);
	
}

uint e_check_fr(array<uint>@values)
{
	
	Map@map=GetMap(values[1]);
	if(!(@map!=null))
	return 0;
	Location@loc=map.GetLocation();
	array<Map@>maps;
	array<Critter@>players;
	if(!(@loc!=null))
	return 0;
	loc.GetMaps(maps);
	for(uint i=0;i<maps.length();i++)
	if((@maps[i]!=null))
	maps[i].GetCritters(0,(0x0F)|(0x10),players);
	
	for(uint i=0;i<players.length();i++)
	if((@players[i]!=null))
	if(values[0]==players[i].Id)
	return 0;
	
	file fr;
	fr.open("logs/fr/"+loc.Id+"_"+values[0]+".txt","w");
	fr.writeString(" ");
	fr.close(); 
	
	return 0;
}  

void karma_voting(Critter&crFrom,Critter&crTo,bool valUp)
{     
	
	int crId=int(crTo.Id);                                    
	
}    

uint item_cost(Item&item,Critter&cr,Critter&npc,bool buy)
{
	return GetItemCost(item,cr,npc,buy);
}   

bool items_barter(array<Item@>&saleItems,array<uint>&saleItemsCount,array<Item@>&buyItems,array<uint>&buyItemsCount,Critter&player,Critter&npc)
{
	
	if(player.GetMapProtoId()==(3))
	{
		player.Say((11),"You can't trade here.");
		return false;
	}
	
	if((((npc.Param[(534)]&((0x00000010)))!=0)))
	{
		
		int profit=0;
		for(uint i=0,j=saleItems.length();i<j;i++)
		{
			profit+=GetItemCostPlain(saleItems[i],player,npc)*saleItemsCount[i];
		}
		for(uint i=0,j=buyItems.length();i<j;i++)
		{
			profit-=GetItemCostPlain(buyItems[i],player,npc)*buyItemsCount[i];
		}
		ProcessProfitReputation(player,(npc.Param[(106)]),profit);
		{}; 
		
		string npcname=GetScriptName(npc.GetScriptId());
		for(uint i=0,j=saleItems.length();i<j;i++)
		{
			uint value=GetItemCost(saleItems[i],player,npc,true);
			
			dbLog("log_items_barter",""+player.Id+"|"+npcname+"|"+saleItems[i].GetProtoId()+"|"+saleItemsCount[i]+"|"+value+"|1");
		}
		for(uint i=0,j=buyItems.length();i<j;i++)
		{
			uint value=GetItemCost(buyItems[i],player,npc,false);
			dbLog("log_items_barter",""+player.Id+"|"+npcname+"|"+buyItems[i].GetProtoId()+"|"+buyItemsCount[i]+"|"+value+"|0");
		}
	}
	return true;
}
import void _weapon_perk(Item&item,bool firstTime)from"item_level";
import void _armor_perk(Item&item,bool firstTime)from"item_level";

void items_crafted(array<Item@>&items,array<uint>&itemsCount,array<Item@>&resources,Critter&crafter)
{
	uint8 multiplier=(((crafter.ParamBase[(181)])>(99))?(99):(((crafter.ParamBase[(181)])<(1))?(1):(crafter.ParamBase[(181)])));
	if(crafter.ParamBase[(183)]>0)
	multiplier=(((crafter.ParamBase[(183)])>(100))?(100):(((crafter.ParamBase[(183)])<(1))?(1):(crafter.ParamBase[(183)])));
	
	array<uint16>recipePids;
	array<uint>recipeCnt;
	
	if(multiplier>1)
	{
		GetItemRecipe(items[0].GetProtoId(),recipePids,recipeCnt);
	}
	
	for(uint8 m=0;m<multiplier;++m)
	{
		if(m>0)
		{
			for(uint i=0,j=items.length();i<j;i++)
			{
				@items[i]=crafter.AddItem(items[i].GetProtoId(),itemsCount[i]);
			}
			for(uint ri=0,rj=resources.length();ri<rj;ri++)
			{
				
				if((resources[ri].GetType()==(3)&&!resources[ri].IsStackable())||resources[ri].GetType()==(1))
				{
					uint16 oldPid=resources[ri].GetProtoId();
					if(m>1)
					{
						MoveItem(resources[ri],1,crafter.GetMap(),1,1);
						DeleteItem(resources[ri]);
					}
					Item@res=crafter.GetItem(oldPid,-1);
					if((@res!=null))
					{
						@resources[ri]=res;
					}
				}
			}
		}
		
		for(uint ii=0,jj=items.length();ii<jj;ii++)
		{
			
			Item@item=items[ii];
			if(item.GetType()==(3)&&item.Proto.Weapon_MaxAmmoCount>0)
			{
				item.AmmoCount=0;
				item.Update();
			}
			string@crafterName=""+crafter.Name;
			int craftexp=Random(1,2500)*multiplier;
			int craftmulti=crafter.Param[(6)]*10+crafter.Param[(4)]*3+crafter.Param[(216)];
			if(crafter.Param[(357)]>0)craftmulti+=crafter.Param[(4)]*5;
			craftmulti/=100;
			item.Val0=craftexp*craftmulti;
			if(!item.IsStackable())
			SetLexem(item,"$crafter",crafterName);
			ApplyTimeout(items,itemsCount,resources,crafter);
			if(item.GetType()==(1)&&!item.IsStackable())
			{
				AddScore(crafter,(24),1);
				_armor_perk(item,false);
				
			}
			else
			if(item.GetType()==(3)&&!item.IsStackable())
			{
				AddScore(crafter,(25),1);
				_weapon_perk(item,false);
			}
			if(IsT4Item(item))
			{
				AddScore(crafter,(57),1);
				if(crafter.IsPlayer())
				{
					uint16 year=0,month=0,day=0,dayofweek=0,hour=0,minute=0,second=0;
					GetGameTime(__FullSecond,year,month,day,dayofweek,hour,minute,second);
					file f;
					f.open("logs/t4craft.txt","w");
					f.writeString(day+"."+month+" "+crafter.Name+" crafted T4 "+item.Id);
					f.close();
				} 
				
			}
			
			for(uint i=0,j=resources.length();i<j;i++)
			{
				
				Item@item=resources[i];
				if(item.GetType()==(3)&&item.Proto.Weapon_MaxAmmoCount>0)
				{
					if(item.AmmoCount>0)
					{
						crafter.AddItem(item.AmmoPid,item.AmmoCount);
						item.AmmoCount=0;
						item.Update();
					}
				}
			}
			
			if(m>0&&m==multiplier-1)
			{
				for(uint ri=0,rj=resources.length();ri<rj;ri++)
				{
					if((resources[ri].GetType()==(3)&&!resources[ri].IsStackable())||resources[ri].GetType()==(1))
					{
						DeleteItem(resources[ri]);
					}
				}
			}
			
			if(m>0)
			{
				for(uint i=0,j=recipePids.length();i<j;i++)
				{
					Item@res=crafter.GetItem(recipePids[i],-1);
					if((@res!=null))
					{
						if(!((res.GetType()==(3)&&!res.IsStackable())||res.GetType()==(1)))
						{
							if(res.IsStackable())
							{
								if(res.GetCount()>recipeCnt[i])
								{
									res.SetCount(res.GetCount()-recipeCnt[i]);
								}
								else
								DeleteItem(res);
							}
							else
							DeleteItem(res);
						}
					}
				}
			}
		}
	}
}  

bool FovCheck(Critter&cr,Critter&opponent)
{
	uint16 cx=cr.HexX;
	uint16 cy=cr.HexY;
	uint16 ox=opponent.HexX;
	uint16 oy=opponent.HexY;
	
	uint16 dist=GetDistantion(cx,cy,ox,oy);
	uint16 range=20+3*cr.Param[(1)]+6*cr.Param[(315)]+11*cr.Param[(337)]+11*cr.Param[(340)]+cr.Param[(353)]>0?cr.Param[(14)]:0;
	if(dist>range)
	return false; 
	
	uint8 dir=GetDirection(cx,cy,ox,oy);
	dir=(dir>cr.Dir)?dir-cr.Dir:cr.Dir-dir;
	
	uint16 nrange=range;
	
	if(dir==0)
	nrange-=nrange*__LookDir0/100;
	else if(dir==5||dir==1)
	nrange-=nrange*__LookDir1/100;
	else if(dir==4||dir==2)
	nrange-=nrange*__LookDir2/100;
	else
	nrange-=nrange*__LookDir3/100;
	
	if(dist>nrange)
	return false;
	else
	return true;
}   

void player_levelup(Critter&player,uint skillIndex,uint skillUp,uint perkIndex)
{
	if(skillIndex>=(__SkillBegin)&&skillIndex<=(__SkillEnd))
	{
		for(;skillUp!=0;skillUp--)
		{
			
			int skillVal=player.ParamBase[skillIndex]; 
			
			if(skillVal>=(__SkillMaxValue))
			break;
			
			bool skillcap=false;
			switch(skillIndex)
			{
				case(200):if(player.ParamBase[(200)]>=300+player.ParamBase[(1109)]+player.ParamBase[(4)])skillcap=true;break;
				case(201):if(player.ParamBase[(201)]>=300+player.ParamBase[(1110)]+player.ParamBase[(4)])skillcap=true;break;
				case(202):if(player.ParamBase[(202)]>=300+player.ParamBase[(1111)]+player.ParamBase[(4)])skillcap=true;break;
				case(203):if(player.ParamBase[(203)]>=300+player.ParamBase[(1112)]+player.ParamBase[(4)])skillcap=true;break;
				case(205):if(player.ParamBase[(205)]>=300+player.ParamBase[(1114)]+player.ParamBase[(4)])skillcap=true;break;
				case(208):if(player.ParamBase[(208)]>=300+player.ParamBase[(1117)]+player.ParamBase[(4)])skillcap=true;break;
				case(214):if(player.ParamBase[(214)]>=300+player.ParamBase[(1123)]+player.ParamBase[(4)])skillcap=true;break;
				case(204):if(player.ParamBase[(204)]>=200+player.ParamBase[(1113)])skillcap=true;break;
				case(206):if(player.ParamBase[(206)]>=200+player.ParamBase[(1115)]+player.ParamBase[(4)])skillcap=true;break;
				case(207):if(player.ParamBase[(207)]>=200+player.ParamBase[(1116)]+player.ParamBase[(4)])skillcap=true;break;
				case(209):if(player.ParamBase[(209)]>=200+player.ParamBase[(1118)]+player.ParamBase[(4)])skillcap=true;break;
				case(210):if(player.ParamBase[(210)]>=200+player.ParamBase[(1119)]+player.ParamBase[(4)])skillcap=true;break;
				case(217):if(player.ParamBase[(217)]>=200+player.ParamBase[(1126)]+player.ParamBase[(4)])skillcap=true;break;
				case(213):if(player.ParamBase[(213)]>=200+player.ParamBase[(1122)]+player.ParamBase[(4)])skillcap=true;break;
				case(212):if(player.ParamBase[(212)]>=200+player.ParamBase[(1121)]+player.ParamBase[(4)])skillcap=true;break;
				case(211):if(player.ParamBase[(211)]>=150+player.ParamBase[(1120)]+player.ParamBase[(4)])skillcap=true;break;
				case(215):if(player.ParamBase[(215)]>=150+player.ParamBase[(1124)]+player.ParamBase[(4)])skillcap=true;break;
				case(216):if(player.ParamBase[(216)]>=150+player.ParamBase[(1125)]+player.ParamBase[(4)]+player.Param[(357)]*50)skillcap=true;break;
			}
			if(skillcap)break;
			
			int needPoints=1;
			
			if(skillVal>650)
			needPoints=3200;
			else if(skillVal>625)
			needPoints=1600;
			else if(skillVal>600)
			needPoints=800;
			else if(skillVal>575)
			needPoints=400;
			else if(skillVal>550)
			needPoints=200;
			else if(skillVal>525)
			needPoints=100;
			else if(skillVal>500)
			needPoints=50;
			else if(skillVal>475)
			needPoints=40;
			else if(skillVal>450)
			needPoints=30;
			else if(skillVal>425)
			needPoints=25;
			else if(skillVal>400)
			needPoints=20;
			else if(skillVal>375)
			needPoints=15;
			else if(skillVal>350)
			needPoints=10;
			else if(skillVal>325)
			needPoints=9;
			else if(skillVal>300)
			needPoints=8;
			else if(skillVal>275)
			needPoints=7;
			else if(skillVal>250)
			needPoints=6;
			else if(skillVal>225)
			needPoints=5;
			else if(skillVal>200)
			needPoints=4;
			else if(skillVal>175)
			needPoints=3;
			else if(skillVal>150)
			needPoints=2;
			
			if(player.ParamBase[(78)]<needPoints)
			break;
			
			skillVal++;   
			
			player.ParamBase[skillIndex]=skillVal;
			player.ParamBase[(78)]-=needPoints;
		}
	}
	else if(perkIndex>=(__PerkBegin)&&perkIndex<=(__PerkEnd))
	{
		if(PerkCheck(player,perkIndex,false))
		{
			if(player.IsPlayer())
			FLog((16),player.Name+"("+player.Id+") perk: "+perkIndex+" at level "+player.Param[(77)]);
			player.ParamBase[perkIndex]++;
			player.ParamBase[(79)]--;
		}
	}
	
}                                                                   

void turn_based_begin(Map&map)
{
	SetWalkRunTimeForNpcs(map,30);
	array<Critter@>critters;
	array<Critter@>players;
	uint count=map.GetCritters(0,(0x03),critters);
	uint playersCount=map.GetCritters(0,(0x03),players);
	for(uint a=0;a<players.length();a++)
	{
		speedboost(players[a]);
		if(!critters[a].IsPlayer()&&critters[a].Param[(72)]<1)
		critters[a].ToDead(100,null);
	}  
	
	if(map.TurnBasedRound>0)
	{
		array<uint>crittersIds;
		map.GetTurnBasedSequence(crittersIds);
		
		bool continueBattle=false;
		if(crittersIds.length()>=2)
		{
			for(uint i=0,j=crittersIds.length();i<j;i++)
			{
				Critter@cr=::GetCritter(crittersIds[i]);
				if((@cr!=null)&&cr.Param[(120)]>=1)
				{
					for(uint b=0;b<2;b++)
					{
						InjureCritter(cr,(Random(10,20)),(3),0,cr.Param[(188)]);
						cr.ParamBase[(120)]--;
					}
				}
				if(!(!(@cr!=null)||cr.IsDead()||
				(cr.IsNpc()&&cr.GetPlanes((1),null)==0)||
				(cr.IsPlayer()&&(cr.Param[(515)]!=0))))
				{
					continueBattle=true;
					break;
				}
			}
		}
		
		if(!continueBattle)
		map.EndTurnBased();
	}
} 

void turn_based_end(Map&map)
{
	SetWalkRunTimeForNpcs(map,0);
	array<Critter@>critters;
	uint count=map.GetCritters(0,(0x03),critters);
}

void SetWalkRunTimeForNpcs(Map&map,uint time)
{
	Critter@[]critters;
	map.GetCritters(0,(0x20)|(0x03),critters); 
	
	for(uint i=0;i<critters.length();i++)
	{
		if((@critters[i]!=null))
		{
			critters[i].ParamBase[(117)]=time;
			
		}
	}
}  

void turn_based_process(Map&map,Critter&cr,bool beginTurn)
{
	if(beginTurn)
	{
		if(cr.Param[(238)]==0)
		cr.ParamBase[(238)]=100000000;
		
		if(!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0))))
		SetLvar(cr,(60006),(__FullSecond));
		if(cr.Param[(384)]==0)
		{
			int heal=0;
			heal+=cr.Param[(13)]*(cr.Param[(382)]>0?2:1);
			if(cr.Param[(73)]>0)
			heal=heal*(0.50);
			cr.ParamBase[(72)]+=heal;
		}
		if(cr.ParamBase[(72)]>cr.Param[(7)])
		cr.ParamBase[(72)]=cr.Param[(7)];
		cr.ParamBase[(88)]=cr.Param[(87)];
		cr.ParamBase[(86)]=0;
		cr.ParamBase[(144)]=(int32((uint16(cr.HexX))|(uint32(uint16(cr.HexY)))<<16));
		if(map.TurnBasedRound>0)
		PlaySound(cr,"icombat1.acm"); 
		
		if(cr.IsPlayer())
		{
			if((cr.GetSocket()==-1)||!(cr.IsPlayer()&&cr.GetAccess()==(0)))
			{
				do{if(cr.GetMap().IsTurnBased()&&cr.Param[(75)]>0){cr.ParamBase[(75)]=0;cr.ParamBase[(88)]=0;}}while(false);
			}
		}
	}
	else
	{
		uint dist=GetDistantion(cr.HexX,cr.HexY,(uint16(cr.Param[(144)])),(uint16((uint32(cr.Param[(144)])>>16)&0xFFFF)));
		cr.ParamBase[(86)]=2*(dist+cr.Param[(75)])>=cr.Param[(8)]?1:0;
		if(cr.Param[(86)]<0)
		cr.ParamBase[(86)]=0;
		cr.ParamBase[(88)]=0;
		PlaySound(cr,"icombat2.acm");
	}
} 

void turn_based_sequence(Map&map,array<Critter@>&critters,Critter@firstTurnCrit)
{
	
	if((@firstTurnCrit!=null)&&(firstTurnCrit.IsDead()||firstTurnCrit.Param[(75)]<=0))
	@firstTurnCrit=null; 
	
	array<SequenceCritter>sequenceCritters;
	for(uint i=0,j=critters.length();i<j;i++)
	{
		Critter@cr=critters[i];
		if((@firstTurnCrit!=null)&&firstTurnCrit.Id==cr.Id)
		continue;
		if(cr.IsDead())
		continue;
		sequenceCritters.resize(sequenceCritters.length()+1);
		@sequenceCritters.last().critter=cr;
	} 
	
	SequenceCritterRandom=Random(0,1);
	sequenceCritters.sortDesc(); 
	
	critters.resize(0);
	if((@firstTurnCrit!=null))
	critters.insertLast(firstTurnCrit);
	for(uint i=0,j=sequenceCritters.length();i<j;i++)
	critters.insertLast(sequenceCritters[i].critter);
} 

int SequenceCritterRandom=0;
class SequenceCritter
{
	Critter@critter;
	int opCmp(SequenceCritter&in other)
	{
		bool result;
		Critter@cr1=critter;
		Critter@cr2=other.critter;
		int seq1=cr1.Param[(12)];
		int seq2=cr2.Param[(12)];
		if(seq1==seq2)
		{
			int ag1=cr1.Param[(5)];
			int ag2=cr2.Param[(5)];
			if(ag1==ag2)
			{
				int lk1=cr1.Param[(6)];
				int lk2=cr2.Param[(6)];
				if(lk1==lk2)
				{
					if(SequenceCritterRandom==0)
					result=cr1.Id>cr2.Id;
					else
					result=cr1.Id<cr2.Id;
				}
				else
				result=lk1>lk2;
			}
			else
			result=ag1>ag2;
		}
		else
		result=seq1>seq2;
		return result?int(1):int(-1);
	}
};  

void world_save(uint currentIndex,array<uint>&deleteIndexes)
{
	SaveAlertMaps(); 
	
	for(uint i=0;i<(4096);i++)
	{
		if(FactionExists(i))
		{    
			
			SaveFactionData(i);
		}
	} 
	
	for(uint i=0;i<(7);i++)
	{
		for(uint i=1;i<=(7);i++)
		{
			ITown@town=GetTown(i);
			town.SaveData();
		}
	} 
	
	SaveBankData(); 
	
	SaveBrahminPenData();
	
	SaveEventSpawns();
	
	SaveCarPriceData();  
	
	SaveNpcSchedules();  
	
	SaveCompanionData();  
	
	if(currentIndex==1)
	{
		deleteIndexes.resize(5);
		for(uint i=0;i<5;i++)
		deleteIndexes[i]=999999-i;
	}
	else if(currentIndex>4&&((currentIndex%24)!=0))
	{
		deleteIndexes.resize(1);
		deleteIndexes[0]=currentIndex-5;
	}
	
	SaveWeather(); 
	
	SaveBaseData();
	
	SaveBannedCharcters(); 
	
	FLog((14),"SAVE");
	
}  

bool player_registration(uint ip,string&name,uint&textMsg,uint&strNum)
{
	
	LoadConfig("config/GetAccess.cfg");
	
	string@reserved=GetConfigValue("config/GetAccess.cfg",name,"Reserved",false);
	
	if(!(@reserved!=null))
	{
		IConfigFile@config=GetConfigFile("config/GetAccess.cfg");
		if((@config!=null))
		{
			array<string>sections;
			config.GetSections(sections);
			if(sections.length()>0)
			{
				for(uint s=0;s<sections.length();s++)
				{
					string@alias=GetConfigValue("config/GetAccess.cfg",sections[s],"Nickname",false);
					if((@alias!=null)&&strlwr(name)==strlwr(alias))
					{
						@reserved=GetConfigValue("config/GetAccess.cfg",sections[s],"Reserved",false);
						break;
					}
				}
			}
		}
	}
	
	if((@reserved!=null))
	{
		if(reserved=="true")
		{
			
			textMsg=(3);
			strNum=1049;
			return(false);
		}
		else
		{
			
			IConfigSection@section=GetConfigSection("config/GetAccess.cfg",name,false);
			SetConfigValue("config/GetAccess.cfg",section.GetName(),"Reserved","true");
			SaveConfig("config/GetAccess.cfg");
			return(true);
		}
	}
	else
	{
		
		LoadConfig("config/ReservedNicknames.cfg");
		
		@reserved=GetConfigValue("config/ReservedNicknames.cfg","Reserved",name,false);
		
		if((@reserved!=null)&&reserved=="1")
		{
			
			textMsg=(3);
			strNum=1050;
			return(false);
		}
	}
	
	uint nameError=CheckPlayerName(name);
	if(nameError!=0)
	{
		textMsg=(3);
		strNum=nameError;
		return false;
	}
	return(true);
}  

bool player_login(uint ip,string&name,uint id,uint&textMsg,uint&strNum)
{
	CreateTimeEvent(((__FullSecond)+(((Random(1,2))*__TimeMultiplier))),"e_checkUID",id,false);
	
	for(uint i=0;i<BannedIDs.length();i+=2)
	{
		if(BannedIDs[i]==id)
		{
			
			textMsg=(3);
			strNum=1034;
			return false;
		}
	} 
	
	for(uint i=1;(i+1)<BannedIDs.length();i+=2)
	{
		if(BannedIDs[i]==ip)
		{
			
			textMsg=(3);
			strNum=1043;
			return false;
		}
	}
	
	Critter@player=GetCritter(id);
	if((@player!=null))
	{
		
		array<uint>permabanned={3523,1760,3375}; 
		
		if((!(player.GetSocket()==-1))&&player.GetIp()==ip)
		{
			player.Say((11),"Another connection from the same IP incoming, logging off.");
			player.Disconnect();
			textMsg=(0);
			strNum=400;
			return false;
		}
		else
		{
			UpdateFactionsInfo(player);
		}
		
		if((player.GetSocket()==-1))
		CreateTimeEvent(((__FullSecond)+(((5)*__TimeMultiplier))),"e_CritterInit_Broadcast",player.Id,false);
		CreateTimeEvent(__FullSecond+((3)*__TimeMultiplier),"e_CritterInit_SendFactionData",player.Id,false);
	}
	uint16 year=0,month=0,day=0,dayofweek=0,hour=0,minute=0,second=0;
	GetGameTime(__FullSecond,year,month,day,dayofweek,hour,minute,second);
	FLog((15),GetTimeString(__FullSecond)+" "+name+" "+IntToIp(ip));  
	
	return true;
}

uint e_checkUID(array<uint>@values)
{
	Critter@player=GetCritter(values[0]);
	if(!(@player!=null))
	return 0;
	
	FLog((15),player.Name+" uids: "+player.GetUID(0)+" "+player.GetUID(1)+" "+player.GetUID(2)+" "+player.GetUID(3)+" "+player.GetUID(4));
	
	if(player.GetUID(0)==-1695384756&&player.GetUID(1)==1963811384&&player.GetUID(2)==538997566&&player.GetUID(3)==-2147350824&&player.GetUID(4)==36866101)
	AddBan(player,player.Id,1,999999,"Umbra permban");
	return 0;
}
uint8 access_level(string&access)
{
	if(strlwr(access)=="admin")
	return((3));
	else if(strlwr(access)=="moder")
	return((2));
	else if(strlwr(access)=="tester")
	return((1));
	else
	return((0));
}

string access_level(uint8&access)
{
	switch(access)
	{
		case(3):
		return("admin");
		case(2):
		return("moder");
		case(1):
		return("tester");
		default:
		return("client");
	}
	return("client");
}  

bool player_getaccess(Critter&player,int access,string&password)
{
	FLog((6),"Access changed for player "+GetCritterInfo(player)+", from "+GetAuthString(player.GetAccess())+" to "+GetAuthString(access)+".");
	player.ParamBase[(187)]=access;
	SetLvar(player,(4125),1);
	player.RunClientScript("client_messages@_Listen",0,0,0,null,null);
	SetCritterEvents(player);
	Broadcast_CheckRequestHelpBuffer(player);
	return true;
}  

bool player_allowcommand(Critter@cr,string@adminPanel,uint8 command)
{
	if((@adminPanel!=null))
	return true;
	
	switch(command)
	{   
		
		case(12):
		case(14):
		case(16):
		case(15):
		case(13):
		case(10):
		
		break;   
		
		case(2):
		
		break; 
		
		case(35):
		case(34):
		if(cr.GetAccess()==(0)&&cr.Param[(301)]==42)
		{
			cr.Say((11),"You are not allowed to "+(command==(35)?"change password of":"delete")+" this character.");
			return(false);
		}
		
		return(true);
		
		case(1):
		case(11):
		return(true); 
		
		case(36):
		case(3):
		case(8):
		if(cr.GetAccess()>=(1))
		return(true);
		break; 
		
		case(33):
		case(30):
		case(4):
		case(7):
		case(6):
		case(37):
		case(5):
		case(9):
		case(31):
		case(25):
		case(20):
		if(cr.GetAccess()>=(2))
		return(true);
		break; 
		
		case(27):
		case(22):
		case(24):
		case(18):
		case(19):
		case(29):
		case(26):
		case(21):
		case(23):
		case(17):
		case(28):
		case(32):
		if(cr.GetAccess()>=(3))
		return(true);
		break;
		
		default:
		
		break;
	}
	
	cr.Say((11),"Unknown command.");
	return(false);
}

void server_log(string&message)
{
	
};

void CheckScripts(Critter&cr,int p0,int p1,int p2)
{
	array<Item@>items;
	uint num=cr.GetMap().GetItems(0,items);
	for(uint i=0;i<num;i++)
	{
		uint16 hx,hy;
		hx=hy=0;
		Map@map=items[i].GetMapPosition(hx,hy);
		uint id=items[i].GetScriptId();
		map.SetText(hx,hy,0,""+id+" : "+GetScriptName(id));
	}
	array<Critter@>crs;
	num=cr.GetMap().GetCritters(0,(0x0F)|(0x20),crs);
	
	for(uint i=0;i<num;i++)
	{
		uint id=cr.GetScriptId();
		crs[i].Say((1),""+id+" : "+GetScriptName(id));
	}
}

void CheckPids(Critter&cr,int p0,int p1,int p2)
{
	array<Critter@>critters;
	uint num=cr.GetMap().GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0;i<num;i++)
	critters[i].Say((1),"PID: "+critters[i].GetProtoId());
}

void CheckItems(Critter&cr,int p0,int p1,int p2)
{
	Item@it=cr.AddItem(1,1);
	cr.Say((11),""+it.Id);
}

void reprohang(Critter&cr,int p0,int p1,int p2)
{
	cr.ParamBase[305]=1<<32;
	cr.Say((11),"Done");
	cr.Say((11),"Param's value: "+cr.ParamBase[305]);
}

void spawnjunk(Critter&cr,int,int,int)
{
	Item@junk=cr.GetMap().AddItem(cr.HexX,cr.HexY,(98),1);
	junk.SetScript("prod_barrel_junk@_Junk");
}

void _TryUseSS(Critter&follower)
{
	if(!follower.IsLife())return;
	
	if(follower.CountItem((144))>0)
	{
		Item@item=follower.GetItem((144),-1);
		UseDrug(follower,item);
		follower.Animate(0,(28),null,true,true);
	}
	if(follower.CountItem((40))>0)
	{
		Item@item=follower.GetItem((40),-1);
		UseDrug(follower,item);
		follower.Animate(0,(28),null,true,true);
	}
	return;
}

void r_RaiseEnduranceHP(Critter&cr,Critter@unused)
{
	if(!(@cr!=null))
	return;
	
	int hpBonus=0;
	
	if(cr.Param[(2)]<10)
	{
		if((!((cr.Param[(2)])%2==0)))
		hpBonus+=16;
		else
		hpBonus+=16;
		
		hpBonus-=2;
		cr.ParamBase[(7)]+=hpBonus;
	}
}

uint e_KickMultilogs(array<uint>@EmptyArray)
{
	array<Critter@>OnlinePlayers;
	array<Critter@>PlayersToKick;
	GetAllOnlinePlayers(OnlinePlayers); 
	
	for(uint16 i=0;i<OnlinePlayers.length();i++)
	{
		PlayersToKick.resize(0);
		if((!(OnlinePlayers[i].GetSocket()==-1)))
		{
			uint16 connections=0;
			
			for(uint16 j=0;j<OnlinePlayers.length();j++)
			{
				if(OnlinePlayers[i].Id!=OnlinePlayers[j].Id&&match_UID(OnlinePlayers[i],OnlinePlayers[j])&&(!(OnlinePlayers[j].GetSocket()==-1)))
				{
					connections++;
					PlayersToKick.resize(connections);
					@PlayersToKick[connections-1]=@OnlinePlayers[j];
				}
			}
			connections++;
			PlayersToKick.resize(connections);
			@PlayersToKick[connections-1]=@OnlinePlayers[i];
			
			if(connections>4)
			{
				for(uint16 j=0;j<PlayersToKick.length();j++)
				{
					PlayersToKick[j].Say((11),"Too many connections. Disconnecting...");
					
					PlayersToKick[j].Disconnect();
				}
			}
		}
	}
	return((30)*__TimeMultiplier);
}
bool match_UID(Critter&cr,Critter&dual)
{
	if(cr.GetUID(0)==dual.GetUID(0)&&cr.GetUID(1)==dual.GetUID(1)&&cr.GetUID(2)==dual.GetUID(2)&&cr.GetUID(3)==dual.GetUID(3)&&cr.GetUID(4)==dual.GetUID(4))
	return true;
	
	return false;
	
}
bool LoadBannedCharacters()
{
	Serializator@BannedCharacters=@Serializator();
	BannedCharacters.Clear();
	
	if(!IsAnyData("BansData"))
	return false;
	
	if(!BannedCharacters.Load("BansData"))
	{
		return false;
	}
	
	BannedCharacters.Get(BannedIDs);
	
	Serializator@BanReasons=@Serializator();
	BanReasons.Clear();
	
	if(!IsAnyData("BansReason"))
	return false;
	
	if(!BanReasons.Load("BansReason"))
	{
		return false;
	}
	
	BanReasons.Get(BannedReason);  
	
	Serializator@BanEvent=@Serializator();
	BanReasons.Clear();
	
	if(!IsAnyData("BansEvents"))
	{
		BanEvents.resize(BannedIDs.length()/2);
	} 
	
	if(IsAnyData("BansEvents"))
	{
		if(!BanEvent.Load("BansEvents"))
		return false;
		
		BanEvent.Get(BanEvents);
	}
	
	uint16 banned=BannedIDs.length()/2,bannedIP=0,permban=0; 
	
	for(uint16 i=1;(i+1)<BannedIDs.length();i+=2)
	{
		if(BannedIDs[i]!=0)bannedIP++;
		if(BanEvents[i/2]==0)permban++;
	}  
	
	return true;
}

bool SaveBannedCharcters()
{
	uint16 banned=BannedIDs.length()/2,bannedIP=0,permban=0;
	
	for(uint16 i=1;(i+1)<BannedIDs.length();i+=2)
	{
		if(BannedIDs[i]!=0)bannedIP++;
		if(BanEvents[i/2]==0)permban++;
	} 
	
	Serializator@BannedCharacters=@Serializator();
	BannedCharacters.Clear();
	
	Serializator@BanReasons=@Serializator();
	BanReasons.Clear();
	
	Serializator@BanEvent=@Serializator();
	BanEvent.Clear();
	
	if(BanReasons.Set(BannedReason).Save("BansReason")&&BanEvent.Set(BanEvents).Save("BansEvents"))
	return BannedCharacters.Set(BannedIDs).Save("BansData"); 
	
	return false;
}
void AddBan(Critter&banner,int bannedid,int withip,int hours)
{
	AddBan(banner,bannedid,withip,hours,"Ask me...");
}

void AddBan(Critter&banner,int bannedid,int withip,int hours,string reasonwhy)
{
	string@bannedName=GetSafePlayerName(bannedid);
	if(bannedName=="[player not found]")
	{
		banner.Say((11),"Couldn't find player with ID <"+bannedid+">...");
		return;
	} 
	
	Critter@bannedPlayer=GetCritter(bannedid);
	
	if((@bannedPlayer!=null))
	if(withip==1&&bannedPlayer.GetIp()==banner.GetIp())
	{
		banner.Say((11),"It's your IP!");
		return;
	} 
	
	for(uint i=0;i<BannedIDs.length();i+=2)
	{
		
		if(BannedIDs[i]==uint(bannedid))
		{
			string alsoip=(BannedIDs[i+1]!=0?(", also with IP "+BannedIDs[i+1]):", but without IP");
			banner.Say((11),"This player is already banned by "+BannedReason[i]+" with reason: "+BannedReason[i+1]);
			if(withip==1)
			{
				if(!(@bannedPlayer!=null))
				{
					banner.Say((11),"Couldn't set ban for IP...");
					
				}
				else if((!(bannedPlayer.GetSocket()==-1)))
				{
					BannedIDs[i+1]=bannedPlayer.GetIp();
					banner.Say((11),"Whole IP addresses <"+bannedPlayer.GetIp()+"> are banned.");
					KickFromGame(bannedPlayer,true);
					KickFromGame(bannedPlayer.GetIp());
				}
				else if(bannedPlayer.Param[(543)]!=0)
				{
					BannedIDs[i+1]=bannedPlayer.Param[(543)];
					banner.Say((11),"Whole IP addresses <"+bannedPlayer.Param[(543)]+"> are banned.");
					KickFromGame(bannedPlayer.Param[(543)]);
				}
				else
				{
					banner.Say((11),"Unknown exceptions, couldn't ban this IP");
				}
			}
			
			return;
		}
		
	}
	
	uint16 newPosition=BannedIDs.length();
	BannedIDs.resize(newPosition+2);
	BannedReason.resize(newPosition+2);
	
	BannedIDs[newPosition]=bannedid;
	banner.Say((11),"Player "+bannedName+" ID: <"+bannedid+"> is banned...");
	if((@bannedPlayer!=null)&&withip==1)
	{
		if((!(bannedPlayer.GetSocket()==-1)))
		{
			BannedIDs[newPosition+1]=bannedPlayer.GetIp();
			banner.Say((11),"...with IP :"+bannedPlayer.GetIp());
			KickFromGame(bannedPlayer,true);
			KickFromGame(bannedPlayer.GetIp());
		}
		else
		{
			BannedIDs[newPosition+1]=bannedPlayer.Param[(543)];
			banner.Say((11),"...with IP :"+bannedPlayer.Param[(543)]);
		}
	}
	else if((@bannedPlayer!=null)&&withip==0)
	{
		if((!(bannedPlayer.GetSocket()==-1)))
		{
			BannedIDs[newPosition+1]=0;
			KickFromGame(bannedPlayer,false);
		}
		else
		{
			BannedIDs[newPosition+1]=0;
		}
	}
	
	if(withip==0)BannedIDs[newPosition+1]=0;
	if(!(@bannedPlayer!=null)&&withip==1)
	{
		banner.Say((11),"Couldn't receive current or last used IP address!");
		BannedIDs[newPosition+1]=0;
	}
	BannedReason[newPosition]=banner.Name;
	BannedReason[newPosition+1]=reasonwhy;
	BanEvents.resize((newPosition/2)+1);
	BanEvents[(newPosition/2)]=0;
	if(hours!=0)
	{
		array<uint>bandata={BannedIDs[newPosition],BannedIDs[newPosition+1]};
		BanEvents[(newPosition/2)]=CreateTimeEvent(((__FullSecond)+(((hours)*__TimeMultiplier*3600))),"e_RemoveBan",bandata,true);
	}
}

void KickFromGame(Critter&kickedPlayer,bool withBan)
{
	if(withBan)
	{
		kickedPlayer.Say((11),"You're banned!");
	}
	else
	{
		kickedPlayer.Say((11),"You're kicked from the game!");
	}
	kickedPlayer.Disconnect();
}

void KickFromGame(uint bannedIP)
{
	array<Critter@>OnlinePlayers;
	GetAllOnlinePlayers(OnlinePlayers);
	
	uint16 connections=0; 
	
	for(uint16 i=0;i<OnlinePlayers.length();i++)
	{
		if((!(OnlinePlayers[i].GetSocket()==-1))&&OnlinePlayers[i].GetIp()==bannedIP)
		{
			OnlinePlayers[i].Say((11),"Your IP address is banned!");
			OnlinePlayers[i].Disconnect();
		}
	}
}

uint e_RemoveBan(array<uint>@removeBanData)
{
	uint critId=removeBanData[0],critIp=removeBanData[1];
	int indx=-1; 
	
	if((indx=BannedIDs.find(critId))>=0)
	{
		BannedIDs.removeAt(indx);
		BannedIDs.removeAt(indx);
		BannedReason.removeAt(indx);
		BannedReason.removeAt(indx);
		BanEvents.removeAt(indx/2);
	}
	else
	{
		
	}
	
	return 0;
} 

void SetNewBanArray(Critter&cr,int,int,int)
{
	if((BannedIDs.length()/2)==BanEvents.length())
	{
		cr.Say((11),"It seems that everything is OK!");
	}
	else
	{
		cr.Say((11),"Setting up the new array...");
		BanEvents.resize(BannedIDs.length()/2);
		if((BannedIDs.length()/2)!=BanEvents.length())
		{
			cr.Say((11),"Setting up the new array...");
			if((BannedIDs.length()/2)==BanEvents.length())
			cr.Say((11),"Done - filled with "+BanEvents.length()+" IDs of event (0)");
			else
			cr.Say((11),"Couldn't fill with "+BanEvents.length()+" IDs of event (0)");
		}
	}
}

void ShowBanList(Critter&cr,int,int,int)
{
	ShowBanList(cr);
}

void ShowBanList(Critter&cr)
{
	if(BannedIDs.length()==0)
	{
		cr.Say((11),"List of bans is empty...");
		return;
	}
	
	for(uint16 i=0;i<BannedIDs.length();i+=2)
	{
		cr.Say((11),((i/2)+1)+". "+GetSafePlayerName(BannedIDs[i])+" ("+BannedIDs[i]+"), "+(BannedIDs[i+1]==0?"for character":"for IP address")+", "+(BanEvents[i/2]==0?"permanent":"for some time")+", by "+BannedReason[i]+" for "+BannedReason[i+1]);
	}
}

void RemoveBan(Critter&cr,int critId,int,int)
{
	RemoveBan(cr,critId);
}

void RemoveBan(Critter&cr,int critId)
{
	int indx=-1;
	
	if(BannedIDs.length()==0)
	{
		cr.Say((11),"List of bans is empty...");
		return;
	} 
	
	if((indx=BannedIDs.find(critId))>=0)
	{
		BannedIDs.removeAt(indx);
		BannedIDs.removeAt(indx);
		BannedReason.removeAt(indx);
		BannedReason.removeAt(indx);
		if(BanEvents[indx/2]!=0)
		EraseTimeEvent(BanEvents[indx/2]);
		BanEvents.removeAt(indx/2); 
		
		cr.Say((11),"Removed ban from player "+GetSafePlayerName(critId)+" <"+critId+">!");
	}
	else
	{
		cr.Say((11),"Can't find player "+GetSafePlayerName(critId)+" <"+critId+">!");
		
	}
}

string propermoney(Critter&cr)
{
	if(!(@cr!=null))
	return"";
	switch(cr.Param[(139)])
	{
		case 1:return"Dollars";
		case 2:return"Chips";
		case 3:return"Scrips";
		case 4:return"Pounds";
		case 5:return"Rings";
		default:return"Caps";
	}
	return"caps";
}
string properprefix(Critter&cr)
{
	if(!(@cr!=null))
	return"";
	switch(cr.Param[(139)])
	{
		case 1:return"Enclave ";
		case 2:return"Memory ";
		case 3:return"NCR ";
		case 4:return"Vault City ";
		case 5:return"Pull ";
		default:return"Bottle ";
	}
	return"Bottle";
}
void dlg_Caps(Critter&player,Critter@npc,string@text)
{
	if(!(@npc!=null))
	return;
	if(!(@player!=null))
	return; 
	
	SetLexem(npc,"$money",propermoney(npc));
	text+=("$money"+propermoney(npc)); 
	
	SetLexem(npc,"$prefix",properprefix(npc));
	
	text+=("$prefix"+properprefix(npc));    
	
}