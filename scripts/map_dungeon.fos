//
// FOnline: 2238
// Rotators
//
//

#include "_maps.fos"
#include "_vars.fos"
#include "_macros.fos"
#include "mapdata_h.fos"
#include "messages_h.fos"
#include "guard_h.fos"
#include "npc_common_h.fos"
#include "npc_planes_h.fos"
#include "utils_h.fos"

// npc roles (defines distance mob will attack from))
#define ROLE_DEFAULT      (0)
#define ROLE_AGRESSIVE    (1)
#define ROLE_PASSIVE      (2)
#define ISTOWN_ROLE_DEFAULT   (200)
#define ISTOWN_ROLE_AGRESSIVE (201)
#define ISTOWN_ROLE_PASSIVE   (202)

// useful variables
#define ALERTED           # (cr)           (cr.ParamBase[ST_VAR1]) // idle time is shorter if in that mode // note that it uses StatBase for read and write

// idle time in milseconds (normal is slower for performance issues)
#define IDLE_NORMAL       (1000)
#define IDLE_ALERTED      (500)

// =============================================
// Super Mutants / Critter
// =============================================
void _Mob(Critter& mob, bool firstTime)
{
    mob.ParamBase[MODE_NO_LOOT] = 1;
    mob.ParamBase[MODE_NO_DROP] = 1;
    mob.ParamBase[MODE_NO_STEAL] = 1;
    mob.ParamBase[MODE_UNLIMITED_AMMO] = 1;
    _CritSetExtMode(mob, MODE_EXT_MOB);
    mob.SetEvent(CRITTER_EVENT_IDLE, "_MobIdle");
	// commented by worldremaker bcs mobs are too agressive now
	/* mob.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_MobShowCritter");
	mob.SetEvent(CRITTER_EVENT_ATTACKED, "_MobAttacked");
	mob.SetEvent(CRITTER_EVENT_HIDE_CRITTER, "_MobHideCritter"); */
}

void _DontMove(Critter& mob, bool firstTime)
{
    _Mob(mob, firstTime);
    mob.SetEvent(CRITTER_EVENT_IDLE, "_MobIdle2");
}

// =============================================
// Mob script parts
// =============================================

/* void _MobShowCritter(Critter& mob, Critter& showCrit)
{
	if(!mob.IsLife())
		{
			mob.Wait(IDLE_NORMAL);
			return;
		}
		
	if(showCrit.IsPlayer() || !_CritHasExtMode(showCrit,MODE_EXT_MOB))	
	{
		AddAttackPlane(mob, AI_PLANE_ATTACK_PRIORITY, showCrit);
		ALERTED(mob) += 1;
	}
}

void _MobHideCritter(Critter& cr, Critter& hideCrit)
{
    if(hideCrit.IsPlayer())
        ALERTED(cr) -= 1;
}

bool _MobAttacked( Critter& mob, Critter& attacker )
{
		array<Critter@> players(0);
		array<Critter@> npc(0);
		array<Critter@> mobs(0);
		array<Critter@> nearMobs(0);
		Map@ map = mob.GetMap();
		uint PlayersNum = map.GetCritters(0, FIND_ONLY_PLAYERS | FIND_LIFE, players);
		uint NpcNum = map.GetCritters(0, FIND_ONLY_NPC | FIND_LIFE, npc);				//Get NPC'c in all map
		uint MobsNum = 0;
		
		if(npc.length() > 0)															//Separate mobs from other NPC's
		{
			for(uint n = 0; n < NpcNum; n++)
			{
				if(_CritHasExtMode(npc[n],MODE_EXT_MOB))									//Sort by Ext. Mode
				{
					mobs.insertLast(npc[n]);											//Add in other array	
					MobsNum++;
				}
				if(!_CritHasExtMode(npc[n],MODE_EXT_MOB))
				{
					players.insertLast(npc[n]);
					PlayersNum++;
				}
			}
		}
		if(!mob.IsSee(attacker)) 
			{
				AddWalkPlane(mob, 0, attacker.HexX, attacker.HexY, 0xff, true, 1);
			}
		if(players.length() > 0)
		{
			for(uint m = 0; m < MobsNum; m++)
			{
				NpcPlane@ plane = mobs[m].GetCurPlane();
				if((valid(plane)) && (plane.Type == AI_PLANE_ATTACK))
				{
					mobs[m].DropPlanes();
					for(uint i = 0; i < PlayersNum; i++)	
					{
						AddAttackPlane(mobs[m], AI_PLANE_ATTACK_PRIORITY, players[i]);
					}
				}
				uint NearMobsNum = mob.GetCritters(true, FIND_ONLY_NPC | FIND_LIFE, nearMobs);
				for(uint n = 0; n < NearMobsNum; n++)
				{
					AddAttackPlane(nearMobs[n], AI_PLANE_ATTACK_PRIORITY, attacker);
				}
			}
		}
	return true;
} */


// =============================================
// Checks if critter is within attack distance
// =============================================
void _MobIdle(Critter& mob)
{
    // the great optimizer
    if(!mob.IsLife())
    {
        mob.Wait(IDLE_NORMAL);
        return;
    }

    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint            num = mob.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE, crits);
    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(mob);
    for(uint i = 0; i < num; i++)
    {
        uint curDist = GetCrittersDistantion(mob, crits[i]);
        if(curDist > dist)
            continue;
        else
        {
            // attack
            if(crits[i].Param[MODE_HIDE] != 0 || curDist < 5)
            {
                //mob.Say(SAY_NORM, "Attack now!");
                AttackCritter(mob, crits[i]);
            }
            else
            {
                //mob.Say(SAY_NORM, "Attack soon!");
                mob.AddEnemyInStack(crits[i].Id);
            }
            return;
        }
    }
    if(crits.length() > 0)
    {
        // MoveMob(mob, false);
        mob.Wait(IDLE_ALERTED);
    }
    else
    {
        MoveMob(mob, false);
        // mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        mob.Wait(IDLE_NORMAL);
    }
}

// =============================================
// Critter stays on his spot, does not move randomly around.
// =============================================
void _MobIdle2(Critter& mob)
{
    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint            num = mob.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE, crits);
    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(mob);
    for(uint i = 0; i < num; i++)
    {
        uint curDist = GetCrittersDistantion(mob, crits[i]);
        if(curDist > dist)
            continue;
        else
        {
            // attack
            if(crits[i].Param[MODE_HIDE] != 0 || curDist < 5)
            {
                //mob.Say(SAY_NORM, "Attack now!");
                AttackCritter(mob, crits[i]);
            }
            else
            {
                //mob.Say(SAY_NORM, "Attack soon!");
                mob.AddEnemyInStack(crits[i].Id);
            }
            return;
        }
    }
    if(ALERTED(mob) > 0)
    {
        // MoveMob(mob, false);
        mob.Wait(IDLE_ALERTED);
    }
    else
    {
        // MoveMob(mob, false);
        // mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        mob.Wait(IDLE_NORMAL);
    }
}

void MoveMob(Critter& cr, bool run)
{
    int dist = Random(0, (cr.Param[ST_NPC_ROLE] % 100 / 10));
    if(dist == 0)
    {
        cr.MoveRandom();
    }
    else
    {
        // bool AddWalkPlane(Critter& npc, uint priory, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint8 cut)
        uint16 hexX = cr.HexX;
        uint16 hexY = cr.HexY;
        cr.GetMap().MoveHexByDir(hexX, hexY, Random(0, 5), dist);
        AddWalkPlane(cr, 0, hexX, hexY, 0xff, run, 0);
    }
}

// =============================================
// Gets distance after which critter becomes agressive
// =============================================
uint GetDistance(Critter& cr)
{
    // TODO: damaged eye??
    uint base = __LookNormal + 3 * cr.Param[ST_PERCEPTION];

    // switch works only for ints??
    int role = int(cr.Param[ST_NPC_ROLE]);
    switch(role)
    {
    case ROLE_DEFAULT:
        // mob.Say(SAY_NORM, "" + base + "/" + 3 + "=" + base/3);
        return base / 3;
    case ROLE_AGRESSIVE:
        return base / 2;
    case ROLE_PASSIVE:
        return base / 4;
	case ISTOWN_ROLE_DEFAULT:
        return base / 3;
	case ISTOWN_ROLE_AGRESSIVE:
		return base / 2;
	case ISTOWN_ROLE_PASSIVE:
		return base / 4;
    }
    return base / 3;
}

// =============================================
// Alerts that oponent is near
// =============================================
void _MobShowCritter(Critter& cr, Critter& showCrit)
{
    if(showCrit.IsPlayer())
        ALERTED(cr) += 1;
}

void _MobHideCritter(Critter& cr, Critter& hideCrit)
{
    if(hideCrit.IsPlayer())
        ALERTED(cr) -= 1;
}