

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                                                                                                                                                                                                                                                                                                                                                                                                                                                          

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                                                                                                                                                                                                                                                                                        

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                  

import string GetRandomFirstName(uint gender)from"npc_names";
import string GetRandomFirstName(uint gender,int&index)from"npc_names";

import string GetRandomNick(uint gender)from"npc_names";

import string GetRandomSurname()from"npc_names";

import string GetRandomFullName(uint gender)from"npc_names";
import string GetRandomFullName(uint gender,int&firstName,bool&genderNick,int&nick,int&surname)from"npc_names"; 

import string GetFirstName(uint gender,uint index)from"npc_names";
import string GetNick(uint gender,uint index,bool genderNick)from"npc_names";
import string GetSurname(uint index)from"npc_names";  

import void LogNames(bool printNames)from"npc_names

shared class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(!IsAnyData(name))
		return false;
		if(!GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const bool&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const string&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const float&value)
	{
		int dummy=FloatToInt(value);
		return Set(dummy);
	}
	
	Serializator@opShl(const float&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const array<int64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<bool>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<bool>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<string>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<string>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<float>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(FloatToInt(values[i]));
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<float>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Critter&cr)
	{
		return Set(cr);
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Item&item)
	{
		return Set(item);
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@opShr(bool&value)
	{
		return Get(value);
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@opShr(string&str)
	{
		return Get(str);
	}
	
	Serializator@Get(float&value)
	{
		int dummy=0;
		Get(dummy);
		value=IntToFloat(dummy);
		return this;
	}
	
	Serializator@opShr(float&value)
	{
		return Get(value);
	}
	
	Serializator@Get(array<int64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<float>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		{
			int dummy=0;
			Get(dummy);
			values[i]=IntToFloat(dummy);
		}
		return this;
	}
	
	Serializator@opShr(array<float>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<bool>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<bool>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<string>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<string>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@opShr(Critter@&cr)
	{
		return Get(cr);
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	Serializator@opShr(Item@&item)
	{
		return Get(item);
	}
	
	array<uint8>Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};   

import bool AddToFollowerlist(Critter&master,Critter&follower)from"follower_common";  

uint e_DisableBagRefresh(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))
	{
		cr.SetBagRefreshTime((uint(-1)));
		{;};
	}
	return 0;
}

void NerfWeaponSkills(Critter&cr,uint primary,uint secondary)
{
	for(uint i=(200);i<=(205);i++)
	{
		if(i!=primary&&i!=secondary)
		{
			if(i==(201))
			cr.ParamBase[i]=-80;
			else
			cr.ParamBase[i]=-30;
		}
	}
}

shared interface IMerc
{
	IMerc@Dialog(int dialogid);
	IMerc@Script(string&script);
	IMerc@AI(int aipack);
	IMerc@Bag(int bagid);
	IMerc@Team(int teamid);
	IMerc@Level(int level);
	IMerc@PID(int pid);
	IMerc@PID(array<int>npcpids);
	IMerc@Type(int type);
	IMerc@ID(int id);
	IMerc@Cost(int cost);
	IMerc@StartCost(int cost);
	IMerc@SellPrice(int price);
	IMerc@DynamicPrice();
	
	bool IsDynamicPrice();
	int GetDialog();
	string@GetScript();
	int GetAIPack();
	int GetBagID();
	int GetBagValue();
	int GetTeamID();
	int GetLevel();
	int GetLastPID();
	array<int>GetPIDs();
	uint GetType();
	int8 GetBaseType();
	int GetCost();
	int GetSellPrice();
	uint GetID();
	string@GetName();
	
	bool Spawn(Critter&master);
}; 

class CMerc:IMerc
{
	bool dynamicprice;
	int dir;
	int dialogid;
	string script;
	int aipack;
	int8 basetype;
	int bagid;
	int teamid;
	int level;
	int respawnTime;
	array<int>npcpids;
	int npcpid;
	int cost;
	int bagvalue;
	int startcost;
	uint type;
	int sellprice;
	uint id;
	string name;
	
	Serializator serializer;
	
	CMerc()
	{
		dir=Random(0,6);
		dialogid=(9310);
		script="follower@critter_init";
		basetype=-1;
		aipack=0;
		bagid=0;
		teamid=0;
		level=1;
		respawnTime=(-2);
		cost=0;
		sellprice=0;
		id=0;
		type=0;
		dynamicprice=false;
	}
	
	bool Spawn(Critter&master)
	{
		npcpid=(npcpids[Random(0,npcpids.length()-1)]);
		
		Critter@SpawnedNpc=AddNpc(master.GetMap(),npcpid,master.HexX,master.HexY,dir,dialogid,script,aipack,bagid,teamid,false,level);
		if((@SpawnedNpc!=null))
		{
			SpawnedNpc.FollowerVarBase[(929)]=(master.Param[(106)]);
			SpawnedNpc.FollowerVarBase[(932)]=type;
			SpawnedNpc.FollowerVarBase[(930)]=id;
			basetype=SpawnedNpc.CrType;
			SpawnedNpc.FollowerVarBase[(933)]=master.Id;
			SpawnedNpc.ParamBase[(84)]=respawnTime;
			
			if(type==(3)||type==(4)||type==(2))
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			switch(type)
			{
				case(6):
				case(12):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(7):
				case(13):
				NerfWeaponSkills(SpawnedNpc,(200),0);
				break;
				case(8):
				case(11):
				NerfWeaponSkills(SpawnedNpc,(201),0);
				break;
				case(5):
				case(10):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(9):
				NerfWeaponSkills(SpawnedNpc,(202),0);
				break;
				default:
				break;
			}
			
			SpawnedNpc.ChangeCrType(SpawnedNpc.ParamBase[(112)]);
			
			CreateTimeEvent(((__FullSecond)+(((3)*60))),"e_DisableBagRefresh",SpawnedNpc.Id,true);
			ArmBestWeapon(SpawnedNpc);
			
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(306)]+=1;
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(315)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(405)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(309)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(313)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(330)]+=1;
			
			for(uint i=0;i<=6;i++)SpawnedNpc.ParamBase[i]+=Random(-1,1);   
			
			SpawnedNpc.ParamBase[(7)]+=(Random(0,20));
			SpawnedNpc.ParamBase[(7)]-=10;
			
			SpawnedNpc.ParamBase[(72)]=SpawnedNpc.Param[(7)];
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			if(!AddToFollowerlist(master,SpawnedNpc))
			Log("Failed to assign merc's id to master("+master.Id+") followerlist");
			
			this.name=GenerateNewName(SpawnedNpc);
			
			if(this.name.length()>0)
			SetLexem(SpawnedNpc,"$name",this.name);
			
			return true;
		}
		else
		{
			Log("Failed to create mercenary of PID "+npcpid+" with mercid "+id+" on map id "+master.GetMapId());
			master.Say((11),"Failed to create mercenary, report this error immediately");
		} 
		
		return false;
	}
	
	IMerc@Dialog(int dialogid)
	{
		this.dialogid=dialogid;
		return this;
	}
	
	IMerc@Script(string&script)
	{
		this.script=script;
		return this;
	}
	
	IMerc@AI(int aipack)
	{
		this.aipack=aipack;
		return this;
	}
	
	IMerc@Bag(int bagid)
	{
		this.bagid=bagid;
		
		bagvalue=0;
		array<uint>mincounts,maxcounts;
		array<int>slots;
		array<uint16>pids;
		uint num=GetBagItems(bagid,pids,mincounts,maxcounts,slots);
		uint cost=0;
		for(uint i=0;i<num;i++)
		{
			bagvalue+=BaseItemValue(pids[i],7,80,true)*(mincounts[i]+maxcounts[i])/2;
		}
		
		return this;
	}
	
	IMerc@Team(int teamid)
	{
		this.teamid=teamid;
		return this;
	}
	
	IMerc@Level(int level)
	{
		this.level=level;
		return this;
	}
	
	IMerc@PID(int npcpid)
	{
		this.npcpids.insertLast(npcpid);
		return this;
	}
	
	IMerc@PID(array<int>npcpids)
	{
		for(uint i=0;i<npcpids.length();i++)
		{
			this.npcpids.insertLast(npcpids[i]);
		}
		return this;
	}
	
	IMerc@Type(int type)
	{
		this.type=type;
		return this;
	}
	
	IMerc@ID(int id)
	{
		this.id=id;
		return this;
	}
	
	IMerc@DynamicPrice()
	{
		dynamicprice=true;
		return this;
	}
	
	bool IsDynamicPrice()
	{
		return dynamicprice;
	}
	
	IMerc@StartCost(int cost)
	{
		serializer.Clear();
		if(!serializer.Load("merc_"+id)||GetGvar((12000))==0)
		{
			this.cost=cost;
			serializer.Clear();
			serializer.Set(this.cost).Save("merc_"+id);
		}
		else
		serializer.Get(this.cost);
		
		return this;
	}
	
	IMerc@Cost(int cost)
	{
		{;};
		this.cost=cost;
		
		serializer.Clear();
		serializer.Set(this.cost).Save("merc_"+id);
		
		return this;
	}
	
	IMerc@SellPrice(int sellprice)
	{
		this.sellprice=sellprice;
		return this;
	}
	
	int GetDialog(){return dialogid;}
	string@GetScript(){return script;}
	int8 GetBaseType(){return basetype;}
	int GetAIPack(){return aipack;}
	int GetBagID(){return bagid;}
	int GetTeamID(){return teamid;}
	int GetLevel(){return level;}
	int GetLastPID(){return npcpid;}
	array<int>GetPIDs(){return npcpids;}
	int GetCost(){return cost;}
	int GetBagValue(){return bagvalue;}
	int GetSellPrice(){return sellprice;}
	uint GetID(){return id;}
	uint GetType(){return type;}
	string@GetName(){return name;}
}; 

import bool IsFollowing(Critter&critter)from"follower_common";
import bool IsOwnersFollower(Critter&owner,Critter&critter)from"follower_common";
import bool CanHaveMoreFollowers(Critter&player,uint FollowerType)from"follower_common";
import Critter@GetFollowersOwner(Critter&critter)from"follower_common";
import bool RightDistance(Critter&follower,Critter&owner)from"follower_common";
import bool HasFollowerOfBaseType(Critter&owner,uint basetype)from"follower_common";
import Critter@GetFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import bool RemoveFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import int GetNumberOfFollowingFollowersOfPlayer(Critter&player)from"follower_common";
import int GetNumberOfFollowersOfPlayer(Critter&player)from"follower_common";
import uint GetSlaveTypes(Critter&player)from"follower_common";
import void ClearFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import void AddFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import uint NumberOfFollowersOnMap(Map@map)from"follower_common";
import uint GetFollowerType(Critter&critter)from"follower_common";
import bool DisbandFollower(Critter&player,Critter&cr,bool reset)from"follower_common";
import bool MakeFollower(Critter&critter,uint type,string&script,uint dialogid,Critter&owner,bool FreeBarter)from"follower_common";
import Critter@LocateFollowerByType(IMerc@merc,Critter&owner)from"follower_common";
import Critter@LocateFollowerByID(uint id,Critter&owner)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers,bool OnlyIsSeen)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers)from"follower_common";
import int GetFollowers(Critter&player,bool all,array<Critter@>&followers)from"follower_common";
import uint CountFollowers(Critter&player,bool all)from"follower_common";
import uint CountFollowers(Critter&player,Map@map)from"follower_common";
import uint GetPartyPointsMax(Critter&player)from"follower_common";
import uint GetPartyPointsUsed(Critter&player)from"follower_common";
import bool IsMerc(Critter&follower)from"follower_common";                                                                                                                                                                          

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}                                                                                                                                                                                                  

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";

shared interface ISlaverunLoc
{
	ISlaverunLoc@SetLocPid(uint pid);
	uint GetLocPid();
	ISlaverunLoc@SetCoords(uint x1,uint y1,uint x2,uint y2);
	ISlaverunLoc@SetReward(uint reward);
	ISlaverunLoc@SetLevels(uint hlevel,uint nlevel,uint slevel);
	ISlaverunLoc@SetNoItems();
	uint GetReward();
	ISlaverunLoc@AddHostile(uint pid);
	ISlaverunLoc@AddNormal(uint pid);
	ISlaverunLoc@Scripts(string&script1,string&script2);
	ISlaverunLoc@AIPacks(uint pack1,uint pack2);
	ISlaverunLoc@Dialogs(uint dialog1,uint dialog2,uint sdialog);
	ISlaverunLoc@AddWeapon(uint pid,uint ammo,uint min,uint max);
	ISlaverunLoc@AddItem(uint pid,uint chance,uint min,uint max);
	ISlaverunLoc@AddContItem(uint pid,uint chance,uint min,uint max);
	bool SpawnHostile(Map@map,uint16 hexX,uint16 hexY);
	bool SpawnNormal(Map@map,uint16 hexX,uint16 hexY);
	void FillContainer(Map@map,uint16 hexX,uint16 hexY);
	bool SpawnSlaver(Map@map,uint16 hexX,uint16 hexY,uint teamId);
	uint Create(Critter@player);
}; 

class SlaverunLoc:ISlaverunLoc
{
	uint LocPid;
	uint X1;
	uint Y1;
	uint X2;
	uint Y2;
	array<uint>Hostiles;
	array<uint>Normals;
	string Hscript;
	string Nscript;
	uint Hpack;
	uint Npack;
	uint Hdialog;
	uint Ndialog;
	uint Sdialog;
	uint Hlevel;
	uint Nlevel;
	uint Slevel;
	uint Reward;
	bool NoItems;
	array<uint>Weaps;
	array<uint>Items;
	array<uint>ContItems;
	
	SlaverunLoc()
	{
		LocPid=0;
		X1=0;
		Y1=0;
		X2=0;
		Y2=0;
		Hscript="";
		Nscript="";
		Hpack=0;
		Npack=0;
		Hdialog=0;
		Ndialog=0;
		Sdialog=0;
		Hlevel=0;
		Nlevel=0;
		Slevel=0;
		Reward=0;
		NoItems=false;
	}
	
	ISlaverunLoc@SetLocPid(uint pid)
	{
		LocPid=pid;
		return this;
	}
	
	ISlaverunLoc@SetCoords(uint x1,uint y1,uint x2,uint y2)
	{
		X1=x1;
		Y1=y1;
		X2=x2;
		Y2=y2;
		return this;
	}
	
	ISlaverunLoc@SetReward(uint reward)
	{
		Reward=reward;
		return this;
	}
	
	ISlaverunLoc@SetLevels(uint hlevel,uint nlevel,uint slevel)
	{
		Hlevel=hlevel;
		Nlevel=nlevel;
		Slevel=slevel;
		return this;
	}
	
	ISlaverunLoc@SetNoItems()
	{
		NoItems=true;
		return this;
	}
	
	uint GetLocPid()
	{
		return LocPid;
	}
	
	uint GetReward()
	{
		return Reward;
	}
	
	ISlaverunLoc@AddHostile(uint pid)
	{
		Hostiles.insertLast(pid);
		return this;
	}
	
	ISlaverunLoc@AddNormal(uint pid)
	{
		Normals.insertLast(pid);
		return this;
	}
	
	ISlaverunLoc@Scripts(string&script1,string&script2)
	{
		Hscript=script1;
		Nscript=script2;
		return this;
	}
	
	ISlaverunLoc@AIPacks(uint pack1,uint pack2)
	{
		Hpack=pack1;
		Npack=pack2;
		return this;
	}
	
	ISlaverunLoc@Dialogs(uint dialog1,uint dialog2,uint sdialog)
	{
		Hdialog=dialog1;
		Ndialog=dialog2;
		Sdialog=sdialog;
		return this;
	}
	
	ISlaverunLoc@AddWeapon(uint pid,uint ammo,uint min,uint max)
	{
		Weaps.insertLast(pid);
		Weaps.insertLast(ammo);
		Weaps.insertLast(min);
		Weaps.insertLast(max);
		return this;
	}
	
	ISlaverunLoc@AddItem(uint pid,uint chance,uint min,uint max)
	{
		Items.insertLast(pid);
		Items.insertLast(chance);
		Items.insertLast(min);
		Items.insertLast(max);
		return this;
	}
	
	ISlaverunLoc@AddContItem(uint pid,uint chance,uint min,uint max)
	{
		ContItems.insertLast(pid);
		ContItems.insertLast(chance);
		ContItems.insertLast(min);
		ContItems.insertLast(max);
		return this;
	}
	
	bool SpawnHostile(Map@map,uint16 hexX,uint16 hexY)
	{
		if(Hostiles.length()==0)
		{
			Log("No hostiles found");
			return false;
		}
		
		int pid=(Hostiles[Random(0,Hostiles.length()-1)]);
		Critter@npc=AddNpc(map,pid,hexX,hexY,Random(0,5),Hdialog,Hscript,Hpack,1,(5000),false,Hlevel);
		if(!(@npc!=null))
		return false;
		
		npc.ParamBase[(84)]=(-2);
		
		if(Weaps.length()==0)
		{
			Log("No weapons found");
			return true;
		}
		
		int weap=4*Random(0,(Weaps.length())/4-1);
		
		if(Weaps[weap]!=0)
		{
			
			Item@item=npc.AddItem(Weaps[weap],1);
			npc.SetFavoriteItem((1),Weaps[weap]);
			npc.MoveItem(item.Id,1,(1)); 
			
			if(Weaps[weap+1]!=0)
			npc.AddItem(Weaps[weap+1],Random(Weaps[weap+2],Weaps[weap+3]));
		}
		
		(npc.ParamBase[(534)]=npc.Param[(534)]|((0x00000001)));
		
		if(NoItems)
		return true; 
		
		uint items=Items.length()/4;
		for(uint i=0;i<items;i++)
		if(uint(Random(1,100))<=Items[4*i+1])
		npc.AddItem(Items[4*i],Random(Items[4*i+2],Items[4*i+3])); 
		
		return true;
	}
	
	bool SpawnNormal(Map@map,uint16 hexX,uint16 hexY)
	{
		if(Normals.length()==0)
		{
			Log("No normals found");
			return false;
		}
		
		int pid=(Normals[Random(0,Normals.length()-1)]);
		Critter@npc=AddNpc(map,pid,hexX,hexY,Random(0,5),Ndialog,Nscript,Npack,1,(5001),false,Nlevel);
		if(!(@npc!=null))
		return false;
		
		npc.ParamBase[(84)]=(-2); 
		
		uint items=Items.length()/4;
		for(uint i=0;i<items;i++)
		if(uint(Random(1,100))<=Items[4*i+1])
		npc.AddItem(Items[4*i],Random(Items[4*i+2],Items[4*i+3]));
		
		(npc.ParamBase[(534)]=npc.Param[(534)]|((0x00000001)));
		return true;
	}
	
	void FillContainer(Map@map,uint16 hexX,uint16 hexY)
	{
		array<Item@>items;
		map.GetItems(hexX,hexY,items);
		for(uint i=0,j=items.length();i<j;i++)
		if(items[i].GetType()==(8))
		{
			uint contitems=ContItems.length()/4;
			for(uint k=0;k<contitems;k++)
			if(uint(Random(1,100))<=ContItems[4*k+1])
			items[i].AddItem(ContItems[4*k],Random(ContItems[4*k+2],ContItems[4*k+3]),0);
			break;
		}
	}
	
	bool SpawnSlaver(Map@map,uint16 hexX,uint16 hexY,uint teamId)
	{
		
		uint[]weaps={(94),(385),(10),(8),(18)};
		uint[]ammos={(95),(95),(34),(29),(31)};
		uint[]min={5,5,5,8,7};
		uint[]max={10,10,10,16,14};
		uint num=Random(0,4);
		Critter@npc=AddNpc(map,(217),hexX,hexY,Random(0,5),Sdialog,("slaverun_slaver@critter_init"),(16),1,teamId,false,Slevel);
		if(!(@npc!=null))
		return false; 
		
		uint weapnum=Random(0,weaps.length()-1);
		Item@item=npc.AddItem(weaps[weapnum],1);
		npc.SetFavoriteItem((1),weaps[weapnum]);
		npc.MoveItem(item.Id,1,(1)); 
		
		npc.AddItem(ammos[weapnum],Random(min[weapnum],max[weapnum]));
		
		npc.ParamBase[(84)]=(-2);
		(npc.ParamBase[(534)]=npc.Param[(534)]|((0x00000001)));
		return true;
	}
	
	uint Create(Critter@player)
	{
		Critter@[]crits={player};
		int loc=CreateLocation(LocPid,Random(X1,X2),Random(Y1,Y2),crits);
		if(loc==0)
		return 0;
		if(player.Param[(516)]==(2))
		SetTurnBasedAvailability(GetLocation(loc));
		
		return loc;
	}
};

array<ISlaverunLoc@>SlaverunLocs;

void InitSlaveruns()
{            
	
	SlaverunLoc tribal1;tribal1.SetLocPid((271)).
	SetCoords(150,150,500,350).SetReward(150).SetLevels(1,1,1).
	AddHostile(3).AddHostile(4).AddNormal(3).AddNormal(4).
	Scripts(("slaverun_slave_hostile@critter_init"),("slaverun_slave_normal@critter_init")).
	AIPacks((1),(2)).Dialogs(0,0,(9315)).
	AddWeapon((6),0,0,0).
	AddWeapon((7),0,0,0).
	AddWeapon((4),0,0,0).
	AddWeapon((280),0,0,0).
	AddWeapon((320),0,0,0).
	AddWeapon(0,0,0,0).
	AddItem((284),30,1,3).
	AddItem((278),30,1,2).
	AddItem((19),20,2,4).
	AddItem((276),10,1,2).
	AddItem((41),15,10,20).
	AddItem((277),10,1,1).
	AddContItem((284),60,1,3).
	AddContItem((41),90,50,80).
	AddContItem((276),90,2,4).
	AddContItem((277),40,1,2).
	AddContItem((1803),40,1,2).
	AddContItem((539),60,1,3).
	AddContItem((19),90,4,6).
	AddContItem((426),1,1,1).
	AddContItem((572),1,1,1)
	;SlaverunLocs.insertLast(tribal1);;
	
	SlaverunLoc tribal2;tribal2.SetLocPid((272)).
	SetCoords(150,150,500,350).SetReward(200).SetLevels(5,5,1).
	AddHostile(3).AddHostile(4).AddNormal(3).AddNormal(4).AddNormal(206).AddNormal(207).
	Scripts(("slaverun_slave_hostile@critter_init"),("slaverun_slave_normal@critter_init")).
	AIPacks((1),(2)).Dialogs(0,0,(9315)).
	AddWeapon((6),0,0,0).
	AddWeapon((7),0,0,0).
	AddWeapon((4),0,0,0).
	AddWeapon((280),0,0,0).
	AddWeapon((320),0,0,0).
	AddWeapon((45),(45),5,10).
	AddWeapon(0,0,0,0).
	AddItem((284),30,2,3).
	AddItem((278),30,1,2).
	AddItem((19),50,2,4).
	AddItem((276),30,1,3).
	AddItem((41),35,15,25).
	AddItem((277),20,1,1).
	AddContItem((284),60,1,3).
	AddContItem((41),100,70,110).
	AddContItem((276),90,2,4).
	AddContItem((277),50,1,2).
	AddContItem((1803),40,2,3).
	AddContItem((539),60,1,3).
	AddContItem((19),90,8,12).
	AddContItem((426),2,1,1).
	AddContItem((572),2,1,1)
	;SlaverunLocs.insertLast(tribal2);;
	
	SlaverunLoc caravan1;caravan1.SetLocPid((273)).
	SetCoords(550,150,1000,550).SetReward(250).SetLevels(1,1,3).SetNoItems().
	AddHostile(30).AddHostile(40).AddHostile(41).AddNormal(58).AddNormal(59).AddNormal(60).AddNormal(61).
	Scripts(("slaverun_slave_hostile@critter_init"),("slaverun_slave_normal@critter_init")).
	AIPacks((12),(17)).Dialogs(0,0,(9316)).
	AddWeapon((8),(29),3,5).
	AddWeapon((18),(31),3,5).
	AddWeapon((299),(29),3,10).
	AddWeapon((94),(95),6,10).
	AddWeapon((385),(95),6,10).
	AddWeapon((10),(34),2,4).
	AddItem((304),10,1,2).
	AddItem((226),5,2,4).
	AddItem((126),30,1,2).
	AddItem((430),1,1,1).
	AddItem((100),25,1,1).
	AddItem((127),50,2,3).
	AddItem((101),30,1,2).
	AddItem((47),10,1,1).
	AddItem((73),10,1,1).
	AddItem((76),10,1,1).
	AddItem((80),10,1,1).
	AddItem((86),10,1,1).
	AddItem((102),10,1,1).
	AddItem((237),10,1,1).
	AddItem((40),20,2,3).
	AddItem((49),25,2,4).
	AddItem((273),30,1,2).
	AddItem((106),10,2,5).
	AddItem((124),10,2,5).
	AddItem((125),10,2,5).
	AddItem((310),10,1,3).
	AddItem((311),10,1,3).
	AddItem((469),10,1,3).
	AddItem((29),10,10,20).
	AddItem((30),10,10,20).
	AddItem((31),10,5,15).
	AddItem((111),10,5,15).
	AddItem((95),10,6,10).
	AddItem((41),75,200,400)
	;SlaverunLocs.insertLast(caravan1);;                             
	
	SlaverunLoc junkiehouse1;junkiehouse1.SetLocPid((276)).
	SetCoords(400,400,600,650).SetReward(100).SetLevels(5,5,1).
	AddHostile(55).AddHostile(54).AddNormal(54).AddNormal(55).
	Scripts(("slaverun_slave_hostile@critter_init"),("slaverun_slave_normal@critter_init")).
	AIPacks((24),(11)).Dialogs(0,0,(9319)).
	AddWeapon((19),(19),2,4).
	AddWeapon(0,0,0,0).
	AddItem((259),20,1,1).
	AddItem((124),50,2,3).
	AddItem((41),20,10,20).
	AddContItem((259),90,2,8).
	AddContItem((124),60,2,3).
	AddContItem((125),30,1,2)
	;SlaverunLocs.insertLast(junkiehouse1);;
	
}

void FillMap(Map@map,uint&hostiles,uint&normals,uint&slavers,uint teamId)
{
	array<Entire>ent_slaver;
	array<Entire>ent_slave_n;
	array<Entire>ent_slave_h;
	array<Entire>ent_cont;
	array<Entire>ent_gecko;
	array<Entire>ent_brahmin;
	SlaveLog("Slaverun "+map.GetLocation().Id+" fillmap, taking entires.");
	int slaver_max=ParseEntires(map,ent_slaver,(150));
	int slave_n_max=ParseEntires(map,ent_slave_n,(151));
	int slave_h_max=ParseEntires(map,ent_slave_h,(152));
	int cont_max=ParseEntires(map,ent_cont,(153));
	int gecko_max=ParseEntires(map,ent_gecko,(156));
	int brahmin_max=ParseEntires(map,ent_brahmin,(157));
	SlaveLog("slaver_max: "+slaver_max);
	SlaveLog("slave_n_max: "+slave_n_max);
	SlaveLog("slave_h_max: "+slave_h_max);
	SlaveLog("cont_max: "+cont_max);
	SlaveLog("gecko_max: "+gecko_max);
	SlaveLog("brahmin_max: "+brahmin_max);    
	
	uint level=Random(1,3);
	int num_slaver;
	int num_slave_n;
	int num_slave_h;
	int num_brahmin;
	
	if(level==1)
	{
		num_slaver=Random(1,(2*(slaver_max+1))/5)-1;
		num_slave_n=Random(1,(2*slave_n_max)/5);
		num_slave_h=Random(1,(2*slave_h_max)/5);
		num_brahmin=Random(1,(2*brahmin_max)/5);
	}
	else if(level==2)
	{
		num_slaver=Random((3*(slaver_max+1))/10,(7*(slaver_max+1))/10)-1;
		num_slave_n=Random((3*slave_n_max)/10,(7*slave_n_max)/10);
		num_slave_h=Random((3*slave_h_max)/10,(7*slave_h_max)/10);
		num_brahmin=Random((3*brahmin_max)/10,(7*brahmin_max)/10);
	}
	else
	{
		num_slaver=Random((3*(slaver_max+1))/5,slaver_max+1)-1;
		num_slave_n=Random((3*slave_n_max)/5,slave_n_max);
		num_slave_h=Random((3*slave_h_max)/5,slave_h_max);
		num_brahmin=Random((3*brahmin_max)/5,brahmin_max);
	}
	
	if(num_slaver<1)
	num_slaver=1;
	if(num_slave_n<1)
	num_slave_n=1;
	if(num_slave_h<1)
	num_slave_h=1;
	if(num_brahmin<1&&brahmin_max!=0)
	num_brahmin=1;
	if(brahmin_max==0)
	num_brahmin=0;
	
	SlaveLog("Level "+level);
	SlaveLog("num_slaver: "+num_slaver);
	SlaveLog("num_slave_n: "+num_slave_n);
	SlaveLog("num_slave_h: "+num_slave_h);
	SlaveLog("num_brahmin: "+num_brahmin);  
	
	uint temp;
	uint newindex;
	SlaveLog("TAKEENTIRES slaver");
	array<uint>slaver_ind(slaver_max);for(int __i=0;__i<slaver_max;__i++) slaver_ind[__i]=__i;for(int __i=0;__i<num_slaver;__i++){newindex=Random(__i,slaver_max-1);temp=slaver_ind[__i];slaver_ind[__i]=slaver_ind[newindex];slaver_ind[newindex]=temp;};
	SlaveLog("TAKEENTIRES n");
	array<uint>slave_n_ind(slave_n_max);for(int __i=0;__i<slave_n_max;__i++) slave_n_ind[__i]=__i;for(int __i=0;__i<num_slave_n;__i++){newindex=Random(__i,slave_n_max-1);temp=slave_n_ind[__i];slave_n_ind[__i]=slave_n_ind[newindex];slave_n_ind[newindex]=temp;};
	SlaveLog("TAKEENTIRES h");
	array<uint>slave_h_ind(slave_h_max);for(int __i=0;__i<slave_h_max;__i++) slave_h_ind[__i]=__i;for(int __i=0;__i<num_slave_h;__i++){newindex=Random(__i,slave_h_max-1);temp=slave_h_ind[__i];slave_h_ind[__i]=slave_h_ind[newindex];slave_h_ind[newindex]=temp;};
	SlaveLog("TAKEENTIRES brahmin");
	array<uint>brahmin_ind(brahmin_max);for(int __i=0;__i<brahmin_max;__i++) brahmin_ind[__i]=__i;for(int __i=0;__i<num_brahmin;__i++){newindex=Random(__i,brahmin_max-1);temp=brahmin_ind[__i];brahmin_ind[__i]=brahmin_ind[newindex];brahmin_ind[newindex]=temp;};
	
	SlaveLog("TAKEENTIRES OK");
	
	bool found=false;
	uint slaveloc=0;
	uint locprotoid=map.GetLocation().GetProtoId();
	
	for(uint i=0,j=SlaverunLocs.length();i<j;i++)
	if(SlaverunLocs[i].GetLocPid()==locprotoid)
	{
		slaveloc=i;
		found=true;
		break;
	}
	
	if(!found)
	{
		Log("Slaverun location PID not found");
		return;
	}
	SlaveLog("loc found!");
	ISlaverunLoc@slaverun=SlaverunLocs[slaveloc];
	SlaveLog("loc taken.");
	hostiles=num_slave_h;
	normals=num_slave_n;
	slavers=num_slaver;
	
	for(int i=0;i<num_slaver;i++)
	{
		Entire@ent=ent_slaver[slaver_ind[i]];
		if(!slaverun.SpawnSlaver(map,ent.HexX,ent.HexY,teamId))
		slavers--;
		
	}
	SlaveLog("slavers added");
	
	for(int i=0;i<num_slave_h;i++)
	{
		Entire@ent=ent_slave_h[slave_h_ind[i]];
		if(!slaverun.SpawnHostile(map,ent.HexX,ent.HexY))
		hostiles--;
		
	}
	SlaveLog("hostiles added");
	
	for(int i=0;i<num_slave_n;i++)
	{
		Entire@ent=ent_slave_n[slave_n_ind[i]];
		if(!slaverun.SpawnNormal(map,ent.HexX,ent.HexY))
		normals--;
		
	}
	SlaveLog("normals added");
	
	for(int i=0;i<num_brahmin;i++)
	{
		Entire@ent=ent_brahmin[brahmin_ind[i]];
		Critter@npc=AddNpc(map,10,ent.HexX,ent.HexY,Random(0,5),5055,("all_brahmin@critter_init"),(6),1,(5010),false,1);
		npc.ParamBase[(84)]=(-2);
		
	}
	SlaveLog("brahmin added");
	
	for(int i=0;i<cont_max;i++)
	{
		Entire@ent=ent_cont[i];
		slaverun.FillContainer(map,ent.HexX,ent.HexY);
		
	}
	SlaveLog("containers filled");
	
	for(int i=0;i<gecko_max;i++)
	{
		Entire@ent=ent_gecko[i];
		Critter@npc=AddNpc(map,Random(1,5)==1?83:80,ent.HexX,ent.HexY,Random(0,5),0,"",0,1,(5011),false,1);
		npc.ParamBase[(84)]=(-2);
		npc.ToDead(Random(0,1)==1?(102):(103),null);
		
	}
	SlaveLog("geckos added");
	SlaveLog("Slaverun "+map.GetLocation().Id+" filled: S,H,N,B,C,G: "+slavers+", "+hostiles+", "+normals+", "+num_brahmin+", "+cont_max+", "+gecko_max);
} 

uint GetSlaverunLocLength()
{
	return SlaverunLocs.length();
}

uint SpawnSlaverunLocation(Critter@player,uint num)
{
	return SlaverunLocs[num].Create(player);
}

void StartSlaverunCombat(Map@map)
{
	if(map.GetData((22))==(1))
	return;
	map.SetData((22),(1));
	array<Critter@>crits;
	array<Critter@>hostiles;
	array<Critter@>slavers;
	
	uint num=map.GetCritters(0,(0x03),crits);
	
	for(uint i=0;i<num;i++)
	{
		if(crits[i].IsPlayer()||(((crits[i].Param[(534)]&((0x00000020)))!=0))||(crits[i].IsNpc()&&crits[i].Karma[(493)]>0))
		{
			slavers.insertLast(crits[i]);
			continue;
		}
		if(crits[i].IsNpc()&&(((crits[i].Param[(534)]&((0x00000080)))!=0)))
		hostiles.insertLast(crits[i]);
	}
	
	for(uint i=0,hnum=hostiles.length();i<hnum;i++)
	for(uint j=0,snum=slavers.length();j<snum;j++)
	{
		if(hostiles[i].IsNpc())
		{
			AddAttackPlane(hostiles[i],(50)+Random(1,(slavers[j].IsPlayer()?30:10)),slavers[j]);
			hostiles[i].AddEnemyInStack(slavers[j].Id);
		}
		if(slavers[j].IsNpc())
		{
			AddAttackPlane(slavers[j],(50)+Random(1,10),hostiles[i]);
			slavers[j].AddEnemyInStack(hostiles[i].Id);
		}
		
	}
	
}

void SlaversAnnounceSuccess(Map@map)
{
	array<Critter@>crits;
	
	uint num=map.GetCritters(0,(0x03)|(0x20),crits);
	
	for(uint i=0;i<num;i++)
	if(crits[i].Karma[(493)]>0)
	{
		crits[i].Say((2),(Random(0,1)==0?"It's over":"Another job well done!"));
		crits[i].ParamBase[(91)]=1;
	}
	else if(((crits[i].Param[(534)]&((0x00000100)))!=0))
	if(Random(0,5)==0)
	crits[i].Say((2),(Random(0,1)==0?"Oh no!":"Please don't hurt me!"));
}

uint SlaverunLocationReward(uint num)
{
	return SlaverunLocs[num].GetReward();
} 

uint e_deleteMap(array<uint>@values)
{
	uint __nowZZZ=GetTick();
	
	GameVar@status=GetLocalVar((11100),values[0]);
	uint ustatus=status.GetValue();
	status=(0x2)|(0x20);
	
	Location@loc=GetLocation(values[1]);
	
	if((@loc!=null))
	DeleteLocation(loc.Id);
	
	uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
	return 0;
}

void SlaveLog(string&s)
{
	file f;
	f.open("slavelog.txt","a");
	f.writeString(s+"\n");
	f.close();
}
