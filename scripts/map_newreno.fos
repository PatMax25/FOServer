//
// FOnline: 2238
// Rotators
//
// map_newreno.fos
//

#include "_macros.fos"
#include "factions_h.fos"
#include "_maps.fos"
#include "mapdata_h.fos"
#include "messages_h.fos"
#include "_town.fos"
import bool AddMilitia(Map@ map) from "town";
import void SpawnInitMilitia(Map@ map) from "town";

#include "elevators_h.fos"

import void InitializeDynamicMob(Map& map) from "mob_dynamic";
import bool LockerOpen(Item& item) from "lockers";
import bool LockerClose(Item& item) from "lockers";
import void FillMapByMobs(Map& map, uint8 reqNumMobs, uint8 kindof, uint8 subtype, uint8 weapgroup) from "mob_dynamic";
import void InitializeDynamicMob(Map& map, bool withBoss) from "mob_dynamic";
import void ChangeGroupLightsParam(Map& map, int groupId, int paramId, int paramVal) from "dynamic_light_source";
//import void ServerEventCountDownStart(string& message, int location, int time, int type)  from "broadcast";
import void ServerEventCNTSet(string message, uint location, uint type, uint time)  from "broadcast";
import uint cte_Aura(Critter& cr, int identifier, uint& value) from "cheats";
import void InjureCritter(Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId) from "combat";

#define  SHARC_DOOR_DIALOG        (774)
#define  SALVATORE_DOOR_DIALOG    (775)
#define  DESPERADO_DOOR_DIALOG    (776)

void map_init(Map& map, bool firstTime)
{
    if(firstTime)
    {
        // this map belongs to that faction
		switch(map.GetProtoId())
		{
			case MAP_NewRenoSewers :
			InitializeDynamicMob(map); break;
		}
    }
	DLog("Initializing Reno");
	uint proto = map.GetProtoId();
	if(proto == MAP_NewRenoChopShop)
	{
		array<Item@> multihexdoor;
		map.GetItems(PID_WAREHOUSE_DOOR, multihexdoor);
		
		for(uint k = 0, l = multihexdoor.length; k < l; k++)
		{
			if(!valid(multihexdoor[k]))
				return;
					
				multihexdoor[k].Val8 = 400;
		}
	
	}
}

// ===============================
// Casino doors are locked.
// Using them will teleport the player inside / outside the casino if they aren't in combat mode.
// ===============================
void _CasinoDoor(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_USE_ON_ME, "_UseItemOnDoor");
    item.SetEvent(ITEM_EVENT_SKILL, "_UseSkillOnDoor");
}

bool _UseItemOnDoor(Item& item, Critter& crit, Item@ usedItem)
{
    return true;
}

void r_TransferWeapons(Critter& cr, Critter@ npc, int to)
{
    if(to == 0)
        TransferItemsFromContOnMap(cr, GetMapByPid(MAP_NewReno1, 0), ENTIRE_CASINO_WEAPONS, PID_FOOTLOCKER_CLEAN_LEFT);
    else
        TransferItemsToContOnMap(cr, GetMapByPid(MAP_NewReno1, 0), ENTIRE_CASINO_WEAPONS, PID_FOOTLOCKER_CLEAN_LEFT, ITEMTRANSFER_WEAPONS);
}

bool _UseSkillOnDoor(Item& item, Critter& crit, int skill)
{
    if(skill == -1)
    {
        crit.ParamBase[ST_VAR9] = item.Val0;

        // ===============================
        // Sharc Club
        // ===============================
        if((item.GetProtoId() == 3491 || item.GetProtoId() == 3492) && crit.Timeout[TO_BATTLE] <= 0)
        {
            RunDialog(crit, SHARC_DOOR_DIALOG, item.HexX, item.HexY, false);
        }
        // ===============================
        // Salvatore's Bar
        // ===============================
        else if((item.GetProtoId() == 2954) && crit.Timeout[TO_BATTLE] <= 0)
        {
            RunDialog(crit, SALVATORE_DOOR_DIALOG, item.HexX, item.HexY, false);
        }
        // ===============================
        // Desperado
        // ===============================
        else if((item.GetProtoId() == 3479 || item.GetProtoId() == 3480) && crit.Timeout[TO_BATTLE] <= 0)
        {
            RunDialog(crit, DESPERADO_DOOR_DIALOG, item.HexX, item.HexY, false);
        }
    }
    return true;
}



 bool switch_1_on = false;
bool switch_2_on = false;
bool mobs_spawned = false;
bool event_on = false; //change it
bool fields_not_spawned = false;


void map_init_dung(Map& map, bool firstTime)
{
	if(firstTime)
		InitializeDynamicMob(map, true);
	uint time = Random(10800,43200);
	uint time2 = time + 1;
	//CreateTimeEvent(AFTER(REAL_SECOND(time)), "e_clear_doors", map.Id, false);	
	//CreateTimeEvent(AFTER(REAL_SECOND(time2)), "e_start_event", map.Id, false);	//change for longer

}
uint e_clear_doors(array<uint>@ values)
{
	Map@ map = GetMap(values[0]);
	uint16 hexX = 0;
    uint16 hexY = 0;
	switch_1_on = false;
	switch_2_on = false;
	mobs_spawned = false;
	event_on = true; 
	array<Item@> items;
    uint         n = map.GetItems(PID_FORCEFIELD_YELLOW_1, items); //forcefield
	//Log("1");
	if(n==0)
		{
		fields_not_spawned = true;
		//Log("2");
		}
	if(fields_not_spawned)
	{
	map.GetEntireCoords(32, 0, hexX, hexY);
	Item@  forcefield_1 = map.AddItem(hexX, hexY, PID_FORCEFIELD_YELLOW_1, 1);
	/*forcefield_1.LightColor = 54353;
	forcefield_1.LightIntensity = 50;
	forcefield_1.LightDistance  = 3;
	forcefield_1.Update();*/
	map.GetEntireCoords(31, 0, hexX, hexY);
	Item@  forcefield_2 = map.AddItem(hexX, hexY, PID_FORCEFIELD_YELLOW_1, 1);
	/*forcefield_2.LightColor = 54353;
	forcefield_2.LightIntensity = 50;
	forcefield_2.LightDistance  = 3;
	forcefield_2.Update();*/
	map.GetEntireCoords(33, 0, hexX, hexY);
	Item@  forcefield_3 = map.AddItem(hexX, hexY, PID_FORCEFIELD_YELLOW_1, 1);
	/*forcefield_3.LightColor = 54353;
	forcefield_3.LightIntensity = 50;
	forcefield_3.LightDistance  = 3;
	forcefield_3.Update();*/
//	Log("10");
	}

	return 0;
	
}

uint e_end_event(array<uint>@ values)
{
	uint16 hexX = 0;
    uint16 hexY = 0;
	Map@ map = GetMap(values[0]);
	Location@ loc = map.GetLocation();
	Map@ sewers = loc.GetMapByIndex(12); //sewers
	sewers.GetEntireCoords(40, 0, hexX, hexY);
	
	Item@  door = sewers.GetDoor(hexX, hexY);
	door.LockerClose();
	array<Critter@> critters;
    uint            num = map.GetCritters(0, FIND_ONLY_PLAYERS | FIND_LIFE, critters);
            for(uint i = 0; i < num; i++)
            {
                critters[i].ToDead(ANIM2_DEAD_EXPLODE, null);
            }
	array<Critter@> critters2;
    uint            num2 = sewers.GetCritters(0, FIND_ONLY_PLAYERS | FIND_LIFE, critters2);
            for(uint i = 0; i < num2; i++)
            {
                critters2[i].ToDead(ANIM2_DEAD_EXPLODE, null);
            }
	array<Critter@> boss;
    uint            num3 = map.GetCritters(470, FIND_ONLY_NPC | FIND_ALL, boss);
		 for(uint i = 0; i < num3; i++)
            {
                if(valid(boss[i]))
					DeleteNpc(boss[i]);
            }
	CreateTimeEvent(AFTER(REAL_MINUTE(6)), "e_reload_map", map.Id, false);	
	
	return 0; //todo
}	
uint e_reload_map(array<uint>@ values)
{
	Map@ map = GetMap(values[0]);
	map.Reload();
	array<Critter@> critters2;
    uint            num2 = map.GetCritters(0, FIND_ONLY_NPC | FIND_LIFE, critters2);
            for(uint i = 0; i < num2; i++)
            {
                critters2[i].ToDead(ANIM2_DEAD_EXPLODE, null);
            }
	return 0;

}
uint e_start_event(array<uint>@ values)
{
	Map@ map = GetMap(values[0]);
	Location@ loc = map.GetLocation();
	Map@ sewers = loc.GetMapByIndex(12); //sewers
	int type = 21;//values[0];
	int time = REAL_MINUTE(60);
	uint16 hexX = 0;
    uint16 hexY = 0;
	event_on = true;
	CreateTimeEvent(AFTER(REAL_SECOND(10)), "e_light_on", map.Id, false);
	string message = "Renesco Secret Shelter has been opened. %COUNTDOWN% left.";
//	Log("15");
	//boss spawn
	sewers.GetEntireCoords(40, 0, hexX, hexY);
	Item@  door = sewers.GetDoor(hexX, hexY);
	door.LockerOpen();
	map.GetEntireCoords(34, 0, hexX, hexY);
	Critter@ boss = AddNpc(map, 470,hexX , hexY, 3, 7002, "map_newreno@init_boss", 0, 0, 0, true, 500); 
	boss.ChangeCrType(270);
    boss.ParamBase[ST_BASE_CRTYPE] = 270;
//	Log("15");
	CreateTimeEvent(AFTER(time), "e_end_event", map.Id, false);
	ServerEventCNTSet(message, map.Id, type, time);
	return 0;
	//return REAL_HOUR(Random(11,15));
}

void init_boss(Critter& cr, bool firstTime)
{
	//cr.SetEvent(CRITTER_EVENT_SMTH_ATTACK, "_SomeoneAttacked");
   // cr.SetEvent(CRITTER_EVENT_ATTACKED, "_Attacked");
	cr.SetEvent(CRITTER_EVENT_DEAD, "_dead");
    _CritSetMode(cr, MODE_NO_STEAL);
    _CritSetMode(cr, MODE_NO_DROP);
    _CritSetMode(cr, MODE_NO_LOOT);
    _CritSetMode(cr, MODE_NO_KNOCK);
	_CritSetMode(cr, MODE_NO_TALK);
	_CritSetMode(cr, MODE_NO_HEAL);
	cr.ParamBase[ST_MAX_LIFE] = 50000;
	cr.ParamBase[PE_BOSS] = 1;
	cr.ParamBase[ST_CURRENT_HP] = 50000;
	for(uint i = ST_NORMAL_RESIST; i < ST_ELECTRO_RESIST; i++)
		cr.ParamBase[i] = 0;
	for(uint i = SK_SMALL_GUNS; i < SK_OUTDOORSMAN; i++)
		cr.ParamBase[i] = 0;
	CreateTimeEvent(AFTER(REAL_SECOND(5)), "e_attack_everyone", cr.Id, false);
	CreateTimeEvent(AFTER(REAL_SECOND(10)), "e_aura_change", cr.Id, false);
}
import uint tier4item() from "item_pools";
void _dead(Critter& cr, Critter@ killer)
{
	Map@ map = cr.GetMap();
	uint16 hexX = 0;
	uint16 hexY = 0;
	cr.EraseTimeEvents(CTE_CHEAT_AURA);
	//REMOVE FORCEFIELD
	map.GetEntireCoords(31, 0, hexX, hexY);
	array<Item@> items;
    uint         n = map.GetItems(PID_FORCEFIELD_YELLOW_1, items); //forcefield
	for(uint i = 0; i < n; i++)
		{
		DeleteItem(items[i]);
		}

	
	//SPAWNLOOT
	array<Item@> lockers;
	uint l = map.GetItemsByType(ITEM_TYPE_CONTAINER, lockers);
	for(uint i = 0; i < l; i++)
		{
		
		lockers[i].AddItem(PID_VAULT_TEC_KEY,Random(1,5),Random(1,5));
		if(Random(1,100) < 6)
			lockers[i].AddItem(tier4item(),1,0);
		}
	//IF TIME TO DO MAKE FANCY EXPLOSIVES AROUND BUNKER
	if(valid(cr))
		DeleteNpc(cr);
	
}


uint e_aura_change(array<uint>@ values)
{
	Critter@ cr = GetCritter(values[0]);
	if(!valid(cr))
		return 0;
	if(!cr.IsLife())
		return 0;
	//cte_Aura(cr, 0, 3);
	cr.EraseTimeEvents(CTE_CHEAT_AURA);
	cr.AddTimeEvent("cheats@cte_Aura", REAL_SECOND(1), CTE_CHEAT_AURA, 3);
	CreateTimeEvent(AFTER(REAL_SECOND(21)), "e_aura_change_2", cr.Id, false);
	return 0;
}

uint e_aura_change_2(array<uint>@ values)
{
	Critter@ cr = GetCritter(values[0]);
	if(!valid(cr))
		return 0;
	if(!cr.IsLife())
		return 0;
	//cte_Aura(cr, 0, 12);
	cr.EraseTimeEvents(CTE_CHEAT_AURA);
	cr.AddTimeEvent("cheats@cte_Aura", REAL_SECOND(1), CTE_CHEAT_AURA, 12);
	CreateTimeEvent(AFTER(REAL_SECOND(21)), "e_aura_change", cr.Id, false);
	return 0;
}

uint e_attack_everyone(array<uint>@ values)
{
	Critter@ cr = GetCritter(values[0]);
	if(!valid(cr))
		return 0;
	if(!cr.IsLife())
		return 0;
	array<Critter@> targets;
	uint dys = 0;
	uint n = cr.GetMap().GetCritters(0, FIND_LIFE | FIND_ALL, targets);
	for( uint i = 0; i < n; i++)
		{
		if(cr.Id == targets[i].Id)
			continue;
		dys = GetDistantion(cr.HexX, cr.HexY, targets[i].HexX, targets[i].HexY);
		if(dys<19)
			{
			InjureCritter(targets[i], Random(1,500), DAMAGE_ELECTR, cr.Dir, NPC_DAMAGE);
			}	
		}
		
	return 	REAL_SECOND(Random(3,6));
	
}

uint e_light_off(array<uint>@ values)
{
	Map@ map = GetMap(values[0]);
	if(!valid(map))
		return 0;
	ChangeGroupLightsParam(map, 5, 1, 0);
	if(event_on)
		CreateTimeEvent(AFTER(REAL_SECOND(10)), "e_light_on", map.Id, false);
		
	return 0;
		
}

uint e_light_on(array<uint>@ values)
{
	Map@ map = GetMap(values[0]);
	if(!valid(map))
		return 0;
	ChangeGroupLightsParam(map, 5, 1, 75);
	if(event_on)
		CreateTimeEvent(AFTER(REAL_SECOND(10)), "e_light_off", map.Id, false);
		
	return 0;
		
}

 
void s_switch_1(Item& powerswitch, bool firstTime)
{
	powerswitch.SetEvent(ITEM_EVENT_SKILL, "_switch_1");	
}

bool _switch_1(Item& flag, Critter& crit, int skill)
{
	if(switch_1_on && switch_2_on)
		{
		opendoor(crit.GetMap());
		return true;
		}
	if(switch_1_on)
		crit.Say(SAY_NETMSG, "This switch its ON, try later");
	if(!switch_1_on)
		{
		switch_1_on = true;
		crit.Say(SAY_NETMSG, "You Switched ON it");
		if(!switch_2_on)
			{
			crit.Say(SAY_NETMSG, "Somebody else should switch another switch");
			CreateTimeEvent(AFTER(REAL_SECOND(5)), "e_check_switches", crit.GetMap().Id, false);
			}
		}
	
	return true;
}

void s_switch_2(Item& powerswitch, bool firstTime)
{
		powerswitch.SetEvent(ITEM_EVENT_SKILL, "_switch_2");
}

bool _switch_2(Item& flag, Critter& crit, int skill)
{
	if(switch_1_on && switch_2_on)
		{
		opendoor(crit.GetMap());
		return true;
		}
	if(switch_2_on)
		crit.Say(SAY_NETMSG, "This switch its ON, try later");
	if(!switch_2_on)
		{
		switch_2_on = true;
		crit.Say(SAY_NETMSG, "You Switched ON it");
		if(!switch_1_on)
			{
			crit.Say(SAY_NETMSG, "Somebody else should switch another switch");
			CreateTimeEvent(AFTER(REAL_SECOND(5)), "e_check_switches", crit.GetMap().Id, false);
			}
		}
	
	
	return true;
}
uint e_check_switches(array<uint>@ values)
{
	Map@ map = GetMap(values[0]);
	if(!valid(map))
		return 0;
	if(switch_2_on && switch_1_on)
		{
		opendoor(map);
		return 0;
		}
	switch_1_on = false;
	switch_2_on = false;
	return 0;
}

void opendoor(Map& map)
{
    uint16 hexX = 0;
    uint16 hexY = 0;
//	if(!valid(map))
	//	return;
	if(!mobs_spawned)
		{
		FillMapByMobs(map, 20, 20, 0, 13);
		mobs_spawned = true;
		}
    map.GetEntireCoords(30, 0, hexX, hexY);
    Item@  door = map.GetDoor(hexX, hexY);
	if(!valid(door))
		{
		Log("door not found new reno dung map id: " + map.Id);
		return;
		}
    door.LockerOpen();
	map.GetEntireCoords(36, 0, hexX, hexY);
	Item@  door2 = map.GetDoor(hexX, hexY);
	if(!valid(door2))
		{
		Log("door not found new reno dung map id: " + map.Id);
		return;
		}
    door2.LockerOpen();
	map.GetEntireCoords(35, 0, hexX, hexY);
	Item@  door3 = map.GetDoor(hexX, hexY);
	if(!valid(door3))
		{
		Log("door not found new reno dung map id: " + map.Id);
		return;
		}
    door3.LockerOpen();
	map.GetEntireCoords(37, 0, hexX, hexY);
	Item@  door4 = map.GetDoor(hexX, hexY);
	if(!valid(door4))
		{
		Log("door not found new reno dung map id: " + map.Id);
		return;
		}
    door4.LockerOpen();
	map.GetEntireCoords(38, 0, hexX, hexY);
	Item@  door5 = map.GetDoor(hexX, hexY);
	if(!valid(door5))
		{
		Log("door not found new reno dung map id: " + map.Id);
		return;
		}
    door5.LockerOpen();
	ChangeGroupLightsParam(map, 5, 0, -1);
	ChangeGroupLightsParam(map, 5, 2, 1);
	CreateTimeEvent(AFTER(REAL_SECOND(10)), "e_light_on", map.Id, false);
	

}

void t_death(Critter& player, Scenery& trigger, bool entered, uint8 Dir)
{
	if(player.IsLife() && entered && player.IsPlayer())
	{
	player.ToDead(ANIM2_DEAD_BLOODY_BURST, null);
	}
}
