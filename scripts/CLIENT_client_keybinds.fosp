                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;        

import bool GUI_IsKeyPressed(uint8 key)from"client_gui";
import void SetLastMode(uint8 mode)from"client_mapper_animation";

shared interface IBind
{
	bool Active();
	void Exec();
};

shared interface IBindExecFunc
{
	void Exec();
};

class BaseBind:IBind
{
	bool ctrl;
	bool alt;
	bool shift;
	BaseBind()
	{
		ctrl=false;
		alt=false;
		shift=false;
	}
	
	bool CtrlPressed(){return GUI_IsKeyPressed(0x1D)||GUI_IsKeyPressed(0x9D);}
	bool ShiftPressed(){return GUI_IsKeyPressed(0x2A)||GUI_IsKeyPressed(0x36);}
	bool AltPressed(){return GUI_IsKeyPressed(0x38)||GUI_IsKeyPressed(0xB8);}
	
	bool Active()
	{
		return((ctrl==CtrlPressed())&&(alt==AltPressed())&&(shift==ShiftPressed()));
	}
	
	void Exec(){}
};

shared class BindList
{
	array<IBind@>binds;
	
	BindList()
	{
		binds.resize(0);
	}
	
	bool TryRun()
	{
		if(__ConsoleActive)
		return(false);
		bool ret=false;
		for(uint i=0,j=binds.length();i<j;i++)
		if(binds[i].Active())
		{
			binds[i].Exec();
			ret=true;
		}
		return ret;
	}
	
	void AddBind(IBind@bind)
	{
		binds.insertLast(bind);
	}
};

class Bind:IBind
{
	array<int>modifiers;
	
	bool Active()
	{
		for(uint i=0;i<modifiers.length();i++)
		if(!GUI_IsKeyPressed(modifiers[i]))
		return false;
		
		return true;
	}
	
	void Exec(){}
};

class GMBind:Bind
{
	array<string>commands;
	
	void Exec()
	{
		for(uint i=0;i<this.commands.length();i++)
		{
			string entry=this.commands[i];
			
			array<string@>@command=split(entry," ");
			
			if(command[0]=="play")
			{
				string@rec=GetRecord(command[1]);
				if((@rec!=null))
				{
					Message("Playing...");
					StartReplay(rec);
				}
				else
				Message("Recording not valid, you sure the file exists?");
			}
			else
			RunServerScriptUnsafe("cheats@unsafe_ExecCommand",0,0,0,"command "+entry,null);
		}
	}
};

class UseBind:BaseBind
{
	array<uint16>pids;
	void Exec()
	{
		CritterCl@cr=GetChosen();
		ItemCl@item=null;
		for(uint i=0;i<pids.length();i++)
		{
			@item=cr.GetItem(pids[i],-1);
			if((@item!=null))
			break;
		}
		if(!(@item!=null))
		return;
		uint[]action={(6),item.Id,item.GetProtoId(),(0),cr.Id,(4),0};
		SetChosenActions(action);
	}
};

class StopCritterBind:BaseBind
{
	void Exec()
	{
		array<uint>actions;
		uint cnt=GetChosenActions(actions);
		if(actions.length()>0)
		{
			uint[]action={(0),0,0,0,0,0,0};
			SetChosenActions(action);
		}
	}
};

class ReloadBind:BaseBind
{
	void Exec()
	{
		CritterCl@cr=GetChosen();
		ItemCl@item=cr.GetItem(0,(1));
		if(!(@item!=null))
		return;
		uint[]Reload={(6),item.Id,0,(1),0,(3),0};
		
		if(item.GetType()==(3)&&item.AmmoCount<item.Proto.Weapon_MaxAmmoCount)
		{
			uint mode=item.Mode;
			RunServerScriptUnsafe("unsafe_client@unsafe_WeaponMode",mode,0,0,"",null);
			SetLastMode(mode);
			SetChosenActions(Reload);
		}
	}
};

class PickupBind:BaseBind
{
	void Exec()
	{
		RunServerScriptUnsafe("unsafe_client@unsafe_PickAll",0,0,0,"",null);
	}
};

class DropallBind:BaseBind
{
	void Exec()
	{
		RunServerScriptUnsafe("unsafe_client@unsafe_DropAll",0,0,0,"",null);
	}
};

class AimBind:BaseBind
{
	uint8 aim;
	AimBind(uint8 _aim)
	{
		this.aim=_aim;
	}
	void Exec()
	{
		CurrentAim=this.aim;
	}
};

class ToggleFogBind:BaseBind
{
	void Exec()
	{
		__ConfigFog=!__ConfigFog;
	}
};

class ToggleRoofBind:BaseBind
{
	void Exec()
	{
		__ShowRoof=!__ShowRoof;
		Message("Show roofs: "+__ShowRoof+".");
		RefreshMap(false,true,false);
	}
};

class ToggleWallBind:BaseBind
{
	void Exec()
	{
		__ShowWall=!__ShowWall;
		Message("Show walls: "+__ShowWall+".");
		RefreshMap(false,false,false);
	}
};

class ToggleMsFovBind:BaseBind
{
	void Exec()
	{
		__ConfigMsFov=!__ConfigMsFov;
		string confString=(__ConfigMsFov==true)?"on.":"off.";
		Message("Motion sensor range indicator "+confString);
	}
}

class FASelfBind:BaseBind
{
	void Exec()
	{
		CritterCl@cr=GetChosen();
		uint[]action={(10),(206),cr.Id,0,0,0,0};
		SetChosenActions(action);
	}
}

class DocSelfBind:BaseBind
{
	void Exec()
	{
		CritterCl@cr=GetChosen();
		uint[]action={(10),(207),cr.Id,0,0,0,0};
		SetChosenActions(action);
	}
}

class SSOtherBind:BaseBind
{
	void Exec()
	{
		CritterCl@cr=GetChosen();
		CritterCl@target=GetMonitorCritter(__MouseX,__MouseY);
		if(!(@target!=null))
		return;
		
		ItemCl@ss=cr.GetItem((144),-1);
		
		if(!(@ss!=null))
		{
			Message("No super stimpak in inventory.");
			return;
		}
		
		uint[]action={(6),ss.Id,ss.GetProtoId(),(2),target.Id,(4),0};
		SetChosenActions(action);
	}
}

class DischargeBind:BaseBind
{
	void Exec()
	{
		RunServerScriptUnsafe("unsafe_client@unsafe_Discharge",0,0,0,"",null);
	}
}

class ScienceAtHexBind:BaseBind
{
	void Exec()
	{
		RunServerScriptUnsafe("unsafe_client@unsafe_ScienceAtHex",0,0,0," ",null);
	}
};

class RepairAtHexBind:BaseBind
{
	void Exec()
	{
		RunServerScriptUnsafe("unsafe_client@unsafe_RepairAtHex",0,0,0," ",null);
	}
};

class CenterChosenBind:BaseBind
{
	void Exec()
	{
		CritterCl@cr=GetChosen();
		if((@cr!=null))
		MoveScreen(cr.HexX,cr.HexY,0);
	}
};             

shared interface IConfigVar
{
	string GetName();
	string GetValue();
	array<string>GetValueAsArray();
	array<string>GetValueAsArray(string&delimeter);
	void SetValue(int val);
	void SetValue(uint val);
	void SetValue(string&val);
	void SetValue(array<string>&val);
	void SetValue(array<string>&val,string&delimeter);
};

shared interface IConfigSection
{
	string GetName();
	bool AddVar(string&var,string&val);
	bool DeleteVar(string&var);
	bool DeleteVar(string&var,bool caseSensitive);
	IConfigVar@GetVar(string&var);
	IConfigVar@GetVar(string&varname,bool caseSensitive);
	void GetVars(array<string>&list);
	bool SetVar(string&varname,string val);
	bool VarExists(string&var);
	bool VarExists(string&var,bool caseSensitive);
};

shared interface IConfigFile
{
	bool IsVirtual();
	string GetName();
	bool AddSection(string&section);
	IConfigSection@GetSection(string&section);
	IConfigSection@GetSection(string&sectioname,bool caseSensitive);
	void GetSections(array<string>&list);
	bool SectionExists(string&section);
	bool SectionExists(string&section,bool caseSensitive);
};  

import IConfigFile@NewConfig(string&filename)from"config_file";
import bool LoadConfig(string&filename)from"config_file";
import bool SaveConfig(string&filename)from"config_file";
import bool UnloadConfig(string&filename)from"config_file";

import IConfigFile@GetConfigFile(string&filename)from"config_file";
import IConfigFile@GetConfigFile(string&filename,bool caseSensitive)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname,bool caseSensitive)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import string@GetConfigValue(string&filename,string&section,string@varname)from"config_file";
import string@GetConfigValue(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import bool SetConfigValue(string&filename,string&sectioname,string@varname,string&value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,bool value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,int value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,uint value)from"config_file";   

import string@GetRecord(const string&filename)from"client_recording";
import void StartReplay(string@rec)from"client_recording";
import int GUI_GetActiveScreen()from"client_gui";
import int GUI_GetActiveMainScreen()from"client_gui";     

array<BindList>bindlists;

dictionary KeyMap;
dictionary KeyMapRaw;

uint8 CurrentAim=(9);

uint8 GetCurrentAim()
{
	return CurrentAim;
} 

bool TryAddBind(string@s,BaseBind&bind)
{
	if(!(@s!=null))
	return true;
	array<string@>@splitted=split(s," ");
	if(!(@splitted!=null)||splitted.length()==0)
	return false;
	for(uint i=0,j=splitted.length()-1;i<j;i++)
	{
		if(splitted[i]=="Ctrl")
		bind.ctrl=true;
		else if(splitted[i]=="Shift")
		bind.shift=true;
		else if(splitted[i]=="Alt")
		bind.alt=true;
	}
	
	int key=0;
	if(!KeyMapRaw.get(splitted.last(),key))
	return false;
	bindlists[key].AddBind(bind);
	return true;
} 

void AddGMBind(int key,array<int>&modifiers,string command)
{
	GMBind bnd;
	bnd.commands.insertLast(command);
	bnd.modifiers=modifiers;
	bindlists[key].AddBind(bnd);
}

bool AddAimBind(string&cfgkey,uint8 num)
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings",cfgkey);
	AimBind bnd(num);
	return TryAddBind(s,bnd);
}

bool ProcessBind(uint8 key)
{
	int mainScreen=GUI_GetActiveMainScreen();
	int screen=GUI_GetActiveScreen();
	if(mainScreen==(2)||
	mainScreen==(1)||
	screen==(24)
	)
	return false;
	return bindlists[key].TryRun();
}

bool InitBinds()
{
	InitKeyMap();
	bindlists.resize(255);
	bool ret=true;
	ret=ret&&InitGMBinds();
	ret=ret&&InitAimBinds();
	ret=ret&&InitReloadBind();
	ret=ret&&InitDropallBind();
	ret=ret&&InitPickupBind();
	ret=ret&&InitUseBinds();
	ret=ret&&InitFogBind();
	ret=ret&&InitFASelfBind();
	ret=ret&&InitDocSelfBind();
	ret=ret&&InitSSOtherBind();
	ret=ret&&InitMsFovBind();
	ret=ret&&InitRoofBind();
	ret=ret&&InitWallBind();
	ret=ret&&InitDischargeBind();
	ret=ret&&InitStopCritterBind();
	ret=ret&&InitScienceAtHexBind();
	ret=ret&&InitCenterChosenBind();
	ret=ret&&InitRepairAtHexBind();
	return ret;
}

bool InitGMBinds()
{ 
	
	file f;
	if(f.open("keybinds.cfg","r")>=0)
	{
		string str;
		int l=f.readString(f.getSize(),str);
		f.close();
		
		array<string@>@lines=split(str,"\n");
		for(uint i=0;i<lines.length();i++)
		{
			if(lines[i].length()<5)
			continue;
			
			array<string@>@param=split(lines[i]," ");
			string command;
			
			array<int>modifiers;
			string mainkey;
			
			uint l=0;
			for(uint j=0;j<param.length();j++)
			{
				if(substring(param[j],0,3)=="DIK")
				l++;
			}
			if(l>1)
			{
				for(uint j=0;j<l;j++)
				{
					if(j==(l-1))
					mainkey=param[j];
					else
					{
						int modkey;
						KeyMap.get(param[j],modkey);
						modifiers.insertLast(modkey);
					}
				}
			}
			else
			mainkey=param[0];
			
			for(uint k=l;k<param.length();k++)
			{
				if(k==param.length()-1)
				command+=substring(param[k],0,param[k].length()-1);
				else
				command+=param[k]+" ";
			}
			
			int key=0;
			KeyMap.get(mainkey,key);
			AddGMBind(key,modifiers,command);
		}
	}
	
	return true;
}

bool InitUseBinds()
{
	for(int i=0;;i++)
	{
		string@s=GetConfigValue("FOnlineAT.cfg","Bindings","UseBind"+i);
		if(!(@s!=null))
		break;
		array<string@>@splitted=split(s," ");
		if(!(@splitted!=null)||splitted.length()==0)
		return false;
		bool ctrl=false;
		bool alt=false;
		bool shift=false;
		
		bool parsepids=false;
		array<uint16>pids;
		int key=0;
		for(uint i=0,j=splitted.length();i<j;i++)
		{
			if(!parsepids)
			{
				if(splitted[i]=="Ctrl")
				ctrl=true;
				else if(splitted[i]=="Shift")
				shift=true;
				else if(splitted[i]=="Alt")
				alt=true;
				else if(splitted[i]=="|")
				{
					if(i==0)
					return false;
					if(!KeyMapRaw.exists(splitted[i-1]))
					return false;
					KeyMapRaw.get(splitted[i-1],key);
					parsepids=true;
				}
			}
			else
			{
				int pid;
				StrToInt(splitted[i],pid);
				pids.insertLast(uint16(pid));
			}
		}
		UseBind bnd;
		bnd.shift=shift;
		bnd.ctrl=ctrl;
		bnd.alt=alt;
		bnd.pids=pids;
		bindlists[key].AddBind(bnd);
	}
	return true;
}

bool InitStopCritterBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","StopMove");
	StopCritterBind bnd;
	return TryAddBind(s,bnd);
}

bool InitReloadBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","Reload");
	ReloadBind bnd;
	return TryAddBind(s,bnd);
}

bool InitPickupBind()
{
	PickupBind bnd;
	return TryAddBind("Ctrl G",bnd);
}

bool InitDropallBind()
{
	DropallBind bnd;
	return TryAddBind("Ctrl D",bnd);
}

bool InitFASelfBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","FASelf");
	FASelfBind bnd;
	return TryAddBind(s,bnd);
}

bool InitDocSelfBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","DocSelf");
	DocSelfBind bnd;
	return TryAddBind(s,bnd);
}

bool InitSSOtherBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","SSOther");
	SSOtherBind bnd;
	return TryAddBind(s,bnd);
}

bool InitFogBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","ToggleFog");
	ToggleFogBind bnd;
	return TryAddBind(s,bnd);
}

bool InitRoofBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","ToggleRoof");
	ToggleRoofBind bnd;
	return TryAddBind(s,bnd);
}

bool InitWallBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","ToggleWall");
	ToggleWallBind bnd;
	return TryAddBind(s,bnd);
}

bool InitMsFovBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","ToggleMsFov");
	ToggleMsFovBind bnd;
	return TryAddBind(s,bnd);
}

bool InitDischargeBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","Discharge");
	DischargeBind bnd;
	return TryAddBind(s,bnd);
}

bool InitScienceAtHexBind()
{
	
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","ScienceAtHex");
	ScienceAtHexBind bnd;
	
	return TryAddBind(s,bnd);
}

bool InitRepairAtHexBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","RepairAtHex");
	RepairAtHexBind bnd;
	return TryAddBind(s,bnd);
}

bool InitCenterChosenBind()
{
	string@s=GetConfigValue("FOnlineAT.cfg","Bindings","CenterChosen");
	CenterChosenBind bnd;
	return TryAddBind(s,bnd);
}

bool InitAimBinds()
{
	bool ret=true;
	ret=ret&&AddAimBind("AimUncalled",(9));
	ret=ret&&AddAimBind("AimHead",(1));
	ret=ret&&AddAimBind("AimEyes",(7));
	ret=ret&&AddAimBind("AimGroin",(8));
	ret=ret&&AddAimBind("AimTorso",(4));
	ret=ret&&AddAimBind("AimLeftLeg",(6));
	ret=ret&&AddAimBind("AimRightLeg",(5));
	ret=ret&&AddAimBind("AimLeftArm",(2));
	ret=ret&&AddAimBind("AimRightArm",(3));
	
	return ret;
}

void InitKeyMap()
{
	KeyMapRaw.set("1",0x02);
	KeyMapRaw.set("2",0x03);
	KeyMapRaw.set("3",0x04);
	KeyMapRaw.set("4",0x05);
	KeyMapRaw.set("5",0x06);
	KeyMapRaw.set("6",0x07);
	KeyMapRaw.set("7",0x08);
	KeyMapRaw.set("8",0x09);
	KeyMapRaw.set("9",0x0A);
	KeyMapRaw.set("0",0x0B);
	KeyMapRaw.set("-",0x0C);
	KeyMapRaw.set("EQUALS",0x0D);
	KeyMapRaw.set("A",0x1E);
	KeyMapRaw.set("B",0x30);
	KeyMapRaw.set("C",0x2E);
	KeyMapRaw.set("D",0x20);
	KeyMapRaw.set("E",0x12);
	KeyMapRaw.set("F",0x21);
	KeyMapRaw.set("G",0x22);
	KeyMapRaw.set("H",0x23);
	KeyMapRaw.set("I",0x17);
	KeyMapRaw.set("J",0x24);
	KeyMapRaw.set("K",0x25);
	KeyMapRaw.set("L",0x26);
	KeyMapRaw.set("M",0x32);
	KeyMapRaw.set("N",0x31);
	KeyMapRaw.set("O",0x18);
	KeyMapRaw.set("P",0x19);
	KeyMapRaw.set("Q",0x10);
	KeyMapRaw.set("R",0x13);
	KeyMapRaw.set("S",0x1F);
	KeyMapRaw.set("T",0x14);
	KeyMapRaw.set("U",0x16);
	KeyMapRaw.set("V",0x2F);
	KeyMapRaw.set("W",0x11);
	KeyMapRaw.set("X",0x2D);
	KeyMapRaw.set("Y",0x15);
	KeyMapRaw.set("Z",0x2C);
	KeyMapRaw.set("[",0x1A);
	KeyMapRaw.set("]",0x1B);
	KeyMapRaw.set(";",0x27);
	KeyMapRaw.set("'",0x28);
	KeyMapRaw.set(",",0x33);
	KeyMapRaw.set(".",0x34);
	KeyMapRaw.set("/",0x35);
	KeyMapRaw.set("Tab",0x0F);
	KeyMapRaw.set("Ins",0xD2);
	KeyMapRaw.set("Del",0xD3);
	KeyMapRaw.set("Home",0xC7);
	KeyMapRaw.set("End",0xCF);
	KeyMapRaw.set("PgUp",0xC9);
	KeyMapRaw.set("PgDn",0xD1);
	KeyMapRaw.set("Num 0",0x52);
	KeyMapRaw.set("Num 1",0x4F);
	KeyMapRaw.set("Num 2",0x50);
	KeyMapRaw.set("Num 3",0x51);
	KeyMapRaw.set("Num 4",0x4B);
	KeyMapRaw.set("Num 5",0x4C);
	KeyMapRaw.set("Num 6",0x4D);
	KeyMapRaw.set("Num 7",0x47);
	KeyMapRaw.set("Num 8",0x48);
	KeyMapRaw.set("Num 9",0x49);
	KeyMapRaw.set("Num .",0x53);
	KeyMapRaw.set("Num /",0xB5);
	KeyMapRaw.set("Num *",0x37);
	KeyMapRaw.set("Num -",0x4A);
	KeyMapRaw.set("Num +",0x4E);
	
	KeyMap.set("DIK_ESCAPE",0x01);
	KeyMap.set("DIK_1",0x02);
	KeyMap.set("DIK_2",0x03);
	KeyMap.set("DIK_3",0x04);
	KeyMap.set("DIK_4",0x05);
	KeyMap.set("DIK_5",0x06);
	KeyMap.set("DIK_6",0x07);
	KeyMap.set("DIK_7",0x08);
	KeyMap.set("DIK_8",0x09);
	KeyMap.set("DIK_9",0x0A);
	KeyMap.set("DIK_0",0x0B);
	KeyMap.set("DIK_MINUS",0x0C);
	KeyMap.set("DIK_EQUALS",0x0D);
	KeyMap.set("DIK_BACK",0x0E);
	KeyMap.set("DIK_TAB",0x0F);
	KeyMap.set("DIK_Q",0x10);
	KeyMap.set("DIK_W",0x11);
	KeyMap.set("DIK_E",0x12);
	KeyMap.set("DIK_R",0x13);
	KeyMap.set("DIK_T",0x14);
	KeyMap.set("DIK_Y",0x15);
	KeyMap.set("DIK_U",0x16);
	KeyMap.set("DIK_I",0x17);
	KeyMap.set("DIK_O",0x18);
	KeyMap.set("DIK_P",0x19);
	KeyMap.set("DIK_LBRACKET",0x1A);
	KeyMap.set("DIK_RBRACKET",0x1B);
	KeyMap.set("DIK_RETURN",0x1C);
	KeyMap.set("DIK_LCONTROL",0x1D);
	KeyMap.set("DIK_A",0x1E);
	KeyMap.set("DIK_S",0x1F);
	KeyMap.set("DIK_D",0x20);
	KeyMap.set("DIK_F",0x21);
	KeyMap.set("DIK_G",0x22);
	KeyMap.set("DIK_H",0x23);
	KeyMap.set("DIK_J",0x24);
	KeyMap.set("DIK_K",0x25);
	KeyMap.set("DIK_L",0x26);
	KeyMap.set("DIK_SEMICOLON",0x27);
	KeyMap.set("DIK_APOSTROPHE",0x28);
	KeyMap.set("DIK_GRAVE",0x29);
	KeyMap.set("DIK_LSHIFT",0x2A);
	KeyMap.set("DIK_BACKSLASH",0x2B);
	KeyMap.set("DIK_Z",0x2C);
	KeyMap.set("DIK_X",0x2D);
	KeyMap.set("DIK_C",0x2E);
	KeyMap.set("DIK_V",0x2F);
	KeyMap.set("DIK_B",0x30);
	KeyMap.set("DIK_N",0x31);
	KeyMap.set("DIK_M",0x32);
	KeyMap.set("DIK_COMMA",0x33);
	KeyMap.set("DIK_PERIOD",0x34);
	KeyMap.set("DIK_SLASH",0x35);
	KeyMap.set("DIK_RSHIFT",0x36);
	KeyMap.set("DIK_MULTIPLY",0x37);
	KeyMap.set("DIK_LMENU",0x38);
	KeyMap.set("DIK_SPACE",0x39);
	KeyMap.set("DIK_CAPITAL",0x3A);
	KeyMap.set("DIK_F1",0x3B);
	KeyMap.set("DIK_F2",0x3C);
	KeyMap.set("DIK_F3",0x3D);
	KeyMap.set("DIK_F4",0x3E);
	KeyMap.set("DIK_F5",0x3F);
	KeyMap.set("DIK_F6",0x40);
	KeyMap.set("DIK_F7",0x41);
	KeyMap.set("DIK_F8",0x42);
	KeyMap.set("DIK_F9",0x43);
	KeyMap.set("DIK_F10",0x44);
	KeyMap.set("DIK_NUMLOCK",0x45);
	KeyMap.set("DIK_SCROLL",0x46);
	KeyMap.set("DIK_NUMPAD7",0x47);
	KeyMap.set("DIK_NUMPAD8",0x48);
	KeyMap.set("DIK_NUMPAD9",0x49);
	KeyMap.set("DIK_SUBTRACT",0x4A);
	KeyMap.set("DIK_NUMPAD4",0x4B);
	KeyMap.set("DIK_NUMPAD5",0x4C);
	KeyMap.set("DIK_NUMPAD6",0x4D);
	KeyMap.set("DIK_ADD",0x4E);
	KeyMap.set("DIK_NUMPAD1",0x4F);
	KeyMap.set("DIK_NUMPAD2",0x50);
	KeyMap.set("DIK_NUMPAD3",0x51);
	KeyMap.set("DIK_NUMPAD0",0x52);
	KeyMap.set("DIK_DECIMAL",0x53);
	KeyMap.set("DIK_F11",0x57);
	KeyMap.set("DIK_F12",0x58);
	KeyMap.set("DIK_NUMPADENTER",0x9C);
	KeyMap.set("DIK_RCONTROL",0x9D);
	KeyMap.set("DIK_DIVIDE",0xB5);
	KeyMap.set("DIK_SYSRQ",0xB7);
	KeyMap.set("DIK_RMENU",0xB8);
	KeyMap.set("DIK_PAUSE",0xC5);
	KeyMap.set("DIK_HOME",0xC7);
	KeyMap.set("DIK_UP",0xC8);
	KeyMap.set("DIK_PRIOR",0xC9);
	KeyMap.set("DIK_LEFT",0xCB);
	KeyMap.set("DIK_RIGHT",0xCD);
	KeyMap.set("DIK_END",0xCF);
	KeyMap.set("DIK_DOWN",0xD0);
	KeyMap.set("DIK_NEXT",0xD1);
	KeyMap.set("DIK_INSERT",0xD2);
	KeyMap.set("DIK_DELETE",0xD3);
	KeyMap.set("DIK_LWIN",0xDB);
	KeyMap.set("DIK_RWIN",0xDC);
}

