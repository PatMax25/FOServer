

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                                                                               

import void AddReputation(Critter@cr,uint index,int val)from"reputations";
import void SubReputation(Critter@cr,uint index,int val)from"reputations";
import void AddReputation(Critter@cr,uint index,int val,int cap)from"reputations";
import void SubReputation(Critter@cr,uint index,int val,int cap)from"reputations";
import uint ReputationIndex(uint locid)from"reputations";
import void ProcessProfitReputation(Critter@cr,uint index,int profit)from"reputations";

import void InitGroups()from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index)from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index,float fraction)from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index,int num,int den)from"reputations_modifiers";
import int GetReputationModifier(uint fac1,uint fac2)from"reputations_modifiers";
import int GetGroupsStatus(uint fac1,uint fac2)from"reputations_modifiers";
import int GetGroupsStatus(Critter&c1,Critter&c2)from"reputations_modifiers";
import void ReputationsInit(Critter&cr)from"reputations_modifiers";
import void FeedReputations(Critter@cr,uint index,int cap)from"reputations_modifiers";                    

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}    

import bool TryRepairItem(Critter&cr,Item&item)from"repair";
Item@SelectSkillItem(Critter&cr,Item@item,uint16 skill)
{
	Item@handItem=cr.GetItem(0,(1));
	if((@handItem!=null)&&handItem.Proto.Misc_ToolSkillNum==skill)
	return handItem;
	return item;
}

bool UseFirstAidOnCritter(Critter&cr,Critter&targetCr,Item@item)
{       
	
	bool is_self=(targetCr.Id==cr.Id);
	
	if(targetCr.IsDead())
	{
		cr.SayMsg((11),(3),(3400));
		return true;
	}
	if(targetCr.Param[(347)]>0)
	{
		cr.Say((11),"you can't heal cyborgs like that!");
		return true;
	}
	if(!(targetCr.Param[(72)]<targetCr.Param[(7)]))
	{
		if(((targetCr.Damage[(502)]>0)||(targetCr.Damage[(503)]>0)||(targetCr.Damage[(504)]>0)||(targetCr.Damage[(505)]>0)||(targetCr.Damage[(506)]>0)))
		cr.SayMsg((11),(3),(3404));
		else if(is_self)
		cr.SayMsg((11),(3),(3402));
		return true;
	}
	
	if(cr.Timeout[(230)]>0)
	{
		if(cr.IsPlayer())
		cr.SayMsg((11),(3),(3401));
		return true;
	}
	
	if(!is_self&&cr.Param[(510)]!=0&&cr.GetAccess()<(1))
	cr.ParamBase[(510)]=0;      
	
	bool isLiving=cr.Param[(398)]>0;
	bool isCritFailure=Random(1,100)<=int(isLiving?10:5);
	bool isCritSuccess=false;
	if(isCritFailure)
	{
		if(Random(0,isLiving?450:250)<=cr.Param[(206)])
		{
			isCritFailure=false;
			isCritSuccess=true;
			cr.Say((11),"That was a very skillful intervention.");
		}
		else
		cr.Say((11),"It went horrible.");
	}
	
	int sk=cr.Param[(206)];
	int toolBonus=0;
	
	@item=SelectSkillItem(cr,item,(206));
	if((@item!=null))
	{
		sk+=item.Proto.Misc_ToolSkillBonus;
		toolBonus=item.Proto.Misc_ToolSkillBonus;
		if(Random(0,30)==0)
		{
			cr.DeleteItem(item.GetProtoId(),1);
			cr.Say((11),"You ran out of medical supplies after healing yourself.");
		}
	}
	
	sk=(((sk)>(200))?(200):(((sk)<(0))?(0):(sk)));
	int healerBonus=(cr.Param[(333)]>0?Random(15,30):0)+(cr.Param[(320)]>0?Random(50,100):0);
	int heal=(isCritSuccess?(sk+healerBonus):(isCritFailure?Random(1,sk/10):(Random((sk*2)/4,sk)+healerBonus)))*(cr.Param[(382)]>0?2:1)-cr.Param[(395)];
	if(heal<1)
	heal=1;
	
	if(cr.IsPlayer()&&cr.Timeout[(238)]>0&&heal>150)
	heal=(150+healerBonus+toolBonus)*(cr.Param[(382)]>0?2:1)-cr.Param[(395)];
	if(cr.Param[(73)]>0)
	heal=heal*(0.50);
	int curHp=targetCr.Param[(72)];
	int maxHp=targetCr.Param[(7)];
	if(curHp+heal>maxHp)
	heal=maxHp-curHp;
	targetCr.ParamBase[(72)]+=heal;
	if(cr.Param[(320)]>0&&cr.Param[(333)]>0&&cr.Param[(398)]>0&&!is_self)
	cr.ParamBase[(72)]+=heal/2;
	
	if(is_self)
	VerboseAction(cr,"patches wounds");
	else
	VerboseAction(cr,targetCr,"treats wounds of TARGET");
	cr.Say((11),"Hit Points +"+heal);
	if(!is_self)
	targetCr.Say((11),"Hit Points +"+heal);
	if(!is_self&&targetCr.Param[(89)]>203)
	cr.ParamBase[(1184)]+=heal;
	int cd_fa=245-sk;
	if(cr.Param[(333)]>0)
	cd_fa/=2;
	if(cr.Param[(450)]==0)
	cr.TimeoutBase[(230)]=((__FullSecond)+(((cd_fa)*__TimeMultiplier)));
	else cr.TimeoutBase[(230)]=((__FullSecond)+(((3)*__TimeMultiplier)));   
	
	if(cr.Param[(450)]==0)cr.ParamBase[(76)]+=heal*3*(GetGvar((62001)));
	if((targetCr.IsNpc()&&!(((targetCr.Param[(534)]&((0x00000020)))!=0)))&&cr.Id!=targetCr.Id&&IsHumanoid(targetCr)&&!IsCurrentEnemy(targetCr,cr.Id))
	{
		if((targetCr.Param[(106)]>=2&&targetCr.Param[(106)]<=99))
		AddReputation(cr,targetCr.Param[(106)],heal/20,(500));
		if(cr.IsSeenBy(targetCr))
		targetCr.Say((2),"Thank you.");
	}
	
	if(cr.IsPlayer())
	{
		LogExperience(cr,heal*3*(GetGvar((62001))),(206),targetCr.GetProtoId());
		AddScore(cr,(9),heal);
	}
	if(cr.Param[(450)]>0)
	cr.ParamBase[(75)]+=400;
	
	return true;
}

bool UseDoctorOnCritter(Critter&cr,Critter&targetCr,Item@item)
{       
	
	bool is_self=(targetCr.Id==cr.Id);
	
	if(targetCr.IsDead()&&cr.Param[(450)]==0)
	{
		cr.SayMsg((11),(3),(3400));
		return true;
	}  
	
	if(targetCr.Param[(347)]>0)
	{
		cr.Say((11),"you can't heal cyborgs like that!");
		return true;
	}  
	
	if(cr.Timeout[(231)]>0)
	{
		if(cr.IsPlayer())
		cr.SayMsg((11),(3),(3401));
		return true;
	}
	
	if(targetCr.IsPlayer()&&targetCr.IsDead()&&cr.Param[(450)]!=0)
	{
		targetCr.ToLife();
		targetCr.ParamBase[(72)]+=Random(20,50);
		cr.TimeoutBase[(231)]=((__FullSecond)+((cr.Param[(333)]>0?((240-cr.Param[(4)]*10)*__TimeMultiplier):((480-cr.Param[(4)]*5)*__TimeMultiplier))));
		return true;
	}
	
	if((!((targetCr.Damage[(502)]>0)||(targetCr.Damage[(503)]>0)||(targetCr.Damage[(504)]>0)||(targetCr.Damage[(505)]>0)||(targetCr.Damage[(506)]>0)))&&(cr.Param[(333)]==0||!targetCr.IsKnockout()))
	{
		if((targetCr.Param[(72)]<targetCr.Param[(7)]))
		cr.SayMsg((11),(3),(3405));
		else if(is_self)
		cr.SayMsg((11),(3),(3403));
		return true;
	}
	if(!is_self&&cr.Param[(510)]!=0&&cr.GetAccess()<(1))
	cr.ParamBase[(510)]=0;
	
	int sk=cr.Param[(207)];
	
	@item=SelectSkillItem(cr,item,(207));
	if((@item!=null))
	{
		sk+=item.Proto.Misc_ToolSkillBonus;
		if(Random(0,30)==0)
		cr.DeleteItem(item.GetProtoId(),1);
	}
	
	int uninjured=0;
	int injured=0;
	
	for(int i=(502);i<=(506);++i)
	{
		if(!(targetCr.Damage[i]>0))
		continue;
		injured++;
		if(sk>Random(5,95))
		{
			targetCr.DamageBase[i]=0;
			cr.SayMsg((11),(3),(3410+(i-(500))));
			uninjured++;
		}
		else
		{
			cr.SayMsg((11),(3),(3420+(i-(500))));
		}
		sk-=35;
	} 
	
	if(targetCr.IsKnockout()&&cr.Param[(333)]!=0)
	{
		targetCr.ParamBase[(75)]=0;
	}
	int cd_doc=350-sk;
	if(cr.Param[(333)]>0)
	cd_doc/=2;
	
	cr.TimeoutBase[(231)]=((__FullSecond)+(((cd_doc)*__TimeMultiplier)));
	
	if(uninjured>0)
	{
		if(is_self)
		VerboseAction(cr,"applies wound dressing"+(uninjured>1?"s":""));
		else
		VerboseAction(cr,targetCr,"treats injur"+(uninjured>1?"ies":"y")+" of TARGET");
		cr.ParamBase[(76)]+=uninjured*50*(GetGvar((62001)));
		if((targetCr.IsNpc()&&!(((targetCr.Param[(534)]&((0x00000020)))!=0)))&&!is_self&&IsHumanoid(targetCr)&&!IsCurrentEnemy(targetCr,cr.Id))
		{
			if((targetCr.Param[(106)]>=2&&targetCr.Param[(106)]<=99))
			AddReputation(cr,targetCr.Param[(106)],uninjured*8,(700));
			if(cr.IsSeenBy(targetCr))
			targetCr.Say((2),"Thank you.");
		}
	}
	if(cr.Param[(450)]>0)
	cr.ParamBase[(75)]+=400;
	return true;
} 

bool UseRepairOnCritter(Critter&cr,Critter&targetCr,Item@item)
{       
	
	bool is_self=(targetCr.Id==cr.Id);
	
	if(targetCr.IsDead())
	{
		cr.SayMsg((11),(3),(3400));
		return true;
	}
	if(!targetCr.IsPlayer())
	return true;
	if(targetCr.Param[(347)]==0&&!is_self)
	{
		cr.Say((11),"It does nothing");
		return true;
	}
	if(is_self&&cr.Param[(347)]==0)
	{
		cr.Say((11),"It does nothing");
		return true;
	}
	if(!(targetCr.Param[(72)]<targetCr.Param[(7)]))
	{
		if(((targetCr.Damage[(502)]>0)||(targetCr.Damage[(503)]>0)||(targetCr.Damage[(504)]>0)||(targetCr.Damage[(505)]>0)||(targetCr.Damage[(506)]>0)))
		cr.SayMsg((11),(3),(3404));
		else if(is_self)
		cr.SayMsg((11),(3),(3402));
		return true;
	}
	
	if(cr.Timeout[(232)]>0)
	{
		if(cr.IsPlayer())
		cr.SayMsg((11),(3),(3401));
		return true;
	}
	
	if(!is_self&&cr.Param[(510)]!=0&&cr.GetAccess()<(1))
	cr.ParamBase[(510)]=0;      
	
	bool isLiving=cr.Param[(347)]>0;
	bool isCritFailure=Random(1,100)<=int(isLiving?10:5);
	bool isCritSuccess=false;
	if(isCritFailure)
	{
		if(Random(0,isLiving?450:250)<=cr.Param[(213)])
		{
			isCritFailure=false;
			isCritSuccess=true;
			cr.Say((11),"That was a very skillful intervention.");
		}
		else
		cr.Say((11),"It went horrible.");
	}
	
	int sk=cr.Param[(213)];
	int toolBonus=0;
	
	@item=SelectSkillItem(cr,item,(213));
	if((@item!=null))
	{
		sk+=item.Proto.Misc_ToolSkillBonus;
		toolBonus=item.Proto.Misc_ToolSkillBonus;
		if(Random(0,30)==0)
		{
			cr.DeleteItem(item.GetProtoId(),1);
			cr.Say((11),"You ran out of medical supplies after healing yourself.");
		}
	}
	
	sk=(((sk)>(200))?(200):(((sk)<(0))?(0):(sk)));
	int healerBonus=(cr.Param[(332)]>0?Random(15,30):0)+(cr.Param[(398)]>0?Random(20,40):0);
	int heal=isCritSuccess?(sk+healerBonus):(isCritFailure?Random(1,sk/10):(Random((sk*2)/4,sk)+healerBonus));
	if(heal<1)
	heal=1;
	
	if(cr.IsPlayer()&&cr.Timeout[(238)]>0&&heal>150)
	heal=150+healerBonus+toolBonus;
	if(cr.Param[(73)]>0)
	heal=heal*(0.50);
	if(cr.Param[(320)]>0&&cr.Param[(333)]>0&&cr.Param[(398)]>0&&!is_self)
	cr.ParamBase[(72)]+=heal/2;
	int curHp=targetCr.Param[(72)];
	int maxHp=targetCr.Param[(7)];
	if(curHp+heal>maxHp)
	heal=maxHp-curHp;
	targetCr.ParamBase[(72)]+=heal;
	
	if(is_self)
	VerboseAction(cr,"Repairing");
	else
	VerboseAction(cr,targetCr,"Repairing TARGET");
	cr.Say((11),"Hit Points +"+heal);
	if(!is_self)
	targetCr.Say((11),"Hit Points +"+heal);
	
	cr.TimeoutBase[(232)]=((__FullSecond)+((((30)*__TimeMultiplier)+cr.Param[(395)])));   
	
	if(cr.Param[(77)]<999)cr.ParamBase[(76)]+=heal*3*(GetGvar((62001)));
	
	if(cr.IsPlayer())
	{
		LogExperience(cr,heal*3*(GetGvar((62001))),(213),targetCr.GetProtoId());
		AddScore(cr,(9),1);
	}
	
	return true;
}

bool UseScienceOnCritter(Critter&cr,Critter&targetCr,Item@item)
{       
	
	bool is_self=(targetCr.Id==cr.Id);
	
	if(targetCr.IsDead())
	{
		cr.SayMsg((11),(3),(3400));
		return true;
	}
	if(!targetCr.IsPlayer())
	return true;
	if(targetCr.Param[(347)]==0)
	{
		cr.Say((11),"It does nothing!");
		return true;
	}
	if(is_self&&cr.Param[(347)]==0)
	{
		cr.Say((11),"It does nothing");
		return true;
	} 
	
	if((!((targetCr.Damage[(502)]>0)||(targetCr.Damage[(503)]>0)||(targetCr.Damage[(504)]>0)||(targetCr.Damage[(505)]>0)||(targetCr.Damage[(506)]>0)))&&(cr.Param[(333)]==0||!targetCr.IsKnockout()))
	{
		if((targetCr.Param[(72)]<targetCr.Param[(7)]))
		cr.SayMsg((11),(3),(3405));
		else if(is_self)
		cr.SayMsg((11),(3),(3403));
		return true;
	}
	
	if(cr.Timeout[(231)]>0)
	{
		if(cr.IsPlayer())
		cr.SayMsg((11),(3),(3401));
		return true;
	}
	
	if(!is_self&&cr.Param[(510)]!=0&&cr.GetAccess()<(1))
	cr.ParamBase[(510)]=0;
	
	int sk=cr.Param[(212)];
	
	@item=SelectSkillItem(cr,item,(212));
	if((@item!=null))
	{
		sk+=item.Proto.Misc_ToolSkillBonus;
		if(Random(0,30)==0)
		cr.DeleteItem(item.GetProtoId(),1);
	}
	
	int uninjured=0;
	int injured=0;
	
	for(int i=(502);i<=(506);++i)
	{
		if(!(targetCr.Damage[i]>0))
		continue;
		injured++;
		if(sk>Random(5,95))
		{
			targetCr.DamageBase[i]=0;
			cr.SayMsg((11),(3),(3410+(i-(500))));
			uninjured++;
		}
		else
		{
			cr.SayMsg((11),(3),(3420+(i-(500))));
		}
		sk-=35;
	} 
	
	if(targetCr.IsKnockout()&&cr.Param[(333)]!=0)
	{
		targetCr.ParamBase[(75)]=0;
	} 
	
	int cd_sc=350-sk;
	if(cr.Param[(333)]>0)
	cd_sc/=2;
	cr.TimeoutBase[(233)]=((__FullSecond)+(((cd_sc)*__TimeMultiplier)));
	
	if(uninjured>0)
	{
		if(is_self)
		VerboseAction(cr,"applies wound dressing"+(uninjured>1?"s":""));
		else
		VerboseAction(cr,targetCr,"treats injur"+(uninjured>1?"ies":"y")+" of TARGET");
		cr.ParamBase[(76)]+=uninjured*50*(GetGvar((62001)));
		if((targetCr.IsNpc()&&!(((targetCr.Param[(534)]&((0x00000020)))!=0)))&&!is_self&&IsHumanoid(targetCr)&&!IsCurrentEnemy(targetCr,cr.Id))
		{
			if((targetCr.Param[(106)]>=2&&targetCr.Param[(106)]<=99))
			AddReputation(cr,targetCr.Param[(106)],uninjured*8,(700));
			if(cr.IsSeenBy(targetCr))
			targetCr.Say((2),"Thank you.");
		}
	}
	return true;
}