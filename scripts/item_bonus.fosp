                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 

import void SetLexem(Item&item,string&lex,string&value)from"lexems";

uint BonusNumber(Item@it)
{
	return 0;
}

void AddBonusOrNot(Item@it)
{
	
	return;
}

void AddSpecialBonusLow(Item@it)
{
	
	return;
}

void AddSpecialBonus(Item@it)
{
	
	return;
}

void AddBonuses(Item@it,string@crafter)
{
	if(!it.IsStackable())
	it.Val0+=Random(1,1000);
	
	return;
}
import void _weapon_perk(Item&item,bool firstTime)from"item_level";
import void _armor_perk(Item&item,bool firstTime)from"item_level"; 

void AddBonusHinkley(Item@it)
{
	it.Val0=500000;
	it.Update();
	if(it.GetType()==(3))
	_weapon_perk(it,false);
	
	if(it.GetType()==(1))
	_armor_perk(it,false);
	return;
}

void AddBonuses(Item@it,int magic)
{
	
	return;
}

void AddArmorBonus(Item@it,int number)
{
	int minRoll=1;
	int maxRoll=1;
	
	uint bonusType=0;
	uint maxBonusType=(123); 
	
	if(it.GetProtoId()>=725&&it.GetProtoId()<=741)maxBonusType=(111);
	if(it.GetProtoId()==25588||it.GetProtoId()==25589)maxBonusType=(111);
	
	do
	{
		bonusType=Random(100,maxBonusType);
	}
	while(HasBonusAlready(it,bonusType));
	
	switch(bonusType)
	{
		
		case(100):{maxRoll=5;break;}
		case(101):{maxRoll=5;break;}
		case(102):{maxRoll=5;break;}
		case(103):{maxRoll=5;break;}
		case(104):{maxRoll=5;break;}
		case(105):{maxRoll=10;break;}
		case(106):{maxRoll=10;break;}
		case(107):{maxRoll=10;break;}
		case(108):{maxRoll=10;break;}
		case(109):{maxRoll=10;break;}
		case(110):{minRoll=-7;maxRoll=-1;break;}
		case(111):{minRoll=-7;maxRoll=-1;break;}
		
		case(112):break;
		case(113):{minRoll=10;maxRoll=30;break;}
		case(114):{minRoll=10;maxRoll=30;break;}
		case(115):break;
		case(116):break;
		case(117):break;
		case(118):break;
		case(119):break;
		case(120):break;
		case(121):break;
		case(122):{minRoll=5;maxRoll=20;break;}
		case(123):{minRoll=1;maxRoll=5;break;}
		default:break;
	} 
	
	return;
} 

void AddWeaponBonus(Item@it,int number,bool isCrafting=false)
{
	
	uint minRoll=1;
	uint maxRoll=1;
	
	uint bonusType=0;
	
	int skillNum=it.Proto.Weapon_Skill_0;
	bool isRangeWeapon=(skillNum==(200)||skillNum==(201)||skillNum==(202));
	
	do
	{
		if(isRangeWeapon)
		bonusType=Random(100,(106));
		else
		bonusType=Random(100,(105));
	}
	while(HasBonusAlready(it,bonusType));
	
	switch(bonusType)
	{
		case(100):{maxRoll=7;break;}
		case(101):{maxRoll=7;break;}
		case(102):{minRoll=10;maxRoll=25;break;}
		case(103):{minRoll=10;maxRoll=25;break;}
		case(104):{minRoll=5;maxRoll=25;break;}
		case(106):{minRoll=1;maxRoll=4;break;}
		case(105):break;
		default:break;
	} 
	
	uint roll=Random(minRoll,maxRoll);  
	
	return;
} 

bool IsBonusExcluded(bool isCrafting,int bonusType)
{
	if(!isCrafting)
	return false; 
	
	return false;
} 

bool HasBonusAlready(Item@it,int bonusType)
{
	
	return false;
}  

int checkBonus(Item@it,int bonusType)
{
	
	return 0;
} 

void AddSpecialBonusEncounterBoss(Item@it)
{
	it.Val0=Random(35000,1250000);
	it.Update();
	
	if(it.GetType()==(3))
	_weapon_perk(it,false);
	
	if(it.GetType()==(1))
	_armor_perk(it,false);
}