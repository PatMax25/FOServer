

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                    

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

shared class Sprite
{
	Sprite()
	{
		Id=0;
		Width=0;
		Height=0;
		FrmCount=0;
	}
	
	bool Load(string&name,int path)
	{
		if(name.length()>0)
		{
			Id=LoadSprite(name,path);
			Filename=name;
		}
		else
		Id=0;
		RefreshData();
		return Id!=0;
	}
	
	void LoadHash(uint nameHash,uint8 dir)
	{
		Id=LoadSprite(nameHash,dir);
		RefreshData();
	}
	
	void LoadByIni(string&iniKey,int path)
	{
		string@name=GetIfaceIniStr(iniKey);
		if(@name!=null&&name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Draw(int x,int y)
	{
		if(Id!=0)
		DrawSprite(Id,-1,x,y,0);
	}
	
	private void RefreshData()
	{
		if(Id!=0)
		{
			Width=GetSpriteWidth(Id,0);
			Height=GetSpriteHeight(Id,0);
			FrmCount=GetSpriteCount(Id);
		}
		else
		{
			Width=0;
			Height=0;
			FrmCount=0;
			Filename="";
		}
	}
	
	uint Id;
	int Width;
	int Height;
	uint FrmCount;
	string Filename;
};     

shared interface IControl
{
	void SetParent(IControl@parent); 
	
	bool IsVisible();
	bool IsActive();
	
	void Disable();
	void Enable();
	
	void Show(bool showAll=false);
	void Show(int left,int top);
	void Hide(); 
	
	void ShowWindow();
	void ShowWindow(int left,int top);
	void HideWindow();
	void Center();
	
	int Left();
	int Right();
	int Top();
	int Bottom();
	int Width();
	int Height();
	
	IControl@Position(int,int);
	IControl@Position(string&iniKey);
	IControl@Left(int);
	IControl@Top(int);
	IControl@Width(int);
	IControl@Height(int);
	IControl@Size(int,int);
	
	void Init();
	void Draw();
	void Update();
	bool MouseDown(int x,int y,int click);
	bool MouseUp(int x,int y,int click);
	void MouseMove(int fromX,int fromY,int toX,int toY);
	bool KeyDown(uint8 key,string&keyText);
	void KeyUp(uint8 key,string&keyText);
};   

class Control:IControl
{
	
	IControl@parent;
	
	array<IControl@>controls; 
	
	int left;
	int top;
	int width;
	int height;     
	
	bool active;
	
	bool visible;
	
	bool focus; 
	
	bool mousePressed;
	int mouseX;
	int mouseY;
	
	Control()
	{
		active=true;
		visible=true;
		focus=false;
		
		mousePressed=false;
		mouseX=0;
		mouseY=0;
		
		left=top=width=height=0;
	}
	
	Control(int left,int top,int width,int height)
	{
		active=true;
		visible=true;
		focus=false;
		
		mousePressed=false;
		mouseX=0;
		mouseY=0;
		
		this.left=left;
		this.top=top;
		this.width=width;
		this.height=height;
	}    
	
	bool IsVisible(){return visible;}
	bool IsActive(){return active;}   
	
	int Left()
	{
		if((@parent!=null))
		return parent.Left()+left;
		else
		return left;
	}
	int Top()
	{
		if((@parent!=null))
		return parent.Top()+top;
		else
		return top;
	}
	int Right(){return Left()+Width();}
	int Bottom(){return Top()+Height();}
	int Height(){return height;}
	int Width(){return width;}
	
	IControl@Position(int x,int y){left=x;top=y;return this;}
	IControl@Left(int x){left=x;return this;}
	IControl@Top(int y){top=y;return this;}
	IControl@Width(int w){width=w;return this;}
	IControl@Height(int h){height=h;return this;}
	IControl@Size(int w,int h){height=h;width=w;return this;}
	
	IControl@Position(string&iniKey)
	{
		left=0;
		top=0;
		width=0;
		height=0; 
		
		string@str=GetIfaceIniStr(iniKey);
		if(@str==null||str=="")
		return this;
		
		array<string@>@valuesStr=split(str," ");
		if(valuesStr.length()!=4)
		return this;
		
		array<int>values(4);
		for(int i=0;i<4;i++)
		if(!StrToInt(valuesStr[i],values[i]))
		return this;
		
		left=values[0];
		top=values[1];
		width=values[2]-values[0]+1;
		height=values[3]-values[1]+1;
		return this;
	}   
	
	bool IsInside(int x,int y)
	{
		return(x>=Left())&&(x<Right())&&(y>=Top())&&(y<Bottom());
	}   
	
	void SetParent(IControl@control)
	{
		@parent=control;
	}   
	
	void Enable()
	{
		active=true;
		OnEnabled();
	}
	void Disable()
	{
		active=false;
		OnDisabled();
	}   
	
	void Show(bool showAll=false)
	{
		visible=true;
		if(showAll)
		{
			for(uint i=0,j=controls.length();i<j;i++)
			controls[i].Show(showAll);
		}
		OnShow();
	}
	void Show(int left,int top)
	{
		this.left=left;
		this.top=top;
		visible=true;
		OnShow();
	}
	void Hide()
	{
		visible=false;
		for(uint i=0,j=controls.length();i<j;i++)
		controls[i].Hide();
		OnHide();
	}
	
	void ShowWindow()
	{
		Message("This control does not have window attached.");
	}
	void ShowWindow(int x,int y)
	{
		Message("This control does not have window attached.");
	}
	void HideWindow()
	{
		Message("This control does not have window attached.");
	}  
	
	void Center()
	{
		Position(parent.Width()/2-Width()/2,parent.Height()/2-Height()/2);
	}
	void Init()
	{
		for(uint i=0,j=controls.length();i<j;i++)
		controls[i].Init();
	}  
	
	void SetFocus(bool focused)
	{
		this.focus=focused;
		
		if(focused)
		GotFocus();
		else
		LostFocus();
	}   
	
	void AddControl(IControl@control)
	{
		control.SetParent(this);
		controls.insertLast(@control);
	}    
	
	bool MouseDown(int x,int y,int click)
	{
		bool intercepted=false;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].MouseDown(x,y,click)?true:intercepted;
		}
		if(!intercepted)
		{
			if(click!=(4)&&click!=(3))
			{
				if(IsInside(x,y))
				{
					mousePressed=true;
					mouseX=x;
					mouseY=y;
					SetFocus(true);
					intercepted=true;
				}
				else
				{
					SetFocus(false);
				}
			}
		}
		return intercepted;
	}
	bool MouseUp(int x,int y,int click)
	{
		bool intercepted=false;
		if(IsInside(x,y)&&mousePressed)
		{
			
			Click();
			intercepted=true;
		}
		
		mousePressed=false;
		
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].MouseUp(x,y,click)?true:intercepted;
		}
		return intercepted;
	}
	void MouseMove(int fromX,int fromY,int toX,int toY)
	{
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			controls[i].MouseMove(fromX,fromY,toX,toY);
		}
	}
	bool KeyDown(uint8 key,string&keyText)
	{
		bool intercepted=false;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].KeyDown(key,keyText)?true:intercepted;
		}
		return intercepted;
	}
	void KeyUp(uint8 key,string&keyText)
	{
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			controls[i].KeyUp(key,keyText);
		}
	}   
	
	void Draw()
	{
		for(uint i=0,j=controls.length();i<j;i++)
		if(controls[i].IsVisible())
		controls[i].Draw();
	}  
	
	void Update()
	{
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsActive())
			controls[i].Update();
		}
	}        
	
	void Click()
	{}  
	
	void GotFocus()
	{}  
	
	void LostFocus()
	{}  
	
	void OnShow()
	{}  
	
	void OnHide()
	{}  
	
	void OnEnabled()
	{}  
	
	void OnDisabled()
	{}
};      

class CButton:Control
{
	string caption;
	Sprite spriteUp;
	Sprite spriteDown;
	
	int textBorder;
	
	CButton(int left,int top,string@caption)
	{
		super(left,top,119,30);
		spriteUp.Load("wm_tab.png",(4));
		spriteDown.Load("wm_blanktab.png",(4));
		this.caption=caption;
		textBorder=30;
	}
	CButton(int left,int top,int width,int height,string&down)
	{ 
		
		if(!spriteDown.Load(down,(4)))
		Message("Couldn't load sprite: "+down);
		super(left,top,(((width)>(spriteDown.Width))?(width):(spriteDown.Width)),(((height)>(spriteDown.Height))?(height):(spriteDown.Height)));
		textBorder=0;
	}
	CButton(int left,int top,int width,int height,string&up,string&down)
	{
		if(!spriteUp.Load(up,(4)))
		Message("Couldn't load sprite(up): "+up);
		if(!spriteDown.Load(down,(4)))
		Message("Couldn't load sprite(down): "+down);
		super(left,top,(((width)>(spriteUp.Width))?(width):(spriteUp.Width)),(((height)>(spriteUp.Height))?(height):(spriteUp.Height)));
		textBorder=0;
	}
	CButton(string&iniKey,string&down)
	{ 
		
		if(!spriteDown.Load(down,(4)))
		Message("Couldn't load sprite: "+down);
		Control::Position(iniKey);
		textBorder=0;
	}  
	
	void SetCaption(string@caption){this.caption=caption;}
	
	void Draw()
	{
		if(mousePressed)
		{
			if(spriteDown.Id!=0)
			DrawSprite(spriteDown.Id,0,Left(),Top(),0);
		}
		else
		{
			if(spriteUp.Id!=0)
			DrawSprite(spriteUp.Id,0,Left(),Top(),0);
		}
		int color=active?0:int(0xffaaaaaa);
		if(caption!="")
		DrawText(caption,Left()+textBorder,Top(),Width()-textBorder,Height(),color,(5),(0x0008)|(0x0200));
	}
}; 

class CDialogRedButton:Control
{
	Sprite spriteDown;
	
	CDialogRedButton(int left,int top)
	{
		super(left,top,16,16);
		spriteDown.Load("di_rdbt1.frm",(4));
	}  
	
	void Draw()
	{
		if(mousePressed)
		DrawSprite(spriteDown.Id,0,Left(),Top(),0);
	}
};

class CSmallButton:Control
{
	Sprite spriteDown;
	
	CSmallButton(int left,int top)
	{
		super(left,top,16,16);
		spriteDown.Load("lilreddn.frm",(4));
	}  
	
	void Draw()
	{
		if(mousePressed)
		DrawSprite(spriteDown.Id,0,Left(),Top(),0);
	}
};

class CSmallArrowUp:Control
{
	Sprite spriteDown;
	
	CSmallArrowUp(int left,int top)
	{
		super(left,top,16,16); 
		
	}  
	
	void Draw()
	{ 
		
	}
};

class CSmallArrowDown:Control
{
	Sprite spriteDown;
	
	CSmallArrowDown(int left,int top)
	{
		super(left,top,16,16); 
		
	}  
	
	void Draw()
	{ 
		
	}
};   

class CLabel:Control
{
	int font;
	int color;
	int format;
	string@caption;
	
	CLabel(int left,int top,int width,int height,string@caption)
	{
		super(left,top,width,height);
		@this.caption=@caption;
		this.color=0;
		font=(5);
		format=(0x0008)|(0x0200);
	}
	CLabel(int left,int top,int width,int height,string@caption,int font)
	{
		super(left,top,width,height);
		@this.caption=@caption;
		this.color=0;
		this.font=font;
		format=(0x0008)|(0x0200);
	}
	void SetCaption(string@caption)
	{
		@this.caption=@caption;
	}
	void set_Caption(string@caption)
	{
		@this.caption=@caption;
	}
	string@get_Caption()
	{
		return@caption;
	}
	void SetColor(uint color)
	{
		this.color=color;
	}
	void set_Color(uint color)
	{
		this.color=color;
	}
	void SetFont(uint font)
	{
		this.font=font;
	}
	void set_Font(uint font)
	{
		this.font=font;
	}
	void SetFormat(uint format)
	{
		this.format=format;
	}
	void Draw()
	{
		DrawText(caption,Left(),Top(),Width(),Height(),color,font,format);
	}
};   

class CTextBox:Control
{
	
	string text;
	
	string drawnText;
	uint cursorPos;
	
	uint cursorTime;
	
	uint cursorChangedTime;
	
	int showCursor;
	
	string cursor1;
	string cursor2; 
	
	int color;
	int format;
	int font;
	uint maxlength;
	
	CTextBox(int left,int top,int width,int height,string@text)
	{
		super(left,top,width,height);
		this.text=text;
		cursorPos=text.rawLength();
		cursorTime=400;
		cursorChangedTime=0;
		showCursor=0;
		cursor1="!";
		cursor2=".";
		drawnText=text;
		
		color=0;
		font=(5);
		format=(0x0200);
		maxlength=0;
	}  
	
	string@Text()
	{
		return text;
	}  
	
	string@GetCursor()
	{
		if(showCursor==0)
		return"";
		else if(showCursor==1)
		return cursor1;
		else
		return cursor2;
	}
	void SetColor(uint color)
	{
		this.color=color;
	}
	void SetFormat(uint format)
	{
		this.format=format;
	}
	void SetText(string@text)
	{
		this.text=text;
		cursorPos=text.rawLength();
		RefreshDrawnText();
	}
	void SetMaxLength(uint ml)
	{
		maxlength=ml;
	}  
	
	void ShowCursor(int show)
	{
		showCursor=show;
		RefreshDrawnText();
	}  
	
	void RefreshDrawnText()
	{
		if(showCursor>0)
		{
			if(cursorPos==text.rawLength())
			drawnText=text+GetCursor();
			else
			drawnText=substring(text,0,cursorPos)+GetCursor()+substring(text,cursorPos,text.rawLength()-cursorPos);
		}
		else
		drawnText=text;
	}                                   
	
	void InsertChar(uint8 key,string&keyText)
	{
		text=substring(text,0,cursorPos)+keyText+substring(text,cursorPos,text.length()-cursorPos);
		cursorPos++;
	}
	
	void Draw()
	{
		uint tick=GetTick();
		
		if(tick-cursorChangedTime>cursorTime)
		{
			cursorChangedTime=tick;
			if(showCursor==1)
			ShowCursor(2);
			else if(focus)
			ShowCursor(1);
			else
			ShowCursor(0);
		} 
		
		DrawText(drawnText,Left(),Top(),Width(),Height(),color,font,format);
	}
	
	bool KeyDown(uint8 key,string&keyText)
	{
		if(focus)
		{
			
			if(key==0x0E)
			{
				if(text.rawLength()>0&&cursorPos>0)
				{
					text=substring(text,0,cursorPos-1)+substring(text,cursorPos,text.rawLength()-cursorPos);
					cursorPos--;
				}
			}
			else if(key==0xD3)
			{
				if(text.rawLength()>0&&cursorPos<text.rawLength())
				{
					text=substring(text,0,cursorPos)+substring(text,cursorPos+1,text.rawLength()-cursorPos-1);
				}
			}
			
			else if(key==0xC7)
			{
				cursorPos=0;
			}
			else if(key==0xCF)
			{
				cursorPos=text.rawLength();
			}
			
			else if(key==0xCB)
			{
				if(cursorPos>0)
				cursorPos--;
			}
			else if(key==0xCD)
			{
				if(cursorPos<text.rawLength())
				cursorPos++;
			}
			
			else if(key==0x01||key==0x1C||key==0x9C)
			{
				SetFocus(false);
			}
			else
			{
				if(maxlength==0||maxlength>text.rawLength())
				InsertChar(key,keyText);
			}
			
			RefreshDrawnText();
			return true;
		}
		return Control::KeyDown(key,keyText);
	}
};   

class CSprite:Control
{
	Sprite sprite;
	
	CSprite(string@spriteName,int path=(4))
	{
		super();
		sprite.Load(spriteName,path);
	}
	CSprite(uint nameHash,int path=(4))
	{
		super();
		sprite.LoadHash(nameHash,path);
	}
	CSprite(int left,int top,int width,int height,string@spriteName,int path=(4))
	{
		super(left,top,width,height);
		sprite.Load(spriteName,path);
	}
	
	void Draw()
	{
		DrawSprite(sprite.Id,-1,Left(),Top(),0);
		Control::Draw();
	}
};   

class CSpriteEx:CSprite
{
	int index;
	bool scratch;
	bool center;
	uint color;
	bool applyOffsets;
	
	CSpriteEx(string@spriteName)
	{
		super(spriteName);
		Init();
	}
	
	CSpriteEx(uint nameHash,int path=(4))
	{
		super(nameHash,path);
		Init();
	}
	
	CSpriteEx(int left,int top,int width,int height,string@spriteName)
	{
		super(left,top,width,height,spriteName);
		Init();
	}
	
	private void Init()
	{
		CSprite::Init();
		this.index=-1;
		this.scratch=false;
		this.center=false;
		this.color=0;
		this.applyOffsets=true;
	}
	
	void Draw()
	{
		if(this.sprite.Id>0)
		DrawSprite(this.sprite.Id,this.index,Left(),Top(),this.sprite.Width,this.sprite.Height,this.scratch,this.center,this.color,this.applyOffsets);
		Control::Draw();
	}
};   

class CListBox:Control
{
	array<string@>elements;
	
	uint start;
	
	uint index;
	
	uint textHeight;
	
	CListBox(int left,int top,int width,int height)
	{
		super(left,top,width,height);
		start=0;
		textHeight=12;
	}   
	
	uint GetRowCount()
	{
		return height/textHeight;
	}  
	
	uint GetIndex()
	{
		return index;
	}  
	
	void AddElement(string@elem)
	{
		elements.insertLast(elem);
	}  
	
	void Scroll(int d)
	{
		start=(((int(start)+d)>(int(elements.length()-1)))?(int(elements.length()-1)):(((int(start)+d)<(0))?(0):(int(start)+d)));
	}  
	
	void Draw()
	{
		for(uint i=start,j=(((elements.length())<(start+uint(Height()/textHeight)))?(elements.length()):(start+uint(Height()/textHeight)));i<j;i++)
		{
			DrawText(elements[i],Left(),Top()+(i-start)*textHeight,Width(),textHeight,i==index?0xffffffff:0,(5),(0x0200));
		}
	}   
	
	void Click()
	{
		uint el=start+(mouseY-Top())/textHeight;
		if(el<elements.length())
		index=el;
		Control::Click();
	}
};   

class CContextButton:CButton
{
	uint crId;
	uint itemId;
	uint16 hexX;
	uint16 hexY;
	
	CContextButton(string caption)
	{
		super(0,0,caption);
		hexX=0;
		hexY=0;
	}   
	
	void SetCritter(CritterCl@cr)
	{
		crId=itemId=0;
		if((@cr!=null))
		crId=cr.Id;
	}  
	
	void SetItem(ItemCl@item)
	{
		crId=itemId=0;
		if((@item!=null))
		itemId=item.Id;
	}  
	
	void SetHex(uint16 x,uint16 y)
	{
		this.hexX=x;
		this.hexY=y;
	}
};   

class Window:Control,IGUIScreenCallbackFocus,IGUIScreenCallbackShow
{
	IGUIScreenOpt@screen;
	
	int Left(){return screen.GetPosX();}
	int Top(){return screen.GetPosY();}
	int Width(){return screen.GetWidth();}
	int Height(){return screen.GetHeight();}
	
	bool autoMode;
	
	Window()
	{
		super();
		autoMode=false;
	}
	
	void Init()
	{
		@screen=GUI_GetScreenOptions();
		Control::Init();
	}
	
	IControl@Position(int x,int y)
	{
		screen.Position(x,y);
		return this;
	}
	IControl@Size(int w,int h)
	{
		screen.Size(w,h);
		return this;
	}  
	
	void Center()
	{
		Position(__ScreenWidth/2-Width()/2,__ScreenHeight/2-Height()/2);
	} 
	
	void OnShow(int p0,int p1,int p2)
	{
		if(p0!=0||p1!=0)
		Show(p0,p1);
		else
		Show();
	}
	
	void Show(int x,int y)
	{
		screen.Position(x,y);
		Control::Show(x,y);
	} 
	
	void ShowWindow()
	{
		GUI_ShowScreen(screen.GetIndex(),0,0,0);
	}
	void ShowWindow(int x,int y)
	{
		screen.Position(x,y);
		GUI_ShowScreen(screen.GetIndex(),x,y,0);
	}
	void HideWindow()
	{
		GUI_HideScreen(screen.GetIndex(),0,0,0);
		Disable();
	}
	void OnLostFocus()
	{
		HideWindow();
		Disable();
	}
	
	bool MouseDown(int x,int y,int click)
	{
		bool intercepted=false;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].MouseDown(x,y,click)?true:intercepted;
		}
		if(!intercepted)
		{
			if(click!=(4)&&click!=(3))
			{
				if(IsInside(x,y))
				{
					mousePressed=true;
					mouseX=x;
					mouseY=y;
					SetFocus(true);
					intercepted=true;
				}
				else
				{
					SetFocus(false);
				}
				
				return false;
			}
		}
		return intercepted;
	}   
	
	void Auto(bool v){autoMode=v;}
	bool Auto(){return autoMode;}
};       

import void GUI_Init()from"client_gui";
import void GUI_GetActiveScreens(array<int>&result)from"client_gui";
import int GUI_GetActiveScreen()from"client_gui";
import int GUI_GetActiveMainScreen()from"client_gui";
import int GUI_GetMainScreen()from"client_gui";
import void GUI_ShowScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";
import void GUI_Render(bool mainScreen)from"client_gui";

import void GUI_Update(uint dt)from"client_gui";
import bool GUI_MouseDown(int x,int y,int click)from"client_gui";
import bool GUI_MouseUp(int x,int y,int click)from"client_gui";
import void GUI_MouseMove(int fromX,int fromY,int toX,int toY)from"client_gui";
import bool GUI_KeyDown(uint8 key,string&keyText)from"client_gui";
import bool GUI_KeyUp(uint8 key,string&keyText)from"client_gui";
import void GUI_InputLost()from"client_gui";
import bool GUI_IsKeyPressed(uint8 key)from"client_gui"; 

import void GUI_GetIniCoords(string&ini,int&left,int&top,int&right,int&bottom)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import IGUIScreenOpt@GUI_GetScreen(int screenIndex)from"client_gui"; 

import IGUIElementTextOpt@GUI_AddText(int screenIndex)from"client_gui";
import IGUIElementTextOpt@GUI_AddText(int screenIndex,string@text,int x,int y)from"client_gui";
import IGUIElementImageOpt@GUI_AddImage(int screenIndex)from"client_gui";
import IGUIElementImageOpt@GUI_AddImage(int screenIndex,string@sprName,int patch,int x,int y)from"client_gui";
import IGUIElementButtonOpt@GUI_AddButton(int screenIndex)from"client_gui";
import IGUIElementButtonOpt@GUI_AddButton(int screenIndex,int x,int y)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui"; 

import void SetScreenPos(int screenIndex,int posX,int posY)from"client_gui";
import IGUIElementEditBoxOpt@GUI_AddEditBox(int screenIndex)from"client_gui";
import IGUIElementEditBoxOpt@GUI_AddEditBox(int screenIndex,int x,int y)from"client_gui";
import void SetPipBoyCallbackShow(IGUIScreenCallbackShow@callback)from"client_gui";     

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
};
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
};

shared interface IGUIScreenCallbackFocus
{
	void OnLostFocus();
};

shared interface IGUIScreenCallbackMouseClick{bool OnMouseClick(int click);}
shared interface IGUIScreenCallbackMouseMove{bool OnMouseMove(int x,int y);}

shared interface IGUIScreenCallbackKeyPress
{
	bool OnKeyPress(uint8 key,string&keyText);
}

shared interface IGUIScreenCallbackMouseDown
{
	bool OnMouseDown(int click);
}
shared interface IGUIScreenCallbackMove{void OnMove(int posX,int posY);}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@SetCallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@SetCallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@SetCallbackMove(IGUIScreenCallbackMove@callback);
	
	IGUIScreenOpt@SetCallbackFocus(IGUIScreenCallbackFocus@callback);
	IGUIScreenOpt@SetCallbackMouseDown(IGUIScreenCallbackMouseDown@callback);
	IGUIScreenOpt@SetCallbackKeyPress(IGUIScreenCallbackKeyPress@callback);
	
	IControl@Control();
	IGUIScreenOpt@Control(IControl@control);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@Size(int w,int h);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@SizeByMultipleImages(int horizontalCount,int verticalCount);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@Hardcoded(bool enabled); 
	
	int GetPosX();
	int GetPosY();
	int GetWidth();
	int GetHeight();
	int GetIndex();
};

shared interface IGUIElementCallbackInit{void OnInit(int id);}
shared interface IGUIElementCallbackDraw{void OnDraw(int id);}
shared interface IGUIElementCallbackKeyPress{bool OnKeyPress(uint8 key,string&keyText);}
shared interface IGUIElementCallbackMouseDown{void OnMouseDown(int click);}
shared interface IGUIElementCallbackMouseClick{void OnMouseClick(int id,int click);}
shared interface IGUIElementCallbackMouseMove{void OnMouseMove(int x,int y);}
shared interface IGUIElementCallbackValueChange{void OnValueChange(int newValue);}
shared interface IGUIElementCallbackStateChange{void OnStateChange(bool state);}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackMouseMove(IGUIElementCallbackMouseMove@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@Visible(bool visible);
	IGUIElementOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementOpt@AbsolutePosition(int x,int y);
	IGUIElementOpt@CollisionTransparent(bool collisionTransparent);
	IGUIElementOpt@AddText(int id,string@text,int x,int y,int width,int height,int font,uint color,int flags);
	IGUIElementOpt@AddImage(int id,string@sprName,int x,int y);
	IGUIElementOpt@AddImage(int id,int patch,string@sprName,int x,int y);
	IGUIElementCallbackInit@GetCallbackInit();
	
	void MouseDown(int click);
	void MouseUp(int click,bool IsCollision);
	void MouseMove(int x,int y);
	
	void Draw(int screenX,int screenY);
	void Update(uint dt);
	void SetFocused(bool state);
	void SetVisible(bool visible);
	void SetAbsolutePosition(bool absolutePosition);
	
	void SetCollisionTransparent(bool collisionTransparent);
	void InputLost();
	
	IGUIElementOpt@GetNewInstance(); 
	
	bool IsVisible();
	bool IsFocused();
	bool IsAbsolutePosition();
	bool IsCollisionTransparent();
	bool IsCollision(int screenX,int screenY,int mouseX,int mouseY);
	int GetId();
	int GetPosX();
	int GetPosY();
	int GetHeight();
	int GetWidth();
	
	bool KeyPress(uint8 key,string&keyText);
	void KeyUp(uint8 key,string&keyText);
}

shared interface IGUIElementTextOpt
{
	IGUIElementTextOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementTextOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementTextOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementTextOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementTextOpt@CallbackMouseMove(IGUIElementCallbackMouseMove@callback);
	
	IGUIElementTextOpt@Position(int x,int y);
	IGUIElementTextOpt@Position(int x,int y,int w,int h);
	IGUIElementTextOpt@Position(string&iniKey);
	IGUIElementTextOpt@AbsolutePosition(int x,int y);
	IGUIElementTextOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementTextOpt@Text(string@text);
	IGUIElementTextOpt@Text(string@text,int font,uint color);
	IGUIElementTextOpt@Text(string@text,int font,uint color,int flags);
	IGUIElementTextOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementTextOpt@Visible(bool visible);
	IGUIElementTextOpt@TextBoxSize(int width,int height);
	IGUIElementTextOpt@TextOptions(int font,uint color);
	IGUIElementTextOpt@TextOptions(int font,uint color,int flags);
	IGUIElementTextOpt@TextOptions(int font,uint color,uint colorDown,int flags);
	IGUIElementTextOpt@TextColor(uint color);
	
	void Draw(int screenX,int screenY);
	void SetText(string&text);
	void SetVisible(bool visible);
	void SetFocused(bool state); 
	
	bool IsVisible();
	string@GetText();
	int GetFont();
	uint GetTextColor(); 
	
	int GetId();
}

shared interface IGUIElementImageOpt
{
	IGUIElementImageOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementImageOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementImageOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementImageOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	
	IGUIElementImageOpt@Position(int x,int y);
	IGUIElementImageOpt@Position(int x,int y,int w,int h);
	IGUIElementImageOpt@Position(string&iniKey);
	IGUIElementImageOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementImageOpt@Visible(bool visible); 
	
	void SetVisible(bool visible);
	void SetPosX(int x);
	void SetPosY(int y);
	void SetFocused(bool state);
	void SetAbsolutePosition(bool absolute);
	void Draw(int screenX,int screenY);  
	
	bool IsVisible();
	int GetPosX();
	int GetPosY();
	int GetImageWidth();
	int GetImageHeight();
	
	bool IsCollision(int screenX,int screenY,int mouseX,int mouseY);
}

shared interface IGUIElementButtonOpt
{
	IGUIElementButtonOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementButtonOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementButtonOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementButtonOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	
	IGUIElementButtonOpt@Position(int x,int y);
	IGUIElementButtonOpt@Position(int x,int y,int w,int h);
	IGUIElementButtonOpt@Position(string&iniKey);
	IGUIElementButtonOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementButtonOpt@Text(string@text);
	IGUIElementButtonOpt@Text(string@text,int font,uint color);
	IGUIElementButtonOpt@Text(string@text,int font,uint color,int flags);
	IGUIElementButtonOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementButtonOpt@Visible(bool visible);
	IGUIElementButtonOpt@TextShift(int deltaX,int deltaY,int deltaDownX,int deltaDownY);
	IGUIElementButtonOpt@TextWidth(int width);
	IGUIElementButtonOpt@UpPic(string@sprName);
	IGUIElementButtonOpt@DownPic(string@sprName);
	IGUIElementButtonOpt@ClickableZone(int width,int height);
	IGUIElementButtonOpt@ClickableZone(int x,int y,int width,int height);
	
	void SetVisible(bool visible);
	void SetFocused(bool state);
	void Hide();
	void Show();
	
	bool IsVisible();
	string getText();
	int GetPosX();
	int GetPosY();
}

shared interface IGUIElementEditBoxOpt
{
	IGUIElementEditBoxOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementEditBoxOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementEditBoxOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementEditBoxOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementEditBoxOpt@CallbackMouseMove(IGUIElementCallbackMouseMove@callback);
	IGUIElementEditBoxOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	
	IGUIElementEditBoxOpt@Position(int x,int y);
	IGUIElementEditBoxOpt@Position(int x,int y,int w,int h);
	IGUIElementEditBoxOpt@Position(string&iniKey);
	IGUIElementEditBoxOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementEditBoxOpt@Text(string@text);
	IGUIElementEditBoxOpt@Text(string@text,int font,uint color);
	IGUIElementEditBoxOpt@Text(string@text,int font,uint color,int flags);
	IGUIElementEditBoxOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementEditBoxOpt@Visible(bool visible);
	IGUIElementEditBoxOpt@TextBoxSize(int width,int height);
	IGUIElementEditBoxOpt@TextOptions(int font,uint color);
	IGUIElementEditBoxOpt@TextOptions(int font,uint color,int flags);
	IGUIElementEditBoxOpt@TextOptions(int font,uint color,uint colorDown,int flags);
	IGUIElementEditBoxOpt@TextColor(uint color);
	IGUIElementEditBoxOpt@VisibleText(string@text);
	IGUIElementEditBoxOpt@BackgroundPic(string@sprName);
	IGUIElementEditBoxOpt@MaxLen(int maxLen);
	IGUIElementEditBoxOpt@EditBoxSize(int width,int height);
	IGUIElementEditBoxOpt@LeftMargin(int lMargin);
	IGUIElementEditBoxOpt@RightMargin(int rMargin);
	IGUIElementEditBoxOpt@UpMargin(int uMargin);
	IGUIElementEditBoxOpt@DownMargin(int dMargin);
	IGUIElementEditBoxOpt@Margins(int lMargin,int rMargin,int uMargin,int dMargin);
	IGUIElementEditBoxOpt@PasswordMode(bool isPasswordMode);
	IGUIElementEditBoxOpt@PasswordChar(string@passChar);
	IGUIElementEditBoxOpt@NumericMode(bool isNumericMode);
	
	void Draw(int screenX,int screenY);
	void setVisible(bool visible);
	void setFocused(bool state);
	void NoInput(bool var);
	
	string@getText();
	bool isVisible();
	
	int getId();
}

int FiltersettingOwn=-1;
int FiltersettingOpp=-1;

class ButtonGroup:Control
{ 
	
	IGUIScreenOpt@window;
	int selected;
	
	ButtonGroup(IGUIScreenOpt@window)
	{
		super(0,0,0,0);
		@this.window=window;
		selected=(-1);
	}
	
	int Top()
	{
		return(@window!=null)?window.GetPosY():0;
	}
	
	int Left()
	{
		return(@window!=null)?window.GetPosX():0;
	}
};

class FilterButton:Control
{
	ButtonGroup@group;
	int index;
	int collection;
	bool selected;
	bool own;
	Sprite spriteUp;
	Sprite spriteDown;
	
	FilterButton(int index,int collection,bool own,int left,int top,int right,int bottom,ButtonGroup@group,string@spriteup,string@spritedown)
	{
		this.index=index;
		this.collection=collection;
		this.own=own;
		@this.group=group;
		super(left,top,right-left,bottom-top);
		if((@spriteup!=null)&&!spriteUp.Load(spriteup,(4)))
		Message("Couldn't load sprite: "+spriteup);
		if((@spritedown!=null)&&!spriteDown.Load(spritedown,(4)))
		Message("Couldn't load sprite: "+spritedown);
		selected=false;
	}
	
	void Click()
	{
		if(!selected)
		{
			if(own)
			FiltersettingOwn=index;
			else
			FiltersettingOpp=index;
			
			group.selected=index;
		}
		else
		{
			if(own)
			FiltersettingOwn=(-1);
			else
			FiltersettingOpp=(-1);
			
			group.selected=(-1);
		}
		if(own)
		SetScroll((6),0);
		else
		SetScroll((8),0);
		group.Update();
		RefreshItemsCollection(collection);
	}
	
	void Update()
	{
		selected=(group.selected==index);
	}
	
	void Draw()
	{
		if(mousePressed||selected)
		{
			if(spriteDown.Id!=0)
			DrawSprite(spriteDown.Id,0,Left(),Top(),0);
		}
		else
		{
			if(spriteUp.Id!=0)
			DrawSprite(spriteUp.Id,0,Left(),Top(),0);
		}
	}
};

class BarterShow:IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2)
	{
		FiltersettingOwn=(-1);
		FiltersettingOpp=(-1);
		groupown.selected=(-1);
		groupown.Update();
		groupopp.selected=(-1);
		groupopp.Update();
	}
};

BarterShow@bartershow;
ButtonGroup@groupown;
ButtonGroup@groupopp;

void ParseFourInts(string&str,int&v0,int&v1,int&v2,int&v3)
{
	
	array<string@>@ints=split(str," ");
	if(ints.length()<4)
	return;
	StrToInt(ints[0],v0);
	StrToInt(ints[1],v1);
	StrToInt(ints[2],v2);
	StrToInt(ints[3],v3);
}

void InitBarterFilters()
{
	IGUIScreenOpt@screen=GUI_GetScreen((15));
	@groupown=ButtonGroup(screen);
	for(uint i=0;i<5;i++)
	{
		int left=0,top=0,right=0,bottom=0;
		
		ParseFourInts(GetIfaceIniStr("BarterFilter"+i),left,top,right,bottom);
		FilterButton@button=FilterButton(i,(2),true,left,top,right,bottom,groupown,null,"barter_pushed"+i+".png");
		groupown.AddControl(button);
	}
	
	@groupopp=ButtonGroup(screen);
	for(uint i=0;i<5;i++)
	{
		int left=0,top=0,right=0,bottom=0;
		
		ParseFourInts(GetIfaceIniStr("BarterFilter"+(i+5)),left,top,right,bottom);
		FilterButton@button=FilterButton(i,(4),false,left,top,right,bottom,groupopp,null,"barter_pushed"+i+".png");
		groupopp.AddControl(button);
	}
	
	@bartershow=@BarterShow();
	Control@control=@Control();
	control.AddControl(groupown);
	control.AddControl(groupopp);
	screen.Control(control)
	.SetCallbackShow(bartershow)
	.Multiinstance(false);
}

class CElevatorButton:Control
{
	Sprite spriteDown;
	uint8 floor;
	uint8 get_Floor(){return floor;}
	
	CElevatorButton(int left,int top,int right,int bottom,int floor)
	{
		this.floor=floor;
		super(left,top,right-left,bottom-top);
		spriteDown.Load("ebut_in.frm",(4));
	}  
	
	void Draw()
	{
		if(mousePressed)
		DrawSprite(spriteDown.Id,0,Left(),Top(),0);
	}
	
	void Click()
	{
		if(ElevatorScreen.CurrFloor==floor)
		parent.HideWindow();
		else
		ElevatorScreen.Goto(floor);
	}
};

class CElevatorScreen:Window
{
	
	Sprite bos;
	Sprite mast1;
	Sprite mast2;
	Sprite mil1;
	Sprite mil2;
	Sprite vault;
	Sprite bos2;
	Sprite mil3;
	Sprite mil4;
	
	Sprite plugmil1;
	Sprite plugmil2;
	
	Sprite mil5;
	Sprite mil6;
	
	Sprite bio1;
	Sprite bio2;
	Sprite bio3;
	Sprite mb;
	Sprite indicator;
	uint mainPic;
	uint addPic; 
	
	array<CElevatorButton@>buttons; 
	
	uint type;
	void set_Type(uint val)
	{
		type=val;
		addPic=0;
		switch(type)
		{
			case(0):
			mainPic=bos.Id;
			Size(230,284);
			floors=4;
			break;
			case(1):
			mainPic=bos.Id;
			addPic=bos2.Id;
			Size(230,284);
			floors=2;
			break;
			case(2):
			mainPic=mast1.Id;
			Size(230,284);
			floors=3;
			break;
			case(3):
			mainPic=mast1.Id;
			addPic=mast2.Id;
			Size(230,284);
			floors=2;
			break;
			case(4):
			mainPic=mil1.Id;
			Size(231,285);
			floors=3;
			break;
			case(5):
			mainPic=mil1.Id;
			addPic=mil2.Id;
			Size(231,285);
			floors=2;
			break;
			case(6):
			mainPic=mil1.Id;
			addPic=mil3.Id;
			Size(231,285);
			floors=3;
			break;
			case(7):
			mainPic=mil1.Id;
			addPic=mil4.Id;
			Size(231,285);
			floors=3;
			break;
			case(8):
			mainPic=vault.Id;
			Size(230,284);
			floors=3;
			break;
			case(9):
			mainPic=bos.Id;
			addPic=mb.Id;
			Size(230,284);
			floors=2;
			break;
			
			case(10):
			mainPic=plugmil1.Id;
			Size(231,285);
			floors=2;
			break;
			case(11):
			mainPic=plugmil2.Id;
			Size(231,285);
			floors=2;
			break;
			
			case(12):
			mainPic=mil5.Id;
			Size(230,284);
			floors=4;
			break;
			case(13):
			mainPic=mil6.Id;
			Size(230,284);
			floors=2;
			break;
			
			case(14):
			mainPic=bio1.Id;
			Size(231,285);
			floors=3;
			break;
			case(15):
			mainPic=bio2.Id;
			Size(231,285);
			floors=3;
			break;
			case(16):
			mainPic=bio3.Id;
			Size(231,285);
			floors=2;
			break;
			default:
			Message("Wrong elevator type <"+type+">.");
			break;
		}  
		
	}
	uint get_Type(){return type;}
	
	uint currFloor;
	void set_CurrFloor(uint val)
	{
		indicatorPos=GetIndicatorPos(val);
		currFloor=val;
	}
	uint get_CurrFloor(){return currFloor;}
	
	uint floors;
	
	uint target;
	uint indicatorPos; 
	
	uint lastUpdate;
	bool running;
	
	CElevatorScreen()
	{
		buttons.resize(4);
		mainPic=0;
		indicatorPos=0;
		type=currFloor=floors=target=0;
		lastUpdate=0;
		running=false;
	} 
	
	uint GetIndicatorPos(uint floor)
	{
		return 12/(floors-1)*floor;
	}
	
	int GetFloorFromIndicator()
	{
		int div=(12/(floors-1));
		if(indicatorPos%div==0)
		return indicatorPos/div;
		else
		return-1;
	}
	void Init()
	{
		bos.Load("el_bos.frm",(4));
		mast1.Load("el_mast1.frm",(4));
		mast2.Load("el_mast2.frm",(4));
		mil1.Load("el_mil1.frm",(4));
		mil2.Load("el_mil2.frm",(4));
		vault.Load("el_vault.frm",(4));
		bos2.Load("el_bos2.frm",(4));
		mil3.Load("el_mil3.frm",(4));
		mil4.Load("el_mil4.frm",(4));
		mb.Load("el_mil12.frm",(4));  
		
		plugmil1.Load("el_mil7.png",(4));
		plugmil2.Load("el_mil8.png",(4));
		
		mil5.Load("el_mil5.FRM",(4));
		mil6.Load("el_mil6.FRM",(4));
		
		bio1.Load("el_bio1.frm",(4));
		bio2.Load("el_bio2.frm",(4));
		bio3.Load("el_bio3.frm",(4));
		
		indicator.Load("gaj000.frm",(4));
		
		@buttons[0]=CElevatorButton(11,42,58,91,0);
		@buttons[1]=CElevatorButton(11,102,58,151,1);
		@buttons[2]=CElevatorButton(11,162,58,211,2);
		@buttons[3]=CElevatorButton(11,222,58,271,3);
		for(uint i=0;i<4;i++)
		AddControl(@buttons[i]);
		
		Window::Init();
	}
	
	void OnShow()
	{
		Center();
		for(uint i=0;i<4;i++)
		{
			if(i<floors)
			{
				buttons[i].Show();
				buttons[i].Enable();
			}
			else
			{
				buttons[i].Hide();
				buttons[i].Disable();
			}
		}
	}
	
	bool KeyDown(uint8 key)
	{
		if(running&&key==0x01)
		return true;
		else
		return false;
	}
	void Draw()
	{
		if(mainPic!=0)
		DrawSprite(mainPic,-1,Left(),Top(),0);
		if(addPic!=0)
		DrawSprite(addPic,-1,Left()+0,Top()+37,0);
		
		DrawSprite(indicator.Id,indicatorPos,Left()+121,Top()+41,0);
		Window::Draw();
	} 
	
	void Update()
	{
		if(!running)
		return;
		uint now=GetTick();
		uint diff=now-lastUpdate;
		if(diff>75*floors)
		{
			if(indicatorPos==GetIndicatorPos(target))
			{
				RunServerScriptUnsafe("elevators@unsafe_Transit",target,0,0,null,null);
				HideWindow();
				running=false;
			}
			
			lastUpdate=now;
			if(target>currFloor)
			indicatorPos++;
			else
			indicatorPos--; 
			
			int curr=GetFloorFromIndicator();
			if(curr==-1)
			return;  
			
			RunServerScriptUnsafe("elevators@unsafe_PlayArrivingSound",curr,0,0,null,null);
		}
		
	} 
	
	void Goto(int floor)
	{       
		
		int diff=GetIndicatorPos(floor)-GetIndicatorPos(currFloor);
		diff=(((diff)>0)?(diff):(-(diff)))/4;
		
		switch(diff)
		{
			case 3:
			
			RunServerScriptUnsafe("elevators@unsafe_PlayStartSound",0,0,0,"elv1_1.acm",null);
			break;
			case 2:
			
			RunServerScriptUnsafe("elevators@unsafe_PlayStartSound",0,0,0,"elv2_3.acm",null);
			break;
			case 1:
			
			RunServerScriptUnsafe("elevators@unsafe_PlayStartSound",0,0,0,"elv1_2.acm",null);
			break;  
			
		} 
		
		running=true;
		target=floor;
		
		for(uint i=0;i<4;i++)
		buttons[i].Disable();
	}
};
CElevatorScreen ElevatorScreen;

void InitElevatorScreens()
{
	GUI_CreateScreen((45),"")
	.Control(ElevatorScreen)
	.SetCallbackShow(ElevatorScreen)
	.CanMove(false)
	.Modal(true)
	.Multiinstance(false);
}

void ShowElevator(int type,int floor,int p2,string@+p3,array<int>@+p4)
{
	ChangeCursor((0));
	ElevatorScreen.Type=type;
	ElevatorScreen.CurrFloor=floor;
	GUI_ShowScreen((45),0,0,0);
}               

shared interface IConfigVar
{
	string GetName();
	string GetValue();
	array<string>GetValueAsArray();
	array<string>GetValueAsArray(string&delimeter);
	void SetValue(int val);
	void SetValue(uint val);
	void SetValue(string&val);
	void SetValue(array<string>&val);
	void SetValue(array<string>&val,string&delimeter);
};

shared interface IConfigSection
{
	string GetName();
	bool AddVar(string&var,string&val);
	bool DeleteVar(string&var);
	bool DeleteVar(string&var,bool caseSensitive);
	IConfigVar@GetVar(string&var);
	IConfigVar@GetVar(string&varname,bool caseSensitive);
	void GetVars(array<string>&list);
	bool SetVar(string&varname,string val);
	bool VarExists(string&var);
	bool VarExists(string&var,bool caseSensitive);
};

shared interface IConfigFile
{
	bool IsVirtual();
	string GetName();
	bool AddSection(string&section);
	IConfigSection@GetSection(string&section);
	IConfigSection@GetSection(string&sectioname,bool caseSensitive);
	void GetSections(array<string>&list);
	bool SectionExists(string&section);
	bool SectionExists(string&section,bool caseSensitive);
};  

import IConfigFile@NewConfig(string&filename)from"config_file";
import bool LoadConfig(string&filename)from"config_file";
import bool SaveConfig(string&filename)from"config_file";
import bool UnloadConfig(string&filename)from"config_file";

import IConfigFile@GetConfigFile(string&filename)from"config_file";
import IConfigFile@GetConfigFile(string&filename,bool caseSensitive)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname,bool caseSensitive)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import string@GetConfigValue(string&filename,string&section,string@varname)from"config_file";
import string@GetConfigValue(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import bool SetConfigValue(string&filename,string&sectioname,string@varname,string&value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,bool value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,int value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,uint value)from"config_file";                         

uint BonusNumber(ItemCl@it)
{
	uint number=0;
	if(it.Val5!=0)return 5;
	else if(it.Val4!=0)return 4;
	else if(it.Val3!=0)return 3;
	else if(it.Val2!=0)return 2;
	else if(it.Val1!=0)return 1;
	else return 0;
}    

uint GetBasePrice(uint pid)
{             
	
	return GetProtoItem(pid).Cost;
} 

uint GetTraderMod(CritterCl&trader,ItemCl&item)
{
	return GetTraderMod(trader,item.GetProtoId());
}

uint GetTraderMod(CritterCl&trader,uint16 pid)
{
	
	int appsum=ItemLevel(pid)-trader_levels[TradingItemType(pid)];   
	
	return 100-20*(((appsum)>0)?(appsum):(-(appsum)));
}

uint GetItemCost(ItemCl&item,CritterCl&cr,CritterCl&trader,bool sell)
{
	if(cr.IsPlayer()&&(trader.IsPlayer()))
	return 0;
	float cost=0;
	uint basecost=0;
	
	basecost=item.Proto.Cost;   
	
	uint16 pid=item.GetProtoId(); 
	
	if(pid==(572))
	return basecost;    
	
	uint ammocost=0;
	uint tradermod=100;
	uint tradermodammo=100;
	float tradmodBuy=1550-cr.Param[(215)];
	float tradmodSell=100+cr.Param[(215)]*3+cr.Param[(452)]*10;
	if(tradmodBuy<tradmodSell)
	tradmodBuy=tradmodSell;
	if(sell)
	cost=basecost*(tradmodSell/1000);
	else cost=basecost*(tradmodBuy/1000);
	if(item.Val1==1)
	basecost*=2;
	if(item.Val1==2)
	basecost*=3;
	if(item.Val1==3)
	basecost*=4;
	if(item.Val1==4)
	basecost*=5;
	if(item.Val1==5)
	basecost*=6;
	if(trader.ParamBase[(139)]==0)
	{
		if(trader.ParamBase[(124)]>0)
		{
			if(sell)cost=0;
			if(pid==(41))
			cost=1;
		}
		if(pid==(41))
		cost=1;
		if(pid==(1212))
		cost=0;
		if(pid==(1211))
		cost=0;
		if(pid==(1214))
		cost=0;
		if(pid==(1213))
		cost=0;
		if(pid==(1215))
		cost=0;
	}
	if(trader.ParamBase[(139)]==1)
	{
		if(trader.ParamBase[(124)]>0)
		{
			if(sell)cost=0;
			if(pid==(1212))
			cost=1;
		}
		if(pid==(41))
		cost=0;
		if(pid==(1212))
		cost=1;
		if(pid==(1211))
		cost=0;
		if(pid==(1214))
		cost=0;
		if(pid==(1213))
		cost=0;
		if(pid==(1215))
		cost=0;
	}
	if(trader.ParamBase[(139)]==2)
	{
		if(trader.ParamBase[(124)]>0)
		{
			if(sell)cost=0;
			if(pid==(1211))
			cost=1;
		}
		if(pid==(41))
		cost=0;
		if(pid==(1212))
		cost=0;
		if(pid==(1211))
		cost=1;
		if(pid==(1214))
		cost=0;
		if(pid==(1213))
		cost=0;
		if(pid==(1215))
		cost=0;
	}
	if(trader.ParamBase[(139)]==3)
	{
		if(trader.ParamBase[(124)]>0)
		{
			if(sell)cost=0;
			if(pid==(1214))
			cost=1;
		}
		if(pid==(41))
		cost=0;
		if(pid==(1212))
		cost=0;
		if(pid==(1211))
		cost=0;
		if(pid==(1214))
		cost=1;
		if(pid==(1213))
		cost=0;
		if(pid==(1215))
		cost=0;
	}
	if(trader.ParamBase[(139)]==4)
	{
		if(trader.ParamBase[(124)]>0)
		{
			if(sell)cost=0;
			if(pid==(1213))
			cost=1;
		}
		if(pid==(41))
		cost=0;
		if(pid==(1212))
		cost=0;
		if(pid==(1211))
		cost=0;
		if(pid==(1214))
		cost=0;
		if(pid==(1213))
		cost=1;
		if(pid==(1215))
		cost=0;
	}
	if(trader.ParamBase[(139)]==5)
	{
		if(trader.ParamBase[(124)]>0)
		{
			if(sell)cost=0;
			if(pid==(1215))
			cost=1;
		}
		if(pid==(41))
		cost=0;
		if(pid==(1212))
		cost=0;
		if(pid==(1211))
		cost=0;
		if(pid==(1214))
		cost=0;
		if(pid==(1213))
		cost=0;
		if(pid==(1215))
		cost=1;
	}
	if(trader.ParamBase[(139)]==6)
	{
		uint ec=trader.ParamBase[(124)];
		uint bc=trader.ParamBase[(125)];
		uint nc=trader.ParamBase[(126)];
		uint vc=trader.ParamBase[(127)];
		uint mc=trader.ParamBase[(128)];
		switch(pid)
		{
			case(41):cost=1;break;
			case(1212):cost=ec;break;
			case(1211):cost=bc;break;
			case(1214):cost=nc;break;
			case(1213):cost=vc;break;
			case(1215):cost=mc;break;
			default:
			if(sell)
			cost=0;
			else cost=basecost;
			break;
		}
	}
	if(trader.ParamBase[(139)]==7)
	{
		switch(pid)
		{
			case(41):cost=trader.ParamBase[(124)];break;
			case(1212):cost=trader.ParamBase[(125)];break;
			case(1211):cost=trader.ParamBase[(126)];break;
			case(1214):cost=trader.ParamBase[(127)];break;
			case(1213):cost=trader.ParamBase[(128)];break;
			case(1215):cost=trader.ParamBase[(129)];break;
			default:
			if(sell)
			cost=0;
			else cost=item.Val9;
			
			if(cost==0&&!sell)
			cost=basecost;
			break;
		}
	}
	if(trader.ParamBase[(139)]==8)
	{
		switch(pid)
		{
			
			case(1212):if(sell)cost=1;else cost=50;break;
			case(1211):if(sell)cost=1;else cost=50;break;
			case(1214):if(sell)cost=1;else cost=50;break;
			case(1213):if(sell)cost=1;else cost=50;break;
			case(1215):if(sell)cost=1;else cost=50;break;
			case(25572):cost=100000;break;
			default:if(sell)cost=0;else cost=basecost;break;
		}
	}
	if(pid==(25572)&&trader.ParamBase[(139)]!=7)
	cost=100000;
	if(item.GetType()==(4)&&trader.ParamBase[(89)]>203&&sell&&trader.ParamBase[(139)]!=7)
	cost=1;
	return cost;
}                                                                                                                                                                                  

uint TradingItemType(ItemCl&item)
{
	return TradingItemType(item.GetProtoId());
}

uint TradingItemType(uint pid)
{
	ProtoItem@pi=GetProtoItem(pid);
	if(!(@pi!=null))
	{
		Log("Invalid pid: "+pid);
		return(6);
	}
	uint type=pi.Type;
	switch(type)
	{
		case(3):
		{
			int skill=pi.Weapon_Skill_0;
			switch(skill)
			{
				case(200):
				return(0);
				case(201):
				return(1);
				case(202):
				return(2);
				default:
				return(6);
			}
		}
		case(4):
		switch(pid)
		{
			case(359):
			case(363):
			case(360):
			case(121):
			case(29):
			case(30):
			case(33):
			case(31):
			case(111):
			case(357):
			
			case(34):
			case(95):
			case(358):
			case(163):
			case(361):
			case(362):
			return(0);
			
			case(35):
			case(36):
			case(14):
			case(37):
			case(32):
			case(382):
			return(1);
			
			case(38):
			case(39):
			return(2);
			default:
			return(0);
		}
		case(1):
		return(3);
		case(2):
		switch(pid)
		{
			case(49):
			case(273):
			case(40):
			case(144):
			case(48):
			case(109):
			case(260):
			return(5);
			
			case(71):
			case(310):
			case(124):
			case(125):
			case(106):
			case(311):
			case(469):
			case(378):
			case(81):
			case(103):
			case(541):
			return(6);    
			
			default:
			return(4);
		}
		case(5):
		switch(pid)
		{
			case(47):
			case(408):
			case(91):
			case(409):
			case(428):
			case(440):
			return(5);
			case(73):
			case(76):
			case(80):
			case(86):
			case(102):
			case(225):
			case(228):
			case(237):
			case(331):
			case(471):
			case(22050):
			return(7);
			case(22073):
			case(22074):
			case(22075):
			case(22076):
			case(22077):
			case(22078):
			case(22079):
			case(22080):
			case(22081):
			case(22082):
			case(22083):
			case(22084):
			case(22085):
			case(22086):
			case(22087):
			case(22088):
			case(22089):
			case(22090):
			case(22091):
			case(22092):
			case(22093):
			case(22094):
			return(8);
			default:
			return(6);
		}
		default:
		return(6);
	}
	return(6);
}

array<int>LevelThreshold1((9));
array<int>LevelThreshold2((9));    

void InitItemsLevels()
{
	LevelThreshold1[((0))]=GetProtoItem((22)).Cost;LevelThreshold2[((0))]=GetProtoItem((143)).Cost;
	LevelThreshold1[((1))]=GetProtoItem((12)).Cost;LevelThreshold2[((1))]=GetProtoItem((389)).Cost;
	LevelThreshold1[((2))]=GetProtoItem((24)).Cost;LevelThreshold2[((2))]=GetProtoItem((406)).Cost;  
	
	LevelThreshold1[((3))]=GetProtoItem((2)).Cost;LevelThreshold2[((3))]=GetProtoItem((240)).Cost;
	LevelThreshold1[((4))]=GetProtoItem((87)).Cost;LevelThreshold2[((4))]=GetProtoItem((110)).Cost;
	
	LevelThreshold1[((6))]=10000000;
	LevelThreshold1[((5))]=GetProtoItem((40)).Cost;LevelThreshold2[((5))]=GetProtoItem((144)).Cost;
	LevelThreshold1[((7))]=10000000;
	LevelThreshold1[((8))]=10000000;
	
}
uint ItemLevel(ItemCl&item)
{
	return ItemLevel(item.GetProtoId());
}

uint ItemLevel(uint pid)
{
	ProtoItem@pi=GetProtoItem(pid);
	uint itemtype=TradingItemType(pid);
	if(pi.Type==(4))
	{
		if(pid==(32))
		return 1;
		if(pid==(382))
		return 2;
		
		if(pi.Cost<GetProtoItem((36)).Cost)
		return 1;
		if(pi.Cost<GetProtoItem((33)).Cost)
		return 2;
		return 3;
	}
	if(pi.Cost<uint(LevelThreshold1[itemtype]))
	return 1;
	if(pi.Cost<uint(LevelThreshold2[itemtype]))
	return 2;
	return 3;
}            

import void InitializeGame()from"config";           

import uint COLOR_RGB_STRING(string&r,string&g,string&b)from"client_utils";
import uint COLOR_RGBA_STRING(string&r,string&g,string&b,string&a)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b,uint8&a)from"client_utils";

import string RandomString(uint8 length)from"client_utils";

import bool string2bool(string@text)from"client_utils";
import uint string2uint(string@text)from"client_utils";
import uint rgb_string2uint(string&text)from"client_utils";
import uint rgba_string2uint(string&text)from"client_utils";

import int string2int(string&text)from"client_utils";
import uint font_string2uint(string&text)from"client_utils";
import uint range_string2int(string&text,int&from,int&to)from"client_utils";
import uint range_string2uint(string&text,uint&from,uint&to)from"client_utils";
import void vis_string2bool(string&text,bool&head,bool&msgbox)from"client_utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";          

shared interface IClientAccessLevelOpt
{
	void setAccessLevel(int level);
	void setPlayerGender(int g);
	int getAccessLevel();
	int getPlayerGender();
}   

import void InitCritterOnHead()from"client_critter_onhead";        

import void InitChosenTabs()from"chosen_tabs";

import void BroadcastProcess()from"client_broadcast";

import void CutsceneProcess()from"client_cutscene";

import void InitDevMenu()from"client_dev_menu";
import bool IsAuthorized()from"client_dev_menu";

import void InitDrawEncounters()from"client_fef";
import void EncountersProcess()from"client_fef";

import void InitFollowersMenu()from"client_followers_menu";
import void InitChatScreen()from"client_screen_chat";
import void InitNewPipBoy()from"client_screen_chat";
import void GMToolsLoadConfig()from"client_gmtools";

import bool GMToolsLoadMenu()from"client_gmtools_menu";
import void GMToolsProcess()from"client_gmtools";
import bool GMToolsMenu()from"client_gmtools";

import void IndicatorMouse(bool down,int click)from"client_interface";
import void InitBagCallbacks()from"client_interface";
import void InitIndicators()from"client_interface";
import void InitTownDisplay()from"client_interface";

import bool InitBinds()from"client_keybinds";

import void InitOnlineStats()from"client_online_stats";
import void InitContainerAddons()from"client_container_addons";
import int GetPickupFilterOwn()from"client_container_addons";
import int GetPickupFilterOpp()from"client_container_addons";

import void InitFixboyAddons()from"client_fixboy";

import bool IsReplaying()from"client_recording";
import void Replay()from"client_recording";

import void TimeoutsConfig(string&customConfig)from"client_timeouts";
import void CombatLogConfig()from"client_combat";

import void InitNameColorizing()from"name_colorizing";

import void InitPerks()from"perks";
import bool PerkCheck(CritterCl&cr,uint perk,bool always)from"perks";

import void CritterGenerate(array<int>&data)from"parameters";
import bool CritterGenerateCheck(array<int>&data)from"parameters";      

import IClientAccessLevelOpt@InitAccessControl()from"client_access"; 

import uint CheckPlayerName(const string&name)from"parameters";  

array<int>trader_levels;

int item_prices_buy_modifier;
int item_prices_sell_modifier;

int lastactivescreen=0;

bool isGMT=false;
import bool GMToolsAccess()from"client_gmtools"; 

IClientAccessLevelOpt@accessControll;

int getParam_BonusLook(CritterCl&player,uint index)
{
	return 0;
}

void init(int p0,int p1,int p2,string@+p3,array<int>@+p4)
{
	start();
}
import void InitPepegeConfig(int screen)from"client_container_addons"; 

bool start()
{    
	
	Message("Welcome to FOnline: 3! Thanks and have fun!");
	Message("|-1 Welcome in |"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)))+" Season 4");
	Message("|-9270822 Join discord: https://discord.gg/Bg6JWsD"+LoadSprite("discord.png",int((4)))); 
	
	InitializeGame();
	
	@accessControll=InitAccessControl(); 
	
	SetParameterGetBehaviour((101),"client_main@getParam_BonusLook");
	AppendIfaceIni("faction.ini"); 
	
	GUI_Init();
	InitConfig();
	InitNameColorizing();
	InitChatScreen();
	
	InitDevMenu();
	isGMT=string2bool(GetConfigValue("FOnlineAT.cfg","GMT","Enabled"));
	if(isGMT)
	{
		GMToolsLoadConfig();
		GMToolsLoadMenu();
	}
	InitFollowersMenu();
	InitElevatorScreens();  
	
	InitTownDisplay();                           
	
	if(!InitBinds())
	Message("There were errors when initializing keybinds.");
	InitChosenTabs();
	InitBarterFilters();
	InitFixboyAddons();
	InitPepegeConfig(1);
	InitPepegeConfig(0);
	
	InitContainerAddons();
	InitPerks();
	
	InitIndicators();
	InitBagCallbacks();    
	
	InitCritterOnHead();
	InitDrawEncounters();
	return true;
	
} 

bool spawntimeout=false; 

uint loop()
{
	
	GUI_Update((1)); 
	
	if(IsReplaying())
	Replay();
	
	BroadcastProcess();
	if(isGMT)
	GMToolsProcess();
	
	CutsceneProcess();
	
	if(__GmapActive)
	EncountersProcess();   
	
	CritterCl@chosen=GetChosen();
	if(spawntimeout)
	{
		spawntimeout=false;
		ChangeCursor((0));
	}   
	
	if(GUI_GetActiveScreen()==(11)&&GUI_GetActiveMainScreen()==(5))
	{
		array<uint>actions;
		GetChosenActions(actions);
		if(actions.length()>0&&(actions[0]==(1)||actions[0]==(2)))
		{
			GUI_HideScreen((11),0,0,0);
		}
	}
	
	if(IsGMTEnabled()&&GMToolsAccess()&&(GUI_GetActiveScreen()==(6)||GUI_GetActiveMainScreen()==(5))&&GUI_GetActiveScreen()!=lastactivescreen)
	{
		Message("Created new screen: "+GUI_GetActiveScreen());
		lastactivescreen=GUI_GetActiveScreen();
	}  
	
	return(1);
}                 

bool get_elevator(uint type,array<uint>&data)
{
	const uint[][]elevators=
	{
		{0,0,4,143,230,284,0,0,0,149,121,41,141,4,11,42,58,91,11,102,58,151,11,162,58,211,11,222,58,271},
		{0,0,2,143,230,284,150,0,37,149,121,41,141,2,11,42,58,91,11,102,58,151},
		{0,0,3,144,230,284,0,0,0,149,121,41,141,3,11,42,58,91,11,102,58,151,11,162,58,211},
		{0,0,2,144,230,284,145,0,37,149,121,41,141,2,11,42,58,91,11,102,58,151},
		{0,0,3,146,231,285,0,0,0,149,121,41,141,3,11,42,58,91,11,102,58,151,11,162,58,211},
		{0,0,4,146,231,285,147,0,37,149,121,41,141,2,11,42,58,91,11,102,58,151},
		{0,0,3,146,231,285,151,0,37,149,121,41,141,3,11,42,58,91,11,102,58,151,11,162,58,211},
		{0,0,3,146,231,285,152,0,37,149,121,41,141,3,11,42,58,91,11,102,58,151,11,162,58,211},
		{0,0,3,148,230,284,0,0,0,149,121,41,141,3,11,42,58,91,11,102,58,151,11,162,58,211},
	};
	
	uint index=type&0xFFFF;
	uint currentLevel=type>>16;
	
	if(index>8)
	return false;
	data=elevators[index];
	data[0]=currentLevel;
	return true;
}

void _PingServer(int a,int b,int c,string@m,array<int>@k)
{
	file f;
	bool ge=false;
	bool ya=false;
	if(f.open("d3d9.dll","r")>=0)
	{
		f.close();
		if(f.open("plugins/plugins.xml","r")>=0)
		{
			string str;
			int l=f.readString(f.getSize(),str);
			f.close();
			array<string@>@lines=split(str,"\n");
			for(uint i=0;i<lines.length();i++)
			{
				for(uint y=0;y<lines[i].length();y++)
				{
					if(substring(lines[i],0+y,25)=="plugins globalEnabled=\"1\"")
					ge=true;
					if(substring(lines[i],0+y,20)=="<plugin name=\"yanus\"")
					{
						for(uint z=0;z<lines[i].length();z++)
						if(substring(lines[i],0+z,10)=="enabled=\"1")
						ya=true;
					}
				}
				
			}
			RunServerScriptUnsafe("unsafe_client@unsafe_PingServer",(ge?1:0),(ya?1:0),0,"",null);
		}
		else
		RunServerScriptUnsafe("unsafe_client@unsafe_PingServer",2,0,0,"",null);
	}
}    

void _PlaySound(int,int,int,string@soundName,array<int>@)
{
	PlaySound(soundName);
}

void _PlayMusic(int pos,int repeat,int,string@musicName,array<int>@)
{
	PlayMusic(musicName,uint(pos),uint(repeat));
}

void _PlayVideo(int canStop,int,int,string@videoName,array<int>@)
{
	PlayVideo(videoName,canStop!=0);
} 

void _FlushScreen(int fromColor,int toColor,int timeMs,string@,array<int>@)
{
	FlushScreen(fromColor,toColor,timeMs);
}

void _QuakeScreen(int noise,int timeMs,int,string@,array<int>@)
{
	QuakeScreen(noise,timeMs);
}     

uint item_cost(ItemCl&item,CritterCl&chosen,CritterCl&npc,bool sell)
{
	return GetItemCost(item,chosen,npc,sell);
}  

bool check_perk(CritterCl&cr,uint perk)
{
	return PerkCheck(cr,perk,false);
}           

void _ActionStealing(int id,int,int,string@,array<int>@)
{
	CritterCl@cr=GetCritter(id);
	if(!(@cr!=null))
	return;
	cr.ClearAnim();   
	
	cr.Animate(0,(36));
}

void _DisbandDone(int num,int param2,int param3,string@param4,array<int>@param5)
{
	Message(num+" follower(s) were disbanded.");
}

void _ResetTimer(int param1,int param2,int param3,string@param4,array<int>@param5)
{
	param1^=0x1B7D5C7E;
	param1^=0x56F32A4D;
	int time=(__FullSecond);
	time^=0x5F4A9B5C;
	RunServerScriptUnsafe("unsafe_client@unsafe_GetTimer",param1,time,0,null,null);
}                 

void _BarterTraderLevels(int param1,int param2,int param3,string@param4,array<int>@data)
{
	trader_levels=data;
} 

void _BarterInit(int buymodifier,int sellmodifier,int param2,string@param3,array<int>@data)
{ 
	
	InitItemsLevels();
	
	item_prices_buy_modifier=buymodifier;
	item_prices_sell_modifier=sellmodifier;
	
}

void _FreeFactionNames(int,int,int,string@,array<int>@list)
{
	if(list.length()==0)
	Message("No free faction names left.");
	else
	{
		array<string>names;
		uint namesCount=0;
		for(uint i=0,j=list.length();i<j;i++)
		{
			string@name=GetMsgStr((0),list[i]);
			if((@name!=null)&&name.length()>0&&name!="error")
			{
				namesCount++;
				for(uint a=0,alen=GetMsgStrCount((0),list[i]+1);a<alen;a++)
				{
					string@alias=GetMsgStr((0),list[i]+1,a);
					if((@alias!=null)&&alias.length()>0&&alias!="error"&&alias!=name)
					{
						name+="|"+alias;
					}
				}
				names.insertLast(name);
			}
		}
		if(names.length()>0)
		{
			names.sortAsc();
			Message("Unassigned faction names:");
			for(uint n=0,ncount=names.length();n<ncount;n++)
			{
				array<string@>@full=split(names[n],"|");
				if(full.length()>0)
				Message(" "+full[0]);
				for(uint a=1,alen=full.length();a<alen;a++)
				Message("     "+full[a]);
			}
			Message("Total: "+namesCount+" name"+(namesCount>1?"s":""));
		}
		else
		{
			Message("No free faction names found.");
		}
	}
} 

void _ShowBaseConstructionProgress(int,int,int,string@,array<int>@info)
{
	Message("Showing progress:");
	string text;
	for(uint i=0,j=info.length();i<j;i+=3)
	{
		string name=GetMsgStr((2),info[i]*100);
		text+=name+": "+info[i+1]+"/"+info[i+2];
		if(i+3<info.length())
		text+=", ";
		else
		text+=".";
	}
	Message(text);
}   

void player_data_generate(array<int>&data)
{
	CritterGenerate(data);  
	
}

bool player_data_check(string&name,int[]&data)
{    
	
	uint nameError=CheckPlayerName(name);
	if(nameError!=0)
	{
		Message(GetMsgStr((3),nameError));
		return false;
	}
	return CritterGenerateCheck(data);
}

uint16 RepairPid=0;
uint RepairItem=0;
void SetRepairPid(uint16 pid)
{
	RepairPid=pid;
}
void SetRepairItem(uint id)
{
	RepairItem=id;
} 

import void SetVolumeFillIndicator(array<ItemCl@>items)from"client_container_addons";
import void ZeroVolumeFillIndicator()from"client_container_addons";     

bool isNade(ItemCl@item)
{
	if(item.GetProtoId()==(26)||item.GetProtoId()==(25)||item.GetProtoId()==(27)||item.GetProtoId()==(25570)||item.GetProtoId()==(45))
	return true;
	
	return false;
}

void items_collection(int collection,array<ItemCl@>&items)
{
	
	if(collection==(1)&&RepairPid!=0)
	{
		if(RepairPid==(59)||RepairPid==(208)||GetItem(RepairItem).GetType()==(1))
		{
			for(uint i=0,j=items.length();i<j;i++)
			if(items[i].GetProtoId()!=(38)&&
			items[i].GetProtoId()!=(39))
			@items[i]=null;
		}
		else
		{
			for(uint i=0,j=items.length();i<j;i++)
			if(items[i].Id==RepairItem||
			(items[i].GetProtoId()!=RepairPid&&
			items[i].GetProtoId()!=(75)&&
			items[i].GetProtoId()!=(308)))
			@items[i]=null;
		}
	}
	
	if(collection==(6))
	{
		ZeroVolumeFillIndicator();
	}
	if(collection==(7))
	{
		SetVolumeFillIndicator(items);
	}
	
	if(collection==(6)||collection==(7))
	{
		int useFilter=(collection==(6)?GetPickupFilterOwn():GetPickupFilterOpp());
		if(useFilter==(-1))
		return;
		for(uint i=0,j=items.length();i<j;i++)
		{
			uint type=items[i].GetType();
			switch(useFilter)
			{
				case(0):
				if(type!=(1))
				@items[i]=null;
				break;
				case(1):
				if(type!=(3))
				@items[i]=null;
				break;
				case(2):
				if(type!=(4)&&!isNade(items[i]))
				@items[i]=null;
				break;
				case(3):
				if(type!=(2))
				@items[i]=null;
				break;
				case(4):
				default:
				if(type==(1)||type==(3)||type==(4)||type==(2))
				@items[i]=null;
			}
		}
	}
	
	if(collection==(2)||collection==(4))
	{
		
		ItemCl@caps;
		int useFilter=(collection==(2)?FiltersettingOwn:FiltersettingOpp);
		if(useFilter==(-1))
		{
			for(uint i=0,j=items.length();i<j;i++)
			{
				if(items[i].GetProtoId()==(41)||items[i].GetProtoId()==(1211)||items[i].GetProtoId()==(1212)||items[i].GetProtoId()==(1213)||items[i].GetProtoId()==(1214)||items[i].GetProtoId()==(1215))
				{
					@caps=items[i];
					@items[i]=null;
					break;
				}
			}
			
			if((@caps!=null))
			items.insertFirst(caps);
			return;
		}
		
		for(uint i=0,j=items.length();i<j;i++)
		{
			if(items[i].GetProtoId()==(41))
			{
				@caps=items[i];
				@items[i]=null;
				continue;
			}
			uint type=items[i].GetType();
			switch(useFilter)
			{
				case(0):
				if(type!=(1))
				@items[i]=null;
				break;
				case(1):
				if(type!=(3))
				@items[i]=null;
				break;
				case(2):
				if(type!=(4))
				@items[i]=null;
				break;
				case(3):
				if(type!=(2))
				@items[i]=null;
				break;
				case(4):
				default:
				if(type==(1)||type==(3)||type==(4)||type==(2))
				@items[i]=null;
			}
		}
		if((@caps!=null))
		items.insertFirst(caps);
	}       
	
}

void InitConfig()
{
	LoadConfig("FOnlineAT.cfg");
	IConfigSection@section; 
	
	__ConfigDamageHitColor=(uint((0xFF<<24)|(((200)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)));
	__ConfigVerboseActionColor=(uint((0xFF<<24)|(((58)&0xFF)<<16)|(((137)&0xFF)<<8)|((133)&0xFF)));
	__ConfigFogColor=(uint(((160)<<24)|(((0)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)));
	__ConfigCustomBorderColor=(uint((0xFF<<24)|(((30)&0xFF)<<16)|(((30)&0xFF)<<8)|((90)&0xFF)));
	
	TimeoutsConfig("");
	CombatLogConfig(); 
	
	@section=GetConfigSection("FOnlineAT.cfg","AfterTimes");
	if((@section!=null))
	{
		string@val; 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","Awareness");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigAwareness=string2bool(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","CombatMode");
		if((@val!=null)&&val.length()>0)
		{
			__DefaultCombatMode=(((string2uint(val))>(2))?(2):(((string2uint(val))<(0))?(0):(string2uint(val))));
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayAchievements");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigDisplayAchievements=(((string2uint(val))>(2))?(2):(((string2uint(val))<(0))?(0):(string2uint(val))));
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","Fog");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigFog=string2bool(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","FogColor");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigFogColor=rgba_string2uint(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","IgnoreLangChange");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigIgnoreLangChange=string2bool(val);
		}   
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayNames");
		if((@val!=null)&&val.length()>0)
		{
			__ShowPlayerNames=string2bool(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","MouseScroll");
		if((@val!=null)&&val.length()>0)
		{
			__MouseScroll=string2bool(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayTCZones");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigDisplayTCZones=(((string2uint(val))>(2))?(2):(((string2uint(val))<(0))?(0):(string2uint(val))));
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayTC");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigDisplayTC=string2bool(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","ShowMsFov");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigMsFov=string2bool(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","OnHeadAwareness");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigOnHeadAwareness=(((string2uint(val))>(2))?(2):(((string2uint(val))<(0))?(0):(string2uint(val))));
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","ShowNpcAwareness");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigShowNpcAwareness=string2bool(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","ShowPlayerAwareness");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigShowPlayerAwareness=string2bool(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","CustomBorder");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigCustomBorder=string2bool(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","CustomBorderRange");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigCustomBorderRange=(((string2uint(val))>(100))?(100):(((string2uint(val))<(0))?(0):(string2uint(val))));
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","CustomBorderColor");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigCustomBorderColor=rgb_string2uint(val);
		} 
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","ShowBulletTracers");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigShowBulletTracers=string2bool(val);
		}
		
		@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","RTS");
		if((@val!=null)&&val.length()>0)
		{
			__RTS=string2bool(val);   
			
		}
		
	}
	
	@section=GetConfigSection("FOnlineAT.cfg","Messages");
	if((@section!=null))
	{
		string@val;
		
		@val=GetConfigValue("FOnlineAT.cfg","Messages","DamageOffsetX");
		if((@val!=null)&&val.length()>0)
		{
			int from=0,to=0,
			result=range_string2int(val,from,to);
			
			from=(((from)>(100))?(100):(((from)<(-100))?(-100):(from)));
			to=(((to)>(100))?(100):(((to)<(-100))?(-100):(to)));
			
			__ConfigDamageHitOffXfrom=from;
			__ConfigDamageHitOffXto=to;
		}
		
		@val=GetConfigValue("FOnlineAT.cfg","Messages","DamageOffsetY");
		if((@val!=null)&&val.length()>0)
		{
			int from=0,to=0,
			result=range_string2int(val,from,to);
			
			from=(((from)>(100))?(100):(((from)<(-100))?(-100):(from)));
			to=(((to)>(100))?(100):(((to)<(-100))?(-100):(to)));
			
			__ConfigDamageHitOffYfrom=from;
			__ConfigDamageHitOffYto=to;
		}
		
		@val=GetConfigValue("FOnlineAT.cfg","Messages","DamageColor");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigDamageHitColor=rgb_string2uint(val);
		}
		
		@val=GetConfigValue("FOnlineAT.cfg","Messages","ActionVisible");
		if((@val!=null)&&val.length()>0)
		{
			vis_string2bool(val,
			__ConfigVerboseActionHead,
			__ConfigVerboseActionBox
			);
		}
		
		@val=GetConfigValue("FOnlineAT.cfg","Messages","ActionOffsetX");
		if((@val!=null)&&val.length()>0)
		{
			int from=0,to=0,
			result=range_string2int(val,from,to);
			
			from=(((from)>(100))?(100):(((from)<(-100))?(-100):(from)));
			to=(((to)>(100))?(100):(((to)<(-100))?(-100):(to)));
			
			__ConfigVerboseActionOffXfrom=from;
			__ConfigVerboseActionOffXto=to;
		}
		
		@val=GetConfigValue("FOnlineAT.cfg","Messages","ActionOffsetY");
		if((@val!=null)&&val.length()>0)
		{
			int from=0,to=0,
			result=range_string2int(val,from,to);
			
			from=(((from)>(100))?(100):(((from)<(-100))?(-100):(from)));
			to=(((to)>(100))?(100):(((to)<(-100))?(-100):(to)));
			
			__ConfigVerboseActionOffYfrom=from;
			__ConfigVerboseActionOffYto=to;
		}
		
		@val=GetConfigValue("FOnlineAT.cfg","Messages","ActionColor");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigVerboseActionColor=rgb_string2uint(val);
		}
		
		@val=GetConfigValue("FOnlineAT.cfg","Messages","FollowerExperience");
		if((@val!=null)&&val.length()>0)
		{
			__ConfigFollowerExperience=string2bool(val);
		}
	}  
	
	@section=GetConfigSection("FOnlineAT.cfg","DataFiles");
	if((@section!=null))
	{
		array<string>vars;
		section.GetVars(vars);
		
		for(uint v=0;v<vars.length();v++)
		{
			string val=GetConfigValue("FOnlineAT.cfg","DataFiles",vars[v]);
			
			string this=vars[v];
			this=ReplaceText(this,"_"," ");
			if(!LoadDataFile(val))
			{
				Message("DataFiles: Can't load "+val+" ("+this+")");
			}
			else
			{
				Message("DataFiles: Loaded "+this);
			}
		}
	} 
	
	@section=GetConfigSection("FOnlineAT.cfg","AfterTimes");
	if((@section!=null))
	{
		string@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","CustomIni");
		if((@val!=null)&&val.length()>0)
		{
			array<string@>@ini=split(val,"|");
			
			for(uint i=0;i<ini.length();i++)
			{
				if(ini[i].length()>0)
				{  
					
					AppendIfaceIni(ini[i]);
				}
			}
		}
	}
}

void _CC(int c,int,int,string@,array<int>@)
{
	if((((c)&((0x0000000001)))!=0)) __ShowTile=true;else __ShowTile=false;;
	if((((c)&((0x0000000002)))!=0)) __ShowRoof=true;else __ShowRoof=false;;
	if((((c)&((0x0000000010)))!=0)) __ShowWall=true;else __ShowWall=false;;
	if((((c)&((0x0000000004)))!=0)) __ShowItem=true;else __ShowItem=false;;
	if((((c)&((0x0000000008)))!=0)) __ShowScen=true;else __ShowScen=false;;
	if((((c)&((0x0000000040)))!=0)) __ShowFast=true;else __ShowFast=false;;
	if((((c)&((0x0000000080)))!=0)) __ShowNpcNames=true;else __ShowNpcNames=false;;
	if((((c)&((0x0000000100)))!=0)) __ShowCritId=true;else __ShowCritId=false;;
}

void _SetChosenActions(int,int,int,string@,array<int>@data)
{
	array<uint>actions;
	for(uint a=0,aLen=data.length();a<aLen;a++)
	{
		if(data[a]<0)
		return;
		else
		actions.insertLast(data[a]);
	}
	SetChosenActions(actions);
}

bool IsGMTEnabled()
{
	return(isGMT);
}

void _OpenURL(int,int,int,string@url,array<int>@)
{
	if(!(@url!=null)||url.length()==0)
	return;
	
	array<string>allowed;  
	
	allowed.insertLast("http://fonline-aftertimes.net");
	allowed.insertLast("http://forum.fonline-aftertimes.net");
	allowed.insertLast("http://www.fonline-aftertimes.net");
	
	bool can=false;
	for(uint a=0,aLen=allowed.length();a<aLen;a++)
	{
		if(url.length()<allowed.length())
		return;
		
		if(substring(url,0,allowed[a].length())==allowed[a])
		{
			can=true;
			break;
		}
	}
	
	if(!can)
	return; 
	
	Message("Opening URL: "+url);
	OpenURL(url);
}
void _as(int param1,int param2,int param3,string@param4,array<int>@param5)
{
	ChangeCursor(3);
}

bool IsClientScreenTooSmall()
{
	return __ScreenWidth<800||__ScreenHeight<600;
}

bool IsClientScreenTooBig()
{
	return __ScreenWidth>1280||__ScreenHeight>1024;
}

bool IsClientScreenBig()
{
	return __ScreenWidth>=1280||__ScreenHeight>=1024;
}