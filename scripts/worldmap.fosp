

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                               

uint[][]PositionDirs=
{
	{0},
	
	{1,4,3,2,1,0,5,2,3,4,5,0,1},
	{1,5,0,1,2,3,4,1,0,5,4,3,2},
	{1,4,2},
	{1,5,1},
	{2,1,2,0,0,1,2,3,3,0,0,4,5,3,3,4,5},
	{2,1,2,4,5},
	{2,4,4,0,0,4,4,3,3,0,0,2,2,3,3,2,2},
	{2,5,5,0,0,5,5,3,3,0,0,1,1,3,3,1,1},
	{2,1,2,0,0,0,0,1,2,3,3,3,3,0,0,0,0,4,5,3,3,3,3,4,5}
};                                                                                                                                                                           

shared interface IZone
{
	uint GetX();
	uint GetY();
	uint GetTerrain();
	uint8 GetFactor();
	void SetFactor(uint8 factor);
	int GetValue();
	void SetValue(int val);
	void AddValue(int val);
	void SubValue(uint val);
	bool ContainsFlag(uint flag);
	void SetQuantity(uint group,uint quantity);
	void ChangeQuantity(uint group,int mod);
	uint GetBaseQuantity(uint group);
	uint GetQuantity(uint group);
	uint GetLocationPids(array<uint16>&pids);
};                         

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                            

shared class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(!IsAnyData(name))
		return false;
		if(!GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const bool&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const string&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const float&value)
	{
		int dummy=FloatToInt(value);
		return Set(dummy);
	}
	
	Serializator@opShl(const float&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const array<int64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<bool>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<bool>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<string>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<string>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<float>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(FloatToInt(values[i]));
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<float>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Critter&cr)
	{
		return Set(cr);
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Item&item)
	{
		return Set(item);
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@opShr(bool&value)
	{
		return Get(value);
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@opShr(string&str)
	{
		return Get(str);
	}
	
	Serializator@Get(float&value)
	{
		int dummy=0;
		Get(dummy);
		value=IntToFloat(dummy);
		return this;
	}
	
	Serializator@opShr(float&value)
	{
		return Get(value);
	}
	
	Serializator@Get(array<int64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<float>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		{
			int dummy=0;
			Get(dummy);
			values[i]=IntToFloat(dummy);
		}
		return this;
	}
	
	Serializator@opShr(array<float>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<bool>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<bool>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<string>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<string>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@opShr(Critter@&cr)
	{
		return Get(cr);
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	Serializator@opShr(Item@&item)
	{
		return Get(item);
	}
	
	array<uint8>Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};                                                                                                                                                                                         

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";                                                                                                                                                                                                                                                                                                                                                                                              

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                                       

import void InitEconomy()from"economy";
import void SendLevelThresholds(Critter&)from"economy"; 

import bool BankAccountExists(uint bankid,uint account)from"economy";
import bool BankAccountRemoveMoney(uint bankid,uint account,uint amount)from"economy";
import bool BankHasAccess(uint bankid,uint account,uint playerid)from"economy";
import int BankGetAccountBalance(uint bankid,uint account)from"economy";
import int BankGetAccountID(uint bankid,uint playerid)from"economy";
import uint BankAddAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankCreateAccount(uint bankid,uint playerid)from"economy";
import uint BankDepositMoney(uint bankid,uint playerid,uint account,int amount)from"economy";
import uint BankGetAccessCount(uint bankid,uint account)from"economy";
import uint BankGetAccountOwner(uint bankid,uint account)from"economy";
import uint BankGetAccountType(uint bankid,uint account)from"economy";
import uint BankGetCreditRating(uint bankid,uint account)from"economy";
import uint BankGetLoan(uint bankid,uint account)from"economy";
import uint BankRemoveAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankSetAccountType(uint bankid,uint account,uint accounttype)from"economy";
import uint BankSetCreditRating(uint bankid,uint account,uint rating)from"economy";
import uint BankSetLoan(uint bankid,uint account,uint loan)from"economy";
import uint BankTakeLoan(uint bankid,uint account,uint amount)from"economy";
import uint BankTransferMoney(uint bankid,uint fromaccount,uint toaccount,uint amount)from"economy";
import uint BankWithdrawMoney(uint bankid,uint playerid,uint account,int amount)from"economy"; 

import bool BanksTransferFromCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import bool BanksTransferToCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import uint BanksGetTotalMoney()from"economy";
import void BanksAddMoney(uint amount)from"economy";
import void BanksRemoveMoney(uint amount)from"economy"; 

import bool BankAddMoney(uint bankid,uint amount)from"economy";
import bool BankRemoveMoney(uint bankid,uint amount)from"economy";
import bool BankSetMoney(uint bankid,uint amount)from"economy";
import uint BankGetLoanInterest(uint bankid)from"economy";
import uint BankGetNumberOfAccounts(uint bankid)from"economy";
import float BankGetSaveInterest(uint bankid)from"economy";
import uint BankGetTotalMoney(uint bankid)from"economy";
import uint BankGetTotalBalance(uint bankid)from"economy";
import float BankGetReserveRatio(uint bankid)from"economy";
import uint BankSetLoanInterest(uint bankid,uint interest)from"economy";
import uint BankSetSaveInterest(uint bankid,float interest)from"economy";
import bool BankTransferFromCritter(uint bankId,Critter&critter,uint amount,uint type,bool virtual)from"economy";

import void SaveBankData()from"economy";   

import int GetItemSellModifier(Critter&player,Critter&trader)from"economy";
import int GetItemBuyModifier(Critter&player,Critter&trader)from"economy";
import uint GetItemCost(Item&item,Critter&cr,Critter&trader,bool sell)from"economy";
import uint GetItemCostPlain(Item&item,Critter&cr,Critter&trader)from"economy";

import array<int>GetTraderLevels(Critter@npc)from"economy";
import uint GetTraderLevel(Critter@npc,uint type)from"economy";

import uint ItemLevel(Item&item)from"economy";
import uint ItemLevel(uint pid)from"economy";
import uint TraderCapacity(Critter@npc)from"economy";
import uint TraderCapacity(Critter@npc,uint type,uint level)from"economy";
import uint TraderMoneyCapacity(Critter@npc)from"economy";
import uint TradingItemType(Item&item)from"economy";
import uint TradingItemType(uint pid)from"economy";                                                                                                          

const string@FD_Bank_Result2String(uint res)
{
	if(res==(1))
	return"FD_BANK_RESULT_SUCCESS";
	else if(res==(2))
	return"FD_BANK_RESULT_UNKNOWN";
	else if(res==(3))
	return"FD_BANK_RESULT_TOO_MANY_ACCOUNTS";
	else if(res==(4))
	return"FD_BANK_RESULT_ALREADY_HAS_ACCOUNT";
	else if(res==(5))
	return"FD_BANK_RESULT_NOT_ENOUGH_MONEY";
	else if(res==(6))
	return"FD_BANK_RESULT_BANK_FULL";
	else if(res==(7))
	return"FD_BANK_RESULT_BANK_EMPTY";
	else if(res==(8))
	return"FD_BANK_RESULT_DATA_ERROR";
	else if(res==(9))
	return"FD_BANK_RESULT_INVALID_PLAYER";
	else if(res==(10))
	return"FD_BANK_RESULT_NO_ACCOUNT";
	else
	return"FD_Result: Unknown error code";
}                        

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                                                                                          

import ICaravan@GetCaravan(uint id)from"caravans";
import ICaravan@GetCaravan(Critter&cr)from"caravans";

import void InitCaravans()from"caravans"; 

import bool TakeNextLine(file&f,string&line)from"trains";
import array<int>@TakeNextNumLine(file&f)from"trains";   

bool IsCaravanLeader(Critter&cr)
{
	ICaravan@caravan=GetCaravan(cr); 
	
	return(@caravan!=null)&&(caravan.GetLeaderId()==cr.Id||caravan.GetWMLeaderId()==cr.Id);
}     

void CaravanStart(Critter&leader)
{
	ICaravan@caravan=GetCaravan(leader.Id);
	if(!(@caravan!=null))
	{
		
		return;
	}
	
	caravan.Start();
}

void CaravanProcessStartFast()
{}

void CaravanProcessMove()
{}  

shared interface ICaravan
{
	void Init();
	
	uint GetState();
	
	uint GetLeaderId();
	uint GetWMLeaderId();
	
	bool IsCaravanMember(Critter&);
	
	ICaravan@Route(uint16 origLoc,uint8 origMap,uint16 destLoc,uint8 destMap);
	ICaravan@Route(uint16 x,uint16 y);
	ICaravan@_AddNpc(uint16 pid,uint dialogId,uint bagId,uint level);
	
	void Assign(Critter&cr);
	void Leave(Critter&cr);
	void GetCurrentCoords(float&,float&);
	bool EndOfTrack();
	void IncRoutePosition();
	
	string GetName();
	string GetNextDestinationName();
	uint GetActPay();
	uint GetDepartTime(); 
	
	void Start();
	void PrepareDeparture(uint);
	void Arrive();
	void PrepareRespawn();
	void Respawn();
};   

class CCaravanNpc
{
	uint16 Pid;
	uint DialogId;
	uint BagId;
	uint Level;
	
	CCaravanNpc(uint16 pid,uint dialogId,uint bagId,uint level)
	{
		this.Pid=pid;
		this.DialogId=dialogId;
		this.BagId=bagId;
		this.Level=level;
	}
};  

class Coord
{
	uint16 X;
	uint16 Y;
	Coord(uint16 x,uint16 y)
	{
		this.X=x;
		this.Y=y;
	}
};    

class CRoute
{
	private uint Id;
	private uint HeadId;
	private uint TailId;
	private array<float>X;
	private array<float>Y;
	
	uint GetId(){return Id;}
	uint GetHeadId(){return HeadId;}
	uint GetTailId(){return TailId;}
	
	CRoute(uint id,uint headId,uint tailId)
	{
		Id=id;
		HeadId=headId;
		TailId=tailId;
	}
	uint NodesCount(){return X.length();}
	float GetX(uint node){return X[node];}
	float GetY(uint node){return Y[node];}
	void GetXY(uint node,float&x,float&y){x=X[node];y=Y[node];}
	void AddNode(float x,float y){X.insertLast(x);Y.insertLast(y);}
	bool IsLast(uint idx){return idx+1==NodesCount();}
};

class CCaravanStation
{
	private uint Id;
	private Map@MapPtr;
	private Location@LocPtr;
	
	CCaravanStation(uint id,uint map_pid)
	{
		Id=id;
		@MapPtr=GetMapByPid(map_pid,0);
		if(!(@MapPtr!=null))
		{
			WLog("trains","wrong map pid="+map_pid,20);
			return;
		}
		@LocPtr=MapPtr.GetLocation();
	}
	
	uint GetId(){return Id;}
	float GetX(){return LocPtr.WorldX;}
	float GetY(){return LocPtr.WorldY;}
	Map@GetMap(){return MapPtr;}
	Location@GetLocation(){return LocPtr;}
}; 

class CaravanManager
{
	
	array<CRoute@>Routes;
	array<CCaravanStation@>Stations;
	array<ICaravan@>Caravans;
	
	CCaravanStation@GetStation(uint id)
	{
		if(id>=Stations.length())
		return null;
		return Stations[id];
	}
	ICaravan@GetCaravan(uint id)
	{
		if(id>=Caravans.length())
		return null;
		return Caravans[id];
	}
	CRoute@GetRoute(uint id)
	{
		if(id>=Routes.length())
		return null;
		return Routes[id];
	}
	
	void Load(string&filename)
	{
		Caravans.insertLast(null);
		file f;
		
		f.open(filename,"r"); 
		
		array<int>@data=TakeNextNumLine(f);
		array<int>@data1;
		array<int>@data2;
		for(uint i=0,j=data.length();i<j;i++)
		{
			CCaravanStation@station=@CCaravanStation(i,data[i]);
			Stations.insertLast(station);
		}
		WLog("caravans","loaded "+Stations.length()+" stations"); 
		
		@data=TakeNextNumLine(f);
		uint routes=data[0];
		for(uint i=0;i<routes;i++)
		{
			@data=TakeNextNumLine(f);
			CRoute@route=CRoute(i,data[0],data[1]);
			Routes.insertLast(route);
			for(uint k=2;k<data.length();k+=2)
			route.AddNode(data[k],data[k+1]);
			CCaravanStation@station=GetStation(data[1]);
			route.AddNode(station.GetX(),station.GetY());
		}
		for(uint i=0;i<routes;i++)
		{
			CRoute@toInvert=Routes[i];
			CRoute@inverted=CRoute(i+routes,toInvert.GetTailId(),toInvert.GetHeadId());
			for(int j=toInvert.NodesCount()-2;j>=0;j--)
			{
				float x=0;
				float y=0;
				toInvert.GetXY(j,x,y);
				inverted.AddNode(x,y);
			}
			CCaravanStation@station=GetStation(toInvert.GetHeadId());
			inverted.AddNode(station.GetX(),station.GetY());
			Routes.insertLast(inverted);
		}
		WLog("caravans","loaded "+Routes.length()+" caravan routes");  
		
		@data=TakeNextNumLine(f);
		uint caravans=data[0];
		for(uint i=0;i<caravans;i++)
		{
			string name="";
			TakeNextLine(f,name);
			@data=TakeNextNumLine(f);
			@data2=TakeNextNumLine(f);
			
			@data1=TakeNextNumLine(f);
			
			CCaravan@caravan=CCaravan(i+1,data,data2,data1[0],data1[1],data1[2],data1[3],data1[4],name,this);
			@data=TakeNextNumLine(f);
			uint townPid=data[0];
			uint townBag=data[1];
			
			@data=TakeNextNumLine(f);
			uint leaderPid=data[0];
			uint leaderBag=data[1];
			
			@data=TakeNextNumLine(f);
			uint guardTypeCount=data.length()/2;
			array<uint>@guardPids=array<uint>(guardTypeCount);
			
			array<uint>@guardBags=array<uint>(guardTypeCount); 
			
			for(uint k=0,l=0;k<guardTypeCount;k++)
			{
				guardPids[k]=data[l];
				guardBags[k]=data[l+1];
				l+=2;
			}
			caravan.SetBagsAndPids(townPid,townBag,leaderPid,leaderBag,guardPids,guardBags);
			Caravans.insertLast(caravan);
		}
		WLog("caravans","loaded "+Caravans.length()+" caravans");
		
		f.close(); 
		
		for(uint i=1;i<Caravans.length();i++)
		Caravans[i].Init();
		
	}
};       

class CCaravan:ICaravan
{
	
	uint id;
	
	CaravanManager@mgr; 
	
	array<uint>players;
	
	array<uint>critters; 
	
	array<CCaravanNpc>npcs; 
	
	uint wagon;
	
	uint routeIndex;
	uint routePosition;
	
	uint originStationId;
	uint destinationStationId; 
	
	uint16 destLoc;
	
	uint8 destMap;
	
	uint16 origLoc;
	uint8 origMap;
	
	uint currLoc;
	uint8 currMap;
	
	uint entire;
	uint timeInTown;
	
	uint timeEvent;
	uint departure;
	
	uint state; 
	
	int target;
	array<Coord>route;
	
	array<int>@routes;
	array<int>@rewards;
	string name;
	
	uint townDlg;
	uint wmDlg;
	
	uint townLeaderPid;
	uint townLeaderBag;
	uint leaderPid;
	uint leaderBag;
	uint factionId;
	array<uint>@guardPids;
	array<uint>@guardBags;
	
	Serializator serializer;
	
	CCaravan(uint id,array<int>@routes,array<int>@rewards,int entire,int timeInTown,int townDlg,int wmDlg,int factionId,string name,CaravanManager@mgr)
	{
		this.id=id;
		@this.routes=routes;
		@this.rewards=rewards;
		this.entire=entire;
		this.timeInTown=timeInTown;
		this.name=name;
		this.townDlg=townDlg;
		this.factionId=factionId;
		this.wmDlg=wmDlg;
		@this.mgr=mgr;
		timeEvent=0;
	}
	
	void SetBagsAndPids(uint townLeaderPid,uint townLeaderBag,uint leaderPid,uint leaderBag,array<uint>@guardPids,array<uint>@guardBags)
	{
		this.townLeaderPid=townLeaderPid;
		this.townLeaderBag=townLeaderBag;
		this.leaderPid=leaderPid;
		this.leaderBag=leaderBag;
		@this.guardPids=guardPids;
		@this.guardBags=guardBags;
	}   
	
	void LoadData()
	{
		serializer.Load("Caravan_"+id);
		uint num=0;
		
		serializer.Get(routeIndex);
		routeIndex=(routeIndex%routes.length());        
		
		serializer.Get(num);
		critters.resize(num);
		for(uint i=0;i<num;i++)
		serializer.Get(critters[i]); 
		
	}
	
	void SetDefault()
	{
		routeIndex=0;
		
	}  
	
	void SaveData()
	{
		serializer.Clear();
		uint num=0;
		
		serializer.Set(routeIndex);         
		
		num=critters.length();
		serializer.Set(num);
		for(uint i=0;i<num;i++)
		serializer.Set(critters[i]);  
		
		serializer.Save("Caravan_"+id);
	}     
	
	void SetId(uint id)
	{
		this.id=id;
	}   
	
	void Init()
	{
		
		{;};
		
		if(IsAnyData("Caravan_"+id))
		{
			
			LoadData();
		}
		else
		{
			
			SetDefault();
			SaveData();
		}
		
		ClearCaravan(); 
		
		SpawnCaravan();
	}
	
	void ClearCaravan()
	{
		for(uint i=0,j=critters.length();i<j;i++)
		{
			Critter@cr=GetCritter(critters[i]);
			if((@cr!=null))
			DeleteNpc(cr);
		}
		critters.resize(2);
		
		CRoute@actRoute=mgr.GetRoute(routes[routeIndex]);
		originStationId=actRoute.GetHeadId();
		
		destinationStationId=actRoute.GetTailId();
	}   
	
	void SpawnCaravan()
	{
		
		CCaravanStation@origin=mgr.GetStation(originStationId);
		Map@map=origin.GetMap();
		int[]params={(104),townDlg,(107),townLeaderBag,(106),factionId,(122),1,(532),1,(511),1};
		uint16 x=0;
		uint16 y=0;
		map.GetEntireCoords(entire,0,x,y);
		Critter@cr=map.AddNpc(townLeaderPid,x,y,3,params,null,"caravans@_CaravanTownNpc");
		
		if(!(@cr!=null))
		return;
		cr.ParamBase[(84)]=((1)*60);
		SetLvar(cr.Id,(3006),id);
		
		critters[0]=cr.Id;
		critters[1]=0;
		
		state=(0);
		
		uint fullSec=((__FullSecond)+(((timeInTown)*60)));
		departure=fullSec-fullSec%3600+3600;
		
		array<uint>departData={id,departure};
		timeEvent=CreateTimeEvent(departure-3600,"caravans@e_PrepareCaravan",departData,false);                                       
		
	}
	
	void PrepareDeparture(uint departTime)
	{
		state=(1);
		timeEvent=CreateTimeEvent(departTime,"caravans@e_DepartCaravan",id,false);
		int[]params={(104),wmDlg,(107),leaderBag,(106),factionId,(122),1};
		
		CCaravanStation@origin=mgr.GetStation(originStationId);
		Map@map=origin.GetMap();
		Critter@leader=map.AddNpc(leaderPid,0,0,0,params,null,"caravans@_CaravanDriver");
		SetLvar(leader.Id,(3006),id);
		leader.TransitToGlobal(false);
		critters[1]=leader.Id;
	}
	
	void GetCurrentCoords(float&x,float&y)
	{
		CRoute@route=mgr.GetRoute(routes[routeIndex]);
		route.GetXY(routePosition,x,y);
	}
	
	bool EndOfTrack()
	{
		CRoute@route=mgr.GetRoute(routes[routeIndex]);
		return route.IsLast(routePosition);
	}
	
	void IncRoutePosition()
	{
		routePosition++;
	}   
	
	uint GetLeaderId()
	{
		return critters[0];
	}
	
	uint GetWMLeaderId()
	{
		return critters[1];
	}
	
	bool IsCaravanMember(Critter&crit)
	{
		if(crit.IsPlayer())
		{
			for(uint i=0,j=players.length();i<j;i++)
			{
				if(players[i]==crit.Id)
				return true;
			}
		}
		else
		{
			for(uint i=0,j=critters.length();i<j;i++)
			{
				if(critters[i]==crit.Id)
				return true;
			}
		}
		return false;
	}  
	
	ICaravan@Route(uint16 origLoc,uint8 origMap,uint16 destLoc,uint8 destMap)
	{
		{;};
		this.origLoc=origLoc;
		this.origMap=origMap;
		this.destLoc=destLoc;
		this.destMap=destMap;
		
		this.currLoc=origLoc;
		this.currMap=origMap;
		
		return this;
	}   
	
	ICaravan@Route(uint16 x,uint16 y)
	{
		route.insertLast(Coord(x,y));
		return this;
	}    
	
	ICaravan@_AddNpc(uint16 pid,uint dialogId,uint bagId,uint level)
	{
		npcs.insertLast(CCaravanNpc(pid,dialogId,bagId,level));
		return this;
	}  
	
	void Assign(Critter&cr)
	{
		GameVar@var=GetLocalVar((3006),cr.Id);
		var=id;
		
		cr.ParamBase[(81)]=GetWMLeaderId();
	}  
	
	void Leave(Critter&cr)
	{
		if(cr.IsPlayer())
		{
			for(uint i=0,j=players.length();i<j;i++)
			{
				if(players[i]==cr.Id)
				players[i]=0;
			}
		}
		else
		{
			for(uint i=0,j=critters.length();i<j;i++)
			{
				if(critters[i]==cr.Id)
				critters[i]=0;
			}
		}
		GameVar@var=GetLocalVar((3006),cr.Id);
		var=0;
		
	}
	
	uint GetState()
	{
		return state;
	}
	
	string GetName()
	{
		return name;
	}
	
	string GetNextDestinationName()
	{
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		return GetLocationName(destination.GetLocation());
	}
	
	uint GetActPay()
	{
		return rewards[routeIndex];
	}
	
	uint GetDepartTime()
	{
		return departure;
	}   
	
	void Start()
	{
		Map@map;
		Critter@townNpc=GetCritter(critters[0]);
		if((@townNpc!=null))
		{
			@map=townNpc.GetMap();
			DeleteNpc(townNpc);
		}
		critters[0]=0;
		routePosition=0;
		state=(2);
		
		Critter@wmNpc=GetCritter(critters[1]);
		
		array<Critter@>crits=wmNpc.GetGlobalGroup();
		uint playerCount=crits.length()-1;
		players.resize(playerCount);
		for(uint i=1,j=crits.length();i<j;i++)
		{
			players[i-1]=crits[i].Id;
			SetLvar(crits[i].Id,(3006),id);
			crits[i].Say((11),"You have departed with caravan.");
		}  
		
		uint neededGuards;
		if(playerCount>5)neededGuards=0;
		else neededGuards=6-playerCount; 
		
		critters.resize(2+neededGuards);
		if((@map!=null))
		{
			uint guardTypeCount=guardPids.length();
			for(uint i=0;i<neededGuards;i++)
			{
				uint guardType=Random(0,guardTypeCount-1);
				int[]params={(107),guardBags[guardType],(106),factionId,(122),1};
				Critter@npc=map.AddNpc(guardPids[guardType],1,1,0,params,null,"caravans@_CaravanGuard");
				npc.ParamBase[(91)]=critters[1];
				critters[2+i]=npc.Id;
				npc.TransitToGlobalGroup(GetWMLeaderId());
				SetLvar(npc.Id,(3006),id);
			}
		}
		CCaravanStation@origin=mgr.GetStation(originStationId);
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		
	}
	
	void Reward()
	{
		Critter@leader=GetCritter(GetWMLeaderId());
		if((@leader!=null))
		{
			array<Critter@>crits=leader.GetGlobalGroup();
			uint playerCount=crits.length()-1;
			players.resize(playerCount);
			for(uint i=1,j=crits.length();i<j;i++)
			{
				if(crits[i].IsPlayer())
				{
					uint reward=GetActPay()*2+crits[i].Param[(77)]*25;
					uint reward2=GetActPay()*2;
					BanksTransferToCritter(crits[i],reward,(0),false);
					crits[i].Say((11),"You have received "+reward+" caps as your pay.");
					int expAmount=(crits[i].Param[(77)]*reward2/10)*(GetGvar((62003)))*(GetGvar((62001)));
					crits[i].ParamBase[(76)]+=expAmount;
					crits[i].AddItem((41),crits[i].Param[(77)]*25);
					crits[i].Say((11),"|0xFFFFFF You have gained "+expAmount+" experience points.");
					AddScore(crits[i],(58),1);
				}
			}
		}
	}
	
	void Arrive()
	{
		CCaravanStation@origin=mgr.GetStation(originStationId);
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		
		Reward();
		routeIndex=(routeIndex+1)%routes.length();
		ClearCaravan();
		SpawnCaravan();
	}
	
	void PrepareRespawn()
	{
		CCaravanStation@origin=mgr.GetStation(originStationId);
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		
		routeIndex=(routeIndex+1)%routes.length();
		ClearCaravan();
		CreateTimeEvent(((__FullSecond)+(((7)*__TimeMultiplier*60))),"caravans@e_RespawnCaravan",id,false);
	}
	
	void Respawn()
	{
		SpawnCaravan();
		CCaravanStation@origin=mgr.GetStation(originStationId);
		
	}
};                                                                                                                                                                                                                                                                                                                

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             

shared interface IWeatherZone
{
	uint GetID();
	bool Load();
	bool Save();
	
	string GetName();
	void SetName(string name);
	
	uint GetTimeEvent();
	void SetTimeEvent(uint id);
	
	int GetFlags();
	bool GetFlag(int flag);
	void SetFlag(int flag);
	void UnsetFlag(int flag);
	
	uint GetSpeedMove();
	bool SetSpeedMove(uint speed);
	uint GetSpeedLevel();
	bool SetSpeedLevel(uint speed);
	uint GetSpeedRadius();
	bool SetSpeedRadius(uint speed);
	uint GetSubZones();
	bool SetSubZones(uint subzones);
	
	bool SetType(uint type);
	bool Position(uint coords_x,uint coords_y);
	bool Move(uint coords_x,uint coords_y);
	bool Level(uint level);
	bool Radius(uint radius);
	
	bool LoadActions(string&filename);
	void Action(uint action,uint data1,uint data2);
	void Update();
	void UpdateFast(Location@loc);
	void Lock();
	void Unlock();
	uint GetUpdateTime();
	uint SetUpdateTime(uint time);
	void Delete();
};  

import void InitWeather()from"weather";
import void SaveWeather()from"weather";

import uint AddWeatherZone(string&name)from"weather";
import uint AddWeatherZone(uint coords_x,uint coords_y,uint type)from"weather";

import IWeatherZone@GetWeatherZone(uint id)from"weather";
import IWeatherZone@GetWeatherZone(string&name)from"weather";

import void WeatherUpdate(Critter@critter,uint&type,int&level)from"weather";
import void WeatherUpdate(Location@loc,uint&type,int&level)from"weather";
import void WeatherUpdate(int locid,uint type,int level)from"weather";

import void WeatherUpdateFast(Location@loc)from"weather";

import void DeleteWeatherZone(uint&id,uint&speed_level,uint&speed_radius)from"weather";
import void DeleteWeatherZone(string&name,uint&speed_level,uint&speed_radius)from"weather";
import void DeleteWeatherZone(IWeatherZone@zone,uint&speed_level,uint&speed_radius)from"weather";              

import bool IsNight()from"world_common";
import bool IsDay()from"world_common";
import bool IsMorning()from"world_common";
import bool IsAfternoon()from"world_common";
import bool IsEvening()from"world_common";
import bool IsHospital(Map@map)from"world_common";
import bool IsCave(Map@map)from"world_common";
import bool IsMine(Map@map)from"world_common";
import bool IsJail(Map@map)from"world_common";
import bool IsBase(Map@map)from"world_common";
import bool IsTent(Map@map)from"world_common";
import bool IsWarzone(Map@map)from"world_common";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    

bool LoadWorldmapTables(string@fileName)
{
	file f;
	{;};
	
	if(f.open(fileName,"r")>=0)
	{
		
		string str;
		int l=f.readString(f.getSize(),str);
		f.close(); 
		
		array<string@>@lines=split(str,"\n");
		{;};
		
		array<uint>locations;
		array<uint>groups;
		array<uint>quantities;
		
		for(uint i=0;i<lines.length();i++)
		{
			if(lines[i].length()<5)
			{
				Log("Empty line");
				continue;
			}
			
			array<string@>@splittedline=split(lines[i],"|");
			array<string@>@coords=split(splittedline[0],",");
			array<string@>@params=split(splittedline[1],",");
			
			int x=0;
			int y=0;
			int terrain=0;
			int difficulty=0;
			int fill=0;
			int chance=0;
			
			StrToInt(coords[0],x);
			StrToInt(coords[1],y);
			
			StrToInt(params[0],difficulty);
			StrToInt(params[1],terrain);
			StrToInt(params[2],fill);
			StrToInt(params[3],chance);
			
			CZone@zone=SetZone(x,y,y*(42)+x,difficulty,terrain,fill,chance);
			
			if(splittedline.length()<3)
			continue;
			
			zone.LocationPids.resize(0);
			zone.Groups.resize(0);
			zone.Quantities.resize(0);
			
			array<string@>@str_locations=split(splittedline[2],","); 
			
			uint loc=0;
			for(uint j=0,k=str_locations.length();j<k;j++)
			{
				if(str_locations[j].length()==0)
				continue;
				loc=0;
				StrToInt(str_locations[j],loc);
				if(loc==0)
				{
					Log("Wrong location pid");
					continue;
				}
				zone.LocationPids.insertLast(loc);
			}
			
			if(splittedline.length()<4)
			continue;
			
			if(splittedline[3].length()>3)
			{
				array<string@>@str_groups=split(splittedline[3],","); 
				
				uint group=0;
				uint quantity=0;
				for(uint j=0,k=str_groups.length();j<k;j++)
				{
					if(str_groups[j].length()==0)
					continue;
					array<string@>@grch=split(str_groups[j],":");
					group=0;
					chance=0;
					StrToInt(grch[0],group);
					StrToInt(grch[1],quantity);
					
					zone.Groups.insertLast(group);
					zone.Quantities.insertLast(quantity);
				}
			}
			
			if(splittedline.length()<5)
			{
				continue;
			}
			
			uint flag;
			array<string@>@str_flags=split(splittedline[4],",");
			for(uint j=0,k=str_flags.length();j<k;j++)
			{
				if(str_flags[j].length()==0)
				continue;
				flag=0;
				StrToInt(str_flags[j],flag);
				zone.Flags.insertLast(flag);
			}
		}
	}
	return true;
}     

import uint tier3armor()from"item_pools";
import uint tier3helmet()from"item_pools";
import uint tier3weapon()from"item_pools";
import uint tier3alien()from"item_pools";
import uint tier3bp()from"item_pools";
import uint tier3drugs()from"item_pools";
import uint tier3ammo()from"item_pools";
import uint tierlowammo()from"item_pools";
import uint tier4parts()from"item_pools";
import uint tier4bp()from"item_pools";
import uint tier4item()from"item_pools";
import uint tier4ammo()from"item_pools";
import uint rareitem()from"item_pools";
import uint implant()from"item_pools";
import uint implant_combat()from"item_pools";
import uint verti_parts()from"item_pools";
import uint currency()from"item_pools";
import uint low_tier()from"item_pools";
import uint books()from"item_pools";
import uint mats()from"item_pools";
import uint misc()from"item_pools";
import void addbasemap(Critter&player)from"personal_base";
import void addbasemap(Item&con)from"personal_base";

import bool istier3armor(uint pid)from"item_pools";
import bool istier3helmet(uint pid)from"item_pools";
import bool istier3weapon(uint pid)from"item_pools";
import bool istier3bp(uint pid)from"item_pools";
import bool istier3drugs(uint pid)from"item_pools";
import bool istier3ammo(uint pid)from"item_pools";
import bool istierlowammo(uint pid)from"item_pools";
import bool istier4parts(uint pid)from"item_pools";
import bool istier4bp(uint pid)from"item_pools";
import bool istier4item(uint pid)from"item_pools";
import bool istier4ammo(uint pid)from"item_pools";
import bool israreitem(uint pid)from"item_pools";
import bool isimplant(uint pid)from"item_pools";
import bool isimplant_combat(uint pid)from"item_pools";
import bool isverti_parts(uint pid)from"item_pools";
import bool iscurrency(uint pid)from"item_pools";
import bool islow_tier(uint pid)from"item_pools";
import bool isHelmet(uint pid)from"item_pools";
import void SetWear(Item&item,int wearProcent)from"repair";
import void SetMinWear(Item&item,int wearProcent)from"repair";
import int GetGroupsStatus(uint fac1,uint fac2)from"reputations_modifiers";
import void AffectRadiation(Critter&cr,int value)from"radiation";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import void AddSpecialBonusEncounterBoss(Item@it)from"item_bonus";
import void AddEncounterContainers(Map@map,array<Critter@>@critters)from"encounter_containers";
import void AddSpecialBonus(Item@it)from"item_bonus";
import bool isCar(Item@onItem)from"item_lock";  

class CCheck
{
	uint Type;
	uint Index;
	uint8 Operator;
	int Value;
	
	CCheck()
	{
		Type=0;
		Index=0;
		Operator=0;
		Value=0;
	}
	
	void Set(uint type,uint index,uint8 operator,int value)
	{
		Type=type;
		Index=index;
		Operator=operator;
		Value=value;
	}
};

class CEncounterPerk
{
	uint index;
	uint level;
	uint chance;
	
	CEncounterPerk(uint index,uint level,uint chance)
	{
		this.index=index;
		this.level=level;
		this.chance=chance;
	}
};

class CEncounterObject
{
	uint ObjectType;
	uint16 Pid;
	uint Dialog;
	string Script;
	uint Distance;
	uint Bag;
	uint NpcRole;
	uint TeamId;
	array<CEncounterObject@>Childs;
	array<CCheck>Checks;
	
	uint Ratio;
	bool Dead;
	int Armor;
	int Helmet;
	int OverrideCrtype;
	
	uint Minimum;
	uint Maximum;
	uint Slot;
	
	uint cost;
	
	array<CEncounterPerk>Perks;  
	
	uint BrokenMin;
	uint BrokenMax;
	
	array<uint>modes;
	
	CEncounterObject()
	{
		ObjectType=0;
		Pid=0;
		Dialog=0;
		Script="";
		Distance=0;
		Ratio=0;
		Bag=(1);
		NpcRole=0;
		Dead=false;
		Armor=0;
		Helmet=0;
		OverrideCrtype=0;
		Minimum=0;
		Maximum=0;
		Slot=0;
		cost=0;
		BrokenMin=0;
		BrokenMax=0;
		TeamId=0;
	}
	
	CEncounterObject@NewCheck(uint type,uint index,uint8 operator,int value)
	{
		uint len=Checks.length();
		Checks.resize(len+1);
		Checks[len].Set(type,index,operator,value);
		return this;
	}
	
	CEncounterObject@SetPid(uint16 pid){Pid=pid;return this;}
	CEncounterObject@SetDialog(uint dialog){Dialog=dialog;return this;}
	CEncounterObject@SetScript(string&script){Script=script;return this;}
	CEncounterObject@SetBag(uint bag){Bag=bag;return this;}
	CEncounterObject@SetNpcRole(uint role){NpcRole=role;return this;}
	CEncounterObject@SetTeamId(uint teamid){TeamId=teamid;return this;}
	CEncounterObject@SetTeamId(uint faction,uint rank,uint mode){TeamId=(faction*100+10*rank+mode);return this;}
	
	CEncounterObject@SetDistance(uint distance){Distance=distance;return this;}
	CEncounterObject@CheckRandom(int value){NewCheck((0),0,0,value);return this;}
	CEncounterObject@CheckStat(uint index,uint8 operator,int value){NewCheck((1),index,operator,value);return this;}
	CEncounterObject@CheckPerk(uint index,uint8 operator,int value){NewCheck((3),index,operator,value);return this;}
	CEncounterObject@CheckLVar(uint index,uint8 operator,int value){NewCheck((4),index,operator,value);return this;}
	CEncounterObject@CheckGVar(uint index,uint8 operator,int value){NewCheck((5),index,operator,value);return this;}
	CEncounterObject@CheckHour(uint8 operator,int value){NewCheck((6),0,operator,value);return this;}
	CEncounterObject@SetRatio(uint ratio){Ratio=ratio;return this;}
	CEncounterObject@SetDead(bool dead){Dead=dead;return this;}
	CEncounterObject@SetMinimum(uint minimum){Minimum=minimum;return this;}
	CEncounterObject@SetMaximum(uint maximum){Maximum=maximum;return this;}
	CEncounterObject@SetSlot(uint slot){Slot=slot;return this;}
	
	CEncounterObject@Mode(uint mode)
	{
		return Mode(mode,1);
	}
	CEncounterObject@Mode(uint mode,uint val)
	{
		uint len=modes.length();
		modes.resize(len+2);
		modes[len]=mode;
		modes[len+1]=val;
		return this;
	}
	
	CEncounterObject@AddPerk(uint index,uint level,uint chance)
	{
		CEncounterPerk@perk=CEncounterPerk(index,level,chance);
		this.Perks.insertLast(perk);
		return this;
	}
	
	CEncounterObject@AddItem(uint16 pid,uint min,uint max,uint slot)
	{
		return this.AddItem(pid,min,max,slot,(100)-60,(100)-40);
	}
	
	CEncounterObject@AddItem(uint16 pid,uint min,uint max,uint slot,uint brokenMin,uint brokenMax)
	{
		ProtoItem@proto=GetProtoItem(pid);
		if(!(@proto!=null))
		return this;
		uint len=Childs.length();
		Childs.resize(len+1);
		CEncounterObject new_child;
		@Childs[len]=new_child;
		new_child.SetPid(pid);
		new_child.SetMinimum(min);
		new_child.SetMaximum(max);
		new_child.SetSlot(slot);
		if(proto.Deteriorable)
		{
			new_child.BrokenMin=brokenMin;
			new_child.BrokenMax=brokenMax;
		}
		uint thiscost=BaseItemValue(pid,(new_child.BrokenMin+new_child.BrokenMax+1)/2,0,true);
		thiscost=(min*thiscost+max*thiscost)/2;
		cost+=thiscost;
		return this;
	}   
	
	uint GetCost(){return cost;}   
	
	void SetModes(Critter&npc)
	{
		for(uint i=0,j=modes.length();i<j;i+=2)
		npc.ParamBase[modes[i]]=modes[i+1];
	}
};

class CEncounterGroup
{
	uint Index;
	uint TeamNum;
	uint Position;
	uint Spacing;
	
	uint DistMin;
	uint DistMax;  
	
	uint RatioMin;
	uint RatioMax;
	
	uint Cost; 
	
	float QuantityNight;
	float QuantityDay;
	
	array<CEncounterObject>Objects;
	
	CEncounterGroup()
	{
		TeamNum=0;
		Position=0;
		Spacing=0;
		
		DistMin=7;
		DistMax=15;
		
		RatioMin=1;
		RatioMax=3;
		
		Cost=0;
		
		QuantityNight=QuantityDay=1.0f;
	}  
	
	uint GetModifiedQuantity(uint quantity)
	{
		if(IsNight())
		return QuantityNight*quantity;
		else
		return QuantityDay*quantity;
	}   
	
	uint GetCost(int ratio)
	{
		uint cost=0;
		for(uint i=0,j=Objects.length();i<j;i++)
		{
			cost+=((((Objects[i].Ratio*ratio)/100)>(1))?((Objects[i].Ratio*ratio)/100):(1))*Objects[i].GetCost();
		}
		return cost;
	}   
	
	void SetAverageCost()
	{
		this.Cost=0;
		
		for(uint ratio=RatioMin;ratio<=RatioMax;ratio++)
		{
			for(uint i=0,j=Objects.length();i<j;i++)
			{
				
				this.Cost+=((((Objects[i].Ratio*ratio)/100)>(1))?((Objects[i].Ratio*ratio)/100):(1))*Objects[i].GetCost();
			}
		}
	}
	
	CEncounterObject@NewObject()
	{
		uint len=Objects.length();
		Objects.resize(len+1);
		return Objects[len];
	}
	
	CEncounterObject@AddCritter(uint16 pid)
	{
		CEncounterObject@obj=NewObject();
		obj.ObjectType=(1);
		obj.Pid=pid;
		return obj;
	}
	
	CEncounterObject@AddItem(uint16 pid)
	{
		CEncounterObject@obj=NewObject();
		obj.ObjectType=(2);
		obj.Pid=pid;
		return obj;
	}             
	
};
class CAction
{
	int Target;
	int Action;
};
class CEncounter
{
	int Difficulty;
	uint16 LocationPid;
	bool Special;
	array<uint>Groups;
	array<uint>Players; 
	
	array<CCheck>Checks;
	uint Ratio;  
	
	CEncounter()
	{
		Difficulty=0;
		LocationPid=0;
		Special=false;
		
		Ratio=0;
	}              
	
	CEncounter@AddGroup(uint group)
	{
		uint len=Groups.length();
		Groups.resize(len+1); 
		
		Groups[len]=group;   
		
		return this;
	}
	CEncounter@AddPlayer(Critter&player)
	{
		AddGroup((uint(-1-int(player.Id))));
		return this;
	}
	Critter@GetPlayer(uint i)
	{
		return GetCritter(uint(-1)-Groups[i]);
	}
	CEncounter@NewCheck(uint type,uint index,uint8 operator,int value)
	{
		uint len=Checks.length();
		Checks.resize(len+1);
		Checks[len].Set(type,index,operator,value);
		return this;
	}
	
	CEncounter@SetLocationPid(uint16 locationPid){LocationPid=locationPid;return this;}
	CEncounter@SetSpecial(bool special){Special=special;return this;}
	CEncounter@CheckRandom(int value){NewCheck((0),0,0,value);return this;}
	CEncounter@CheckStat(uint index,uint8 operator,int value){NewCheck((1),index,operator,value);return this;}
	CEncounter@CheckPerk(uint index,uint8 operator,int value){NewCheck((3),index,operator,value);return this;}
	CEncounter@CheckLVar(uint index,uint8 operator,int value){NewCheck((4),index,operator,value);return this;}
	CEncounter@CheckGVar(uint index,uint8 operator,int value){NewCheck((5),index,operator,value);return this;}
	CEncounter@CheckHour(uint8 operator,int value){NewCheck((6),0,operator,value);return this;}
	
	int GenerateEncounterString(Critter&cr,string@str,bool groupAdded,bool awareness)
	{
		int s=0;
		for(uint i=0,j=groupAdded?Groups.length()-1:Groups.length();i<j;i++)
		{
			if(Groups[i]>=(146))
			{
				Critter@player=GetPlayer(i);
				if(!(@player!=null)||player.Id==cr.Id)
				continue;
				if(player.IsNpc())
				str+="$str"+(++s)+"caravan";
				else if(awareness)
				str+="$str"+(++s)+"|0xffff0000 "+player.Name;
				else
				str+="$str"+(++s)+"wastelander";
			}
			else
			{
				str+="$str"+(++s)+"@msg gm "+(20000000+Groups[i])+"@";
			}
			
			bool prelast=i+2==j&&(Groups[i+1]<(146)||(Groups[i+1]>=(146)&&getProbablyId(i+1)!=cr.Id));
			bool last=(i+1==j)||(i+1<j&&Groups[i+1]>=(146)&&getProbablyId(i+1)==cr.Id);
			
			if(last)
			str+=".";
			else if(prelast)
			str+=" and ";
			else
			str+=", ";
		}
		return s;
	}
	
	uint getProbablyId(uint i)
	{
		Critter@probablyPlayer=GetPlayer(i);
		return(@probablyPlayer!=null)?probablyPlayer.Id:uint(-1);
	} 
	
	void Ask(int say,Critter@leader,bool isTB)
	{
		string str;
		{};
		int s=GenerateEncounterString(leader,str,false,(leader.Param[(301)]>0));
		{};
		if(isTB)
		{
			str+="\n\n"+"$str"+(++s)+"$str"+(++s)+"|0xffff5500 "+"Encounter is in TURN-BASED mode.";
		}
		
		leader.SayMsg(say,(4),10000010+s,str);
	}
	void Say(Critter@leader,Critter@player)
	{
		string str;
		
		if(Special)
		{
			str+="$str1@msg gm "+(((100+LocationPid)*1000)+5)+"@";
			player.SayMsg((11),(4),10000000,str);
		}
		else
		{
			int s=GenerateEncounterString(leader,str,true,(leader.Param[(301)]>0));
			
			player.SayMsg((11),(4),10000000+s,str);
		}
	}
	bool IsSingleGroup(){return Groups.length()<=2;}
	
	int GetCost()
	{
		int cost=0;
		for(uint i=0,j=Groups.length();i<j;i++)
		if(Groups[i]<(146))
		cost+=EncounterGroups[Groups[i]].GetCost(Ratio);
		return cost;
	}
};

class CZone:IZone
{
	array<uint>Groups;
	array<int>Quantities;
	array<uint>Flags;
	
	uint x;
	uint y;
	int Difficulty;
	array<uint16>LocationPids;
	uint Terrain;
	uint Fill;
	uint MorningChance;
	uint AfternoonChance;
	uint NightChance; 
	
	uint8 Factor;
	
	int value;
	CZone(uint x,uint y)
	{
		this.x=x;
		this.y=y;
		Difficulty=0;
		Terrain=0;
		Fill=0;
		MorningChance=0;
		AfternoonChance=0;
		NightChance=0;
		Factor=Random(1,100);
		
		value=0;
	}
	uint GetX(){return x;}
	uint GetY(){return y;}
	uint GetLocationPids(array<uint16>&pids)
	{
		for(uint i=0,j=LocationPids.length();i<j;i++)
		pids.insertLast(LocationPids[i]);
		return LocationPids.length();
	}  
	
	bool ContainsFlag(uint flag)
	{
		for(uint i=0,j=Flags.length();i<j;i++)
		if(Flags[i]==flag)
		return true;
		return false;
	}  
	
	uint GetQuantity(uint group)
	{
		for(uint i=0,j=Groups.length();i<j;i++)
		if(Groups[i]==group)
		return EncounterGroups[Groups[i]].GetModifiedQuantity(Quantities[i]);
		return 0;
	}  
	
	uint GetBaseQuantity(uint group)
	{
		for(uint i=0,j=Groups.length();i<j;i++)
		if(Groups[i]==group)
		return Quantities[i];
		return 0;
	}  
	
	void SetQuantity(uint group,uint quantity)
	{
		for(uint i=0,j=Groups.length();i<j;i++)
		{
			if(Groups[i]==group)
			{
				Quantities[i]=quantity;
				
				SaveGroupsQuantities();
				return;
			}
		}
		
		Groups.insertLast(group);
		Quantities.insertLast(quantity);
		
		SaveGroupsQuantities();
	}  
	
	void ChangeQuantity(uint group,int mod)
	{
		for(uint i=0,j=Groups.length();i<j;i++)
		{
			if(Groups[i]==group)
			{
				Quantities[i]=(((0)>(Quantities[i]+mod))?(0):(Quantities[i]+mod));
				
				SaveGroupsQuantities();
				return;
			}
		}
		if(mod>0)
		{
			
			Groups.insertLast(group);
			Quantities.insertLast(mod);
		}
		
		SaveGroupsQuantities();
	}  
	
	uint GetChance()
	{
		uint sum=25;
		
		return sum;
	}  
	
	int GetValue()
	{
		return value;
	}
	void SetValue(int val)
	{
		this.value=val;
	}
	void AddValue(int val)
	{
		this.value+=val;
	}  
	
	void SubValue(uint val)
	{
		value-=val;
	}  
	
	uint GetTerrain()
	{
		return Terrain;
	}  
	
	uint8 GetFactor()
	{
		return Factor;
	}  
	
	void SetFactor(uint8 factor)
	{
		this.Factor=(((factor)>(100))?(100):(((factor)<(1))?(1):(factor)));
	}
	void AddLocationPid(uint16 locationPid)
	{
		uint len=LocationPids.length();
		LocationPids.resize(len+1);
		LocationPids[len]=locationPid;
	}  
	
	void ChooseGroups(Critter&leader,CEncounter&enc)
	{
		
		array<uint>available;
		int available_sum=0;
		int sum=0;
		
		for(uint i=0,j=Groups.length();i<j;i++)
		{
			
			if(Groups[i]>=EncounterGroups.length())
			Log("FE: Incorrect group in zone: "+((leader.WorldX)/(50))+","+((leader.WorldY)/(50))); 
			
			if(true)   
			
			{
				available.insertLast(i);
				available_sum+=EncounterGroups[Groups[i]].GetModifiedQuantity(Quantities[i]);
			}
			sum+=EncounterGroups[Groups[i]].GetModifiedQuantity(Quantities[i]);
		}
		
		int roll=Random(1,available_sum);
		int v=0;
		int already=0;
		{};
		for(uint i=0,j=available.length();i<j;i++)
		{
			int quantity=Quantities[available[i]];
			uint groupidx=Groups[available[i]];
			v+=quantity;
			if(roll-v<=0)
			{
				{};
				
				enc.AddGroup(groupidx);
				already=i;
				break;
			}
		}  
		
		for(int i=0,j=available.length();i<j;i++)
		{
			int quantity=Quantities[available[i]];
			uint groupidx=Groups[available[i]];
			if(i==already)
			continue;
			int roll=Random(1,2*sum);
			bool success=roll<=quantity;
			
			{};  
			
			if(success)    
			
			enc.AddGroup(Groups[available[i]]);
		}
		
	}    
	
	void ChooseGroups2(Critter&leader,CEncounter&enc,int max_level_gracza,bool isCaravan,uint players_count,int min_level_gracza)
	{
		bool NewEncoAvailable=false;
		if((isCaravan&&min_level_gracza>=9)||(players_count>=3&&min_level_gracza>=9))NewEncoAvailable=true;   
		
		array<uint>available;
		int available_sum=0;
		int sum=0; 
		
		for(uint i=0,j=Groups.length();i<j;i++)
		{
			
			if(Groups[i]>=EncounterGroups.length())
			Log("FE: Incorrect group in zone: "+((leader.WorldX)/(50))+","+((leader.WorldY)/(50))); 
			
			if(true)   
			
			{
				if(NewEncoAvailable==true)
				{
					available.insertLast(i);
					available_sum+=EncounterGroups[Groups[i]].GetModifiedQuantity(Quantities[i]);
				}
				if(NewEncoAvailable==false)
				{
					if(Groups[i]<=134||(Groups[i]>=145&&Groups[i]<(146)))
					{
						available.insertLast(i);
						available_sum+=EncounterGroups[Groups[i]].GetModifiedQuantity(Quantities[i]);
					}
				}
			}
			
			if(NewEncoAvailable==true)
			{
				sum+=EncounterGroups[Groups[i]].GetModifiedQuantity(Quantities[i]);
			}
			if(NewEncoAvailable==false)
			{
				if(Groups[i]<=134||(Groups[i]>=145&&Groups[i]<(146)))
				sum+=EncounterGroups[Groups[i]].GetModifiedQuantity(Quantities[i]);
			}
		}    
		
		int roll=Random(1,available_sum);
		
		int v=0;
		int already=0;
		{};
		for(uint i=0,j=available.length();i<j;i++)
		{
			int quantity=Quantities[available[i]];
			uint groupidx=Groups[available[i]];
			
			if(NewEncoAvailable==true)
			{
				v+=quantity;
				if(roll-v<=0)
				{
					{}; 
					
					enc.AddGroup(groupidx);
					already=i;
					break;
				}
			}
			
			if(NewEncoAvailable==false)
			{
				if(Groups[i]<=134||(Groups[i]>=145&&Groups[i]<(146)))
				{
					v+=quantity;
					if(roll-v<=0)
					{
						{};
						
						enc.AddGroup(groupidx);
						already=i;
						break;
					}
				}
			}
		}  
		
		for(int i=0,j=available.length();i<j;i++)
		{
			int quantity=Quantities[available[i]];
			uint groupidx=Groups[available[i]];
			if(i==already)
			continue;
			int roll=Random(1,3*sum);
			bool success=roll<=quantity;
			
			{};  
			
			if(success)   
			
			{
				
				enc.AddGroup(Groups[available[i]]);
			}
		}
		
	}
	
};

array<CEncounterGroup>EncounterGroups((146));
array<CZone@>Worldmap((42)*(60));       

IZone@GetZone(uint x,uint y)
{
	uint zx=((x)/(50));
	uint zy=((y)/(50));
	return Worldmap[((zy)*(42)+(zx))];
}

bool ZoneContainsFlag(CZone@zone,uint flag)
{
	return zone.ContainsFlag(flag);
}  

uint GetZonesWithFlag(uint flag,array<IZone@>@zones)
{
	for(uint i=0,j=Worldmap.length();i<j;i++)
	if(Worldmap[i].ContainsFlag(flag))
	zones.insertLast(Worldmap[i]);
	return zones.length();
}            

void InjectValue(uint x,uint y,uint amount,uint from)
{
	if(amount==0)
	return;
	int spread=4;
	
	uint zx=((x)/(50));
	uint zy=((y)/(50));
	file __f;__f.open("logs/injectvalue.log","a");__f.writeString(GetCurrentDateTimeString()+"> "+amount+" "+from+"\n");__f.close();;
	while(amount>0)
	{
		uint x=Random((((0)>(zx-spread))?(0):(zx-spread)),(((zx+spread)<((42)-1))?(zx+spread):((42)-1)));
		uint y=Random((((0)>(zy-spread))?(0):(zy-spread)),(((zy+spread)<((60)-1))?(zy+spread):((60)-1)));
		IZone@zone=Worldmap[((y)*(42)+(x))];
		uint am=Random(1,amount);
		zone.AddValue(am);
		amount-=am;
	}
}  

int WorldmapGetTotalValue()
{
	int sum=0;
	for(uint zx=0;zx<(42);zx++)
	{
		for(uint zy=0;zy<(60);zy++)
		{
			IZone@zone=Worldmap[((zy)*(42)+(zx))];
			sum+=zone.GetValue();
		}
	}
	return sum;
} 

CZone@SetZone(uint zx,uint zy,uint table,int difficulty,uint terrain,uint fill,uint morningChance,uint afternoonChance,uint nightChance)
{
	CZone@zone=Worldmap[zy*(42)+zx];
	zone.Difficulty=difficulty;
	zone.Terrain=terrain;
	zone.Fill=fill;
	zone.MorningChance=morningChance;
	zone.AfternoonChance=afternoonChance;
	zone.NightChance=nightChance;
	return zone;
}

CZone@SetZone(uint zx,uint zy,uint table,int difficulty,uint terrain,uint fill,uint chance)
{
	return SetZone(zx,zy,table,difficulty,terrain,fill,chance,chance,chance);
}    

bool CheckCompare(int val1,uint8 operator,int val2)
{
	if(operator=='>')
	return val1>val2;
	if(operator=='<')
	return val1<val2;
	if(operator=='=')
	return val1==val2;
	Log("Unknown operator.");
	return false;
}

bool CheckChecks(array<CCheck>@checks,array<Critter@>@critters)
{
	for(int i=0,j=checks.length();i<j;i++)
	{
		CCheck@check=checks[i];
		switch(check.Type)
		{
			case(0):
			if(Random(1,100)>check.Value)
			return false;
			break;
			case(6):
			if(!CheckCompare(__Hour,check.Operator,check.Value))
			return false;
			break;
			case(1):
			for(uint i=0,j=critters.length();i<j;i++)
			if(!CheckCompare(critters[i].Param[check.Index],check.Operator,check.Value))
			return false;
			break;
			
			case(3):
			for(uint i=0,j=critters.length();i<j;i++)
			if(!CheckCompare(critters[i].Param[check.Index],check.Operator,check.Value))
			return false;
			break;
			case(4):
			for(uint i=0,j=critters.length();i<j;i++)
			{
				GameVar@lvar=GetLocalVar(check.Index,critters[i].Id);
				if(!(@lvar!=null))
				{
					Log("Local var !found.");
					return false;
				}
				if(!CheckCompare(lvar.GetValue(),check.Operator,check.Value))
				return false;
			}
			break;
			case(5):
			{
				GameVar@gvar=GetGlobalVar(check.Index);
				if(!(@gvar!=null))
				{
					Log("Global var !found.");
					return false;
				}
				if(!CheckCompare(gvar.GetValue(),check.Operator,check.Value))
				return false;
			}
			break;
			default:
			Log("Unknown check.");
			return false;
		}
	}
	return true;
}      

class CFoundedEncounter
{
	uint Index;
	
	CEncounter@Encounter;
	CZone@Zone;
	bool IsGenerated;
	uint FullSecond;
	uint PositionX;
	uint PositionY;
	uint OwnerId;
	bool OwnerGroup;
	bool TurnBased;
	uint LocationId;
	uint16 StartHexX;
	uint16 StartHexY;
	array<bool>DirBusy;
	uint8 FirstDirIdx;
	uint AskChance;
	array<uint>Actions;
	
	CFoundedEncounter()
	{
		Index=0;
		@Encounter=null;
		@Zone=null;
		IsGenerated=false;
		FullSecond=0;
		PositionX=0;
		PositionY=0;
		OwnerId=0;
		OwnerGroup=false;
		TurnBased=false;
		LocationId=0;
		StartHexX=0;
		StartHexY=0;
		DirBusy.resize(6);
		for(uint i=0;i<6;i++)
		DirBusy[i]=false;
		FirstDirIdx=0;
	}  
	
	int DetermineAction(int gr1,int gr2)
	{
		int status=GetGroupsStatus(gr2,gr1);
		switch(status)
		{
			case(0):
			return(0);
			case(1):
			return(0);
			case(2):
			return(1);
		}
		return(1);
	}  
	
	void PrepareActions()
	{
		for(uint i=0,k=Encounter.Groups.length();i<k;i++)
		{
			CEncounterGroup@gr1;
			if(Encounter.Groups[i]<(146))
			@gr1=EncounterGroups[Encounter.Groups[i]];
			else
			continue;
			
			for(uint j=0,l=Encounter.Groups.length();j<l;j++)
			{
				if(i==j)
				continue;
				CEncounterGroup@gr2;
				if(Encounter.Groups[j]<(146))
				@gr2=EncounterGroups[Encounter.Groups[j]];
				Actions.insertLast(i);
				Actions.insertLast(j);
				if((@gr1!=null)&&gr1.TeamNum==0)
				{
					Actions.insertLast((1));
				}
				else
				{
					if((@gr1!=null)&&(@gr2!=null))
					{
						int action=DetermineAction(GetGroupIndex(gr1.TeamNum),GetGroupIndex(gr2.TeamNum));
						Actions.insertLast(action);
					}
					else if((@gr1!=null)&&!(@gr2!=null))
					{
						
						Critter@leader=Encounter.GetPlayer(j);
						if((@leader!=null))
						{
							{};
							if(leader.Reputation[GetGroupIndex(gr1.TeamNum)]<__ReputationNeutral)
							{
								Actions.insertLast((1));
							}
							else
							{
								Actions.insertLast((0));
							}
						}
						else
						Actions.insertLast((0));
					}
					else
					Actions.insertLast((0));
				}
			}
		}
	}
};

array<CFoundedEncounter>FoundedEncounters(1000);
uint FoundedEncountersLastIndex=0;

CFoundedEncounter@CreateFoundedEncounter(uint x,uint y,CEncounter@encounter,CZone@zone,uint ownerId,bool ownerGroup)
{    
	
	for(int i=0,j=FoundedEncounters.length();i<j;i++)
	{
		CFoundedEncounter@ge=FoundedEncounters[i];
		if(ge.Index==0||((__FullSecond)-ge.FullSecond>=(((60)*__TimeMultiplier*60))&&ge.TurnBased))
		{
			FoundedEncountersLastIndex++;
			ge.Index=FoundedEncountersLastIndex;
			@ge.Encounter=encounter;
			@ge.Zone=zone;
			ge.IsGenerated=false;
			ge.FullSecond=(__FullSecond);
			ge.PositionX=x;
			ge.PositionY=y;
			ge.OwnerId=ownerId;
			ge.OwnerGroup=ownerGroup;
			ge.LocationId=0;
			ge.Actions.resize(0);
			for(uint k=0;k<6;k++)
			ge.DirBusy[k]=false;
			ge.FirstDirIdx=0;
			
			return ge;
		}
	} 
	
	FoundedEncounters.resize(FoundedEncounters.length()*2);
	return CreateFoundedEncounter(x,y,encounter,zone,ownerId,ownerGroup);
}

CFoundedEncounter@GetFoundedEncounter(uint index)
{
	for(int i=0,j=FoundedEncounters.length();i<j;i++)
	{
		CFoundedEncounter@ge=FoundedEncounters[i];
		if(ge.Index==index)
		{  
			
			return ge;
		}
	}
	return null;
}

CFoundedEncounter@GetNearFoundedEncounter(array<Critter@>@group,uint x,uint y,uint radius)
{
	int combatMode=group[0].Param[(516)];  
	
	for(int i=0,j=FoundedEncounters.length();i<j;i++)
	{
		CFoundedEncounter@ge=FoundedEncounters[i];
		if(ge.Index==0)
		continue;
		if(ge.TurnBased&&combatMode==(1))
		continue;
		if(!ge.TurnBased&&combatMode==(2))
		continue;
		if((((__FullSecond)-ge.FullSecond<(((60)*__TimeMultiplier*60)))||!ge.TurnBased)&&ge.IsGenerated&&
		(!(@ge.Encounter!=null)||(!ge.Encounter.Special&&CheckChecks(ge.Encounter.Checks,group)))&&
		uint(sqrt(float(((ge.PositionX-x)*(ge.PositionX-x))+((ge.PositionY-y)*(ge.PositionY-y)))))<=3*radius&&
		group[0].Id!=ge.OwnerId&&
		(@GetLocation(ge.LocationId)!=null))
		{
			
			return ge;
		}
	}
	
	return null;
}                                         

uint GetFreeDir(array<bool>&dirBusy,uint8&inout firstDirIdx)
{
	
	uint[]dirs={0,2,1,0,2};
	if(firstDirIdx==0)
	firstDirIdx=Random(0,2);
	for(uint i=firstDirIdx;i<firstDirIdx+3;i++)
	{
		int dir=dirs[i];
		int opp=(dir+3)%6;
		
		if(dirBusy[dir]&&!dirBusy[opp])
		{
			
			dirBusy[opp]=true;
			return opp;
		}
		else if(!dirBusy[dir]&&!dirBusy[opp])
		{
			dirBusy[dir]=true;
			return dir;
		}
	} 
	
	int dir=Random(0,5);
	dirBusy[dir]=true;
	return dir;
}

void RotatePosition(uint toDir,array<uint>&positionsDirs)
{
	for(uint i=1,j=positionsDirs.length();i<j;i++)
	{
		positionsDirs[i]+=toDir;
		if(positionsDirs[i]>5)
		positionsDirs[i]-=6;
	}
}

void MovePositionPoint(Map&map,uint16&pointX,uint16&pointY,array<uint>&positionDirs,uint pathIndex,uint count,uint spacing)
{
	uint steps=positionDirs[0];
	uint pathLen=(positionDirs.length()-1)/2;
	count*=steps;
	count%=pathLen; 
	
	if(steps>1)
	{
		for(uint i=0;i<spacing;i++)
		{
			for(uint j=0;j<steps;j++)
			{
				uint dir=positionDirs[1+pathLen*pathIndex+count+j];
				map.MoveHexByDir(pointX,pointY,dir,1);
			}
		}
	}
	else
	{
		uint dir=positionDirs[1+pathLen*pathIndex+count];
		map.MoveHexByDir(pointX,pointY,dir,spacing);
	}
	
}

void ParseEncounterObject(CEncounterObject@obj,Map@map,uint16 posX,uint16 posY,uint8 reversDir,array<Critter@>&crittersGrouop,uint teamId,uint level)
{
	Critter@npc;
	if(obj.ObjectType==(1))
	{ 
		
		uint aiPack=0;
		
		if(obj.TeamId!=0)
		teamId=obj.TeamId; 
		
		array<int>params;
		if(obj.Armor!=-1)
		{
			params.insertLast((140));
			params.insertLast(obj.Armor);
			params.insertLast((143));
			params.insertLast(obj.OverrideCrtype);
		}
		
		if(obj.Helmet!=-1)
		{
			params.insertLast((141));
			params.insertLast(obj.Helmet);
		}
		
		if(teamId<200)
		@npc=AddNpc(map,obj.Pid,posX,posY,reversDir,params,obj.Dialog,obj.Script,aiPack,obj.Bag,teamId+((5000)-(24)),false,level);
		else
		@npc=AddNpc(map,obj.Pid,posX,posY,reversDir,params,obj.Dialog,obj.Script,aiPack,obj.Bag,teamId/100,(teamId/10)%10,teamId%10,false,level);
		
		if(!(@npc!=null))
		return; 
		
		SetDeleteEvent(npc,((10)*__TimeMultiplier*60)); 
		
		obj.SetModes(npc);
		(npc.ParamBase[(534)]=npc.Param[(534)]|((0x00000200)));
		
		npc.ParamBase[(89)]=obj.NpcRole;
		npc.ChangeCrType(npc.ParamBase[(112)]);
		npc.ParamBase[(84)]=(-2);
		IZone@zone=GetZone(npc.WorldX,npc.WorldY); 
		
		Item@armor=npc.GetItem(0,(3)); 
		
		if((@armor!=null)&&armor.IsDeteriorable()&&!armor.IsStackable()&&(armor.Proto.ProtoId==(381)||armor.Proto.ProtoId==(9654)
		||armor.Proto.ProtoId==(239)||armor.Proto.ProtoId==(752)||armor.Proto.ProtoId==(761)))
		{   
			
			SetMinWear(armor,Random(5,85));
			
			SetWear(armor,Random(5,95));
			armor.Cost=Random(700,1000);
		}
		
		if((@armor!=null)&&armor.IsDeteriorable()&&!armor.IsStackable()&&armor.Proto.ProtoId!=(381)&&armor.Proto.ProtoId!=(9654)
		&&armor.Proto.ProtoId!=(239)&&armor.Proto.ProtoId!=(752)&&armor.Proto.ProtoId!=(761))
		{
			SetMinWear(armor,Random((((0)>(((100)-60)-(7*npc.Param[(77)])/3))?(0):(((100)-60)-(7*npc.Param[(77)])/3)),((100)-40)));
			
			int toWear=Random(armor.BrokenCount,90);
			
			SetWear(armor,toWear);
		}
		
		@armor=npc.GetItem(0,(4)); 
		
		if((@armor!=null)&&armor.IsDeteriorable()&&!armor.IsStackable()&&(armor.Proto.ProtoId==(726)||armor.Proto.ProtoId==(741)
		||armor.Proto.ProtoId==(727)||armor.Proto.ProtoId==(738)||armor.Proto.ProtoId==(739)))
		{
			
			SetMinWear(armor,Random(75,85));
			
			SetWear(armor,Random(75,95));
			armor.Cost=Random(200,500);
		}
		
		if((@armor!=null)&&armor.IsDeteriorable()&&!armor.IsStackable()&&armor.Proto.ProtoId!=(726)&&armor.Proto.ProtoId!=(741)
		&&armor.Proto.ProtoId!=(727)&&armor.Proto.ProtoId!=(738)&&armor.Proto.ProtoId!=(739))
		{
			SetMinWear(armor,Random((((0)>(((100)-60)-(7*npc.Param[(77)])/3))?(0):(((100)-60)-(7*npc.Param[(77)])/3)),((100)-40)));
			
			int toWear=Random(armor.BrokenCount,90);
			toWear-=npc.Param[(77)]*2/3;
			SetWear(armor,toWear);
		}
		
		if(obj.Childs.length()>0)
		{
			for(uint i=0,j=obj.Childs.length();i<j;i++)
			{
				CEncounterObject@child=obj.Childs[i];
				uint count=Random(child.Minimum,child.Maximum);
				if(count>0)
				{
					Item@item=npc.AddItem(child.Pid,count);
					if(item.IsStackable())
					{
						item.SetCount((item.GetCount()*(100+6*npc.Param[(77)]))/100);
					}
					
					if(child.Slot==(1)||child.Slot==(2))
					npc.SetFavoriteItem(child.Slot,child.Pid);
					if((@item!=null)&&child.Slot!=(0)&&
					(item.GetType()!=(3)||npc.IsAnim1(item.Proto.Weapon_Anim1)))
					{
						if(child.Slot==4)
						{
							Log("bad item! "+child.Pid+", npc pid "+npc.GetProtoId());
						}
						npc.MoveItem(item.Id,item.GetCount(),child.Slot);
					} 
					
					if((@item!=null)) 
					
					if(item.IsDeteriorable()&&!item.IsStackable()
					&&(item.Proto.ProtoId==(353)
					||item.Proto.ProtoId==(268)
					||item.Proto.ProtoId==(354)
					||item.Proto.ProtoId==(296)
					||item.Proto.ProtoId==(12)
					||item.Proto.ProtoId==(355)
					||item.Proto.ProtoId==(401)))
					{
						
						SetMinWear(item,Random(25,90));
						
						SetWear(item,Random(25,85));
					} 
					
					if(item.IsDeteriorable()&&!item.IsStackable()
					&&(item.Proto.ProtoId==(352)
					||item.Proto.ProtoId==(391)
					||item.Proto.ProtoId==(389)
					||item.Proto.ProtoId==(28)))
					{
						
						SetMinWear(item,Random(5,85));
						
						SetWear(item,Random(5,95));
					} 
					
					if(item.IsDeteriorable()&&!item.IsStackable()
					&&(item.Proto.ProtoId==(394)
					||item.Proto.ProtoId==(392)
					||item.Proto.ProtoId==(395)
					||item.Proto.ProtoId==(350)
					||item.Proto.ProtoId==(233)
					||item.Proto.ProtoId==(396)
					||item.Proto.ProtoId==(397)))
					{
						
						SetMinWear(item,Random(80,90));
						
						SetWear(item,Random(80,95));
					} 
					
					if(item.IsDeteriorable()&&!item.IsStackable()
					&&item.Proto.ProtoId!=(353)
					&&item.Proto.ProtoId!=(268)
					&&item.Proto.ProtoId!=(354)
					&&item.Proto.ProtoId!=(296)
					&&item.Proto.ProtoId!=(12)
					&&item.Proto.ProtoId!=(355)
					&&item.Proto.ProtoId!=(401)
					&&item.Proto.ProtoId!=(352)
					&&item.Proto.ProtoId!=(391)
					&&item.Proto.ProtoId!=(389)
					&&item.Proto.ProtoId!=(28)
					&&item.Proto.ProtoId!=(394)
					&&item.Proto.ProtoId!=(392)
					&&item.Proto.ProtoId!=(395)
					&&item.Proto.ProtoId!=(350)
					&&item.Proto.ProtoId!=(233)
					&&item.Proto.ProtoId!=(396)
					&&item.Proto.ProtoId!=(397))
					{
						
						SetMinWear(item,Random((((0)>(child.BrokenMin-(7*npc.Param[(77)])/3))?(0):(child.BrokenMin-(7*npc.Param[(77)])/3)),child.BrokenMax));
						
						int toWear=Random(item.BrokenCount,90);
						toWear-=npc.Param[(77)]*2/3;
						SetWear(item,toWear);
					}  
					
					item.Update();
				}
			} 
			
		}
		
		if(obj.Perks.length>0)
		{
			for(uint i=0;i<obj.Perks.length;i++)
			{
				if(obj.Perks[i].chance>uint(Random(0,99)))
				npc.ParamBase[obj.Perks[i].index]=obj.Perks[i].level;
			}
		}
		
		if(obj.Dead)
		{
			npc.ToDead(Random(0,1)==0?(102):(103),null);
		}
		else
		{
			uint len=crittersGrouop.length();
			crittersGrouop.resize(len+1);
			@crittersGrouop[len]=npc;
		}
	}
	else if(obj.ObjectType==(2))
	{
		Item@item=map.AddItem(posX,posY,obj.Pid,1);
		if(!(@item!=null))
		return;
		
		if(obj.Childs.length()>0&&item.GetType()==(8))
		{
			for(uint i=0,j=obj.Childs.length();i<j;i++)
			{
				CEncounterObject@child=obj.Childs[i];
				uint count=Random(child.Minimum,child.Maximum);
				if(count>0)
				item.AddItem(child.Pid,count,0);
			}
		}
	}
	else
	{
		Log("Unknown object type<"+obj.ObjectType+">.");
	} 
	
	if((@npc!=null))
	{
		array<Item@>items;
		uint num=npc.GetItems(-1,items);
		
		for(uint i=0;i<num;i++)
		{
			if(items[i].GetType()==(3)&&!CanUseWeapon(npc,items[i])&&(items[i].GetProtoId()!=(600)))
			Log("WARNING: Critter created with pid "+npc.GetProtoId()+" on loc pid "+map.GetLocation().GetProtoId()+" that can't use weapon with PID "+items[i].GetProtoId());
		}
	}
}  

void ActionFighting(array<Critter@>&npcL,array<Critter@>&npcR)
{
	for(int i=0,j=npcL.length();i<j;i++)
	{
		Critter@nl=npcL[i];
		if(!(@nl!=null))
		{
			Log("AF: Invalid critter in L group: "+i);
			continue;
		}
		bool nlIsNpc=nl.IsNpc();
		for(int k=0,l=npcR.length();k<l;k++)
		{
			Critter@nr=npcR[k];
			if(!(@nr!=null))
			{
				Log("AF: Invalid critter in R group: "+k);
				continue;
			}
			uint pr=(50);
			
			if(nlIsNpc)
			{
				
				AddAttackPlane(nl,Random(pr,pr+20),nr);
				nl.AddEnemyInStack(nr.Id);
				nl.Wait(Random(3000,5000));
			}
			if(nr.IsNpc())
			{
				
				AddAttackPlane(nr,Random(pr,pr+20),nl);
				nr.AddEnemyInStack(nl.Id);
				nr.Wait(Random(3000,5000));
			}
		}
	}
} 

Map@GenerateEncounter(CFoundedEncounter@fe,array<Critter@>@critters)
{
	uint start=GetTick();
	bool specialencounter=true;
	
	CEncounter@encounter=fe.Encounter;
	
	uint16 locPid=((@encounter!=null)?encounter.LocationPid:0);
	if(fe.Zone.LocationPids.length()==0)
	{
		Log("No location Pids defined for zone "+fe.Zone.x+", "+fe.Zone.y+".");
		return null;
	}
	
	if(locPid==0)
	locPid=(fe.Zone.LocationPids[Random(0,fe.Zone.LocationPids.length()-1)]);
	if(fe.PositionX<1)
	fe.PositionX=1;
	if(fe.PositionY<1)
	fe.PositionY=1;
	
	fe.LocationId=CreateLocation(locPid,fe.PositionX,fe.PositionY,null);
	
	if(fe.LocationId==0)
	{
		Log("CreateLocation fail, location pid<"+locPid+">.");
		return null;
	}
	
	Location@location=GetLocation(fe.LocationId);
	if(!(@location!=null))
	{
		Log("GetLocation fail.");
		return null;
	} 
	
	WeatherUpdateFast(location);
	
	location.Color=(uint(((80)<<24)|(((0xFF)&0xFF)<<16)|(((0xA0)&0xFF)<<8)|((0x40)&0xFF)));
	Map@map=location.GetMapByIndex(0);
	if(!(@map!=null))
	{
		Log("GetMapByIndex fail.");
		return null;
	}
	
	map.SetData((1),(__FullSecond));
	
	uint16 startX=0,startY=0;
	if(!map.GetEntireCoords(0,0,startX,startY))
	{
		Log("Default entire not found.");
		return null;
	}
	fe.StartHexX=startX;
	fe.StartHexY=startY; 
	
	Critter@leader=critters[0];
	uint playerscount=0;
	int max_level_gracza=0;
	int min_level_gracza=9999;
	for(uint i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].IsPlayer())
		{
			playerscount++;
			if(max_level_gracza<critters[i].Param[(77)])
			max_level_gracza=critters[i].Param[(77)];
			
			if(min_level_gracza>critters[i].Param[(77)])
			min_level_gracza=critters[i].Param[(77)];
		}
	}
	
	Critter@guide=GetMostSkilled(critters,(217));
	
	if(!(@encounter!=null)||fe.Encounter.Special)
	{
		bool special=(@encounter!=null)&&fe.Encounter.Special;
		fe.IsGenerated=true;
		
		dbLog("log_encounters",leader.Id+"|"+guide.Param[(217)]+"|"+critters.length()+"|"+playerscount+"|"+fe.Zone.GetX()+"|"+fe.Zone.GetY()+
		"|"+locPid+"| |"+(fe.TurnBased?"1":"0")+"|"+(special?"1":"0"));
		return map;
	}  
	
	fe.Encounter.AddPlayer(leader);
	{};
	array<array<Critter@>>crittersGroups(encounter.Groups.length());  
	
	bool isNewEnco=false;
	for(uint i=0,j=encounter.Groups.length();i<j;i++)
	{
		uint groupNum=encounter.Groups[i];
		
		if(groupNum>=135&&groupNum<145)isNewEnco=true; 
		
	}  
	
	for(uint i=0,j=encounter.Groups.length();i<j;i++)
	{
		uint groupNum=encounter.Groups[i];
		
		if(groupNum>=(146))
		{
			array<Critter@>@crGroup=crittersGroups[i];
			crGroup.resize(critters.length());
			for(uint k=0,l=critters.length();k<l;k++)
			@crGroup[k]=critters[k];
			continue;
		}
		
		CEncounterGroup@group=EncounterGroups[groupNum];
		uint distance=Random(group.DistMin,group.DistMax);  
		
		uint teamId=group.TeamNum;
		if(teamId==(0))
		teamId=(24)+i;
		else if(teamId==(1))
		teamId=(34)+i;
		
		uint position=group.Position;
		uint spacing=group.Spacing;
		if(position==(1))
		spacing=leader.Param[(1)]+leader.Param[(381)]*3;
		if(spacing>13)
		spacing=13;
		
		array<uint>positionDirs=PositionDirs[position];
		uint steps=positionDirs[0];
		uint dirsCount=0;
		
		uint freeDir=GetFreeDir(fe.DirBusy,fe.FirstDirIdx);
		if(freeDir!=0)
		RotatePosition(freeDir,positionDirs);
		uint reversDir=freeDir+3;
		if(reversDir>5)
		reversDir-=6; 
		
		uint16[]pointX={startX,startY};
		uint16[]pointY={startX,startY};
		if(position!=(0))
		{
			uint16 hx=pointX[0],hy=pointY[0];
			map.MoveHexByDir(pointX[0],pointY[0],freeDir,position!=(1)?distance:spacing);
			map.GetHexCoord(hx,hy,pointX[0],pointY[0],0.0f,0);
			pointX[1]=pointX[0];
			pointY[1]=pointY[0];
			MovePositionPoint(map,pointX[1],pointY[1],positionDirs,1,0,spacing);
		}  
		
		uint totalratio=0;
		uint limited_ratio=30;
		for(uint k=0,l=group.Objects.length();k<l;k++)
		{
			
			if((min_level_gracza>=9&&max_level_gracza<18)&&(groupNum>=135&&groupNum<145))
			{
				totalratio+=limited_ratio*group.Objects[k].Ratio/100; 
				
			}
			else
			totalratio+=group.Objects[k].Ratio;
		}
		
		bool force=true;
		uint total_count=0;
		
		for(uint k=0,l=group.Objects.length();k<l;k++)
		{
			CEncounterObject@obj=group.Objects[k];
			
			if(!CheckChecks(obj.Checks,critters))
			continue;
			
			uint otherDistance=obj.Distance;
			
			uint ncount=0;
			uint count=0;             
			
			int roll=0;
			if((min_level_gracza>=9&&max_level_gracza<18)&&(groupNum>=135&&groupNum<145))
			{ 
				
				if(obj.Ratio>0)
				{
					force=false;
					for(uint rc=0;rc<encounter.Ratio;rc++)
					count+=Random(group.RatioMin,group.RatioMax);
					
					for(uint n=0;n<count;n++)
					{
						
						roll=Random(1,totalratio);
						
						if(roll<=int(limited_ratio*obj.Ratio/100))
						ncount++;
						
					}
				}
				else
				{ 
					
					force=false;
					for(uint rc=0;rc<encounter.Ratio;rc++)
					count+=Random(group.RatioMin,group.RatioMax);
					
					for(uint n=0;n<count;n++)
					{
						
						roll=Random(1,totalratio);
						
						if(roll<=int(limited_ratio*100/100))
						ncount++;
						
					}
				}
				
				total_count=total_count+ncount;
				
				if(k==l-1&&total_count<=1)
				{
					total_count=Random(2,3);
					ncount=total_count;
				}
				
				if(total_count>5)
				{  
					
					continue;
				} 
				
			}
			else
			{
				
				if(obj.Ratio>0)
				{
					for(uint rc=0;rc<encounter.Ratio;rc++)
					count+=Random(group.RatioMin,group.RatioMax);    
					
					for(uint n=0;n<count;n++)
					{
						
						roll=Random(1,totalratio);
						
						if(roll<=int(100*obj.Ratio/100))
						ncount++;
						
					}
				}
				else
				ncount=1;
			}
			
			if(force&&ncount==0)
			{
				force=false;
				ncount=1;
			}   
			
			{};
			uint16 oldPosX=startX,oldPosY=startY;
			for(uint n=0;n<ncount;n++)
			{
				uint16 posX,posY;
				if(otherDistance>0||position==(0))
				{
					posX=startX+Random(-5,5);
					posY=startY+Random(-5,5);
					map.MoveHexByDir(posX,posY,freeDir,otherDistance>0?otherDistance:distance);
				}
				else
				{
					uint pathIndex=dirsCount%2;
					posX=pointX[pathIndex]+(position==(1)?Random(-3,0):0);
					posY=pointY[pathIndex]+(position==(1)?Random(-3,0):0);
					MovePositionPoint(map,pointX[pathIndex],pointY[pathIndex],positionDirs,pathIndex,dirsCount/2+pathIndex,spacing);
					dirsCount++;
				}
				
				map.GetHexCoord(oldPosX,oldPosY,posX,posY,0.0f,0);
				oldPosX=posX;
				oldPosY=posY; 
				
				int level=1+(encounter.Difficulty/6);
				ParseEncounterObject(obj,map,posX,posY,reversDir,crittersGroups[i],teamId,level);
			}
		}
	}
	
	fe.PrepareActions();
	
	uint idx_npc=0;
	for(uint i=0;i<crittersGroups.length();++i)
	{
		if(fe.Encounter.Groups[i]<(146)&&crittersGroups[i].length()>2)
		{
			idx_npc=Random(0,20);
			if(idx_npc<crittersGroups[i].length())
			MakeEncounterBoss(crittersGroups[i][idx_npc].Id,fe.Encounter.Groups[i]);
		}
	}
	
	{;};
	
	if(fe.Actions.length()%3==0)
	{
		for(uint i=0,j=fe.Actions.length();i<j;i+=3)
		{
			uint fromGroup=fe.Actions[i];
			uint toGroup=fe.Actions[i+1];
			uint action=fe.Actions[i+2];
			{};
			if(fromGroup<crittersGroups.length()&&toGroup<crittersGroups.length())
			{
				if(action==(1))
				ActionFighting(crittersGroups[fromGroup],crittersGroups[toGroup]);
			}
			else
			Log("GE: Incorrect critter group: "+fromGroup+"->"+toGroup+" / "+crittersGroups.length());
		}
	}
	else
	Log("GE: Improper actions length");
	
	fe.IsGenerated=true;
	string groups;
	for(int i=0,j=crittersGroups.length();i<j;i++)
	{
		if(fe.Encounter.Groups[i]>=(146))
		continue;
		groups+=fe.Encounter.Groups[i];
		if(i+1<j&&fe.Encounter.Groups[i+1]<(146))
		groups+=",";
	}
	
	dbLog("log_encounters",leader.Id+"|"+guide.Param[(217)]+"|"+critters.length()+"|"+playerscount+
	"|"+fe.Zone.GetX()+"|"+fe.Zone.GetY()+"|"+locPid+"|"+groups+"|"+(fe.TurnBased?"1":"0")+"|0");
	
	uint t=GetTick()-start;
	{if(leader.IsPlayer()&&leader.GetAccess()==(3)) leader.Say((11),"Generated encounter in "+t+"ms.");};
	AddEncounterContainers(map,critters);
	return map;
}

void GuideReward(Critter@leader,Critter@guide,int amount)
{
	guide.ParamBase[(76)]+=amount*(GetGvar((62001)));
	LogExperience(guide,amount*(GetGvar((62001))),(217),((guide.WorldY)/(50))*(42)+((guide.WorldX)/(50)));
	if(leader.Id!=guide.Id)
	guide.Say((11),"You've warned leader about encounter.");
}

void OnSpecialEncounterCreated(Location@loc,array<Critter@>&group,Item@car,uint encounterDescriptor)
{
	Critter@leader=group[0];
	
	array<Map@>maps;
	for(uint i=0,j=loc.GetMaps(maps);i<j;i++)
	maps[i].SetData((5),leader.Id);
	
	if(loc.GetProtoId()==(52))
	{
		SetLvar(leader,(7056),loc.Id);
		SetQuestGarbager(0,leader.Id,loc.Id,(7056),0);
	}
	else if(loc.GetProtoId()==(51))
	{
		SetLvar(leader,(7057),loc.Id);
		SetQuestGarbager(0,leader.Id,loc.Id,(7057),0);
	} 
	
	if(loc.GetProtoId()>146&&loc.GetProtoId()<154)
	{
		switch(loc.GetProtoId())
		{
			case 147:leader.Say((11),"You've crashed your car into the tree. Good news - You are still alive");break;
			case 148:leader.Say((11),"You somehow managed to crash into somebody's house! Holy crap who the hell gave you your licence?! Wait... I forgot... You either have no licence or you are deadly drunk!");break;
			case 149:leader.Say((11),"You've just run over somebody. Nice driving over there!");break;
			case 150:leader.Say((11),"Your inability to see shit on the road drove you directly to a deathclaws' nest. This will hurt...");break;
			case 151:leader.Say((11),"You've just crashed into your fellow driver colleague. Poor soul flew over his windshield and smashed his head off. How the hell are YOU still alive?");break;
			case 152:leader.Say((11),"Was it Enclave patrol you've just driven over? How blind the person shall be to not see 2 huge men on the road?!");break;
			case 153:leader.Say((11),"Well, you somehow managed to drive your car all the way inside this cave... Now... How to get it out of here?");break;
		}
		car.Deterioration=car.Proto.Car_MaxDeterioration;
		car.Update();
		leader.ParamBase[(72)]-=Random(30,90);
	}
} 

int CheckSpecialEncounter(Critter@leader,CZone@zone,Item@car)
{           
	
	bool insidecar=true;
	if(!(@car!=null))
	insidecar=false;
	int crashchance=0;
	if(leader.Param[(1188)]==0)crashchance+=30;
	if(leader.Param[(562)]==0&&leader.Param[(248)]>0)crashchance+=1;
	if(leader.Param[(562)]==0&&leader.Param[(237)]>0)crashchance+=1;
	if(leader.Param[(562)]==0&&leader.Param[(243)]>0)crashchance+=1;
	if(leader.Param[(562)]==0&&leader.Param[(258)]>0)crashchance+=1;
	if(leader.Param[(562)]==0&&leader.Param[(259)]>0)crashchance+=1;
	
	if(crashchance<Random(0,600))
	insidecar=false;
	
	if(crashchance==0)
	insidecar=false;
	
	if(insidecar){SetLvar(leader,(7166),(__FullSecond)+((30)*__TimeMultiplier*60));return Random(147,152);};    
	
	if((zone.Terrain==(1)&&(uint(GetLvar(leader,(7040)))<=(__FullSecond))&&(Random(1,18000-leader.Param[(440)]*18)==1&&leader.Param[(77)]>Random(0,23)))){SetLvar(leader,(7040),(__FullSecond)+((8)*__TimeMultiplier*3600));return(226);};    
	
	if(((zone.Terrain==(2)||zone.Terrain==(4)||zone.Terrain==(5))&&(uint(GetLvar(leader,(9220)))<=(__FullSecond))&&(Random(1,9000-leader.Param[(440)]*9)==1&&leader.Param[(77)]>Random(8,23)))){SetLvar(leader,(9220),(__FullSecond)+((2)*__TimeMultiplier*3600));return(83);};
	
	if(((zone.Terrain==(2)||zone.Terrain==(4)||zone.Terrain==(5))&&(uint(GetLvar(leader,(9221)))<=(__FullSecond))&&(Random(1,9000-leader.Param[(440)]*9)==1&&leader.Param[(77)]>Random(8,23)))){SetLvar(leader,(9221),(__FullSecond)+((2)*__TimeMultiplier*3600));return(85);};
	
	if((zone.Terrain==(0)&&(uint(GetLvar(leader,(7153)))<=(__FullSecond))&&(Random(1,12000-leader.Param[(440)]*12)==1&&leader.Param[(77)]>Random(4,23)))){SetLvar(leader,(7153),(__FullSecond)+((2)*__TimeMultiplier*3600));return(87);};
	
	if((zone.Terrain==(0)&&(uint(GetLvar(leader,(7154)))<=(__FullSecond))&&(Random(1,12000-leader.Param[(440)]*12)==1&&leader.Param[(77)]>Random(4,23)))){SetLvar(leader,(7154),(__FullSecond)+((2)*__TimeMultiplier*3600));return(376);};
	
	if((zone.Terrain==(1)&&(uint(GetLvar(leader,(7155)))<=(__FullSecond))&&(Random(1,17000-leader.Param[(440)]*17)==1&&leader.Param[(77)]>Random(23,41)))){SetLvar(leader,(7155),(__FullSecond)+((2)*__TimeMultiplier*3600));return(377);};
	
	if((zone.Terrain==(1)&&(uint(GetLvar(leader,(7156)))<=(__FullSecond))&&(Random(1,20000-leader.Param[(440)]*20)==1&&leader.Param[(77)]>Random(4,23)))){SetLvar(leader,(7156),(__FullSecond)+((12)*__TimeMultiplier*3600));return(378);};
	
	if((zone.Terrain==(0)&&(uint(GetLvar(leader,(7157)))<=(__FullSecond))&&(Random(1,23000-leader.Param[(440)]*23)==1&&leader.Param[(77)]>Random(33,75)))){SetLvar(leader,(7157),(__FullSecond)+((15)*__TimeMultiplier*3600));return(379);};
	
	if((zone.Terrain==(0)&&(uint(GetLvar(leader,(7158)))<=(__FullSecond))&&(Random(1,24000-leader.Param[(440)]*24)==1&&leader.Param[(77)]>Random(33,75)))){SetLvar(leader,(7158),(__FullSecond)+((24)*__TimeMultiplier*3600));return(380);};
	
	if((zone.Terrain==(0)&&(uint(GetLvar(leader,(7159)))<=(__FullSecond))&&(Random(1,9000-leader.Param[(440)]*9)==1&&leader.Param[(77)]>Random(4,15)))){SetLvar(leader,(7159),(__FullSecond)+((2)*__TimeMultiplier*3600));return(381);};
	
	if((zone.Terrain==(1)&&(uint(GetLvar(leader,(7160)))<=(__FullSecond))&&(Random(1,18000-leader.Param[(440)]*18)==1&&leader.Param[(77)]>Random(55,99)))){SetLvar(leader,(7160),(__FullSecond)+((24)*__TimeMultiplier*3600));return(382);};
	
	if((zone.Terrain==(0)&&(uint(GetLvar(leader,(7161)))<=(__FullSecond))&&(Random(1,24000-leader.Param[(440)]*24)==1&&leader.Param[(77)]>Random(99,102)))){SetLvar(leader,(7161),(__FullSecond)+((24)*__TimeMultiplier*3600));return(383);}; 
	
	if((zone.Terrain==(2)&&(uint(GetLvar(leader,(7162)))<=(__FullSecond))&&(Random(1,100000-leader.Param[(440)]*100)==1&&leader.Param[(77)]>Random(100,120)))){SetLvar(leader,(7162),(__FullSecond)+((48)*__TimeMultiplier*3600));return(384);};
	
	if((zone.Terrain==(0)&&(uint(GetLvar(leader,(7163)))<=(__FullSecond))&&(Random(1,9000-leader.Param[(440)]*9)==1&&leader.Param[(77)]>Random(3,23)))){SetLvar(leader,(7163),(__FullSecond)+((2)*__TimeMultiplier*3600));return(457);};
	
	if((zone.Terrain==(0)&&(uint(GetLvar(leader,(7164)))<=(__FullSecond))&&(Random(1,9000-leader.Param[(440)]*9)==1&&leader.Param[(77)]>Random(30,88)))){SetLvar(leader,(7164),(__FullSecond)+((30)*__TimeMultiplier*3600));return(466);};
	
	if((zone.Terrain==(0)&&(uint(GetLvar(leader,(7165)))<=(__FullSecond))&&(Random(1,14000-leader.Param[(440)]*14)==1&&leader.Param[(77)]>Random(40,88)))){SetLvar(leader,(7165),(__FullSecond)+((30)*__TimeMultiplier*3600));return(483);};                 
	
	if((ZoneContainsFlag(zone,(2))&&(GetLvar(leader,(7045))==1)&&(leader.Param[(217)]<Random(75,299)))){SetLvar(leader,(7045),2);return(227);};
	
	if((ZoneContainsFlag(zone,(6))&&(GetLvar(leader,(7056))==0)&&(GetLvar(leader,(7074))==21)&&Random(0,1)==0)){false;return(52);};
	
	if((ZoneContainsFlag(zone,(5))&&(GetLvar(leader,(7057))==0)&&(GetLvar(leader,(7074))==21)&&Random(0,8)==0)){false;return(51);};  
	
	return 0;
}  

void FindEncounter(array<Critter@>&group,Item@car,uint x,uint y,uint&encounterDescriptor,bool&waitForAnswer,bool empty)
{
	
	{};
	uint start=GetTick();
	encounterDescriptor=0;
	waitForAnswer=false;
	
	uint zx=x/(50);
	uint zy=y/(50);
	if(zx>=(42)||zy>=(60))
	{
		
		return;
	}
	{;};
	CZone@zone=Worldmap[zy*(42)+zx];
	
	if(!(@zone!=null))
	{
		Log("ERR: Zone: "+zx+", "+zy+" not valid.");
		return;
	}
	Critter@leader=group[0];
	Critter@guide=GetMostSkilled(group,(217));
	
	uint seLocPid=CheckSpecialEncounter(leader,zone,car);
	
	array<Location@>locations;
	uint locCount=GetVisibleLocations(x,y,0,leader,locations); 
	
	if(locCount!=0)
	{
		uint rad=0;
		uint maxInd=0;
		for(uint i=0;i<locCount;i++)
		{
			if(locations[i].Radius>rad)
			{
				rad=locations[i].Radius;
				maxInd=i;
			}
		}
		int newX=locations[maxInd].WorldX;
		int newY=locations[maxInd].WorldY;
		
		if(newX==int(x)&&newY==int(y))
		x+=1;
		rad+=1;
		
		float dist=sqrt((newX-int(x))*(newX-int(x))+(newY-int(y))*(newY-int(y)));
		x=newX+float(int(x)-newX)*(rad/dist);
		y=newY+float(int(y)-newY)*(rad/dist);
	}
	
	if(!empty&&seLocPid>0&&int(zone.GetChance()+leader.Param[(448)]*3)>0)
	{
		CEncounter@enc=CEncounter();
		enc.LocationPid=seLocPid;
		enc.Special=true;
		CFoundedEncounter@fe=CreateFoundedEncounter(x,y,@enc,zone,leader.Id,group.length()>1);
		if(!(@fe!=null))
		return;
		waitForAnswer=false;
		encounterDescriptor=fe.Index;
		return;
	}
	
	bool giveReward=false;
	bool caravan=IsCaravanLeader(leader);
	
	int roll=Random(1,100);
	
	if((roll<=int(zone.GetChance()+leader.Param[(448)])/(empty?2:1)))
	{
		CFoundedEncounter@feAlready=GetNearFoundedEncounter(group,x,y,(50)/2);
		
		if((@feAlready!=null)&&!(caravan&&feAlready.TurnBased))
		{ 
			
			Critter@owner_player=GetCritter(feAlready.OwnerId);
			int owner_level=1;
			if((@owner_player!=null))
			owner_level=owner_player.Param[(77)];
			
			int noob_protection_chance=102-owner_level*2;
			if(owner_player.Param[(77)]<16)
			noob_protection_chance=100;
			
			if(noob_protection_chance<Random(1,90))
			{
				int outdoorsman=guide.Param[(217)]-zone.Difficulty;
				outdoorsman=(((outdoorsman)>(96))?(96):(((outdoorsman)<(5))?(5):(outdoorsman)));
				
				if(guide.Param[(217)]>250)
				outdoorsman++;
				if(guide.Param[(217)]>300)
				outdoorsman++;
				if(guide.Param[(217)]>350)
				outdoorsman++;
				if(guide.Param[(217)]>400)
				outdoorsman++;
				if(guide.Param[(217)]>450)
				outdoorsman++;
				
				uint8 say=feAlready.TurnBased?(16):(15);
				
				if((@feAlready.Encounter!=null))
				{
					if(!feAlready.TurnBased)
					{
						if(!caravan&&outdoorsman>=Random(1,100))
						{
							if(leader.Param[(1171)]>0)
							return;
							feAlready.Encounter.Ask(say,leader,false);
						}
					}
					else
					{
						if(leader.Param[(1171)]>0)
						return;
						feAlready.Encounter.Ask(say,leader,true);
					}
				}
				else
				{
					if(!feAlready.TurnBased)
					{
						if(!caravan&&outdoorsman>=Random(1,100))
						{
							leader.SayMsg(say,(4),feAlready.OwnerGroup?(10000024):(10000023),"$player"+"|0xffff0000 "+GetSafePlayerName(feAlready.OwnerId));
						}
					}
					else
					{
						leader.SayMsg(say,(4),feAlready.OwnerGroup?(10000026):(10000025),"$player"+"|0xffff0000 "+GetSafePlayerName(feAlready.OwnerId)+"$str1"+"\n\n"+"$str2"+"|0xffff5500 "+"Encounter is in TURN-BASED mode.");
					}
				}
				
				waitForAnswer=true;
				if(guide.Param[(217)]<=96)
				GuideReward(leader,guide,100-guide.Param[(217)]+zone.Difficulty);
				else
				GuideReward(leader,guide,5+zone.Difficulty);   
				
				for(uint i=0,j=group.length();i<j;i++)
				if(group[i].IsPlayer())
				{
					group[i].Say((41),"");
					group[i].PlaySound("encoalert.ogg",true);
				}
				encounterDescriptor=feAlready.Index;
				return;
			}
		}        
		
		CEncounter@enc=CEncounter();
		
		uint len=0;
		int followers=0;
		for(uint i=0,j=group.length();i<j;i++)
		{
			if(group[i].IsNpc())
			{
				if(((group[i].Param[(534)]&((0x00004000)))!=0))
				continue;
				else
				followers++;
			}
			else
			len++;
		}
		
		if(followers-__EncountersFreeFollowers>0)
		len+=(followers-__EncountersFreeFollowers)/(caravan?2:1);
		
		enc.Ratio=(((1)>(len/2))?(1):(len/2));
		enc.Difficulty=zone.Difficulty;  
		
		uint players_count=0;
		int max_level_gracza=0;
		int min_level_gracza=9999;
		for(uint i=0,j=group.length();i<j;i++)
		{
			if(group[i].IsPlayer())
			{
				players_count++;
				
				if(max_level_gracza<group[i].Param[(77)])
				max_level_gracza=group[i].Param[(77)];
				
				if(min_level_gracza>group[i].Param[(77)])
				min_level_gracza=group[i].Param[(77)];
			}
		}    
		
		if(players_count>0)
		{
			zone.ChooseGroups2(leader,enc,max_level_gracza,caravan,players_count,min_level_gracza);
		}
		else
		{
			
		}  
		
		if(enc.Groups.length()>0)
		{
			
			CFoundedEncounter@fe=CreateFoundedEncounter(x,y,@enc,zone,leader.Id,group.length()>1);
			
			if(!(@fe!=null))
			return;  
			
			if((@car!=null))
			{
				if(50+guide.Param[(217)]>=Random(1,100))
				{
					if(leader.Param[(1171)]>0)
					return;
					enc.Ask((14),leader,false);
					waitForAnswer=true;
				}
			}
			else
			{
				int outdoorsman=guide.Param[(217)]-zone.Difficulty;
				outdoorsman=(((outdoorsman)>(96))?(96):(((outdoorsman)<(6))?(6):(outdoorsman)));
				if(guide.Param[(217)]>250)
				outdoorsman++;
				if(guide.Param[(217)]>300)
				outdoorsman++;
				if(guide.Param[(217)]>350)
				outdoorsman++;
				if(guide.Param[(217)]>400)
				outdoorsman++;
				if(guide.Param[(217)]>450)
				outdoorsman++;
				if(!IsCaravanLeader(leader)&&outdoorsman>=Random(1,100))
				{
					if(leader.Param[(1171)]>0)
					return;
					enc.Ask((14),leader,false);
					waitForAnswer=true;
					giveReward=true;
				}
			}
			
			for(uint i=0,j=group.length();i<j;i++)
			{
				group[i].Say((41),"");
				group[i].PlaySound("encoalert.ogg",true);
			}
			
			encounterDescriptor=fe.Index;
		}
		else
		{
			for(uint i=0,j=group.length();i<j;i++)
			{
				{if(group[i].IsPlayer()&&group[i].GetAccess()==(3)) group[i].Say((11),"NOT Creating FoundedEncounter...!   players_count= "+players_count);};
			}
		} 
		
	}
	
	if(empty&&encounterDescriptor==0)
	{
		CFoundedEncounter@fe=CreateFoundedEncounter(x,y,null,zone,leader.Id,group.length()>1);
		if(!(@fe!=null))
		return;
		waitForAnswer=false;
		encounterDescriptor=fe.Index;
		return;
	}
	
	if(giveReward)
	{
		if(guide.Param[(217)]<=95)
		GuideReward(leader,guide,100-guide.Param[(217)]+zone.Difficulty);
		else
		GuideReward(leader,guide,5+zone.Difficulty);
	}
	uint t=GetTick()-start;
	
} 

void InviteToEncounter(array<Critter@>&group,Item@car,uint encounterDescriptor,int combatMode,uint&mapId,uint16&hexX,uint16&hexY,uint8&dir)
{
	
	uint start=GetTick();
	mapId=0;
	
	CFoundedEncounter@fe=GetFoundedEncounter(encounterDescriptor);
	if(!(@fe!=null))
	{
		Log("GetFoundedEncounter fail.");
		return;
	}
	
	bool isGenerated=fe.IsGenerated;
	Map@map=null;
	if(isGenerated)
	{
		Location@location=GetLocation(fe.LocationId);
		if(!(@location!=null))
		{
			Log("Location not found.");
			return;
		}
		
		@map=location.GetMapByIndex(0);
	}
	else
	{
		@map=GenerateEncounter(fe,group);
	}
	
	if(!(@map!=null))
	{
		Log("Map not found.");
		return;
	}
	Location@loc=map.GetLocation(); 
	
	if(!isGenerated&&combatMode==(2))
	{
		for(uint i=0,j=loc.GetMapCount();i<j;i++)
		loc.GetMapByIndex(i).SetTurnBasedAvailability(true);
		fe.TurnBased=true;
	}
	
	Critter@leader=group[0];
	
	mapId=map.Id;
	hexX=fe.StartHexX;
	hexY=fe.StartHexY;
	
	if((!(@fe.Encounter!=null)||(!fe.Encounter.Special))&&!(@car!=null))
	{
		dir=GetFreeDir(fe.DirBusy,fe.FirstDirIdx);
		{};
		map.MoveHexByDir(hexX,hexY,dir,5+leader.Param[(1)]+leader.Param[(381)]*3);
		dir+=3;
		if(dir>5)
		dir-=6;
	}
	
	if((@car!=null))
	{
		hexX=uint16(-1);
		hexY=uint16(-1);
		OnCarGroupEnterLocation(group,car,map.GetLocation().Id);
	}
	
	if((@fe.Encounter!=null))
	{
		
		if(leader.Id!=fe.OwnerId)
		fe.Encounter.AddPlayer(leader);
		for(uint i=0,j=group.length();i<j;i++)
		fe.Encounter.Say(leader,group[i]);
		
		if(fe.Encounter.Special)
		OnSpecialEncounterCreated(loc,group,car,encounterDescriptor);
	}    
	
	uint t=GetTick()-start;
	{if(leader.IsPlayer()&&leader.GetAccess()==(3)) leader.Say((11),"InviteToEncounter: "+t+"ms.");};
	
}

void OnCarGroupEnterLocation(array<Critter@>&group,Item&car,uint locId)
{
	for(uint i=0,j=group.length();i<j;i++)
	if(group[i].IsPlayer())
	{
		
		group[i].SetKnownLoc(true,locId);
	}
}

void dumpencountergroups(Critter&,int,int,int)
{
	DumpEncounterGroups();
}

void DumpEncounterGroups()
{
	file f;
	f.open("groups.fowm","a");
	for(uint i=0;i<(146);i++)
	{
		string line;
		CEncounterGroup@group;
		@group=@EncounterGroups[i];
		
		line=i+","+group.Position+","+group.Spacing+","+group.RatioMin+","+group.RatioMax+","+(group.TeamNum/100)+","+(group.TeamNum%10)+"|||";
		
		for(uint j=0;j<group.Objects.length();j++)
		{
			if(group.Objects[j].ObjectType!=(1))
			continue;
			
			line+=group.Objects[j].Pid+","+group.Objects[j].Dialog+","+group.Objects[j].Script+","+group.Objects[j].Ratio+","+(group.Objects[j].Dead?1:0);
			Log("in npc");
			
			if(group.Objects[j].Childs.length()>0)
			{
				line+="|";
				for(uint k=0,l=group.Objects[j].Childs.length();k<l;k++)
				{
					Log("in items");
					CEncounterObject@child=group.Objects[j].Childs[k];    
					
					line+=(child.Pid+","+child.Minimum+","+child.Maximum+","+child.Slot);
					Log("item: "+(child.Pid+","+child.Minimum+","+child.Maximum+","+child.Slot));
					if(k<(group.Objects[j].Childs.length()-1))
					{
						Log("k:"+k);
						Log("length:"+group.Objects[j].Childs.length());
						line+="|";
					}
				}
				
			}
			line+="||";
		}
		f.writeString(line+"\n");
	}
	f.close();
}   

void LoadWorldmapGroups(string@fileName)
{
	CEncounterGroup@group;
	
	for(uint i=0,j=EncounterGroups.length();i<j;i++)
	EncounterGroups[i].Index=i;
	
	file f;
	{;};
	if(f.open(fileName,"r")>=0)
	{
		
		string str;
		int l=f.readString(f.getSize(),str);
		f.close(); 
		
		array<string@>@lines=split(str,"\n");
		{;};         
		
		int GroupIndex=-1;
		for(uint i=0;i<lines.length();i++)
		{ 
			
			if(lines[i].length()<5)
			{
				continue;
			}
			
			if(substring(lines[i],0,1)=="*")
			{
				
				array<string@>@parts=split(lines[i],"|");
				array<string@>@param=split(parts[0],",");
				
				CEncounterObject@cr;
				int crpid=0;
				int dialog=0;
				int ratio=0;
				int armor=0;
				int helmet=0;
				int overridecrtype=0;
				StrToInt(param[1],crpid);
				StrToInt(param[2],dialog);
				string script=param[3];
				StrToInt(param[4],ratio);
				string dead=param[5];
				StrToInt(param[6],armor);
				StrToInt(param[7],helmet);
				StrToInt(param[8],overridecrtype);
				
				@cr=group.AddCritter(crpid).SetRatio(ratio).SetDialog(dialog).SetScript(script);
				cr.Armor=armor;
				cr.Helmet=helmet;
				cr.OverrideCrtype=overridecrtype;
				if(dead=="1")
				@cr.SetDead(true);  
				
				for(uint y=1;y<parts.length();y++)
				{
					array<string@>@itemData=split(parts[y],",");
					if(itemData.length<1)
					continue;
					
					if(itemData[0]==("0"))
					{
						
						int pid=0;
						int min=0;
						int max=0;
						int slot=0;
						StrToInt(itemData[1],pid);
						StrToInt(itemData[2],min);
						StrToInt(itemData[3],max);
						StrToInt(itemData[4],slot);
						cr.AddItem(pid,min,max,slot);
					}
					else if(itemData[0]==("1"))
					{
						
						int index=0;
						int level=0;
						int chance=0;
						
						StrToInt(itemData[2],index);
						StrToInt(itemData[3],level);
						StrToInt(itemData[4],chance);
						cr.AddPerk(index,level,chance);
					}
				}
			}
			else
			{
				array<string@>@params=split(lines[i],",");
				
				int position=0;
				int spacing=0;
				int ratiomin=0;
				int ratiomax=0;
				int factionid=0;
				int teammode=0;
				
				float quantityday=0.0;
				float quantitynight=0.0;
				
				int distmin=0;
				int distmax=0;
				
				StrToInt(params[1],position);
				StrToInt(params[2],spacing);
				
				StrToInt(params[3],ratiomin);
				StrToInt(params[4],ratiomax);
				StrToInt(params[5],factionid);
				StrToInt(params[6],teammode);
				StrToFloat(params[7],quantityday);
				StrToFloat(params[8],quantitynight);
				StrToInt(params[9],distmin);
				StrToInt(params[10],distmax);   
				
				@group=@EncounterGroups[++GroupIndex];
				group.Position=position;
				group.Spacing=spacing;
				group.RatioMin=ratiomin;
				group.RatioMax=ratiomax;
				group.QuantityDay=quantityday;
				group.QuantityNight=quantitynight;
				group.DistMin=distmin;
				group.DistMax=distmax;
				
				if(factionid==-1)
				group.TeamNum=(1);
				else if(factionid>0)
				group.TeamNum=(factionid*100+10*1+teammode);
				else
				group.TeamNum=0;
			}
		}
	}
}

void WorldmapInit()
{
	LoadImage((0),"wm.png",1,(34));
	
	for(uint i=0,j=Worldmap.length();i<j;i++)
	@Worldmap[i]=CZone(i%(42),i/(42)); 
	
	LoadWorldmapGroups("maps/groups.fowm");
	Log("Encounter groups loaded.");  
	
	InitGroupsCost();
	
	LoadWorldmapTables("maps/worldmap.focwm");
	Log("Worldmap loaded.");
	LoadGroupsQuantities();   
	
}

uint GetGlobalMapRelief(uint x,uint y)
{ 
	
	return GetImageColor((0),x,y)&0xF;
}

void InitGroupsCost()
{
	for(uint i=0;i<(146);i++)
	EncounterGroups[i].SetAverageCost();
}    

void SaveGroupsQuantities()
{
	array<uint>data;
	for(uint i=0,j=Worldmap.length();i<j;i++)
	{
		data.insertLast(Worldmap[i].Groups.length());
		for(uint k=0,l=Worldmap[i].Groups.length();k<l;k++)
		{
			data.insertLast(Worldmap[i].Groups[k]);
			data.insertLast(Worldmap[i].Quantities[k]);
		}
	}
	SetAnyData("WorldmapGroups",data);
}  

void LoadGroupsQuantities()
{
	array<uint>data;
	if(!IsAnyData("WorldmapGroups"))
	return;
	GetAnyData("WorldmapGroups",data);
	uint idx=0;
	uint cur=0;
	uint len=data.length();
	do
	{
		Worldmap[idx].Groups.resize(0);
		Worldmap[idx].Quantities.resize(0);
		for(uint i=0,j=data[cur++];i<j;i++)
		{
			Worldmap[idx].Groups.insertLast(data[cur++]);
			Worldmap[idx].Quantities.insertLast(data[cur++]);
		}
		idx++;
	}
	while(cur<len);
}

uint e_WorldmapUpdate(array<uint>@values)
{
	uint __nowZZZ=GetTick();
	SaveGroupsQuantities();
	uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
	return(((10)*__TimeMultiplier*60));
}

void setquantity(Critter&cr,int group,int mod,int direct)
{
	IZone@zone=GetZone(cr.WorldX,cr.WorldY);
	if(direct!=0)
	zone.SetQuantity(group,direct);
	else
	zone.ChangeQuantity(group,mod);
}

void listgroups(Critter&cr,int,int,int)
{
	uint zx=((cr.WorldX)/(50));
	uint zy=((cr.WorldY)/(50));
	CZone@zone=Worldmap[((zy)*(42)+(zx))];
	for(uint i=0,j=zone.Groups.length();i<j;i++)
	cr.Say((11),""+zone.Groups[i]+": "+EncounterGroups[zone.Groups[i]].GetModifiedQuantity(zone.Quantities[i]));
}

void savezones(Critter&cr,int,int,int)
{
	SaveGroupsQuantities();
}
void loadzones(Critter&cr,int,int,int)
{
	LoadGroupsQuantities();
}

void MakeEncounterBoss(uint npcId,uint groupNum)
{
	Critter@npc=GetCritter(npcId);
	
	if(!(@npc!=null))
	return;  
	
	Item@armor=npc.GetItem(0,(3));
	if((@armor!=null))
	{
		AddSpecialBonusEncounterBoss(armor);
		uint wear=Random(0,10);
		SetMinWear(armor,wear);
		SetWear(armor,wear+Random(5,15));
	}
	
	@armor=npc.GetItem(0,(4));
	if((@armor!=null))
	{
		AddSpecialBonusEncounterBoss(armor);
		uint wear=Random(0,15);
		SetMinWear(armor,wear);
		SetWear(armor,wear+Random(5,15));
	}
	
	Item@weapon=npc.GetItem(0,(1));
	
	if((@weapon!=null)&&weapon.GetType()==(3))
	{
		AddSpecialBonusEncounterBoss(weapon);
		uint wear=Random(5,15);
		SetMinWear(weapon,wear);
		SetWear(weapon,wear+Random(5,20));
	}
	
	int boost=Random(1,100);
	
	for(int i=0;i<boost;i++)
	{
		if(Random(1,20)==1)
		{
			npc.ParamBase[(1134)]++;
			continue;
		}
		if(Random(1,19)==1)
		{
			npc.ParamBase[(1135)]++;
			continue;
		}
		if(Random(1,18)==1)
		{
			npc.ParamBase[(1136)]++;
			continue;
		}
		if(Random(1,17)==1)
		{
			npc.ParamBase[(1137)]++;
			continue;
		}
		if(Random(1,16)==1)
		{
			npc.ParamBase[(1138)]++;
			continue;
		}
		if(Random(1,15)==1)
		{
			npc.ParamBase[(1139)]++;
			continue;
		}
		if(Random(1,14)==1)
		{
			npc.ParamBase[(1140)]++;
			continue;
		}
		if(Random(1,13)==1)
		{
			npc.ParamBase[(1144)]++;
			continue;
		}
		if(Random(1,12)==1)
		{
			npc.ParamBase[(1145)]++;
			continue;
		}
		if(Random(1,11)==1)
		{
			npc.ParamBase[(1146)]++;
			continue;
		}
		if(Random(1,10)==1)
		{
			npc.ParamBase[(1147)]++;
			continue;
		}
		if(Random(1,9)==1)
		{
			npc.ParamBase[(1148)]++;
			continue;
		}
		if(Random(1,8)==1)
		{
			npc.ParamBase[(1149)]++;
			continue;
		}
		if(Random(1,7)==1)
		{
			npc.ParamBase[(1150)]++;
			continue;
		}
		if(Random(1,6)==1)
		{
			npc.ParamBase[(1151)]++;
			continue;
		}
		if(Random(1,5)==1)
		{
			npc.ParamBase[(1152)]++;
			continue;
		}
		if(Random(1,4)==1)
		{
			npc.ParamBase[(1154)]++;
			continue;
		}
		if(Random(1,3)==1)
		{
			npc.ParamBase[(1155)]++;
			continue;
		}
		if(Random(1,2)==1)
		{
			npc.ParamBase[(1156)]++;
			continue;
		}
		
		npc.ParamBase[(1133)]++;
	}
	
	npc.ParamBase[(72)]=npc.Param[(7)];
	npc.ParamBase[(200)]*=Random(2,4);
	npc.ParamBase[(201)]*=Random(2,4);
	npc.ParamBase[(202)]*=Random(2,4);
	npc.ParamBase[(203)]*=Random(2,4);
	npc.ParamBase[(205)]*=Random(2,4);
	
	npc.ParamBase[(313)]=1;
	npc.ParamBase[(306)]=1;
	npc.ParamBase[(305)]=1;
	npc.ParamBase[(336)]=1;
	npc.ParamBase[(380)]=1;
	npc.ParamBase[(402)]=2;
	npc.ParamBase[(403)]=1;
	npc.ParamBase[(522)]=1;
	npc.ParamBase[(405)]=1;
	npc.ParamBase[(407)]=1;
	npc.ParamBase[(89)]=269;
	int bt=npc.Param[(67)];
	switch(bt)
	{
		case(0):
		case(1):
		case(2):
		case(4):
		switch(Random(1,11))
		{
			case 1:npc.ParamBase[(418)]+=1;break;
			case 2:npc.ParamBase[(395)]+=1;break;
			case 3:npc.ParamBase[(353)]+=1;break;
			case 4:npc.ParamBase[(382)]+=1;break;
			case 5:npc.ParamBase[(404)]+=1;break;
			case 6:npc.ParamBase[(408)]+=1;break;
			case 7:npc.ParamBase[(441)]+=1;break;
			case 8:npc.ParamBase[(419)]+=1;break;
			case 9:npc.ParamBase[(347)]+=1;break;
			case 10:npc.ParamBase[(384)]+=1;break;
			case 11:npc.ParamBase[(393)]+=1;break;
		}
		break;
		case(3):
		case(10):
		switch(Random(1,4))
		{
			case 1:npc.ParamBase[(345)]+=1;break;
			case 2:npc.ParamBase[(404)]+=1;break;
			case 3:npc.ParamBase[(347)]+=1;break;
			case 4:npc.ParamBase[(393)]+=1;break;
		}
		break;
		case(23):
		case(13):
		switch(Random(1,4))
		{
			case 1:npc.ParamBase[(408)]+=1;break;
			case 2:npc.ParamBase[(352)]+=1;break;
			case 3:npc.ParamBase[(384)]+=1;break;
			case 4:npc.ParamBase[(393)]+=1;break;
		}
		break;
		default:npc.ParamBase[(384)]+=1;break; 
		
	}
	
	if(npc.Param[(347)]>0)
	{
		for(uint i=0;i<11;i++)
		{
			switch(Random(1,16))
			{
				case 1:npc.ParamBase[(300)]+=1;break;
				case 2:npc.ParamBase[(310)]+=1;break;
				case 3:npc.ParamBase[(311)]+=1;break;
				case 4:npc.ParamBase[(321)]+=1;break;
				case 5:npc.ParamBase[(323)]+=1;break;
				case 6:npc.ParamBase[(324)]+=1;break;
				case 7:npc.ParamBase[(337)]+=1;break;
				case 8:npc.ParamBase[(340)]+=1;break;
				case 9:npc.ParamBase[(325)]+=1;break;
				case 10:npc.ParamBase[(328)]+=1;break;
				case 11:npc.ParamBase[(462)]+=1;break;
				case 12:npc.ParamBase[(432)]+=1;break;
				case 13:npc.ParamBase[(433)]+=1;break;
				case 14:npc.ParamBase[(434)]+=1;break;
				case 15:npc.ParamBase[(435)]+=1;break;
				case 16:npc.ParamBase[(431)]+=1;break;
			} 
			
		} 
		
	}
	npc.SetEvent((2),"_AddScore");
	int pid=0;
	switch(groupNum)
	{
		case(0):
		case(3):
		case(16):
		case(17):
		case(18):
		case(19):
		case(20):
		case(21):
		case(24):
		case(25):
		case(26):
		case(27):
		case(29):
		case(32):
		case(33):
		case(34):
		case(37):
		case(38):
		case(39):
		case(40):
		case(42):
		case(45):
		case(46):
		case(49):
		case(50):
		case(53):
		case(54):
		case(55):
		case(56):
		case(57):
		case(58):
		case(59):
		case(62):
		case(63):
		case(64):
		case(65):
		case(66):
		case(67):
		case(68):
		case(69):
		case(70):
		case(71):
		case(73):
		case(74):
		case(75):
		case(76):
		case(85):
		case(86):
		case(87):
		case(88):
		case(89):
		case(90):
		case(91):
		case(92):
		case(93):
		case(94):
		case(95):
		case(96):
		case(97):
		case(98):
		case(99):
		case(100):
		case(101):
		case(103):
		case(104):
		case(105):
		case(106):
		case(107):
		case(109):
		case(110):
		case(111):
		case(112):
		case(113):
		case(115):
		case(116):
		case(117):
		case(119):
		case(120):
		case(121):
		case(122):
		case(123):
		case(124):
		case(125):
		case(126):
		case(127):
		case(128):
		case(129):
		case(130):
		case(131):
		case(132):
		case(133):
		case(135):
		case(136):
		case(137):
		case(138):
		case(140):
		case(141):
		case(142):
		case(143):
		case(145):
		pid=(25571);
		break;
		
		default:
		pid=0;
		break;
	}
	
	if(pid!=0&&Random(1,100)>66)
	npc.AddItem(pid,1);
	if(dropchance(45*doubleloot))
	addbasemap(npc);
}

void _AddScore(Critter&mob,Critter@killer)
{
	if(killer.IsPlayer())
	AddScore(killer,(60),1);
}
import void _weapon_perk(Item&item,bool firstTime)from"item_level";
import void _armor_perk(Item&item,bool firstTime)from"item_level";
void SpawnBuffItem(Item&container,uint16 pid)
{
	Item@it=container.AddItem(pid,1,0);
	it.Val0+=Random(1,10000000);
	it.Update();
	if(it.GetType()==(3))
	_weapon_perk(it,false);
	
	if(it.GetType()==(1))
	_armor_perk(it,false);
}

void SpawnBuffItem(Critter&cr,uint pid)
{
	Item@it=cr.AddItem(pid,1);
	
}

void reward1(Item&item,bool firstTime)
{
	for(int i=1;i<=Random(2,4);i++)
	{
		switch(Random(1,21))
		{
			case 1:{SpawnBuffItem(item,(13));break;}
			case 2:{SpawnBuffItem(item,(15));break;}
			case 3:{SpawnBuffItem(item,(399));break;}
			case 4:{SpawnBuffItem(item,(115));break;}
			case 5:{SpawnBuffItem(item,(143));break;}
			case 6:{SpawnBuffItem(item,(241));break;}
			case 7:{SpawnBuffItem(item,(296));break;}
			case 8:{SpawnBuffItem(item,(268));break;}
			case 9:{SpawnBuffItem(item,(355));break;}
			case 10:{SpawnBuffItem(item,(143));break;}
			case 11:{SpawnBuffItem(item,(389));break;}
			case 12:{SpawnBuffItem(item,(400));break;}
			case 13:{SpawnBuffItem(item,(401));break;}
			case 14:{SpawnBuffItem(item,(522));break;}
			case 15:{SpawnBuffItem(item,(353));break;}
			case 16:{SpawnBuffItem(item,(28));break;}
			case 17:{SpawnBuffItem(item,(25566));break;}
			case 18:{SpawnBuffItem(item,(25567));break;}
			case 19:{SpawnBuffItem(item,(407));break;}
			case 20:{SpawnBuffItem(item,(396));break;}
			case 21:{SpawnBuffItem(item,(620));break;}
		}
	}
}

void reward2(Item&item,bool firstTime)
{
	for(int i=1;i<=Random(1,5);i++)
	{
		item.AddItem((25571),1,0);
	}
}

void reward3(Critter&item,bool firstTime)
{
	item.ParamBase[(511)]=1;
	item.ParamBase[(523)]=1;
	item.ParamBase[(532)]=1;
	item.ParamBase[(522)]=1;
	item.ParamBase[(524)]=0;
	for(int i=1;i<=Random(2,6);i++)
	{
		switch(Random(1,17))
		{
			case 1:{SpawnBuffItem(item,(381));
				SpawnBuffItem(item,(726));break;}
			case 2:{SpawnBuffItem(item,(265));
				SpawnBuffItem(item,(728));break;}
			case 3:{SpawnBuffItem(item,(379));
				SpawnBuffItem(item,(731));break;}
			case 4:{SpawnBuffItem(item,(25548));
				SpawnBuffItem(item,(731));break;}
			case 5:{SpawnBuffItem(item,(380));
				SpawnBuffItem(item,(733));break;}
			case 6:{SpawnBuffItem(item,(240));
				SpawnBuffItem(item,(733));break;}
			case 7:{SpawnBuffItem(item,(25549));
				SpawnBuffItem(item,(733));break;}
			case 8:{SpawnBuffItem(item,(22095));
				SpawnBuffItem(item,(733));break;}
			case 9:{SpawnBuffItem(item,(25547));
				SpawnBuffItem(item,(733));break;}
			case 10:{SpawnBuffItem(item,(239));
				SpawnBuffItem(item,(727));break;}
			case 11:{SpawnBuffItem(item,(752));
				SpawnBuffItem(item,(738));break;}
			case 12:{SpawnBuffItem(item,(778));
				SpawnBuffItem(item,(740));break;}
			case 13:{SpawnBuffItem(item,(9654));
				SpawnBuffItem(item,(741));break;}
			case 14:{SpawnBuffItem(item,(761));
				SpawnBuffItem(item,(726));break;}
			case 15:{SpawnBuffItem(item,(25550));
				SpawnBuffItem(item,(726));break;}
			case 16:{SpawnBuffItem(item,(25551));
				SpawnBuffItem(item,(726));break;}
			case 17:{SpawnBuffItem(item,(524));
				SpawnBuffItem(item,(726));break;}
		}
		switch(Random(1,21))
		{
			case 1:{SpawnBuffItem(item,(13));break;}
			case 2:{SpawnBuffItem(item,(15));break;}
			case 3:{SpawnBuffItem(item,(399));break;}
			case 4:{SpawnBuffItem(item,(115));break;}
			case 5:{SpawnBuffItem(item,(143));break;}
			case 6:{SpawnBuffItem(item,(241));break;}
			case 7:{SpawnBuffItem(item,(296));break;}
			case 8:{SpawnBuffItem(item,(268));break;}
			case 9:{SpawnBuffItem(item,(355));break;}
			case 10:{SpawnBuffItem(item,(143));break;}
			case 11:{SpawnBuffItem(item,(389));break;}
			case 12:{SpawnBuffItem(item,(400));break;}
			case 13:{SpawnBuffItem(item,(401));break;}
			case 14:{SpawnBuffItem(item,(522));break;}
			case 15:{SpawnBuffItem(item,(353));break;}
			case 16:{SpawnBuffItem(item,(28));break;}
			case 17:{SpawnBuffItem(item,(25566));break;}
			case 18:{SpawnBuffItem(item,(25567));break;}
			case 19:{SpawnBuffItem(item,(407));break;}
			case 20:{SpawnBuffItem(item,(396));break;}
			case 21:{SpawnBuffItem(item,(620));break;}
		}
		switch(Random(1,14))
		{
			case 1:{item.AddItem((36),Random(500,3000));break;}
			case 2:{item.AddItem((363),Random(300,1000));break;}
			case 3:{item.AddItem((30),Random(250,1500));break;}
			case 4:{item.AddItem((34),Random(150,900));break;}
			case 5:{item.AddItem((575),Random(150,500));break;}
			case 6:{item.AddItem((621),Random(20,70));break;}
			case 7:{item.AddItem((37),Random(20,70));break;}
			case 8:{item.AddItem((382),Random(20,70));break;}
			case 9:{item.AddItem((38),Random(100,500));break;}
			case 10:{item.AddItem((39),Random(100,500));break;}
			case 11:{item.AddItem((25568),Random(20,70));break;}
			case 12:{item.AddItem((25570),Random(5,30));break;}
			case 13:{item.AddItem((26),Random(5,30));break;}
			case 14:{item.AddItem((25),Random(5,30));break;}
		}
		switch(Random(1,18))
		{
			case 1:{item.AddItem((48),Random(1,20));break;}
			case 2:{item.AddItem((109),Random(1,20));break;}
			case 3:{item.AddItem((144),Random(1,20));break;}
			case 4:{item.AddItem((260),Random(1,20));break;}
			case 5:{item.AddItem((106),Random(1,20));break;}
			case 6:{item.AddItem((124),Random(1,20));break;}
			case 7:{item.AddItem((125),Random(1,20));break;}
			case 8:{item.AddItem((310),Random(1,20));break;}
			case 9:{item.AddItem((311),Random(1,20));break;}
			case 10:{item.AddItem((469),Random(1,20));break;}
			case 11:{item.AddItem((53),Random(1,20));break;}
			case 12:{item.AddItem((87),Random(1,20));break;}
			case 13:{item.AddItem((110),Random(1,20));break;}
			case 14:{item.AddItem((259),Random(1,20));break;}
			case 15:{item.AddItem((25573),Random(1,20));break;}
			case 16:{item.AddItem((25574),Random(1,20));break;}
			case 17:{item.AddItem((25575),Random(1,20));break;}
			case 18:{item.AddItem((273),Random(1,20));break;}
		}
		if(Random(0,99)<75)
		{
			switch(Random(1,8))
			{
				case 1:{item.AddItem((59),1);break;}
				case 2:{item.AddItem((59),1);break;}
				case 3:{item.AddItem((358),Random(20,50));break;}
				case 4:{item.AddItem((359),Random(20,50));break;}
				case 5:{item.AddItem((850),Random(20,50));break;}
				case 6:{item.AddItem((59),1);break;}
				case 7:{item.AddItem((54),1);break;}
				case 8:{item.AddItem((27),1);break;}
			}
		}
		
		if(Random(0,99)>75)
		{
			switch(Random(1,5))
			{
				case 1:{item.AddItem((25572),1);break;}
				case 2:{item.AddItem((25444),1);break;}
				case 3:{item.AddItem((430),1);break;}
				case 4:{item.AddItem((25468),1);break;}
				case 5:{item.AddItem((25469),1);break;}
			}
		}
		
		if(Random(0,99)<25)
		{
			switch(Random(1,36))
			{
				case 1:{item.AddItem((25476),1);break;}
				case 2:{item.AddItem((25477),1);break;}
				case 3:{item.AddItem((25478),1);break;}
				case 4:{item.AddItem((25479),1);break;}
				case 5:{item.AddItem((25480),1);break;}
				case 6:{item.AddItem((25481),1);break;}
				case 7:{item.AddItem((25482),1);break;}
				case 8:{item.AddItem((25483),1);break;}
				case 9:{item.AddItem((25484),1);break;}
				case 10:{item.AddItem((25485),1);break;}
				case 11:{item.AddItem((25486),1);break;}
				case 12:{item.AddItem((25487),1);break;}
				case 13:{item.AddItem((25488),1);break;}
				case 14:{item.AddItem((22072),10);break;}
				case 15:{item.AddItem((22073),1);break;}
				case 16:{item.AddItem((22074),1);break;}
				case 17:{item.AddItem((22075),1);break;}
				case 18:{item.AddItem((22076),1);break;}
				case 19:{item.AddItem((22077),1);break;}
				case 20:{item.AddItem((22078),1);break;}
				case 21:{item.AddItem((22079),1);break;}
				case 22:{item.AddItem((22080),1);break;}
				case 23:{item.AddItem((22081),1);break;}
				case 24:{item.AddItem((22082),1);break;}
				case 25:{item.AddItem((22083),1);break;}
				case 26:{item.AddItem((22084),1);break;}
				case 27:{item.AddItem((22085),1);break;}
				case 28:{item.AddItem((22086),1);break;}
				case 29:{item.AddItem((22087),1);break;}
				case 30:{item.AddItem((22088),1);break;}
				case 31:{item.AddItem((22089),1);break;}
				case 32:{item.AddItem((22090),1);break;}
				case 33:{item.AddItem((22091),1);break;}
				case 34:{item.AddItem((22092),1);break;}
				case 35:{item.AddItem((22093),1);break;}
				case 36:{item.AddItem((22094),1);break;}
			}
		}
		if(Random(0,1000)<1)
		{
			switch(Random(1,25))
			{
				case 1:{item.AddItem((9819),1);break;}
				case 2:{item.AddItem((9820),1);break;}
				case 3:{item.AddItem((9822),1);break;}
				case 4:{item.AddItem((9822),1);break;}
				case 5:{item.AddItem((9823),1);break;}
				case 6:{item.AddItem((9824),1);break;}
				case 7:{item.AddItem((9825),1);break;}
				case 8:{item.AddItem((9826),1);break;}
				case 9:{item.AddItem((9829),1);break;}
				case 10:{item.AddItem((9830),1);break;}
				case 11:{item.AddItem((9842),1);break;}
				case 12:{item.AddItem((9775),1);break;}
				case 13:{item.AddItem((9776),1);break;}
				case 14:{item.AddItem((9777),1);break;}
				case 15:{item.AddItem((9778),1);break;}
				case 16:{item.AddItem((9779),1);break;}
				case 17:{item.AddItem((9826),1);break;}
				case 18:{item.AddItem((9829),1);break;}
				case 19:{item.AddItem((9830),1);break;}
				case 20:{item.AddItem((9842),1);break;}
				case 21:{item.AddItem((9775),1);break;}
				case 22:{item.AddItem((9776),1);break;}
				case 23:{item.AddItem((9777),1);break;}
				case 24:{item.AddItem((9778),1);break;}
				case 25:{item.AddItem((9779),1);break;}
			}
		}
		else
		{
			switch(Random(1,70))
			{
				case 1:{item.AddItem((9750),1);break;}
				case 2:{item.AddItem((9751),1);break;}
				case 3:{item.AddItem((9752),1);break;}
				case 4:{item.AddItem((9753),1);break;}
				case 5:{item.AddItem((9754),1);break;}
				case 6:{item.AddItem((9755),1);break;}
				case 7:{item.AddItem((9756),1);break;}
				case 8:{item.AddItem((9757),1);break;}
				case 9:{item.AddItem((9758),1);break;}
				case 10:{item.AddItem((9759),1);break;}
				case 11:{item.AddItem((9760),1);break;}
				case 12:{item.AddItem((9761),1);break;}
				case 13:{item.AddItem((9762),1);break;}
				case 14:{item.AddItem((9763),1);break;}
				case 15:{item.AddItem((9764),1);break;}
				case 16:{item.AddItem((9765),1);break;}
				case 17:{item.AddItem((9766),1);break;}
				case 18:{item.AddItem((9767),1);break;}
				case 19:{item.AddItem((9768),1);break;}
				case 20:{item.AddItem((9769),1);break;}
				case 21:{item.AddItem((9770),1);break;}
				case 22:{item.AddItem((9771),1);break;}
				case 23:{item.AddItem((9772),1);break;}
				case 24:{item.AddItem((9773),1);break;}
				case 25:{item.AddItem((9774),1);break;}
				case 26:{item.AddItem((9780),1);break;}
				case 27:{item.AddItem((9781),1);break;}
				case 28:{item.AddItem((9782),1);break;}
				case 29:{item.AddItem((9783),1);break;}
				case 30:{item.AddItem((9784),1);break;}
				case 31:{item.AddItem((9785),1);break;}
				case 32:{item.AddItem((9786),1);break;}
				case 33:{item.AddItem((9787),1);break;}
				case 34:{item.AddItem((9788),1);break;}
				case 35:{item.AddItem((9789),1);break;}
				case 36:{item.AddItem((9790),1);break;}
				case 37:{item.AddItem((9791),1);break;}
				case 38:{item.AddItem((9792),1);break;}
				case 39:{item.AddItem((9793),1);break;}
				case 40:{item.AddItem((9794),1);break;}
				case 41:{item.AddItem((9795),1);break;}
				case 42:{item.AddItem((9796),1);break;}
				case 43:{item.AddItem((9797),1);break;}
				case 44:{item.AddItem((9798),1);break;}
				case 45:{item.AddItem((9799),1);break;}
				case 46:{item.AddItem((9827),1);break;}
				case 47:{item.AddItem((9828),1);break;}
				case 48:{item.AddItem((9832),1);break;}
				case 49:{item.AddItem((9834),1);break;}
				case 50:{item.AddItem((9835),1);break;}
				case 51:{item.AddItem((9836),1);break;}
				case 52:{item.AddItem((9837),1);break;}
				case 53:{item.AddItem((9838),1);break;}
				case 54:{item.AddItem((9839),1);break;}
				case 55:{item.AddItem((9840),1);break;}
				case 56:{item.AddItem((9841),1);break;}
				case 57:{item.AddItem((9843),1);break;}
				case 58:{item.AddItem((9844),1);break;}
				case 59:{item.AddItem((9845),1);break;}
				case 60:{item.AddItem((9846),1);break;}
				case 61:{item.AddItem((9847),1);break;}
				case 62:{item.AddItem((9848),1);break;}
				case 63:{item.AddItem((9849),1);break;}
				case 64:{item.AddItem((9855),1);break;}
				case 65:{item.AddItem((9855),1);break;}
				case 66:{item.AddItem((9857),1);break;}
				case 67:{item.AddItem((9853),1);break;}
				case 68:{item.AddItem((9854),1);break;}
				case 69:{item.AddItem((9855),1);break;}
				case 70:{item.AddItem((9831),1);break;}
			}
		}
		
		if(Random(0,100)<10)
		{
			switch(Random(1,8))
			{
				case 1:{item.AddItem((22054),1);break;}
				case 2:{item.AddItem((22055),1);break;}
				case 3:{item.AddItem((22056),1);break;}
				case 4:{item.AddItem((22057),1);break;}
				case 5:{item.AddItem((22058),1);break;}
				case 6:{item.AddItem((22059),1);break;}
				case 7:{item.AddItem((22060),1);break;}
				case 8:{item.AddItem((25471),1);break;}
			}
		}
		
		if(Random(0,100)<3)
		{
			switch(Random(1,9))
			{
				case 1:{item.AddItem((25552),1);break;}
				case 2:{item.AddItem((25553),1);break;}
				case 3:{item.AddItem((25554),1);break;}
				case 4:{item.AddItem((25555),1);break;}
				case 5:{item.AddItem((25556),1);break;}
				case 6:{item.AddItem((22053),1);break;}
				case 7:{item.AddItem((22051),1);break;}
				case 8:{item.AddItem((22052),1);break;}
				case 9:{item.AddItem((25470),1);break;}
			}
		}
		if(Random(0,100)==1)
		{
			switch(Random(1,5))
			{
				case 1:{item.AddItem((446),1);break;}
				case 2:{item.AddItem((479),1);break;}
				case 3:{item.AddItem((422),1);break;}
				case 4:{item.AddItem((229),1);break;}
				case 5:{item.AddItem((254),1);break;}
			}
		}
		item.AddItem((41),Random(1,25000));
	}
}

void TrapRad(Critter&player,Scenery&trigger,bool entered,uint8 Dir)
{
	if(entered)
	{
		if(player.IsLife())
		{
			AffectRadiation(player,Random(300,700));
		}
	}
}

void reward4(Item&item,bool firstTime)
{
	for(int i=1;i<=Random(3,14);i++)
	{
		switch(Random(1,36))
		{
			case 1:{item.AddItem((25476),1,0);break;}
			case 2:{item.AddItem((25477),1,0);break;}
			case 3:{item.AddItem((25478),1,0);break;}
			case 4:{item.AddItem((25479),1,0);break;}
			case 5:{item.AddItem((25480),1,0);break;}
			case 6:{item.AddItem((25481),1,0);break;}
			case 7:{item.AddItem((25482),1,0);break;}
			case 8:{item.AddItem((25483),1,0);break;}
			case 9:{item.AddItem((25484),1,0);break;}
			case 10:{item.AddItem((25485),1,0);break;}
			case 11:{item.AddItem((25486),1,0);break;}
			case 12:{item.AddItem((25487),1,0);break;}
			case 13:{item.AddItem((25488),1,0);break;}
			case 14:{item.AddItem((22072),1,0);break;}
			case 15:{item.AddItem((22073),1,0);break;}
			case 16:{item.AddItem((22074),1,0);break;}
			case 17:{item.AddItem((22075),1,0);break;}
			case 18:{item.AddItem((22076),1,0);break;}
			case 19:{item.AddItem((22077),1,0);break;}
			case 20:{item.AddItem((22078),1,0);break;}
			case 21:{item.AddItem((22079),1,0);break;}
			case 22:{item.AddItem((22080),1,0);break;}
			case 23:{item.AddItem((22081),1,0);break;}
			case 24:{item.AddItem((22082),1,0);break;}
			case 25:{item.AddItem((22083),1,0);break;}
			case 26:{item.AddItem((22084),1,0);break;}
			case 27:{item.AddItem((22085),1,0);break;}
			case 28:{item.AddItem((22086),1,0);break;}
			case 29:{item.AddItem((22087),1,0);break;}
			case 30:{item.AddItem((22088),1,0);break;}
			case 31:{item.AddItem((22089),1,0);break;}
			case 32:{item.AddItem((22090),1,0);break;}
			case 33:{item.AddItem((22091),1,0);break;}
			case 34:{item.AddItem((22092),1,0);break;}
			case 35:{item.AddItem((22093),1,0);break;}
			case 36:{item.AddItem((22094),1,0);break;}
		}
	}
}

void reward5(Critter&item,bool firstTime)
{
	item.ParamBase[(511)]=1;
	item.ParamBase[(523)]=1;
	item.ParamBase[(532)]=1;
	item.ParamBase[(522)]=1;
	item.ParamBase[(524)]=0;
	item.ParamBase[(66)]=300000;
	item.ParamBase[(84)]=(-1);
	
}

void reward6(Item&item,bool firstTime)
{
	switch(Random(1,25))
	{
		case 1:{item.AddItem((9819),1,0);break;}
		case 2:{item.AddItem((9820),1,0);break;}
		case 3:{item.AddItem((9822),1,0);break;}
		case 4:{item.AddItem((9822),1,0);break;}
		case 5:{item.AddItem((9823),1,0);break;}
		case 6:{item.AddItem((9824),1,0);break;}
		case 7:{item.AddItem((9825),1,0);break;}
		case 8:{item.AddItem((9826),1,0);break;}
		case 9:{item.AddItem((9829),1,0);break;}
		case 10:{item.AddItem((9830),1,0);break;}
		case 11:{item.AddItem((9842),1,0);break;}
		case 12:{item.AddItem((9775),1,0);break;}
		case 13:{item.AddItem((9776),1,0);break;}
		case 14:{item.AddItem((9777),1,0);break;}
		case 15:{item.AddItem((9778),1,0);break;}
		case 16:{item.AddItem((9779),1,0);break;}
		case 17:{item.AddItem((9826),1,0);break;}
		case 18:{item.AddItem((9829),1,0);break;}
		case 19:{item.AddItem((9830),1,0);break;}
		case 20:{item.AddItem((9842),1,0);break;}
		case 21:{item.AddItem((9775),1,0);break;}
		case 22:{item.AddItem((9776),1,0);break;}
		case 23:{item.AddItem((9777),1,0);break;}
		case 24:{item.AddItem((9778),1,0);break;}
		case 25:{item.AddItem((9779),1,0);break;}
	}
}

bool reward7(Critter&player,Scenery&terminal,int skill,Item@item)
{
	
	player.Say((11),"Sound like it was a dream? or not? IT WAITING FOR REWORK");
	DeleteLocation(player.GetMap().GetLocation().Id);
	return true;
}
