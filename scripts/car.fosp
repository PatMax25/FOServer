

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}                                  

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                                                                  

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                          

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}  

import int GetGvar(uint gvar)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";
import bool IsKeyAviable(Critter&cr,uint lockerId)from"lockers";
import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId)from"combat";   

uint GetCarCost(uint16 protoCar)
{
	
	ProtoItem@car=GetProtoItem(protoCar);
	if((@car!=null))
	
	return car.Cost;
	return 0;
}

void CarMessage(Critter@cr,Item@car,int msg)
{
	if(IsCaravan(car))
	cr.SayMsg((11),(3),msg+20);
	else if(IsBarge(car))
	cr.SayMsg((11),(3),msg+40);
	else
	cr.SayMsg((11),(3),msg);
} 

bool UseItemOnCar(Critter&cr,Item&car,Item&item)
{
	if(car.GetProtoId()==(563))
	return false;
	uint16 pid=item.GetProtoId();
	int octane=100;
	if(IsCaravan(car)||IsBarge(car))
	{
		if(pid!=(605)&&pid!=(533))
		return false;
		
		if(car.Charge==(car.Proto.Car_TankVolume))
		{
			CarMessage(cr,car,(10241));
		}
		else
		{
			uint16 newpid=0;
			if(pid==(605))
			newpid=(609);
			else if(pid==(533))
			newpid=(532); 
			
			cr.DeleteItem(pid,1);
			if(newpid>0)
			cr.AddItem(newpid,1);
			
			car.Charge=((((car.Proto.Car_TankVolume))<(car.Charge+100))?((car.Proto.Car_TankVolume)):(car.Charge+100));
			CarMessage(cr,car,(10240));
		}
	}
	else
	{
		if(IsFiretruck(car))
		{
			
			if(car.Val2>car.Val1)
			car.Val2=car.Val1;
			
			uint16 pid=item.Proto.ProtoId;
			
			if(pid==(605)||pid==(533))
			{
				uint16 newpid=0;
				if(pid==(605))
				newpid=(609);
				else if(pid==(533))
				newpid=(532); 
				
				int max=(((int(cr.CountItem(pid)))>(car.Val1-car.Val2))?(car.Val1-car.Val2):(((int(cr.CountItem(pid)))<(0))?(0):(int(cr.CountItem(pid)))));
				if(max>0)
				{
					cr.DeleteItem(pid,max);
					cr.AddItem(newpid,max);
					car.Val2+=max;
					{};
				}
				else
				{};
				
				return(true);
			}
			else if(pid==(609)||pid==(532))
			{
				uint16 newpid=0;
				if(pid==(609))
				newpid=(605);
				else if(pid==(532))
				newpid=(533);
				
				int max=(((car.Val2)>(int(cr.CountItem(pid))))?(int(cr.CountItem(pid))):(((car.Val2)<(0))?(0):(car.Val2)));
				if(max>0)
				{
					cr.DeleteItem(pid,max);
					cr.AddItem(newpid,max);
					car.Val2-=max;
					{};
				}
				else
				{};
				
				return(true);
			}
		}
		
		bool isEnergo=(pid==(38)||pid==(39));
		bool isBio=(pid==(124)||pid==(125)||pid==(310)||pid==(469)||pid==(311));
		bool isTool=(item.Proto.Misc_ToolSkillNum==(213));
		
		if(pid==(549))
		{
			if(car.LockerId==0)
			{
				
				uint keyId=Random(5000,7500);
				
				car.LockerComplexity=Random(150,200);
				car.LockerId=keyId;
				if(IsLexem(car,"$carowner"))
				{
					UnsetLexem(car,"$carowner");
					SetLexem(car,"$carowner",cr.Name);
				}
				else
				{
					SetLexem(car,"$carowner",cr.Name);
				}
				car.Update();
				
				Item@key=cr.AddItem((82),1);
				if((@key!=null))
				{
					key.LockerId=keyId;
					key.Update();
					
					Item@bag=car.GetChild(0);
					if((@bag!=null))
					{
						bag.LockerId=keyId;
						bag.LockerComplexity=Random(150,200);
						bag.Update();
					}
				}
				
				cr.Say((11),"You have successfully installed a new lock on this car.");
				uint pidlock=item.GetProtoId();
				cr.DeleteItem(pidlock,1);
			}
			
			return true;
		} 
		
		if(!isEnergo&&!isBio&&!isTool)
		return false;
		
		if(isTool)
		{
			RepairCar(cr,car,item);
			return true;
		}
		
		if(isBio&&!((car.Val0&(0x0001))!=0))
		{
			CarMessage(cr,car,(10244));
			return true;
		}
		
		octane=100;
		if(pid==(124)||pid==(310))
		octane=30;
		else if(pid==(38))
		octane=100;
		else if(pid==(39))
		octane=150;
		else
		octane=70;
		
		int need=(car.Proto.Car_TankVolume)-car.Charge;
		int count=item.GetCount()*octane;
		if(count>need)
		count=need;
		
		if(count<=0)
		{
			CarMessage(cr,car,(10241));
		}
		else
		{
			int newCount=item.GetCount()-count/octane;
			if(newCount<=0)
			DeleteItem(item);
			else
			item.SetCount(newCount);
			car.Charge+=count;
			CarMessage(cr,car,(10240));
		}
	}
	return true;
}

int GetFumbleThreshold(Item&car)
{
	switch(car.GetProtoId())
	{
		case(802):
		return 50;
		case(560):
		return 50;
		case(805):
		return 60;
		case(800):
		return 75;
		case(816):
		return 100;
		default:
		return 75;
	}
	return 75;
}

void RemoveTool(Item&tool)
{
	int newCount=tool.GetCount()-1;
	if(newCount<=0)
	DeleteItem(tool);
	else
	tool.SetCount(newCount);
}

void RepairCar(Critter&cr,Item&car,Item&tool)
{
	if(car.Deterioration==0)
	{
		CarMessage(cr,car,(10243));
		return;
	}
	else if(cr.IsPlayer()&&cr.Timeout[(232)]>0)
	{
		cr.SayMsg((11),(3),(3401));
		return;
	}
	
	int repair=cr.Param[(213)]>0?cr.Param[(213)]:1;
	repair+=tool.Proto.Misc_ToolSkillBonus;
	
	if(cr.Param[(213)]<GetFumbleThreshold(car))
	{
		bool SomethingHappened=false;
		if(Random(0,1)==0)
		{
			cr.Say((11),"Due to your lack of repair skill, you've managed to botch the tools before getting any substantial repair work done. Damn!");
			RemoveTool(tool);
			SomethingHappened=true;
		}
		
		if((cr.Param[(6)]<3)&&(Random(0,1)==0))
		{
			cr.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),0,cr.HexX,cr.HexY);
			cr.Say((11),"You slip and fall during the repair. Ouch!");
			InjureCritter(cr,Random(5,15),(1),cr.Dir,0);
			SomethingHappened=true;
		}
		if(SomethingHappened)
		return;
	}
	
	int fix=car.Deterioration-(repair)*100;
	if(fix<0)
	fix=0;
	car.Deterioration=fix;
	CarMessage(cr,car,(10242));     
	
	cr.PlaySound("CARREPAR.ACM",true);
	
	int breakBonus=cr.Param[(213)]>0?cr.Param[(213)]/10:0;
	breakBonus+=cr.Param[(6)]/2;
	if(Random(0,1+breakBonus)==0)
	{
		CarMessage(cr,car,(10250));
		RemoveTool(tool);
	}
}

bool UseSkillOnCar(Critter&cr,Item&car,int skill)
{
	uint16 pid=car.GetProtoId();
	if(pid==(563)&&skill!=(-1))
	return false; 
	
	if(skill==(-1))
	{
		if(pid==(563))
		{
			if(car.Val1==0)
			{
				car.Val2=cr.Id;
				bool found=false;
				if((cr.ItemsWeight()>=uint(cr.Param[(11)])))
				{
					cr.SayMsg((11),(3),(425));
					return true;
				}
				if(Random(0,9)==0)
				{
					cr.AddItem((253),1);
					cr.Say((11),"You found a working fuel cell controller.");
					found=true;
				}
				if(Random(0,2)==0)
				{
					cr.AddItem((98),Random(1,3));
					if(Random(0,1)==1)
					cr.AddItem((1801),1);
					cr.Say((11),"You found some junk.");
					found=true;
				}
				
				if(!found)
				cr.Say((11),"You find nothing of use.");
				
				car.Val1=1;
			}
			else
			{
				if(uint(car.Val2)==cr.Id)
				cr.Say((11),"You've already searched the car.");
				else
				cr.Say((11),"Someone else has already searched the car.");
				
				car.Val1++;
				if(car.Val1>19)
				cr.Say((11),"Hello there, are you a bot?");
			}
			return true;
		}
		else
		{
			if(!IsKeyAviable(cr,car.LockerId))
			{
				cr.SayMsg((11),(3),(10100));
			}
			else if((@cr.GetMap()!=null))
			{
				
				Map@map=cr.GetMap();
				if(((map.GetData((10))&((0x00000080)))!=0))
				{
					if(IsKeyAviable(cr,car.LockerId))
					{
						array<Critter@>crits;
						array<Critter@>playersToTake;
						
						playersToTake.insertLast(cr);
						uint cnt=cr.GetCritters(true,(0x01),crits);
						if(cnt>0)
						{
							
							for(uint i=0;i<crits.length();i++)
							{
								Critter@tmpLeader=crits[i].GetFollowLeader();
								if(!(@tmpLeader!=null))continue;
								
								if(cr.Id==tmpLeader.Id)
								{
									uint8 size=playersToTake.length();
									
									playersToTake.insertLast(crits[i]);
									if(crits[i].IsPlayer())crits[i].Say((11),"You can't follow other players during GM event.");
								}
							}
							
							for(uint8 i=0;i<playersToTake.length();i++)
							{
								playersToTake[i].TimeoutBase[(944)]=((__FullSecond)+(0));
								
							}
						}
					}
				} 
				
				if(cr.Timeout[(944)]>0)
				cr.SayMsg((11),(3),(790));
				else if(cr.Timeout[(238)]>0)
				cr.SayMsg((11),(3),(791));
				else if(car.Charge==0&&(car.Proto.Car_TankVolume)>0)
				CarMessage(cr,car,(10245));
				else
				DriveToGlobal(cr,car,true);
			}
		}
	}
	else if(skill==(212))
	{
		cr.SayMsg((11),(0),(2100),"$number"+car.LockerId+
		"$fuel"+(car.Charge/100)+"$fuel_tank"+((car.Proto.Car_TankVolume)/100)+
		"$wear"+(car.Deterioration*100/(car.Proto.Car_MaxDeterioration)));
		if(IsFiretruck(car))
		{
			cr.Say((11),"Water: "+car.Val2+"/"+car.Val1);
		}
	}
	else if(skill==(213))
	{
		Item@tool=cr.GetItem(0,(1));
		if((@tool!=null)&&(tool.Proto.Misc_ToolSkillNum==(213)))
		RepairCar(cr,car,tool);
		else
		CarMessage(cr,car,(10249));
	}
	else if(skill==(209))
	{
		Map@map=cr.GetMap();
		
		if(((map.GetData((10))&((0x00000100)))!=0))
		{
			cr.Say((11),"Find the key!");
			return true;
		} 
		
		if(map.GetProtoId()==(221))
		{
			cr.Say((11),"You can't lockpick cars here.");
			return true;
		}
		
		if(cr.Timeout[(234)]>0)
		{
			cr.SayMsg((11),(3),(3401));
			return true;
		}
		
		if(((car.Val0&(0x0002))!=0))
		{
			cr.SayMsg((11),(3),(3440));
			return true;
		} 
		
		if(car.LockerId==0)
		{
			cr.SayMsg((11),(3),(3440));
			return true;
		}
		
		int base=cr.Param[(209)];
		uint8 mode=0;
		Item@tool=cr.GetItem(0,(1));
		if((@tool!=null)&&tool.Proto.Misc_ToolSkillNum==(209))
		{
			base+=tool.Proto.Misc_ToolSkillBonus;
			if(Random(0,30)==0)
			cr.DeleteItem(tool.GetProtoId(),1);
		} 
		
		base=(((base)>(95))?(95):(((base)<(0))?(0):(base)));
		if(base>=Random(1,100)&&car.LockerId!=1)
		{
			cr.ParamBase[(76)]+=(250-base)*(GetGvar((62001)));
			LogExperience(cr,250-base*(GetGvar((62001))),(209),"Car",car.GetProtoId());
			car.LockerId=0;
			car.LockerComplexity=0;
			cr.SayMsg((11),(3),(3443));
			AddScore(cr,(19),1);
			car.Update(); 
			
		}
		else
		{
			cr.SayMsg((11),(3),(3440));
		}
		cr.TimeoutBase[(234)]=((__FullSecond)+(((((275-cr.Param[(209)])/15)*__TimeMultiplier)+cr.Param[(395)])));
	}
	else
	{
		cr.SayMsg((11),(3),(10202));
	}
	return true;
}

void DriveToGlobal(Critter&cr,Item&car,bool requestGroup)
{
	
	GameVar@ownervar=GetLocalVar((30020),car.Id);
	ownervar=cr.Id;
	
	for(uint i=0;i<3;i++)
	{
		Item@bag=car.GetChild(i);
		if((@bag!=null))
		{
			((bag.Flags)=(bag.Flags)|((0x00000001)));
			MoveItem(bag,0,cr);
		}
	}
	((car.Flags)=(car.Flags)|((0x00000001)));
	MoveItem(car,0,cr);
	cr.TransitToGlobal(true);
	
	if(IsCaravan(car))
	cr.PlaySound("mabromaa.acm",true);
	else if(IsBarge(car))
	cr.PlaySound("gustwind.acm",true);
	else if(IsTardis(car))
	cr.PlaySound("stardis1.acm",true);
	else
	cr.PlaySound("carstart.acm",true);
}

bool IsCaravan(Item@car)
{
	return car.Proto.ProtoId==(558)||car.Proto.ProtoId==(559);
}

bool IsBarge(Item@car)
{
	return car.Proto.ProtoId==(9931);
}

bool IsFiretruck(Item@car)
{
	return car.Proto.ProtoId==(9927);
}

bool IsTardis(Item@car)
{
	return car.Proto.ProtoId==(9673);
}

bool IsCarTrunk(Item@item)
{
	return item.GetProtoId()==(801)||
	item.GetProtoId()==(818)||
	item.GetProtoId()==(819)||
	item.GetProtoId()==(817)||
	item.GetProtoId()==(809)||
	item.GetProtoId()==(603)||
	item.GetProtoId()==(604)||
	item.GetProtoId()==(9747)||
	item.GetProtoId()==(9926)||
	item.GetProtoId()==(9928)||
	item.GetProtoId()==(9930)||
	item.GetProtoId()==(9933);
}

int GetCarTrunkComplexity(Item@item)
{
	if(item.GetProtoId()==(818))
	return item.LockerComplexity;
	if(item.GetProtoId()==(819))
	return item.LockerComplexity;
	if(item.GetProtoId()==(801))
	return item.LockerComplexity;
	if(item.GetProtoId()==(817))
	return item.LockerComplexity;
	if(item.GetProtoId()==(809))
	return item.LockerComplexity;
	if(item.GetProtoId()==(9747))
	return item.LockerComplexity;
	if(item.GetProtoId()==(9926))
	return item.LockerComplexity;
	if(item.GetProtoId()==(9928))
	return item.LockerComplexity;
	if(item.GetProtoId()==(9930))
	return item.LockerComplexity;
	if(item.GetProtoId()==(9933))
	return item.LockerComplexity; 
	
	if(item.GetProtoId()==(603))
	return item.LockerComplexity;
	if(item.GetProtoId()==(604))
	return item.LockerComplexity; 
	
	return 0;
}

void MoveCars(Map&from,Map&to)
{
	array<Item@>cars;
	uint num=from.GetItems((800),cars);
	num+=from.GetItems((802),cars);
	num+=from.GetItems((805),cars);
	num+=from.GetItems((808),cars);
	num+=from.GetItems((816),cars);
	num+=from.GetItems((550),cars);
	num+=from.GetItems((558),cars);
	num+=from.GetItems((559),cars);
	num+=from.GetItems((560),cars);
	num+=from.GetItems((9746),cars);
	num+=from.GetItems((9925),cars);
	num+=from.GetItems((9927),cars);
	num+=from.GetItems((9929),cars);
	num+=from.GetItems((9931),cars);
	num+=from.GetItems((824),cars);
	num+=from.GetItems((9673),cars);
	num+=from.GetItems((831),cars);
	WLog("cars",num+" cars found");
	for(uint i=0;i<num;i++)
	{
		uint16 x=0;
		uint16 y=0;
		if(GetEntireFreeHex(to,(243),x,y))
		{
			
			Critter@dummy=from.AddNpc(1,0,0,0,null,null,"");
			DriveToGlobal(dummy,cars[i],false);
			dummy.TransitToMap(to.Id,0);
			DeleteNpc(dummy);
		}
		else
		{;};
	}
}

