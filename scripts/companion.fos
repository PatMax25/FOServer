//
// FOnline: 2238
// Rotators
//
// companion.fos
//

#include "_ai.fos"
#include "_entires.fos"
#include "_macros.fos"
#include "companion_h.fos"
#include "entire.fos"
#include "follower_common_h.fos"
#include "follower_h.fos"
#include "npc_planes_h.fos"
#include "serializator.fos"
#include "utils_h.fos"
#include "logging_h.fos"

/**
 * \~english @defgroup FollowerGroup Follower
 * Companion module. use #define DEBUG_COMPANION for debug-purposes.
 * \~ @ingroup FOnline2238
 */
/*@{*/

// #define DEBUG_COMPANION

array<uint>  Companions;

Serializator serializer;

void SpawnCompanion(Critter& cr, int, int, int)
{
    CreateCompanion();
}

void EnumerateCompanionList(Critter& cr, int, int, int)
{
    for(uint i = 0; i < Companions.length(); i++)
    {
        Critter@ npc = GetCritter(Companions[i]);
        if(valid(npc))
            {
				cr.Say(SAY_NETMSG, npc.GetMapId() + ": " + npc.HexX + "," + npc.HexY);
				npc.Say(SAY_NORM_ON_HEAD, "I have index " + i + " in Companions array");
			}
    }
}

void CreateCompanion()
{
    Map@ map = GetMapByPid(MAP_BufferMap, 0);
    uint type = Random(0, 4);
    uint bag = 1;
    uint aipack = 0;
    if(type == COMPANION_TYPE_MELEE)
    {
        bag = random_from_array(companion_bags_melee);
        aipack = AIPACKET_2238_MERC_MELEE;
    }
    else if(type == COMPANION_TYPE_SG)
    {
        bag = random_from_array(companion_bags_sg);
        aipack = AIPACKET_2238_MERC_RANGED;
    }
    else if(type == COMPANION_TYPE_BG)
    {
        bag = random_from_array(companion_bags_bg);
        aipack = AIPACKET_2238_MERC_RANGED;
    }
    else if(type == COMPANION_TYPE_ENERGY)
    {
        bag = random_from_array(companion_bags_energy);
        aipack = AIPACKET_2238_MERC_RANGED;
    }
    else if(type == COMPANION_TYPE_THROW)
    {
        bag = random_from_array(companion_bags_throw);
        aipack = AIPACKET_2238_MERC_RANGED;
    }
    Critter@ cr = AddNpc(map, random_from_array(companion_pids), 0, 0, 0, COMPANION_DIALOG_PRE_ID, "companion@CompanionInit", aipack, bag, 0, false, Random(1, 3));
    GenerateNewName(cr);
    switch(type)
    {
    case COMPANION_TYPE_MELEE:
        cr.ParamBase[SK_UNARMED] = Random(150, 175);
        break;
    case COMPANION_TYPE_SG:
        cr.ParamBase[SK_SMALL_GUNS] = Random(150, 175);
        break;
    case COMPANION_TYPE_BG:
        cr.ParamBase[SK_BIG_GUNS] = Random(150, 175);
        break;
    case COMPANION_TYPE_ENERGY:
        cr.ParamBase[SK_ENERGY_WEAPONS] = Random(150, 175);
        break;
    case COMPANION_TYPE_THROW:
        cr.ParamBase[SK_THROWING] = Random(150, 175);
        break;
    default:
        break;
    }

    for(uint i = 0; i <= ST_LUCK; i++)
        cr.ParamBase[i] = Random(6, 10);

    // perks?

    Companions.insertLast(cr.Id);
    uint MapPid = random_from_array(companion_map_pids);
    Map@ SomeMap = GetMapByPid(MapPid, 0);
    if(!valid(SomeMap))
    {
        //Log("Invalid map pid " + MapPid);
    }

    cr.TransitToMap(SomeMap.Id, 0);
    if(!MoveToFreeHex(cr))
        DeleteNpc(cr);
    #ifdef DEBUG_COMPANION
    DLog("Created companion with id " + cr.Id + " moving to map " + MapPid);
    #endif
}

bool PositionTaken(uint16 hx, uint16 hy)
{
    for(uint i = 0; i < Companions.length(); i++)
    {
        Critter@ comp = GetCritter(Companions[i]);
        if(!valid(comp))
            continue;
        uint   map;
        uint16 cx;
        uint16 cy;
        uint8  dir;
        cx = cy = dir = 0;
        comp.GetHomePos(map, cx, cy, dir);
        if(hx == cx && hy == cy)
            return true;
    }
    #ifdef DEBUG_COMPANION
    DLog("Position " + hx + "," + hy + " taken");
    #endif
    return false;
}

// New version by worldremaker
bool MoveToFreeHex(Critter& cr)
{
    if(!valid(cr))
		return false;
	
	Map@ map = cr.GetMap();
	if(!valid(map))
		return false;
		
	PutAwayItems(cr);
	
	uint8  dir;
	uint16 x, y;
	x = y = dir = 0;
	
	// New system for gathering ENT hexes on map.
	uint8[] entires;
	uint8 tablelenght = 0;
	for(uint8 i = ENTIRE_COMPANION; i < ENTIRE_COMPANION_DIRS_END; i++)
	{
		array<Entire> enter_entires;
		if(ParseEntires(map, enter_entires, i) > 0)
		{
			tablelenght++;
			entires.resize(tablelenght);
			entires[tablelenght-1] = i;
		}
	}
	//shuffle_array(entires, uint8);
		
	uint8 entireNumber = entires[(Random(0, (entires.length()-1)))];
	if(entireNumber == ENTIRE_COMPANION)
	{
		dir = Random(0, 5);
	}
	else
	{
		switch(entireNumber)
		{
			case ENTIRE_COMPANION_DIRS_BEG : dir = 0; break;
			case 103 : dir = 1; break;
			case 104 : dir = 2; break;
			case 105 : dir = 3; break;
			case 106 : dir = 4; break;
			case ENTIRE_COMPANION_DIRS_END : dir = 5; break;
			default : dir = 0; break;
		}
	}

	array<Entire> moveto_entires;
	if(ParseEntires(map, moveto_entires, entireNumber) == 0)
		return false;
	
	Entire@ entire = moveto_entires[Random(0, (moveto_entires.length() - 1))];
	if(!valid(entire))
		return false;
	
	if(GetEntireFreeHex(cr.GetMap(), entireNumber, x, y, Random(0, (moveto_entires.length() - 1))))
	{
		/*if(PositionTaken(x, y))
			continue;*/
			
		cr.SetHomePos(x, y, dir);
		return true;
	}
	return false;
}
//Old version
/* bool MoveToFreeHex(Critter& cr)
{
    Map@ map = cr.GetMap();
    if(!valid(map))
        return false;
    PutAwayItems(cr);

    uint8[] entires = { 0, 1, 2, 3, 4, 5, 6 };
    shuffle_array(entires, uint8);
    uint8  dir;
    uint16 x, y;
    x = y = dir = 0;

    for(uint i = 0; i < entires.length(); i++)
    {
        if(entires[i] == 0)
            dir = Random(0, 5);
        else
            dir = entires[i] - 1;

        if(GetEntireFreeHex(cr.GetMap(), ENTIRE_COMPANION + entires[i], x, y))
        {
            if(PositionTaken(x, y))
                continue;

            #ifdef DEBUG_COMPANION
            DLog("Found home position " + x + "," + y + " ,walking there now.");
            #endif
            cr.SetHomePos(x, y, dir);
            return true;
        }
    }
    return false;
}*/

// New version by worldremaker
void MoveCompToFreeHex(Critter& cr)
{
    if(!valid(cr))
		return;
	
	Map@ map = cr.GetMap();
	if(!valid(map))
		return;
		
	PutAwayItems(cr);
	
	uint8  dir;
	uint16 x, y;
	uint EntireSelector;
	x = y = dir = 0;
	
	// New system for gathering ENT hexes on map.
	uint8[] entires;
	uint8 tablelenght = 0;
	for(uint8 i = ENTIRE_COMPANION; i < ENTIRE_COMPANION_DIRS_END; i++)
	{
		array<Entire> enter_entires;
		if(ParseEntires(map, enter_entires, i) > 0)
		{
			tablelenght++;
			entires.resize(tablelenght);
			entires[tablelenght-1] = i;
		}
	}
	//shuffle_array(entires, uint8);
		
	uint8 entireNumber = entires[(Random(0, (entires.length()-1)))];
	if(entireNumber == ENTIRE_COMPANION)
	{
		dir = Random(0, 5);
	}
	else
	{
		switch(entireNumber)
		{
			case ENTIRE_COMPANION_DIRS_BEG : dir = 0; break;
			case 103 : dir = 1; break;
			case 104 : dir = 2; break;
			case 105 : dir = 3; break;
			case 106 : dir = 4; break;
			case ENTIRE_COMPANION_DIRS_END : dir = 5; break;
			default : dir = 0; break;
		}
	}

	array<Entire> moveto_entires;
	if(ParseEntires(map, moveto_entires, entireNumber) == 0)
		return;
	
	EntireSelector = Random(0, (moveto_entires.length() - 1));
	Entire@ entire = moveto_entires[EntireSelector];
	if(!valid(entire))
		return;
	
	if(GetEntireFreeHex(cr.GetMap(), entireNumber, x, y, EntireSelector))
	{
		/*if(PositionTaken(x, y))
			continue;*/
			
		cr.SetHomePos(x, y, dir);				
	}
}

//old version
/*void MoveCompToFreeHex(Critter& cr)
{
    Map@ map = cr.GetMap();
    if(!valid(map))
        return;
    PutAwayItems(cr);

    uint8[] entires = { 0, 1, 2, 3, 4, 5, 6 };
    shuffle_array(entires, uint8);
    uint8  dir;
    uint16 x, y;
    x = y = dir = 0;

    for(uint i = 0; i < entires.length(); i++)
    {
        if(entires[i] == 0)
            dir = Random(0, 5);
        else
            dir = entires[i] - 1;

        if(GetEntireFreeHex(cr.GetMap(), ENTIRE_COMPANION + entires[i], x, y))
        {
            if(PositionTaken(x, y))
                continue;

            #ifdef DEBUG_COMPANION
            DLog("Found home position " + x + "," + y + " ,walking there now.");
            #endif
            cr.SetHomePos(x, y, dir);
            return;
        }
    }
    //return false;
}*/

int _PlaneEnd(Critter& cr, NpcPlane& plane, int reason, Critter@ someCr, Item@ someItem)
{
    if(plane.Identifier == PLANE_GOTO_EXIT)
    {
        if(reason == REASON_SUCCESS)
        {
            cr.TransitToGlobal(false);
            return PLANE_DISCARD;
        }
        // If the exit grid is blocked try to find grid close to the entire 0
        else if(reason == REASON_HEX_BUSY_RING || reason == REASON_HEX_BUSY)
        {
            uint16 hx = plane.Walk_HexX;
            uint16 hy = plane.Walk_HexY;
            Map@   map = cr.GetMap();
            if(valid(map) && map.GetEntireCoords(0, 0, hx, hy) && FindPreferredGridApprox(map, hx, hy))
            {
                plane.Walk_HexX = hx;
                plane.Walk_HexY = hy;
            }
            else
                return PLANE_DISCARD;
        }
    }
    return PLANE_RUN_GLOBAL;
}

void ForceUpdate(Critter& cr, int, int, int)
{
    array<uint> data;
    data.insertLast(1);
    e_UpdateCompanions(data);
}

uint e_UpdateCompanions(array<uint>@ values)
{
    #ifdef DEBUG_COMPANION
    DLog("Updating companions...");
    #endif

    if(Random(0, 1) == 0)
        CreateCompanion();

    for(uint i = 0; i < Companions.length(); i++)
    {
        Critter@ cr = GetCritter(Companions[i]);
        if(!valid(cr))
        {
            #ifdef DEBUG_COMPANION
            DLog(Companions[i] + " is no longer valid, removing from array.");
            #endif
            Companions.removeAt(i);
        }
        #ifdef DEBUG_COMPANION
        else
        {
            DLog(Companions[i] + ":");
            DLog("   Map Id: " + cr.GetMapId());
            DLog("   x: " + cr.HexX);
            DLog("	 y: "+ cr.HexY);
        }
        #endif
    }

    for(uint i = 0; i < Companions.length(); i++)
    {
        Critter@ cr = GetCritter(Companions[i]);
        if(!valid(cr))
            continue;

        if(Random(0, 2) == 0)
        {
            if(cr.GetMapId() == 0)             // Enter town
            {
                Map@ map = GetMapByPid(random_from_array(companion_map_pids), 0);
                cr.TransitToMap(map.Id, ENTIRE_DEFAULT);
                #ifdef DEBUG_COMPANION
                DLog(cr.Id + " is entering town " + map.Id);
                #endif
                if(!MoveToFreeHex(cr))
                    DeleteNpc(cr);
            }
            else             // Leave town
            {
                uint16 hx = cr.HexX;
                uint16 hy = cr.HexY;
                if(cr.GetMap().GetProtoId() == MAP_SanFranChina)
				{
					hx = Random(234, 251);
					switch(hx)
					{
						case 234: hy = 458 ; break;
						case 235: hy = 458 ; break;
						case 236: hy = 457 ; break;
						case 237: hy = 457 ; break;
						case 238: hy = 456 ; break;
						case 239: hy = 456 ; break;
						case 240: hy = 455 ; break;
						case 241: hy = 455 ; break;
						case 242: hy = 454 ; break;
						case 243: hy = 454 ; break;
						case 244: hy = 453 ; break;
						case 245: hy = 453 ; break;
						case 246: hy = 452 ; break;
						case 247: hy = 452 ; break;
						case 248: hy = 451 ; break;
						case 249: hy = 451 ; break;
						case 250: hy = 450 ; break;
						case 251: hy = 450 ; break;
					}
					AddWalkPlane(cr, 60, PLANE_GOTO_EXIT, 0, hx, hy, 0xFF, false, 1);
                    cr.SetEvent(CRITTER_EVENT_PLANE_END, "_PlaneEnd");
                    #ifdef DEBUG_COMPANION
                    DLog(cr.Id + " is leaving town " + cr.GetMapId() + ", walking to " + hx + "," + hy);
                    #endif
				}
				else if(cr.GetMap().GetProtoId() == MAP_Redding)
				{
					switch(Random(1, 7))
					{
						case 1:
							hx = 90;
							hy = 172;
							break;
						case 2:
							hx = 91;
							hy = 174;
							break;
						case 3:
							hx = 92;
							hy = 175;
							break;
						case 4:
							hx = 93;
							hy = 177;
							break;
						case 5:
							hx = 94;
							hy = 178;
							break;
						case 6:
							hx = 95;
							hy = 180;
							break;
						case 7:
							hx = 96;
							hy = 181;
							break;
					}
					AddWalkPlane(cr, 60, PLANE_GOTO_EXIT, 0, hx, hy, 0xFF, false, 1);
                    cr.SetEvent(CRITTER_EVENT_PLANE_END, "_PlaneEnd");
                    #ifdef DEBUG_COMPANION
                    DLog(cr.Id + " is leaving town " + cr.GetMapId() + ", walking to " + hx + "," + hy);
                    #endif
				}
				else if(FindPreferredGridApprox(cr.GetMap(), hx, hy))
                {
                    AddWalkPlane(cr, 60, PLANE_GOTO_EXIT, 0, hx, hy, 0xFF, false, 1);
                    cr.SetEvent(CRITTER_EVENT_PLANE_END, "_PlaneEnd");
                    #ifdef DEBUG_COMPANION
                    DLog(cr.Id + " is leaving town " + cr.GetMapId() + ", walking to " + hx + "," + hy);
                    #endif
                }
				else
                {
                    #ifdef DEBUG_COMPANION
                    DLog(cr.Id + ": can't find any exit grid nearby on map " + cr.GetMapId());
                    #endif
                }

            }
        }
    }
	
	/*Map@ SanFran = GetMapByPid(MAP_SanFranChina, 0);
	if(valid(SanFran))
	{
		array<Critter@> comps;
		SanFran.GetCritters(0, FIND_LIFE | FIND_ONLY_NPC, comps);
	
		for(uint i = 0; i < comps.length(); i++)
		{
			if(Random(0, 2) == 0 && comps[i].Param[ST_DIALOG_ID] == COMPANION_DIALOG_PRE_ID)
			{
				uint16 hx = comps[i].HexX;
                uint16 hy = comps[i].HexY;
				hx = Random(234, 251);
				switch(hx)
				{
					case 234: hy = 458 ; break;
					case 235: hy = 458 ; break;
					case 236: hy = 457 ; break;
					case 237: hy = 457 ; break;
					case 238: hy = 456 ; break;
					case 239: hy = 456 ; break;
					case 240: hy = 455 ; break;
					case 241: hy = 455 ; break;
					case 242: hy = 454 ; break;
					case 243: hy = 454 ; break;
					case 244: hy = 453 ; break;
					case 245: hy = 453 ; break;
					case 246: hy = 452 ; break;
					case 247: hy = 452 ; break;
					case 248: hy = 451 ; break;
					case 249: hy = 451 ; break;
					case 250: hy = 450 ; break;
					case 251: hy = 450 ; break;
				}
				AddWalkPlane(comps[i], 60, PLANE_GOTO_EXIT, 0, hx, hy, 0xFF, false, 1);
				comps[i].SetEvent(CRITTER_EVENT_PLANE_END, "_PlaneEnd");
				#ifdef DEBUG_COMPANION
				DLog(comps[i].Id + " is leaving town " + comps[i].GetMapId() + ", walking to " + hx + "," + hy);
				#endif
			}
		}
	}*/
	
    if(valid(values) && values.length() > 0 && values[0] == 1)
        return 0;
    return COMPANIONS_UPDATE_INTERVAL;
}

void InitCompanions()
{
    if(IS_FIRST_TIME)
    {
        for(uint i = 0; i < COMPANION_INITIAL_SPAWNS; i++)
            CreateCompanion();
        CreateTimeEvent(AFTER(COMPANIONS_UPDATE_INTERVAL), "e_UpdateCompanions", true);
    }
    else
        LoadCompanionData();
}

void LoadCompanionData()
{
    serializer.Clear();
    if(!serializer.Load("companions"))
        return;
    serializer.Get(Companions);
}

void SaveCompanionData()
{
    serializer.Clear();
    serializer.Set(Companions).Save("companions");
}


void _Idle(Critter& cr)
{
    if(Random(0, 99) == 0)
        MoveToFreeHex(cr);
    else
        cr.Wait(1000);
}

void CompanionInit(Critter& cr, bool firstTime)
{
    cr.SetEvent(CRITTER_EVENT_IDLE, "_Idle");
}

string GetPlace(uint id)
{
    switch(id % 10)
    {
    case 0:
        return "Den";
    case 1:
        return "Modoc";
    case 2:
        return "Redding";
    case 3:
        return "Klamath";
    case 4:
        return "Broken Hills";
    case 5:
        return "Gecko";
    case 6:
        return "Necropolis";
    case 7:
        return "Hub";
    case 8:
        return "Shady Sands";
    case 9:
        return "Glow";
    default:
        return "";
    }
    return "";
}

void dlg_ShowPreInfo(Critter& player, Critter@ npc, string@ text)
{
    if(!IS_DIALOG_GENERATED(text))
        return;

    text += "$place" + GetPlace(npc.Id);
    text += "$name" + GetStoredFirstName(npc);
	string money;
	string prefix;
	switch(npc.Param[ST_DESCRIPTION2])
	{
	case 1: money = "Dollars";
	case 2: money =  "Chips";
	case 3: money =  "Scrips";
	case 4: money =  "Pounds";
	case 5: money =  "Rings";
	default: money =  "Caps";
	}
	switch(npc.Param[ST_DESCRIPTION2])
	{
	case 1: prefix = "Enclave ";
	case 2: prefix =  "Memory ";
	case 3: prefix =  "NCR ";
	case 4: prefix =  "Vault City ";
	case 5: prefix =  "Pull ";
	default: prefix = "Bottle ";
	}
	text += ("$prefix" + prefix);
	text += ("$money" + money);
}
void reroll_comapanion(Critter& cr)
{
	Companions.insertLast(cr.Id);
}
void r_BefriendCompanion(Critter& player, Critter@ npc)
{
    uint index = FindInArray(Companions, npc.Id);
    Companions.removeAt(index);
    MakeFollower(npc, FOLLOWER_TYPE_COMPANION, "follower@FollowerBaseInit", COMPANION_DIALOG_ID, player, true);
    npc.SetEvent(CRITTER_EVENT_FINISH, "_FinishCompanionOff");
}

void to_shopkeeper(Critter& player, Critter@ npc)
{
	if(player.GetMap().GetProtoId() == MAP_VaultCityDowntown)
	makeshopkeeper(npc);
	else npc.Say(SAY_NORM_ON_HEAD, "We are not in Vault City to start business");
	//npc.Say(SAY_NORM_ON_HEAD, "There is crysis, better do not make business");
}

void to_faction(Critter& player, Critter@ npc)
{
	npc.ParamBase[ST_TEAM_ID] = player.Param[ST_TEAM_ID];
}

void makeshopkeeper(Critter@ npc)
{
	if(npc.GetMap().GetProtoId() == MAP_VaultCityDowntown)
	{
	npc.Say(SAY_NORM_ON_HEAD, "Let's start business, follow me!");
	npc.ParamBase[ST_NPC_ROLE] = 211;
	npc.ParamBase[MODE_NO_LOOT] = 1;
	npc.ParamBase[MODE_NO_STEAL] = 1;
	npc.ParamBase[ST_DESCRIPTION2] = 7;
	npc.ParamBase[ST_VAR7] = Random(1,255);
	npc.ParamBase[ST_VAR8] = Random(1,255);
	npc.ParamBase[ST_VAR9] = Random(1,255);
	npc.FollowerVarBase[FV_MODE] = FOLLOWMODE_GUARD;
	npc.ParamBase[MODE_INVULNERABLE] = 1;
	npc.SetEvent(CRITTER_EVENT_ATTACK, "_Trader");
	uint8  dir;
    uint16 x, y;
    x = y = dir = 0;
    dir = Random(0, 5);
	int entires2 = npc.GetMap().CountEntire(150);
	npc.GetMap().GetEntireCoords(150, Random(0,entires2), x, y);

	//x += Random(0,12);
	//y += Random(1,12);
			// bool AddWalkPlane(Critter& npc, uint priory, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint8 cut)
	//AddWalkPlane(cr, 0, x, y, dir, true, 0);
    npc.SetHomePos(x, y, dir);
	array<uint> filldata = { npc.Id };
	CreateTimeEvent(AFTER(REAL_SECOND(100)), "e_check", filldata, false);
	}
}

bool _Trader(Critter & mob,Critter & target)
{
	if(mob.ParamBase[MODE_INVULNERABLE]>0)
		ClearEnemyStacksOnMap(mob.GetMap());
	return false;
}

uint e_check(array<uint>@ mobdata)
{
	Critter@ cr = GetCritter(mobdata[0]);
	if(cr.GetMap().GetProtoId() == MAP_VaultCityDowntown)
	{
	array<uint> filldata = { cr.Id };
	return CreateTimeEvent(AFTER(REAL_SECOND(100)), "e_check", filldata, false);
	}
	else
	{
	cr.ParamBase[ST_NPC_ROLE] = 0;
	cr.ParamBase[MODE_NO_LOOT] = 0;
	cr.ParamBase[MODE_NO_STEAL] = 0;
	cr.ParamBase[MODE_INVULNERABLE] = 0;
	cr.ParamBase[ST_DESCRIPTION2] = 0;
	
	return 0;
	}
}
void setprice(Critter& player, Critter@ companion)
{
	player.ParamBase[ST_VAR0] = companion.Id;
	player.ShowScreen(SCREEN_BAG, 0, "whatitem");
	/*array<Item@> items;
    uint         u = player.GetItems(SLOT_HAND1,items);
    for(uint i = 0; i < u; i++)
    {
        Item@ item = items[i];
		if(item.CritSlot == SLOT_HAND1)
		MoveItems(items, companion);
	}*/
}

//bool TryRechargeItem(Critter& cr, Item& item)
//{
   // cr.ShowScreen(SCREEN_BAG, 0, "RechargeCallback");
   // return true;
//}

void whatitem(Critter& cr, uint n, string& s)
{
	Item@ item = GetItem(n);
	cr.ParamBase[ST_VAR1] = item.Id;
	cr.ShowScreen(SCREEN_SAY, 0, "whatprice");
   // Item@ item = GetItem(cr.Param[ST_VAR0]);
   /* array<Item@> items;

    uint         u = cr.GetItems(0,items);
	int newprice = 0;
	StrToInt(s, newprice);
	if(newprice<0)
	return;
    for(uint i = 0; i < u; i++)
    {
        Item@ item = items[i];
		if(item.CritSlot == SLOT_HAND1)
		item.Cost = newprice;
	}*/
    #ifdef __DEBUG__
    cr.Say(SAY_NETMSG, "items " + cr.Param[ST_VAR0] + " and " + n);
    #endif
   // if(!valid(with_item))
       // return;

   // if(item.Accessory != ACCESSORY_CRITTER || with_item.Accessory != ACCESSORY_CRITTER ||
       //item.CritId != cr.Id || with_item.CritId != cr.Id)
       // return;
}

void whatprice(Critter& cr, uint n, string& s)
{
	int newprice = 0;
	StrToInt(s, newprice);
	if(newprice<0)
	return;
	Critter@ companion = GetCritter(cr.Param[ST_VAR0]);
	Item@ item = GetItem(cr.Param[ST_VAR1]);
	int baseprice = item.GetCost();

	array<Item@> items = { item };
	item.Val9 = newprice;
	item.Cost = 1;
	MoveItems(items, companion);
	//SetLvar(item.Id , LVAR_economy_prices, newprice);
	//BaseItemValue(item,newprice);

}

void _FinishCompanionOff(Critter& cr, bool deleted)
{
    string str = "Hey! Mayck you remember how you wanted to see some uberhidden glitch that makes companions disapear? Well, I found it!";
    str = str + "The companion's id was " + cr.Id + ((deleted) ? " and was deleted." : ("but wasn't deleted for some wierd reason."));
    Map@   map = cr.GetMap();
    if(valid(map))
    {
        str = str + " The map's id he was on was " + map.Id + " btw.";
    }
    str = str + " The master's id is " + cr.Param[FV_MASTER] + ", mode was " + cr.Param[FV_MODE] + " and attack policy " + cr.Param[FV_ATTACK_POLICY] + ". Oh, I almost forgot about loyality " + cr.Param[FV_LOYALITY] + " and respawn place " + cr.Param[FV_RESPAWN_PLACE] + " or base " + cr.Param[FV_RESPAWN_BASE_ID] + ". Well that's it... see ya.";
    ILog("debug", str);
}

/*@}*/