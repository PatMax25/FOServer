                                                                                                                                                                                                                                                                                                

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                   

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}                                                                                               

shared interface IBroadcastBuffer
{
	string GetString();
	
	void SetType(int type);
	int GetType();
	void SetTime(int time);
	int GetTime();
	void SetSetup(int setup);
	int GetSetup();
	void SetMessage(string message);
	void AppendMessage(string message);
	string GetMessage();
	void SetData(array<int>data);
	
	void SetStart(int time);
	void ResetStart();
	
	void SetLifetime(int lifetime);
	
	void SetFilters(int filters);
	void SetFilter(int filter);
	void SetFilter(int filter,int data);
	void UnsetFilter(int filter);
	bool Filter(int filter);
	bool CheckFilters(Critter@player);
	
	bool Send(Critter@player);
	uint SendToAll();
	
	void SetGM(int id);
	void UnsetGM();
	
	void ToDelete();
};  

import void UpdateBroadcast()from"broadcast";

import IBroadcastBuffer@AddBroadcastBuffer(int type,int time,int setup,string&message,array<int>&data,int lifetime,int flags)from"broadcast";
import void DumpBroadcastBuffer(Critter@player)from"broadcast";
import uint FindBroadcastBufferByType(int type,array<IBroadcastBuffer@>&buf)from"broadcast";
import uint FindBroadcastBufferByGM(int id,array<IBroadcastBuffer@>&buf)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int&time)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message)from"broadcast"; 

import void Broadcast_TownControl_Set(string&message,int location,int time,int faction)from"broadcast";
import void Broadcast_TownControl_Set(int location,int time,int faction,Critter&player)from"broadcast";
import void Broadcast_TownControl_Stop(int location)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Influence(int location,int time,string&message)from"broadcast"; 

import uint Broadcast_RequestHelp(Critter@player,string&message)from"broadcast";
import void Broadcast_CheckRequestHelpBuffer(Critter@gm)from"broadcast";
import void Broadcast_DumpRequestHelpBuffer(Critter@gm)from"broadcast"; 

import void baseControl(string msg,int mapId,uint time)from"broadcast";
import void baseControlRadio(string msg,uint time,int mapId,uint factionId)from"broadcast"; 

import void ServerEventMSG(uint time,string msg)from"broadcast"; 

import IBroadcastBuffer@GetEventCountDownBuffer(int location,int type)from"broadcast";
import void ServerEventCNTSet(string message,uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTSet(uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTStop(uint location,uint type)from"broadcast";                   

shared interface IConfigVar
{
	string GetName();
	string GetValue();
	array<string>GetValueAsArray();
	array<string>GetValueAsArray(string&delimeter);
	void SetValue(int val);
	void SetValue(uint val);
	void SetValue(string&val);
	void SetValue(array<string>&val);
	void SetValue(array<string>&val,string&delimeter);
};

shared interface IConfigSection
{
	string GetName();
	bool AddVar(string&var,string&val);
	bool DeleteVar(string&var);
	bool DeleteVar(string&var,bool caseSensitive);
	IConfigVar@GetVar(string&var);
	IConfigVar@GetVar(string&varname,bool caseSensitive);
	void GetVars(array<string>&list);
	bool SetVar(string&varname,string val);
	bool VarExists(string&var);
	bool VarExists(string&var,bool caseSensitive);
};

shared interface IConfigFile
{
	bool IsVirtual();
	string GetName();
	bool AddSection(string&section);
	IConfigSection@GetSection(string&section);
	IConfigSection@GetSection(string&sectioname,bool caseSensitive);
	void GetSections(array<string>&list);
	bool SectionExists(string&section);
	bool SectionExists(string&section,bool caseSensitive);
};  

import IConfigFile@NewConfig(string&filename)from"config_file";
import bool LoadConfig(string&filename)from"config_file";
import bool SaveConfig(string&filename)from"config_file";
import bool UnloadConfig(string&filename)from"config_file";

import IConfigFile@GetConfigFile(string&filename)from"config_file";
import IConfigFile@GetConfigFile(string&filename,bool caseSensitive)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname,bool caseSensitive)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import string@GetConfigValue(string&filename,string&section,string@varname)from"config_file";
import string@GetConfigValue(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import bool SetConfigValue(string&filename,string&sectioname,string@varname,string&value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,bool value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,int value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,uint value)from"config_file

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                      

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}      

import bool IsBigFaction(uint faction)from"factions";
import bool IsTheSameFaction(uint player1Id,uint player2Id)from"factions";
import void _Resign(uint playerId)from"factions"; 

import int RegisterFaction(uint id,const string@name,bool playerDriven)from"factions";
import int RegisterFaction(const string@name,bool playerDriven,uint&out id)from"factions";

import bool RemoveFaction(uint faction)from"factions"; 

import bool GetFactionNameStr(uint faction,string&out name)from"factions";
import bool GetFactionId(const string@name,uint&out id)from"factions"; 

import bool IsFactionNameFree(const string&)from"factions";
import bool IsFactionNameValid(const string&)from"factions";

import bool IsGang(uint faction)from"factions";

import uint16 GetFactionRadioChannel(uint faction)from"factions";
import void SetFactionRadioChannel(uint faction,uint16 channel)from"factions"; 

import int AddPlayer(uint faction,uint id)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)from"factions"; 

import int RemovePlayer(uint faction,uint id)from"factions"; 

import int GetFaction(uint faction,uint id)from"factions";
import int GetStatus(uint faction,uint id)from"factions";
import int GetRank(uint faction,uint id)from"factions";
import bool IsMember(uint faction,Critter&cr)from"factions";
import bool IsMemberOffline(uint faction,uint id)from"factions";
import bool StoredInDB(uint faction,uint id)from"factions";
import uint GetRecordsCount(uint faction)from"factions";
import uint GetMembersCount(uint faction)from"factions";
import uint GetMembers(uint faction,array<uint>&ids)from"factions";
import uint GetLeaderId(uint faction)from"factions";
import void SetLeaderId(uint faction,uint id)from"factions";
import uint GetClaimId(uint faction)from"factions";
import void SetClaimId(uint faction,uint id)from"factions";
import uint GetLeaderTime(uint faction)from"factions";
import void SetLeaderTime(uint faction,uint time)from"factions";
import uint GetClaimTime(uint faction)from"factions";
import void SetClaimTime(uint faction,uint time)from"factions";
import uint GetFactionLocationId(uint faction)from"factions";
import bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)from"factions";

import void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)from"factions";

import uint GetFactionScore(uint faction)from"factions";
import void ModifyFactionScore(uint faction,int amount)from"factions";
import void UpdateLastUsed(uint faction)from"factions";
import uint GetFactionsCount()from"factions"; 

import int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)from"factions";
import int GetNextId(uint faction,uint currId,bool members,uint&out nextId)from"factions";
import int GetFirstId(uint faction,bool members,uint&out id)from"factions"; 

import int ModifyRank(uint faction,uint id,uint newRank)from"factions";
import int ModifyStatus(uint faction,uint id,uint newStatus)from"factions";
import int ModifyFaction(uint faction,uint id,uint newFaction)from"factions"; 

import int InvitePlayer(uint faction,uint playerId)from"factions";
import int ConfirmInvitation(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId,bool applyModifiers)from"factions";
import int ChangeRank(uint faction,uint playerId,uint newRank)from"factions";
import int ExpelMember(uint faction,uint playerId)from"factions";
import int ExpelMember(uint faction,uint playerId,bool applyModifiers)from"factions";

import uint GetPlayerFaction(uint playerId)from"factions";
import uint GetPlayerRank(uint playerId)from"factions"; 

import void AddFactionNews(uint faction,uint master,uint slave,uint type)from"factions";
import bool GetFactionNews(uint faction,uint index,uint&out master,uint&out slave,uint&out type,uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)from"factions";
import uint GetFactionNewsCount(uint faction)from"factions"; 

import uint CheckFactionBaseCoords(uint x,uint y)from"factions";

import bool SaveFactionData(uint faction)from"factions";
import bool FactionExists(uint faction)from"factions"; 

import uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)from"factions";   

import void InitFactions()from"factions";
import void UpdateFactionsInfo(Critter&cr)from"factions";
import IFaction@GetFaction(int)from"factions";
import IFaction@GetFaction(const string&)from"factions";
import IFaction@GetFactionByIdx(int idx)from"factions";
import void UpdateGroupVars(Critter&player)from"factions";     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);
	void settag(int index,int tag,int r,int g,int b);
	int get_tag(int index);
	int get_b(int index);
	int get_r(int index);
	int get_g(int index);  
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
};                                                                                                                                                                                                                                                                                                                                                                                                                                                          

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                                                                                                                                                                                                                                                        

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                  

import string GetRandomFirstName(uint gender)from"npc_names";
import string GetRandomFirstName(uint gender,int&index)from"npc_names";

import string GetRandomNick(uint gender)from"npc_names";

import string GetRandomSurname()from"npc_names";

import string GetRandomFullName(uint gender)from"npc_names";
import string GetRandomFullName(uint gender,int&firstName,bool&genderNick,int&nick,int&surname)from"npc_names"; 

import string GetFirstName(uint gender,uint index)from"npc_names";
import string GetNick(uint gender,uint index,bool genderNick)from"npc_names";
import string GetSurname(uint index)from"npc_names";  

import void LogNames(bool printNames)from"npc_names

shared class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(!IsAnyData(name))
		return false;
		if(!GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const bool&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const string&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const float&value)
	{
		int dummy=FloatToInt(value);
		return Set(dummy);
	}
	
	Serializator@opShl(const float&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const array<int64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<bool>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<bool>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<string>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<string>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<float>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(FloatToInt(values[i]));
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<float>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Critter&cr)
	{
		return Set(cr);
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Item&item)
	{
		return Set(item);
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@opShr(bool&value)
	{
		return Get(value);
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@opShr(string&str)
	{
		return Get(str);
	}
	
	Serializator@Get(float&value)
	{
		int dummy=0;
		Get(dummy);
		value=IntToFloat(dummy);
		return this;
	}
	
	Serializator@opShr(float&value)
	{
		return Get(value);
	}
	
	Serializator@Get(array<int64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<float>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		{
			int dummy=0;
			Get(dummy);
			values[i]=IntToFloat(dummy);
		}
		return this;
	}
	
	Serializator@opShr(array<float>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<bool>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<bool>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<string>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<string>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@opShr(Critter@&cr)
	{
		return Get(cr);
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	Serializator@opShr(Item@&item)
	{
		return Get(item);
	}
	
	array<uint8>Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};   

import bool AddToFollowerlist(Critter&master,Critter&follower)from"follower_common";  

uint e_DisableBagRefresh(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))
	{
		cr.SetBagRefreshTime((uint(-1)));
		{;};
	}
	return 0;
}

void NerfWeaponSkills(Critter&cr,uint primary,uint secondary)
{
	for(uint i=(200);i<=(205);i++)
	{
		if(i!=primary&&i!=secondary)
		{
			if(i==(201))
			cr.ParamBase[i]=-80;
			else
			cr.ParamBase[i]=-30;
		}
	}
}

shared interface IMerc
{
	IMerc@Dialog(int dialogid);
	IMerc@Script(string&script);
	IMerc@AI(int aipack);
	IMerc@Bag(int bagid);
	IMerc@Team(int teamid);
	IMerc@Level(int level);
	IMerc@PID(int pid);
	IMerc@PID(array<int>npcpids);
	IMerc@Type(int type);
	IMerc@ID(int id);
	IMerc@Cost(int cost);
	IMerc@StartCost(int cost);
	IMerc@SellPrice(int price);
	IMerc@DynamicPrice();
	
	bool IsDynamicPrice();
	int GetDialog();
	string@GetScript();
	int GetAIPack();
	int GetBagID();
	int GetBagValue();
	int GetTeamID();
	int GetLevel();
	int GetLastPID();
	array<int>GetPIDs();
	uint GetType();
	int8 GetBaseType();
	int GetCost();
	int GetSellPrice();
	uint GetID();
	string@GetName();
	
	bool Spawn(Critter&master);
}; 

class CMerc:IMerc
{
	bool dynamicprice;
	int dir;
	int dialogid;
	string script;
	int aipack;
	int8 basetype;
	int bagid;
	int teamid;
	int level;
	int respawnTime;
	array<int>npcpids;
	int npcpid;
	int cost;
	int bagvalue;
	int startcost;
	uint type;
	int sellprice;
	uint id;
	string name;
	
	Serializator serializer;
	
	CMerc()
	{
		dir=Random(0,6);
		dialogid=(9310);
		script="follower@critter_init";
		basetype=-1;
		aipack=0;
		bagid=0;
		teamid=0;
		level=1;
		respawnTime=(-2);
		cost=0;
		sellprice=0;
		id=0;
		type=0;
		dynamicprice=false;
	}
	
	bool Spawn(Critter&master)
	{
		npcpid=(npcpids[Random(0,npcpids.length()-1)]);
		
		Critter@SpawnedNpc=AddNpc(master.GetMap(),npcpid,master.HexX,master.HexY,dir,dialogid,script,aipack,bagid,teamid,false,level);
		if((@SpawnedNpc!=null))
		{
			SpawnedNpc.FollowerVarBase[(929)]=(master.Param[(106)]);
			SpawnedNpc.FollowerVarBase[(932)]=type;
			SpawnedNpc.FollowerVarBase[(930)]=id;
			basetype=SpawnedNpc.CrType;
			SpawnedNpc.FollowerVarBase[(933)]=master.Id;
			SpawnedNpc.ParamBase[(84)]=respawnTime;
			
			if(type==(3)||type==(4)||type==(2))
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			switch(type)
			{
				case(6):
				case(12):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(7):
				case(13):
				NerfWeaponSkills(SpawnedNpc,(200),0);
				break;
				case(8):
				case(11):
				NerfWeaponSkills(SpawnedNpc,(201),0);
				break;
				case(5):
				case(10):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(9):
				NerfWeaponSkills(SpawnedNpc,(202),0);
				break;
				default:
				break;
			}
			
			SpawnedNpc.ChangeCrType(SpawnedNpc.ParamBase[(112)]);
			
			CreateTimeEvent(((__FullSecond)+(((3)*60))),"e_DisableBagRefresh",SpawnedNpc.Id,true);
			ArmBestWeapon(SpawnedNpc);
			
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(306)]+=1;
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(315)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(405)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(309)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(313)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(330)]+=1;
			
			for(uint i=0;i<=6;i++)SpawnedNpc.ParamBase[i]+=Random(-1,1);   
			
			SpawnedNpc.ParamBase[(7)]+=(Random(0,20));
			SpawnedNpc.ParamBase[(7)]-=10;
			
			SpawnedNpc.ParamBase[(72)]=SpawnedNpc.Param[(7)];
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			if(!AddToFollowerlist(master,SpawnedNpc))
			Log("Failed to assign merc's id to master("+master.Id+") followerlist");
			
			this.name=GenerateNewName(SpawnedNpc);
			
			if(this.name.length()>0)
			SetLexem(SpawnedNpc,"$name",this.name);
			
			return true;
		}
		else
		{
			Log("Failed to create mercenary of PID "+npcpid+" with mercid "+id+" on map id "+master.GetMapId());
			master.Say((11),"Failed to create mercenary, report this error immediately");
		} 
		
		return false;
	}
	
	IMerc@Dialog(int dialogid)
	{
		this.dialogid=dialogid;
		return this;
	}
	
	IMerc@Script(string&script)
	{
		this.script=script;
		return this;
	}
	
	IMerc@AI(int aipack)
	{
		this.aipack=aipack;
		return this;
	}
	
	IMerc@Bag(int bagid)
	{
		this.bagid=bagid;
		
		bagvalue=0;
		array<uint>mincounts,maxcounts;
		array<int>slots;
		array<uint16>pids;
		uint num=GetBagItems(bagid,pids,mincounts,maxcounts,slots);
		uint cost=0;
		for(uint i=0;i<num;i++)
		{
			bagvalue+=BaseItemValue(pids[i],7,80,true)*(mincounts[i]+maxcounts[i])/2;
		}
		
		return this;
	}
	
	IMerc@Team(int teamid)
	{
		this.teamid=teamid;
		return this;
	}
	
	IMerc@Level(int level)
	{
		this.level=level;
		return this;
	}
	
	IMerc@PID(int npcpid)
	{
		this.npcpids.insertLast(npcpid);
		return this;
	}
	
	IMerc@PID(array<int>npcpids)
	{
		for(uint i=0;i<npcpids.length();i++)
		{
			this.npcpids.insertLast(npcpids[i]);
		}
		return this;
	}
	
	IMerc@Type(int type)
	{
		this.type=type;
		return this;
	}
	
	IMerc@ID(int id)
	{
		this.id=id;
		return this;
	}
	
	IMerc@DynamicPrice()
	{
		dynamicprice=true;
		return this;
	}
	
	bool IsDynamicPrice()
	{
		return dynamicprice;
	}
	
	IMerc@StartCost(int cost)
	{
		serializer.Clear();
		if(!serializer.Load("merc_"+id)||GetGvar((12000))==0)
		{
			this.cost=cost;
			serializer.Clear();
			serializer.Set(this.cost).Save("merc_"+id);
		}
		else
		serializer.Get(this.cost);
		
		return this;
	}
	
	IMerc@Cost(int cost)
	{
		{;};
		this.cost=cost;
		
		serializer.Clear();
		serializer.Set(this.cost).Save("merc_"+id);
		
		return this;
	}
	
	IMerc@SellPrice(int sellprice)
	{
		this.sellprice=sellprice;
		return this;
	}
	
	int GetDialog(){return dialogid;}
	string@GetScript(){return script;}
	int8 GetBaseType(){return basetype;}
	int GetAIPack(){return aipack;}
	int GetBagID(){return bagid;}
	int GetTeamID(){return teamid;}
	int GetLevel(){return level;}
	int GetLastPID(){return npcpid;}
	array<int>GetPIDs(){return npcpids;}
	int GetCost(){return cost;}
	int GetBagValue(){return bagvalue;}
	int GetSellPrice(){return sellprice;}
	uint GetID(){return id;}
	uint GetType(){return type;}
	string@GetName(){return name;}
}; 

import bool IsFollowing(Critter&critter)from"follower_common";
import bool IsOwnersFollower(Critter&owner,Critter&critter)from"follower_common";
import bool CanHaveMoreFollowers(Critter&player,uint FollowerType)from"follower_common";
import Critter@GetFollowersOwner(Critter&critter)from"follower_common";
import bool RightDistance(Critter&follower,Critter&owner)from"follower_common";
import bool HasFollowerOfBaseType(Critter&owner,uint basetype)from"follower_common";
import Critter@GetFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import bool RemoveFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import int GetNumberOfFollowingFollowersOfPlayer(Critter&player)from"follower_common";
import int GetNumberOfFollowersOfPlayer(Critter&player)from"follower_common";
import uint GetSlaveTypes(Critter&player)from"follower_common";
import void ClearFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import void AddFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import uint NumberOfFollowersOnMap(Map@map)from"follower_common";
import uint GetFollowerType(Critter&critter)from"follower_common";
import bool DisbandFollower(Critter&player,Critter&cr,bool reset)from"follower_common";
import bool MakeFollower(Critter&critter,uint type,string&script,uint dialogid,Critter&owner,bool FreeBarter)from"follower_common";
import Critter@LocateFollowerByType(IMerc@merc,Critter&owner)from"follower_common";
import Critter@LocateFollowerByID(uint id,Critter&owner)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers,bool OnlyIsSeen)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers)from"follower_common";
import int GetFollowers(Critter&player,bool all,array<Critter@>&followers)from"follower_common";
import uint CountFollowers(Critter&player,bool all)from"follower_common";
import uint CountFollowers(Critter&player,Map@map)from"follower_common";
import uint GetPartyPointsMax(Critter&player)from"follower_common";
import uint GetPartyPointsUsed(Critter&player)from"follower_common";
import bool IsMerc(Critter&follower)from"follower_common";                                                                                                                                                                      

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                                                                                                                                                 

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}

shared interface IPolygon
{
	IPolygon@AddVertex(uint16 x,uint16 y);
	IPolygon@AddVertices(array<uint16>&hexes);   
	
	bool IsWithin(Critter&cr);
	bool IsWithin(Item&item);  
	
	bool IsWithin(uint16 x,uint16 y);
};  

import IPolygon@NewPolygon()from"polygon"; 

import IPolygon@LoadShapeFromEntires(Map&map,uint first,uint last)from"polygon";          

import ITown@GetTownByIndex(uint index)from"towns";
import ITown@GetTown(uint id)from"towns";
import uint GetTownCount()from"towns";
import uint GetTowns(array<ITown@>@towns)from"towns";  

import bool AddMilitia(Map@map)from"town";
import void InitMilitia()from"town";
import bool IsTCTown(Map@map)from"town";
import uint RetrieveTownId(Map@map)from"town";
import uint RetrieveTownId(Critter&critter)from"town";
import ITown@RetrieveTown(Critter&critter)from"town";
import bool ValidTown(ITown@town)from"town";
import void GainControl(Critter&player)from"town";
import uint GetNearMembers(Critter&player)from"town";
import bool IsPolicy(Critter&player,uint policy)from"town";
import bool IsControllingTown(Critter&player)from"town";
import bool AlertMilitia(Critter&cr)from"town";
import int SelectBag(uint crpid)from"town";
import void SpawnInitMilitia(Map@map)from"town";
import int CountMilitia(Map@map)from"town";
import void ClearInfluenceBuffer(Critter&cr)from"town";  

class PresenceStruct
{
	uint factionId;
	uint count;
	PresenceStruct(uint factionId)
	{
		this.factionId=factionId;
		this.count=1;
	}
};

shared interface ITown
{
	ITown@SetMapID(uint id);
	ITown@SetTownID(uint id);
	ITown@SetBaseRewardValue(uint value);
	ITown@SetInfluenceMemberRequirement(uint number);
	ITown@SetNearbyMemberRequirement(uint number);
	ITown@SetTotalMemberRequirement(uint number);
	ITown@SetLimboContainer(Item@container);
	ITown@SetRewardContainer(Item@container);
	ITown@SetTownLeader(Critter@leader);
	ITown@SetSpeechModifier(int modifier);
	ITown@SetHour(uint hour);
	ITown@SetCaptureArea(IPolygon@capturearea);
	ITown@SetMilitiaEnabled();
	ITown@SetRewardStartCaps(uint caps);
	ITown@SetVersion(uint version);
	
	uint GetVersion();
	
	uint GetTownID();
	string GetTownName();
	bool LoadData();
	bool SaveData();
	bool IsMilitiaEnabled();
	bool IsFriendlyFaction(uint factionid);
	bool IsFriend(Critter&cr);
	bool IsValidCaptor(Critter&cr);
	bool IsWithinCaptureArea(Critter&cr);
	void AreaCheck();
	bool AddFriendlyFaction(uint factionid);
	bool RemoveFriendlyFaction(uint factionid);
	array<uint>GetFriendlyFactions();
	float GetControllingInfluence();
	uint GetMilitiaMax();
	uint GetControllingFaction();
	uint GetNumberOfKilledNPCs();
	uint GetControlCycles();
	uint GetStatus();
	void SetStatus(uint status);
	void SetScore();
	void SetPreviousFaction(uint previous);
	uint GetlastSecond();
	void SetlastSecond(uint sec);
	uint GetAreaCount();
	uint GetCountdown();
	void SetCountdownStatus(bool enabled);
	bool GetCountdownStatus();
	void SendCountdownTime(Critter&player);
	uint GetMemberNearbyRequirement();
	uint GetMemberTotalRequirement();
	Item@GetLimboContainer();
	Item@GetRewardContainer();
	uint GetTownLeaderId();
	uint GetMapID();
	int GetSpeechModifier();
	bool GainControl(Critter&player);
	void IncreaseNPCDeath(uint num);
	void ModifyInfluence(uint factionId,float value);
	void SetInfluence(uint factionId,float value);
	void ResetStats();
	void ResetControl();
	void RevertControl();
	void ClearRewardContainer();
	void ClearLimboContainer();
	void ClearContainers();
	void Update(uint hour,uint minute);
	void UpdateCountdown();
	void UpdateTick();
	void TownCheck();
	
	bool IsLaw(uint law);
	void SetLaw(uint law,bool enabled);
	
	void AddMoney(int money);
	int GetMoney(); 
	
	float GetInfluence(uint faction);
	
	Location@GetLocation();
};                                                                                                                    

uint[][]PositionDirs=
{
	{0},
	
	{1,4,3,2,1,0,5,2,3,4,5,0,1},
	{1,5,0,1,2,3,4,1,0,5,4,3,2},
	{1,4,2},
	{1,5,1},
	{2,1,2,0,0,1,2,3,3,0,0,4,5,3,3,4,5},
	{2,1,2,4,5},
	{2,4,4,0,0,4,4,3,3,0,0,2,2,3,3,2,2},
	{2,5,5,0,0,5,5,3,3,0,0,1,1,3,3,1,1},
	{2,1,2,0,0,0,0,1,2,3,3,3,3,0,0,0,0,4,5,3,3,3,3,4,5}
};                                                                                                                                                                           

shared interface IZone
{
	uint GetX();
	uint GetY();
	uint GetTerrain();
	uint8 GetFactor();
	void SetFactor(uint8 factor);
	int GetValue();
	void SetValue(int val);
	void AddValue(int val);
	void SubValue(uint val);
	bool ContainsFlag(uint flag);
	void SetQuantity(uint group,uint quantity);
	void ChangeQuantity(uint group,int mod);
	uint GetBaseQuantity(uint group);
	uint GetQuantity(uint group);
	uint GetLocationPids(array<uint16>&pids);
}; 

import IZone@GetZone(uint wx,uint wy)from"worldmap

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";                                                                                                                                                                                                                                                                                                                                                                                                                                                                             

import void InitEconomy()from"economy";
import void SendLevelThresholds(Critter&)from"economy"; 

import bool BankAccountExists(uint bankid,uint account)from"economy";
import bool BankAccountRemoveMoney(uint bankid,uint account,uint amount)from"economy";
import bool BankHasAccess(uint bankid,uint account,uint playerid)from"economy";
import int BankGetAccountBalance(uint bankid,uint account)from"economy";
import int BankGetAccountID(uint bankid,uint playerid)from"economy";
import uint BankAddAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankCreateAccount(uint bankid,uint playerid)from"economy";
import uint BankDepositMoney(uint bankid,uint playerid,uint account,int amount)from"economy";
import uint BankGetAccessCount(uint bankid,uint account)from"economy";
import uint BankGetAccountOwner(uint bankid,uint account)from"economy";
import uint BankGetAccountType(uint bankid,uint account)from"economy";
import uint BankGetCreditRating(uint bankid,uint account)from"economy";
import uint BankGetLoan(uint bankid,uint account)from"economy";
import uint BankRemoveAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankSetAccountType(uint bankid,uint account,uint accounttype)from"economy";
import uint BankSetCreditRating(uint bankid,uint account,uint rating)from"economy";
import uint BankSetLoan(uint bankid,uint account,uint loan)from"economy";
import uint BankTakeLoan(uint bankid,uint account,uint amount)from"economy";
import uint BankTransferMoney(uint bankid,uint fromaccount,uint toaccount,uint amount)from"economy";
import uint BankWithdrawMoney(uint bankid,uint playerid,uint account,int amount)from"economy"; 

import bool BanksTransferFromCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import bool BanksTransferToCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import uint BanksGetTotalMoney()from"economy";
import void BanksAddMoney(uint amount)from"economy";
import void BanksRemoveMoney(uint amount)from"economy"; 

import bool BankAddMoney(uint bankid,uint amount)from"economy";
import bool BankRemoveMoney(uint bankid,uint amount)from"economy";
import bool BankSetMoney(uint bankid,uint amount)from"economy";
import uint BankGetLoanInterest(uint bankid)from"economy";
import uint BankGetNumberOfAccounts(uint bankid)from"economy";
import float BankGetSaveInterest(uint bankid)from"economy";
import uint BankGetTotalMoney(uint bankid)from"economy";
import uint BankGetTotalBalance(uint bankid)from"economy";
import float BankGetReserveRatio(uint bankid)from"economy";
import uint BankSetLoanInterest(uint bankid,uint interest)from"economy";
import uint BankSetSaveInterest(uint bankid,float interest)from"economy";
import bool BankTransferFromCritter(uint bankId,Critter&critter,uint amount,uint type,bool virtual)from"economy";

import void SaveBankData()from"economy";   

import int GetItemSellModifier(Critter&player,Critter&trader)from"economy";
import int GetItemBuyModifier(Critter&player,Critter&trader)from"economy";
import uint GetItemCost(Item&item,Critter&cr,Critter&trader,bool sell)from"economy";
import uint GetItemCostPlain(Item&item,Critter&cr,Critter&trader)from"economy";

import array<int>GetTraderLevels(Critter@npc)from"economy";
import uint GetTraderLevel(Critter@npc,uint type)from"economy";

import uint ItemLevel(Item&item)from"economy";
import uint ItemLevel(uint pid)from"economy";
import uint TraderCapacity(Critter@npc)from"economy";
import uint TraderCapacity(Critter@npc,uint type,uint level)from"economy";
import uint TraderMoneyCapacity(Critter@npc)from"economy";
import uint TradingItemType(Item&item)from"economy";
import uint TradingItemType(uint pid)from"economy";                                                                                                          

const string@FD_Bank_Result2String(uint res)
{
	if(res==(1))
	return"FD_BANK_RESULT_SUCCESS";
	else if(res==(2))
	return"FD_BANK_RESULT_UNKNOWN";
	else if(res==(3))
	return"FD_BANK_RESULT_TOO_MANY_ACCOUNTS";
	else if(res==(4))
	return"FD_BANK_RESULT_ALREADY_HAS_ACCOUNT";
	else if(res==(5))
	return"FD_BANK_RESULT_NOT_ENOUGH_MONEY";
	else if(res==(6))
	return"FD_BANK_RESULT_BANK_FULL";
	else if(res==(7))
	return"FD_BANK_RESULT_BANK_EMPTY";
	else if(res==(8))
	return"FD_BANK_RESULT_DATA_ERROR";
	else if(res==(9))
	return"FD_BANK_RESULT_INVALID_PLAYER";
	else if(res==(10))
	return"FD_BANK_RESULT_NO_ACCOUNT";
	else
	return"FD_Result: Unknown error code";
}                                                                                                                                                                 

import ICaravan@GetCaravan(uint id)from"caravans";
import ICaravan@GetCaravan(Critter&cr)from"caravans";

import void InitCaravans()from"caravans"; 

import bool TakeNextLine(file&f,string&line)from"trains";
import array<int>@TakeNextNumLine(file&f)from"trains";   

bool IsCaravanLeader(Critter&cr)
{
	ICaravan@caravan=GetCaravan(cr); 
	
	return(@caravan!=null)&&(caravan.GetLeaderId()==cr.Id||caravan.GetWMLeaderId()==cr.Id);
}     

void CaravanStart(Critter&leader)
{
	ICaravan@caravan=GetCaravan(leader.Id);
	if(!(@caravan!=null))
	{
		
		return;
	}
	
	caravan.Start();
}

void CaravanProcessStartFast()
{}

void CaravanProcessMove()
{}  

shared interface ICaravan
{
	void Init();
	
	uint GetState();
	
	uint GetLeaderId();
	uint GetWMLeaderId();
	
	bool IsCaravanMember(Critter&);
	
	ICaravan@Route(uint16 origLoc,uint8 origMap,uint16 destLoc,uint8 destMap);
	ICaravan@Route(uint16 x,uint16 y);
	ICaravan@_AddNpc(uint16 pid,uint dialogId,uint bagId,uint level);
	
	void Assign(Critter&cr);
	void Leave(Critter&cr);
	void GetCurrentCoords(float&,float&);
	bool EndOfTrack();
	void IncRoutePosition();
	
	string GetName();
	string GetNextDestinationName();
	uint GetActPay();
	uint GetDepartTime(); 
	
	void Start();
	void PrepareDeparture(uint);
	void Arrive();
	void PrepareRespawn();
	void Respawn();
};   

class CCaravanNpc
{
	uint16 Pid;
	uint DialogId;
	uint BagId;
	uint Level;
	
	CCaravanNpc(uint16 pid,uint dialogId,uint bagId,uint level)
	{
		this.Pid=pid;
		this.DialogId=dialogId;
		this.BagId=bagId;
		this.Level=level;
	}
};  

class Coord
{
	uint16 X;
	uint16 Y;
	Coord(uint16 x,uint16 y)
	{
		this.X=x;
		this.Y=y;
	}
};    

class CRoute
{
	private uint Id;
	private uint HeadId;
	private uint TailId;
	private array<float>X;
	private array<float>Y;
	
	uint GetId(){return Id;}
	uint GetHeadId(){return HeadId;}
	uint GetTailId(){return TailId;}
	
	CRoute(uint id,uint headId,uint tailId)
	{
		Id=id;
		HeadId=headId;
		TailId=tailId;
	}
	uint NodesCount(){return X.length();}
	float GetX(uint node){return X[node];}
	float GetY(uint node){return Y[node];}
	void GetXY(uint node,float&x,float&y){x=X[node];y=Y[node];}
	void AddNode(float x,float y){X.insertLast(x);Y.insertLast(y);}
	bool IsLast(uint idx){return idx+1==NodesCount();}
};

class CCaravanStation
{
	private uint Id;
	private Map@MapPtr;
	private Location@LocPtr;
	
	CCaravanStation(uint id,uint map_pid)
	{
		Id=id;
		@MapPtr=GetMapByPid(map_pid,0);
		if(!(@MapPtr!=null))
		{
			WLog("trains","wrong map pid="+map_pid,20);
			return;
		}
		@LocPtr=MapPtr.GetLocation();
	}
	
	uint GetId(){return Id;}
	float GetX(){return LocPtr.WorldX;}
	float GetY(){return LocPtr.WorldY;}
	Map@GetMap(){return MapPtr;}
	Location@GetLocation(){return LocPtr;}
}; 

class CaravanManager
{
	
	array<CRoute@>Routes;
	array<CCaravanStation@>Stations;
	array<ICaravan@>Caravans;
	
	CCaravanStation@GetStation(uint id)
	{
		if(id>=Stations.length())
		return null;
		return Stations[id];
	}
	ICaravan@GetCaravan(uint id)
	{
		if(id>=Caravans.length())
		return null;
		return Caravans[id];
	}
	CRoute@GetRoute(uint id)
	{
		if(id>=Routes.length())
		return null;
		return Routes[id];
	}
	
	void Load(string&filename)
	{
		Caravans.insertLast(null);
		file f;
		
		f.open(filename,"r"); 
		
		array<int>@data=TakeNextNumLine(f);
		array<int>@data1;
		array<int>@data2;
		for(uint i=0,j=data.length();i<j;i++)
		{
			CCaravanStation@station=@CCaravanStation(i,data[i]);
			Stations.insertLast(station);
		}
		WLog("caravans","loaded "+Stations.length()+" stations"); 
		
		@data=TakeNextNumLine(f);
		uint routes=data[0];
		for(uint i=0;i<routes;i++)
		{
			@data=TakeNextNumLine(f);
			CRoute@route=CRoute(i,data[0],data[1]);
			Routes.insertLast(route);
			for(uint k=2;k<data.length();k+=2)
			route.AddNode(data[k],data[k+1]);
			CCaravanStation@station=GetStation(data[1]);
			route.AddNode(station.GetX(),station.GetY());
		}
		for(uint i=0;i<routes;i++)
		{
			CRoute@toInvert=Routes[i];
			CRoute@inverted=CRoute(i+routes,toInvert.GetTailId(),toInvert.GetHeadId());
			for(int j=toInvert.NodesCount()-2;j>=0;j--)
			{
				float x=0;
				float y=0;
				toInvert.GetXY(j,x,y);
				inverted.AddNode(x,y);
			}
			CCaravanStation@station=GetStation(toInvert.GetHeadId());
			inverted.AddNode(station.GetX(),station.GetY());
			Routes.insertLast(inverted);
		}
		WLog("caravans","loaded "+Routes.length()+" caravan routes");  
		
		@data=TakeNextNumLine(f);
		uint caravans=data[0];
		for(uint i=0;i<caravans;i++)
		{
			string name="";
			TakeNextLine(f,name);
			@data=TakeNextNumLine(f);
			@data2=TakeNextNumLine(f);
			
			@data1=TakeNextNumLine(f);
			
			CCaravan@caravan=CCaravan(i+1,data,data2,data1[0],data1[1],data1[2],data1[3],data1[4],name,this);
			@data=TakeNextNumLine(f);
			uint townPid=data[0];
			uint townBag=data[1];
			
			@data=TakeNextNumLine(f);
			uint leaderPid=data[0];
			uint leaderBag=data[1];
			
			@data=TakeNextNumLine(f);
			uint guardTypeCount=data.length()/2;
			array<uint>@guardPids=array<uint>(guardTypeCount);
			
			array<uint>@guardBags=array<uint>(guardTypeCount); 
			
			for(uint k=0,l=0;k<guardTypeCount;k++)
			{
				guardPids[k]=data[l];
				guardBags[k]=data[l+1];
				l+=2;
			}
			caravan.SetBagsAndPids(townPid,townBag,leaderPid,leaderBag,guardPids,guardBags);
			Caravans.insertLast(caravan);
		}
		WLog("caravans","loaded "+Caravans.length()+" caravans");
		
		f.close(); 
		
		for(uint i=1;i<Caravans.length();i++)
		Caravans[i].Init();
		
	}
};       

class CCaravan:ICaravan
{
	
	uint id;
	
	CaravanManager@mgr; 
	
	array<uint>players;
	
	array<uint>critters; 
	
	array<CCaravanNpc>npcs; 
	
	uint wagon;
	
	uint routeIndex;
	uint routePosition;
	
	uint originStationId;
	uint destinationStationId; 
	
	uint16 destLoc;
	
	uint8 destMap;
	
	uint16 origLoc;
	uint8 origMap;
	
	uint currLoc;
	uint8 currMap;
	
	uint entire;
	uint timeInTown;
	
	uint timeEvent;
	uint departure;
	
	uint state; 
	
	int target;
	array<Coord>route;
	
	array<int>@routes;
	array<int>@rewards;
	string name;
	
	uint townDlg;
	uint wmDlg;
	
	uint townLeaderPid;
	uint townLeaderBag;
	uint leaderPid;
	uint leaderBag;
	uint factionId;
	array<uint>@guardPids;
	array<uint>@guardBags;
	
	Serializator serializer;
	
	CCaravan(uint id,array<int>@routes,array<int>@rewards,int entire,int timeInTown,int townDlg,int wmDlg,int factionId,string name,CaravanManager@mgr)
	{
		this.id=id;
		@this.routes=routes;
		@this.rewards=rewards;
		this.entire=entire;
		this.timeInTown=timeInTown;
		this.name=name;
		this.townDlg=townDlg;
		this.factionId=factionId;
		this.wmDlg=wmDlg;
		@this.mgr=mgr;
		timeEvent=0;
	}
	
	void SetBagsAndPids(uint townLeaderPid,uint townLeaderBag,uint leaderPid,uint leaderBag,array<uint>@guardPids,array<uint>@guardBags)
	{
		this.townLeaderPid=townLeaderPid;
		this.townLeaderBag=townLeaderBag;
		this.leaderPid=leaderPid;
		this.leaderBag=leaderBag;
		@this.guardPids=guardPids;
		@this.guardBags=guardBags;
	}   
	
	void LoadData()
	{
		serializer.Load("Caravan_"+id);
		uint num=0;
		
		serializer.Get(routeIndex);
		routeIndex=(routeIndex%routes.length());        
		
		serializer.Get(num);
		critters.resize(num);
		for(uint i=0;i<num;i++)
		serializer.Get(critters[i]); 
		
	}
	
	void SetDefault()
	{
		routeIndex=0;
		
	}  
	
	void SaveData()
	{
		serializer.Clear();
		uint num=0;
		
		serializer.Set(routeIndex);         
		
		num=critters.length();
		serializer.Set(num);
		for(uint i=0;i<num;i++)
		serializer.Set(critters[i]);  
		
		serializer.Save("Caravan_"+id);
	}     
	
	void SetId(uint id)
	{
		this.id=id;
	}   
	
	void Init()
	{
		
		{;};
		
		if(IsAnyData("Caravan_"+id))
		{
			
			LoadData();
		}
		else
		{
			
			SetDefault();
			SaveData();
		}
		
		ClearCaravan(); 
		
		SpawnCaravan();
	}
	
	void ClearCaravan()
	{
		for(uint i=0,j=critters.length();i<j;i++)
		{
			Critter@cr=GetCritter(critters[i]);
			if((@cr!=null))
			DeleteNpc(cr);
		}
		critters.resize(2);
		
		CRoute@actRoute=mgr.GetRoute(routes[routeIndex]);
		originStationId=actRoute.GetHeadId();
		
		destinationStationId=actRoute.GetTailId();
	}   
	
	void SpawnCaravan()
	{
		
		CCaravanStation@origin=mgr.GetStation(originStationId);
		Map@map=origin.GetMap();
		int[]params={(104),townDlg,(107),townLeaderBag,(106),factionId,(122),1,(532),1,(511),1};
		uint16 x=0;
		uint16 y=0;
		map.GetEntireCoords(entire,0,x,y);
		Critter@cr=map.AddNpc(townLeaderPid,x,y,3,params,null,"caravans@_CaravanTownNpc");
		
		if(!(@cr!=null))
		return;
		cr.ParamBase[(84)]=((1)*60);
		SetLvar(cr.Id,(3006),id);
		
		critters[0]=cr.Id;
		critters[1]=0;
		
		state=(0);
		
		uint fullSec=((__FullSecond)+(((timeInTown)*60)));
		departure=fullSec-fullSec%3600+3600;
		
		array<uint>departData={id,departure};
		timeEvent=CreateTimeEvent(departure-3600,"caravans@e_PrepareCaravan",departData,false);                                       
		
	}
	
	void PrepareDeparture(uint departTime)
	{
		state=(1);
		timeEvent=CreateTimeEvent(departTime,"caravans@e_DepartCaravan",id,false);
		int[]params={(104),wmDlg,(107),leaderBag,(106),factionId,(122),1};
		
		CCaravanStation@origin=mgr.GetStation(originStationId);
		Map@map=origin.GetMap();
		Critter@leader=map.AddNpc(leaderPid,0,0,0,params,null,"caravans@_CaravanDriver");
		SetLvar(leader.Id,(3006),id);
		leader.TransitToGlobal(false);
		critters[1]=leader.Id;
	}
	
	void GetCurrentCoords(float&x,float&y)
	{
		CRoute@route=mgr.GetRoute(routes[routeIndex]);
		route.GetXY(routePosition,x,y);
	}
	
	bool EndOfTrack()
	{
		CRoute@route=mgr.GetRoute(routes[routeIndex]);
		return route.IsLast(routePosition);
	}
	
	void IncRoutePosition()
	{
		routePosition++;
	}   
	
	uint GetLeaderId()
	{
		return critters[0];
	}
	
	uint GetWMLeaderId()
	{
		return critters[1];
	}
	
	bool IsCaravanMember(Critter&crit)
	{
		if(crit.IsPlayer())
		{
			for(uint i=0,j=players.length();i<j;i++)
			{
				if(players[i]==crit.Id)
				return true;
			}
		}
		else
		{
			for(uint i=0,j=critters.length();i<j;i++)
			{
				if(critters[i]==crit.Id)
				return true;
			}
		}
		return false;
	}  
	
	ICaravan@Route(uint16 origLoc,uint8 origMap,uint16 destLoc,uint8 destMap)
	{
		{;};
		this.origLoc=origLoc;
		this.origMap=origMap;
		this.destLoc=destLoc;
		this.destMap=destMap;
		
		this.currLoc=origLoc;
		this.currMap=origMap;
		
		return this;
	}   
	
	ICaravan@Route(uint16 x,uint16 y)
	{
		route.insertLast(Coord(x,y));
		return this;
	}    
	
	ICaravan@_AddNpc(uint16 pid,uint dialogId,uint bagId,uint level)
	{
		npcs.insertLast(CCaravanNpc(pid,dialogId,bagId,level));
		return this;
	}  
	
	void Assign(Critter&cr)
	{
		GameVar@var=GetLocalVar((3006),cr.Id);
		var=id;
		
		cr.ParamBase[(81)]=GetWMLeaderId();
	}  
	
	void Leave(Critter&cr)
	{
		if(cr.IsPlayer())
		{
			for(uint i=0,j=players.length();i<j;i++)
			{
				if(players[i]==cr.Id)
				players[i]=0;
			}
		}
		else
		{
			for(uint i=0,j=critters.length();i<j;i++)
			{
				if(critters[i]==cr.Id)
				critters[i]=0;
			}
		}
		GameVar@var=GetLocalVar((3006),cr.Id);
		var=0;
		
	}
	
	uint GetState()
	{
		return state;
	}
	
	string GetName()
	{
		return name;
	}
	
	string GetNextDestinationName()
	{
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		return GetLocationName(destination.GetLocation());
	}
	
	uint GetActPay()
	{
		return rewards[routeIndex];
	}
	
	uint GetDepartTime()
	{
		return departure;
	}   
	
	void Start()
	{
		Map@map;
		Critter@townNpc=GetCritter(critters[0]);
		if((@townNpc!=null))
		{
			@map=townNpc.GetMap();
			DeleteNpc(townNpc);
		}
		critters[0]=0;
		routePosition=0;
		state=(2);
		
		Critter@wmNpc=GetCritter(critters[1]);
		
		array<Critter@>crits=wmNpc.GetGlobalGroup();
		uint playerCount=crits.length()-1;
		players.resize(playerCount);
		for(uint i=1,j=crits.length();i<j;i++)
		{
			players[i-1]=crits[i].Id;
			SetLvar(crits[i].Id,(3006),id);
			crits[i].Say((11),"You have departed with caravan.");
		}  
		
		uint neededGuards;
		if(playerCount>5)neededGuards=0;
		else neededGuards=6-playerCount; 
		
		critters.resize(2+neededGuards);
		if((@map!=null))
		{
			uint guardTypeCount=guardPids.length();
			for(uint i=0;i<neededGuards;i++)
			{
				uint guardType=Random(0,guardTypeCount-1);
				int[]params={(107),guardBags[guardType],(106),factionId,(122),1};
				Critter@npc=map.AddNpc(guardPids[guardType],1,1,0,params,null,"caravans@_CaravanGuard");
				npc.ParamBase[(91)]=critters[1];
				critters[2+i]=npc.Id;
				npc.TransitToGlobalGroup(GetWMLeaderId());
				SetLvar(npc.Id,(3006),id);
			}
		}
		CCaravanStation@origin=mgr.GetStation(originStationId);
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		
	}
	
	void Reward()
	{
		Critter@leader=GetCritter(GetWMLeaderId());
		if((@leader!=null))
		{
			array<Critter@>crits=leader.GetGlobalGroup();
			uint playerCount=crits.length()-1;
			players.resize(playerCount);
			for(uint i=1,j=crits.length();i<j;i++)
			{
				if(crits[i].IsPlayer())
				{
					uint reward=GetActPay()*2+crits[i].Param[(77)]*25;
					uint reward2=GetActPay()*2;
					BanksTransferToCritter(crits[i],reward,(0),false);
					crits[i].Say((11),"You have received "+reward+" caps as your pay.");
					int expAmount=(crits[i].Param[(77)]*reward2/10)*(GetGvar((62003)))*(GetGvar((62001)));
					crits[i].ParamBase[(76)]+=expAmount;
					crits[i].AddItem((41),crits[i].Param[(77)]*25);
					crits[i].Say((11),"|0xFFFFFF You have gained "+expAmount+" experience points.");
					AddScore(crits[i],(58),1);
				}
			}
		}
	}
	
	void Arrive()
	{
		CCaravanStation@origin=mgr.GetStation(originStationId);
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		
		Reward();
		routeIndex=(routeIndex+1)%routes.length();
		ClearCaravan();
		SpawnCaravan();
	}
	
	void PrepareRespawn()
	{
		CCaravanStation@origin=mgr.GetStation(originStationId);
		CCaravanStation@destination=mgr.GetStation(destinationStationId);
		
		routeIndex=(routeIndex+1)%routes.length();
		ClearCaravan();
		CreateTimeEvent(((__FullSecond)+(((7)*__TimeMultiplier*60))),"caravans@e_RespawnCaravan",id,false);
	}
	
	void Respawn()
	{
		SpawnCaravan();
		CCaravanStation@origin=mgr.GetStation(originStationId);
		
	}
};            

import void InitTents()from"map_tent";

import uint GetTentVars(array<uint>&vars)from"map_tent";
import uint GetTentVarsCount()from"map_tent";
import bool GetFreeTentVar(Critter&cr,uint&var)from"map_tent";
import uint GetFreeTentVars(Critter&cr,array<uint>&vars)from"map_tent";
import uint GetTakenTentVars(Critter&cr,array<uint>&vars)from"map_tent";
import uint GetTakenTentVars(uint crId,array<uint>&vars)from"map_tent";

import uint GetAllTents(array<Location@>&locations)from"map_tent";
import uint GetAllShelters(array<Location@>&locations)from"map_tent";
import uint GetAllHouses(array<Location@>&locations)from"map_tent";

import uint GetTentLocations(Critter&tentOwner,array<Location@>&locations)from"map_tent";
import uint GetTentLocations(uint tentOwnerId,array<Location@>&locations)from"map_tent";

import Location@GetNearestTentLocation(Critter&tentOwner,uint16 wx,uint16 wy)from"map_tent";
import Location@GetNearestTentLocation(uint tentOwnerId,uint16 wx,uint16 wy)from"map_tent";

import bool CanCreateTent(Map&map)from"map_tent";
import void TryCreateTent(Critter&cr)from"map_tent";

import bool RemoveTent(Critter&cr,Location&tent,bool recycle)from"map_tent";
import bool RemoveTentByVar(Critter&cr,uint var,bool recycle)from"map_tent";
import void RemoveAllTents(Critter&cr,bool recycle)from"map_tent";

import bool IsTentOwner(Map&tent,Critter&cr)from"map_tent";

import void myinfo_tent(Critter&cr)from"map_tent";     

import uint8 access_level(string&access)from"main";
import string access_level(uint8&access)from"main";
import bool player_getaccess(Critter&player,int access,string&password)from"main";

import string AuthedInfo(uint id)from"cheats";
import bool GodOfTheRealm(uint id)from"cheats";
import bool WrathOfTheGod(Critter&di)from"cheats";
import void SetAuthed(uint id,string name)from"cheats";
import void RemoveAuthed(uint id)from"cheats";
import void UpdateBasesVisibility(IFaction@faction,Critter&player)from"factions";
import void PlayMusic(Critter&cr,string&musicName,uint pos,uint repeat)from"media";

import void SetSpectator(Critter&cr,bool on)from"utils";

import void CommenceDischargeEx(Critter@attacker,Map@map,uint16 tx,uint16 ty,uint dmgRad,uint dmgMin,uint dmgMax,int effChance,uint rechargeVal,bool tesla)from"combat";

import bool ReverseItemCrafted(Critter&cr,Item&item,bool isMassScience)from"fix_boy";
import bool ReverseItem(Critter&cr,Item&item,bool isMassScience)from"fix_boy";
import bool ReverseAllItems(Critter&cr,array<Item@>&items,uint cnt,uint max)from"fix_boy";

import bool TryRepairItem(Critter&cr,Item&item,bool isHexRepair=false)from"repair";
import bool IsBase(Map@map)from"world_common";
import bool IsTent(Map@map)from"world_common";

void unsafe_GetTimer(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	p0^=0x56F32A4D;
	p1^=0x5F4A9B5C;
	Critter@cr=GetCritter(p0);
	if(!(@cr!=null))
	{
		Log("failed to respond to: "+GetSafePlayerName(p0));
		return;
	}
	if(cr.GetAccess()<(1))
	{
		Log("failed to respond to: "+GetSafePlayerName(p0)+": client access");
		return;
	}
	cr.Say((11),"Processed response from player "+GetSafePlayerName(player.Id)+": "+(int((__FullSecond))-p1));
}

void unsafe_ExecCommandEntered(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	LogCommandUsage(player,commandString);
}
uint getfactionprefix(Critter&player)
{
	switch(player.Id)
	{
		case 1:
		case 2:
		case 3:
		case 4:
		return(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)));
		case 5:
		return(uint((0xFF<<24)|(((125)&0xFF)<<16)|(((255)&0xFF)<<8)|((255)&0xFF)));
		
	}
	switch(player.Param[(106)])
	{
		case 2:return(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((255)&0xFF)<<8)|((255)&0xFF)));
		case 3:return(uint((0xFF<<24)|(((166)&0xFF)<<16)|(((166)&0xFF)<<8)|((166)&0xFF)));
		case 4:return(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)));
		case 5:return(uint((0xFF<<24)|(((230)&0xFF)<<16)|(((150)&0xFF)<<8)|((14)&0xFF)));
		case 6:return(uint((0xFF<<24)|(((14)&0xFF)<<16)|(((88)&0xFF)<<8)|((203)&0xFF)));
		case 7:return(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)));
		case 23:return(uint((0xFF<<24)|(((14)&0xFF)<<16)|(((154)&0xFF)<<8)|((233)&0xFF)));
		case 44:return(uint((0xFF<<24)|(((64)&0xFF)<<16)|(((228)&0xFF)<<8)|((208)&0xFF)));
		case 45:return(uint((0xFF<<24)|(((136)&0xFF)<<16)|(((0)&0xFF)<<8)|((200)&0xFF)));
		case 50:return(uint((0xFF<<24)|(((54)&0xFF)<<16)|(((228)&0xFF)<<8)|((32)&0xFF)));
		case 51:return(uint((0xFF<<24)|(((178)&0xFF)<<16)|(((8)&0xFF)<<8)|((29)&0xFF)));
		case 54:return(uint((0xFF<<24)|(((230)&0xFF)<<16)|(((150)&0xFF)<<8)|((14)&0xFF)));
		case 55:return(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((255)&0xFF)<<8)|((29)&0xFF)));
		default:return(uint((0xFF<<24)|(((1)&0xFF)<<16)|(((255)&0xFF)<<8)|((1)&0xFF)));
	}
	return(uint((0xFF<<24)|(((1)&0xFF)<<16)|(((255)&0xFF)<<8)|((1)&0xFF)));
} 

void unsafe_ExecGlobalChat(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	array<Critter@>players;
	uint num=GetAllOnlinePlayers(players);
	Critter@cr=GetCritter(p0);
	string admin_prefix="";
	if(player.GetAccess()==(3))
	admin_prefix="|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)))+" [Dev] ";
	
	if(player.GetAccess()==(2))
	admin_prefix="|"+(uint((0xFF<<24)|(((177)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)))+" [GM] ";
	file f;
	switch(p1)
	{
		case 0:
		for(uint i=0;i<num;i++)
		{
			if(players[i].Param[(787)]>0)
			continue;
			players[i].Say((11),admin_prefix+"|"+getfactionprefix(cr)+" "+cr.Name+":|-1 "+commandString);
		}
		
		f.open("logs/globalchat.txt","w");
		f.writeString("Game Chat: ["+cr.Name+"]: "+commandString);
		f.close();
		break;
		case 1:
		for(uint i=0;i<num;i++)
		{
			if(players[i].Param[(106)]!=player.Param[(106)])
			continue;
			players[i].Say((11),admin_prefix+"|"+getfactionprefix(cr)+" [FACTION]"+cr.Name+":|-1 "+commandString);
		}
		break;
		case 2:
		for(uint i=0;i<num;i++)
		{
			if(players[i].Param[(788)]>0)
			continue;
			players[i].Say((11),admin_prefix+"|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" [Polish]"+"|"+getfactionprefix(cr)+" "+cr.Name+":|"+(uint((0xFF<<24)|(((184)&0xFF)<<16)|(((247)&0xFF)<<8)|((129)&0xFF)))+" "+commandString);
		}
		break;
		case 3:
		for(uint i=0;i<num;i++)
		{
			if(players[i].Param[(789)]>0)
			continue;
			players[i].Say((11),admin_prefix+"|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((175)&0xFF)<<8)|((0)&0xFF)))+" [Espanol]"+"|"+getfactionprefix(cr)+" "+cr.Name+":|"+(uint((0xFF<<24)|(((184)&0xFF)<<16)|(((247)&0xFF)<<8)|((129)&0xFF)))+" "+commandString);
		}
		break;
		case 4:
		for(uint i=0;i<num;i++)
		{
			if(players[i].Param[(790)]>0)
			continue;
			players[i].Say((11),admin_prefix+"|"+(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)))+" [CZ/SK]"+"|"+getfactionprefix(cr)+" "+cr.Name+":|"+(uint((0xFF<<24)|(((184)&0xFF)<<16)|(((247)&0xFF)<<8)|((129)&0xFF)))+" "+commandString);
		}
		break;
		case 5:
		for(uint i=0;i<num;i++)
		{
			if(players[i].Param[(791)]>0)
			continue;
			players[i].Say((11),admin_prefix+"|"+(uint((0xFF<<24)|(((125)&0xFF)<<16)|(((125)&0xFF)<<8)|((255)&0xFF)))+" [русский]"+"|"+getfactionprefix(cr)+" "+cr.Name+":|"+(uint((0xFF<<24)|(((184)&0xFF)<<16)|(((247)&0xFF)<<8)|((129)&0xFF)))+" "+commandString);
		}
		break;
		case 6:
		for(uint i=0;i<num;i++)
		{
			if(players[i].Param[(792)]>0)
			continue;
			players[i].Say((11),admin_prefix+"|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((255)&0xFF)))+" [italiano]"+"|"+getfactionprefix(cr)+" "+cr.Name+":|"+(uint((0xFF<<24)|(((184)&0xFF)<<16)|(((247)&0xFF)<<8)|((129)&0xFF)))+" "+commandString);
		}
		break;
		case 7:
		for(uint i=0;i<num;i++)
		{
			if(players[i].Param[(793)]>0)
			continue;
			players[i].Say((11),admin_prefix+"|"+(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((255)&0xFF)<<8)|((255)&0xFF)))+" [Deutsche]"+"|"+getfactionprefix(cr)+" "+cr.Name+":|"+(uint((0xFF<<24)|(((184)&0xFF)<<16)|(((247)&0xFF)<<8)|((129)&0xFF)))+" "+commandString);
		}
		break;
	}
}

void unsafe_ExecMuteChat(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	Critter@cr=GetCritter(p0);
	switch(p1)
	{
		case 0:player.ParamBase[(787)]=1;break;
		case 1:player.ParamBase[(788)]=1;break;
		case 2:player.ParamBase[(789)]=1;break;
		case 3:player.ParamBase[(790)]=1;break;
		case 4:player.ParamBase[(791)]=1;break;
		case 5:player.ParamBase[(792)]=1;break;
		case 6:player.ParamBase[(793)]=1;break;
	}
} 

void unsafe_Hexbot(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	Critter@cr=GetCritter(p0);
	string targetname="no name found";
	string mode="single";
	if(p2==1)
	mode="burst";
	if(p1>0)
	{
		Critter@target=GetCritter(p1);
		targetname=target.Name;
	}
	uint16 year=0,month=0,day=0,dayofweek=0,hour=0,minute=0,second=0;
	GetGameTime(__FullSecond,year,month,day,dayofweek,hour,minute,second);
	file f;
	f.open("logs/hexbot.txt","w");
	f.writeString(day+"."+month+" "+cr.Name+" for real using "+mode+" hexbot!!! on "+targetname);
	f.close();
}

void unsafe_ExecUnmuteChat(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	Critter@cr=GetCritter(p0);
	player.ParamBase[(787)]=0;
	player.ParamBase[(788)]=0;
	player.ParamBase[(789)]=0;
	player.ParamBase[(790)]=0;
	player.ParamBase[(791)]=0;
	player.ParamBase[(792)]=0;
	player.ParamBase[(793)]=0;
	
}

void unsafe_Spectate(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return;
	if(((map.GetData((10))&((0x00000002)))!=0))
	{
		if(player.ParamBase[(112)]==(58))
		SetSpectator(player,false);
		else
		SetSpectator(player,true);
	}
	else
	{;};
} 

void unsafe_PingServer(Critter&player,int globalEnable,int duallog,int p2,string@commandString,array<int>@param4)
{
	if(!(@player!=null))
	return;
	if(globalEnable==2)
	FLog((8),GetCritterInfo(player)+" is using FOCD. Config was not found.");
	else
	FLog((8),GetCritterInfo(player)+" is using FOCD. Enabled: "+(globalEnable==1?"yes.":"no.")+" Yanus: "+(duallog==1?"yes.":"no."));
}

void unsafe_ExecShowFactionInfluence(Critter&player,int,int,int,string@,array<int>@)
{
	ITown@town=RetrieveTown(player);
	if(!(@town!=null))
	{
		player.Say((11),"You're not in a TC town.");
		return;
	}
	if(GetGroupIndex(player)<0)
	{
		player.Say((11),"You're not a member of a player faction.");
		return;
	}
	string s;
	s.ParseFloat(town.GetInfluence(GetGroupIndex(player)),6);
	if(s.length()>0)
	player.Say((11),"Your faction's influence in "+town.GetTownName()+" is "+s);
	else
	player.Say((11),"Error.");
}

void unsafe_ExecDisbandParty(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	array<string@>@command=split(commandString," ");
	int num=0;
	
	for(uint i=(900);i<=(924);i++)
	{
		if(player.Followers[i]!=0)
		{
			Critter@cr=GetCritter(player.Followers[i]);
			if((command.length()>1)&&(command[1]=="away_team")&&(@cr!=null)&&(cr.GetMapId()==player.GetMapId()))
			continue;
			
			player.FollowersBase[i]=0;
			if((@cr!=null))
			{
				
				cr.ParamBase[(103)]=0;
				cr.ParamBase[(104)]=(82);
				SetGroupInfo(cr,(0),0,(0));
				cr.FollowerVarBase[(933)]=0;
				ClearEvents(cr);
				(cr.ParamBase[(534)]=(cr.Param[(534)]|((0x00000020)))^((0x00000020)));
				cr.SetScript("");
				DeleteNpc(cr);
				num++;
			}
		}
	}
	
	player.RunClientScript("_DisbandDone",num,0,0,"",null);
}

void unsafe_ExecKillParty(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	array<string@>@command=split(commandString," ");
	int num=0;
	
	for(uint i=(900);i<=(924);i++)
	{
		if(player.Followers[i]!=0)
		{
			Critter@cr=GetCritter(player.Followers[i]);
			if((command.length()>1)&&(command[1]=="away_team")&&(@cr!=null)&&(cr.GetMapId()==player.GetMapId()))
			continue;
			
			if((@cr!=null))
			{
				
				cr.ToDead(1,null);
				num++;
			}
		}
	} 
	
} 

void unsafe_ExecSetRespawn(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	array<string@>@command=split(commandString," ");
	int num=0;
	int entires2=player.GetMap().CountEntire(242);
	if(entires2<1)
	{
		player.Say((11),"|4294901760 "+"This location are not for companions");
		return;
	}
	for(uint i=(900);i<=(924);i++)
	{
		if(player.Followers[i]!=0)
		{
			Critter@cr=GetCritter(player.Followers[i]);
			
			if(entires2>0&&(IsBase(player.GetMap())||IsTent(player.GetMap())))
			{
				if((@cr!=null))
				{
					
					cr.ParamBase[(947)]=player.GetMap().Id;
					num++;
				}
			}
		}
	} 
	
}

void unsafe_ExecACReport(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	string time=GetCurrentDateTimeString();
	
	file f;
	f.open("logs/cheating.log","a");
	f.writeString(time+"> "+GetCritterInfo(player)+":"+" has been suspected for cheating."+"\n");
	f.close();
	
	Critter@gm=GetOnlineGM();
	if((@gm!=null))
	{
		gm.Say((11),"|4294901760 "+"Suspected cheater: "+GetCritterInfo(player));
		return;
	}
}

void unsafe_ExecGMHelpCommand(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)
{
	array<string@>@command=split(commandString," ");
	
	if(command[0]!="+requesthelp")
	return;
	
	if(player.IsPlayer())
	{
		
		if(player.Param[(77)]<2)
		{
			player.Say((11),"You need to be at least level 2 to request help.");
			return;
		}
		
		if(player.GetAccess()>(0))
		{
			player.Say((11),"Oh please, I'm sure you need help... :P");
			return;
		}
		
		if(command.length()<2)
		{
			player.Say((11),"To request help from a GM, you need to type +requesthelp <message>, in the message you should specify as much information about the issue, as shortly as you can. If there is any GM online, he/she will take a look at the message and try to help you.");
			return;
		}
	}
	
	if(!CanRequestHelp(player))
	{
		player.Say((11),"You need to wait a little bit until you can request help again.");
		return;
	}
	
	string message="";
	
	for(uint i=1,j=command.length();i<j;i++)
	{
		message=message+command[i]+((i+1==j)?"":" ");
	}
	
	string time=GetCurrentDateTimeString();      
	
	uint gmId=Broadcast_RequestHelp(player,message); 
	
	FLog((4),"["+player.Name+","+player.Id+","+player.GetMapId()+"] "+message);
	
	string gmInfo="No Game Master online";
	if(gmId>0)
	gmInfo="Sent to "+AuthedInfo(gmId);
	gmInfo=" ["+gmInfo+"]";
	
	ILog("requesthelp",player.Name+" (id:"+player.Id+",map:"+player.GetMapId()+") "+message+gmInfo);
	
	dbLog("log_gm_help",player.Id+"|"+message);                      
	
}   

void unsafe_RadioDistressCall(Critter&player,int p0,int p1,int p2,string@message,array<int>@param4)
{
	if(!(@player!=null))
	return;
	
	Item@radio=GetRadio(player);
	if(!(@radio!=null))
	{
		Log("Possible radio distress hacker: "+player.Name);
		return;
	} 
	
	Map@map=player.GetMap();
	if(!(@map!=null)||!IsEncounterMap(map))
	{
		player.Say((11),"You can't send distress signals from that location.");
		return;
	}
	
	if(map.GetLocation().Visible)
	{
		player.Say((11),"Your location is already visible.");
		return;
	}                     
	
	array<Critter@>critters;
	uint critCount=map.GetCritters(0,(0x0F)|(0x20),critters);
	for(uint i=0;i<critCount;i++)
	{
		ICaravan@caravan=GetCaravan(critters[i]);
		if((@caravan!=null))
		{
			player.Say((11),"Something seems to be blocking the distress signal.");
			return;
		}
	}
	
	uint16 channel=radio.RadioChannel;
	{};
	if((@message!=null))
	{
		RadioMessage(channel,message);
		player.Say((7),message);
	}
	
	array<Critter@>players;
	uint num=GetAllOnlinePlayers(players);
	uint locid=map.GetLocation().Id;
	map.GetLocation().Color=(uint((0xFF<<24)|(((0xFF)&0xFF)<<16)|(((0x00)&0xFF)<<8)|((0x00)&0xFF)));
	{};
	for(uint i=0;i<num;i++)
	{
		{};
		@radio=GetRadio(players[i]);
		if((@radio!=null)&&radio.RadioChannel==channel)
		{
			{};
			if(player.Id!=players[i].Id)
			players[i].SetKnownLoc(true,locid);
		}
	}
}

void unsafe_MovementSpeed(Critter&player,int,int,int,string@,array<int>@)
{
	int runTime=player.Param[(118)];
	int time=(200-runTime)/2;
	player.Say((11),"Run speed is "+time+"%.");
}   

void unsafe_Suicide(Critter&player,int,int,int,string@,array<int>@)
{ 
	
	if(player.IsDead())
	player.Say((11),"You are dead already.");
	else if(player.Param[(77)]<2)
	player.Say((11),"You can't do that.");
	else
	{
		uint mapid=player.GetMap().GetLocation().GetProtoId();
		if(mapid==(415)||mapid==(416)||mapid==(417)||mapid==(418)||mapid==(419))
		{
			player.Say((11),"You can't do that.");
			return;
		}
		Log("Suicide (mode 1): "+player.Name+"("+player.Id+")");
		player.ToDead((player.IsKnockout()&&player.Anim2Knockout==(82))?(102):(103),null);
	}   
	
}

void unsafe_Suicide2(Critter&player,int,int,int,string@,array<int>@)
{
	uint[]islands=
	{
		
		18,45,
		19,45,
		20,45,
		21,45,
		22,45,
		23,45,
		19,46,
		20,46,
		
		22,49,
		23,49,
		23,50,
		
		27,48,
		28,48,
		29,48,
		28,49,
		29,49,
		
		27,51,
		28,51,
		28,52,
		29,52
	};   
	
	if(player.GetMapId()==0)
	{
		player.Say((11),"Not on worldmap.");
		return;
	}
	if(player.Param[(77)]<2)
	{
		player.Say((11),"You can't do that.");
		return;
	}
	uint mapid=player.GetMap().GetLocation().GetProtoId();
	if(mapid==(415)||mapid==(416)||mapid==(417)||mapid==(418)||mapid==(419))
	{
		player.Say((11),"You can't do that.");
		return;
	}                    
	
	player.ToDead(Random((102),(119)),null); 
	
}

void unsafe_PartyPoints(Critter&player,int,int,int,string@,array<int>@)
{
	player.Say((11),GetPartyPointsUsed(player)+"/"+GetPartyPointsMax(player)+" party points used.");
}

void unsafe_WeaponMode(Critter&player,int mode,int,int,string@,array<int>@)
{
	player.ParamBase[(544)]=mode;
}

void unsafe_TakeAll(Critter&target,int contId,int bodyId,int useFilter,string@,array<int>@)
{
	if(!target.IsKnockout()&&!target.IsDead()&&target.Param[(75)]>=0)
	{
		if(target.Param[(510)]!=0&&target.GetAccess()<(1))
		target.ParamBase[(510)]=0;
		
		Item@cont;
		Critter@body;
		
		if(contId>0)
		{
			@cont=target.GetMap().GetItem(contId);
			if(!(@cont!=null))
			{
				target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
				return;
			}
		}
		else if(bodyId>0)
		{
			@body=GetCritter(bodyId);
			if(!(@body!=null))
			{
				target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
				return;
			}
		}   
		
		array<Item@>items;
		if((@cont!=null))
		cont.GetItems(0,items);
		else if((@body!=null))
		body.GetItems((0),items);
		else
		{
			
			target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
			return;
		}
		
		int freeWeight=2*target.Param[(11)]-target.ItemsWeight();
		int itemsWeight=0;
		
		for(uint i=0,j=items.length();i<j;i++)
		{
			if(items[i].GetProtoId()==(9914)||items[i].GetProtoId()==(1864)
			||items[i].GetProtoId()==(1865)||items[i].GetProtoId()==(157)
			||items[i].GetProtoId()==(4608)||items[i].GetProtoId()==(571)||items[i].GetType()==(8)
			||items[i].GetProtoId()==(22096)||items[i].GetProtoId()==(22098)||items[i].GetProtoId()==(22100)
			||items[i].GetProtoId()==(22102)||items[i].GetProtoId()==(22104)||items[i].GetProtoId()==(22106)
			||items[i].GetProtoId()==(22108)||items[i].GetProtoId()==(22109)||items[i].GetProtoId()==(22110)
			||items[i].GetProtoId()==(22111)||items[i].GetProtoId()==(22112)||items[i].GetProtoId()==(22113)
			||items[i].GetProtoId()==(22114)||items[i].GetProtoId()==(22115)||items[i].GetProtoId()==(22116)
			||items[i].GetProtoId()==(22117))
			{
				items.removeAt(i);
				--i;
				--j;
			}
			else if(useFilter!=-1)
			{
				uint type=items[i].GetType();
				bool toDel=false;
				
				switch(useFilter)
				{
					case 0:
					if(type!=(1))
					toDel=true;
					break;
					case 1:
					if(type!=(3))
					toDel=true;
					break;
					case 2:
					if(type!=(4))
					toDel=true;
					break;
					case 3:
					if(type!=(2))
					toDel=true;
					break;
					case 4:
					default:
					if(type==(1)||type==(3)||type==(4)||type==(2))
					toDel=true;
				}
				
				if(toDel)
				{
					items.removeAt(i);
					--i;
					--j;
				}
				else
				itemsWeight+=int(items[i].Proto.Weight)*items[i].GetCount();
			}
			else
			itemsWeight+=int(items[i].Proto.Weight)*items[i].GetCount();
		}
		
		if(items.length()>0&&!((@cont!=null)&&cont.Proto.Container_Changeble&&!(((cont.LockerCondition)&((0x01)))!=0)))
		{
			if(freeWeight>=itemsWeight)
			MoveItems(items,target);
			else
			target.Say((11),"You can't pick that up. You are at your maximum weight capacity."); 
			
			if((@cont!=null))
			target.Animate(0,(28),null,true,true);
			else if((@body!=null))
			target.Animate(0,(27),null,true,true);
		} 
		
		if((@cont!=null))
		target.ShowContainer(null,cont,(7));
		else if((@body!=null))
		target.ShowContainer(body,null,(4));
	}
	target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
}
void unsafe_science(Critter&player,int contId,int bodyId,int useFilter,string@,array<int>@)
{
	CreateTimeEvent(((__FullSecond)+(((200)*__TimeMultiplier/1000))),"e_science",player.Id,false);
	if(player.IsKnockout()||player.IsDead())
	return;
	if(player.Timeout[(238)]>0)
	{
		player.Say((11),"Combat timeout.");
		return;
	}
	if(player.Param[(75)]<0)
	return;
	player.Animate(0,(28),null,true,true);
	ReverseItem(player,GetItem(contId),false); 
	
}

uint e_science(array<uint>@mobdata)
{
	Critter@player=GetCritter(mobdata[0]);
	player.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
	return 0;
}
void unsafe_PutAll(Critter&target,int contId,int bodyId,int useFilter,string@,array<int>@)
{
	if(!target.IsKnockout()&&!target.IsDead()&&target.Param[(75)]>=0)
	{
		if(target.Param[(510)]!=0&&target.GetAccess()<(1))
		target.ParamBase[(510)]=0;
		
		array<Item@>items;
		int count=target.GetItems((0),items);
		Map@map=target.GetMap();
		
		if(count>0)
		{
			
			for(uint i=0,j=items.length();i<j;i++)
			{
				if(items[i].GetProtoId()==(9914)||items[i].GetProtoId()==(1864)
				||items[i].GetProtoId()==(1865)||items[i].GetProtoId()==(157)
				||items[i].GetProtoId()==(4608)||items[i].GetProtoId()==(571)||items[i].GetType()==(8)
				||items[i].GetProtoId()==(22096)||items[i].GetProtoId()==(22098)||items[i].GetProtoId()==(22100)
				||items[i].GetProtoId()==(22102)||items[i].GetProtoId()==(22104)||items[i].GetProtoId()==(22106)
				||items[i].GetProtoId()==(22108)||items[i].GetProtoId()==(22109)||items[i].GetProtoId()==(22110)
				||items[i].GetProtoId()==(22111)||items[i].GetProtoId()==(22112)||items[i].GetProtoId()==(22113)
				||items[i].GetProtoId()==(22114)||items[i].GetProtoId()==(22115)||items[i].GetProtoId()==(22116)
				||items[i].GetProtoId()==(22117))
				{
					items.removeAt(i);
					--i;
					--j;
				}
				else if(useFilter!=-1)
				{
					uint type=items[i].GetType();
					bool toDel=false;
					
					switch(useFilter)
					{
						case 0:
						if(type!=(1))
						toDel=true;
						break;
						case 1:
						if(type!=(3))
						toDel=true;
						break;
						case 2:
						if(type!=(4))
						toDel=true;
						break;
						case 3:
						if(type!=(2))
						toDel=true;
						break;
						case 4:
						default:
						if(type==(1)||type==(3)||type==(4)||type==(2))
						toDel=true;
					}
					
					if(toDel)
					{
						items.removeAt(i);
						--i;
						--j;
					}
				}
			}
			
			if((@map!=null))
			{
				if(contId>0)
				{
					Item@container=target.GetMap().GetItem(contId);
					
					if(!(@container!=null)||(container.Proto.Container_Changeble&&!(((container.LockerCondition)&((0x01)))!=0)))
					{
						target.ShowScreen((0),0,"");
						target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
						return;
					}
					
					if(items.length()==0)
					{
						
						target.ShowContainer(null,container,(7));
						target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
						return;
					}
					
					target.Animate(0,(28),null,true,true); 
					
					uint playerItemsVolume=0;
					for(uint i=0,j=items.length();i<j;i++)
					playerItemsVolume+=items[i].Proto.Volume*items[i].GetCount();
					
					uint containerItemsVolume=0;
					array<Item@>cItems;
					uint itemCount=container.GetItems(0,cItems);
					for(uint i=0,j=cItems.length();i<j;i++)
					containerItemsVolume+=cItems[i].Proto.Volume*cItems[i].GetCount();
					
					ProtoItem@pContainer=GetProtoItem(container.GetProtoId());
					if((playerItemsVolume+containerItemsVolume)<=pContainer.Container_Volume)
					{
						MoveItems(items,container,0);
						
					}
					else
					target.Say((11),"Not enough free space in container.");
					
					target.ShowContainer(null,container,(7));
				}
				else if(bodyId>0)
				{
					Critter@body=GetCritter(bodyId);
					
					if((@body!=null)&&body.IsDead()&&target.GetMap().Id==body.GetMap().Id)
					{
						if(items.length()==0)
						{
							
							target.ShowContainer(body,null,(4));
							target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
							return;
						}
						
						target.Animate(0,(27),null,true,true); 
						
						uint playerItemsVolume=0;
						for(uint i=0,j=items.length();i<j;i++)
						playerItemsVolume+=items[i].Proto.Volume*items[i].GetCount();
						
						uint freeWeight=2*body.Param[(11)]-body.ItemsWeight();
						
						if(playerItemsVolume<=freeWeight)
						{
							MoveItems(items,body);
							
						}
						else
						target.Say((11),"Not enough free space in body.");
						
						target.ShowContainer(body,null,(4));
					}
					else
					{
						target.ShowScreen((0),0,"");
						target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
						return;
					}
				}   
				
			}
		} 
		
	}
	target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
	
}

void unsafe_PickAll(Critter&target,int,int,int,string@,array<int>@)
{
	Map@map=target.GetMap();
	array<Item@>items;
	
	if((@map!=null))
	{
		if(!target.IsKnockout()&&!target.IsDead()&&target.Param[(75)]>=5&&!target.IsBusy())
		{
			
			int count=map.GetItems(target.HexX,target.HexY,items);
			if(count>0)
			{
				target.ParamBase[(75)]-=500;
				if(target.Param[(510)]!=0)target.ParamBase[(510)]=0;
				
				for(uint i=0,j=items.length();i<j;i++)
				{
					if(!(((items[i].Flags)&((0x08000000)))!=0))@items[i]=null;
					else if(items[i].GetProtoId()==1825)@items[i]=null;
					else if(items[i].GetProtoId()==1826)@items[i]=null;
					else if(items[i].GetProtoId()==1827)@items[i]=null;
					else if(items[i].GetProtoId()==1812)@items[i]=null;
					else if(items[i].GetProtoId()==9850)@items[i]=null;
					else if(items[i].GetProtoId()==9851)@items[i]=null;
					else if(items[i].GetProtoId()==1854)@items[i]=null;
					else if(items[i].GetProtoId()==1855)@items[i]=null;
					else if(items[i].GetProtoId()==1856)@items[i]=null;
					else if(items[i].GetProtoId()==1857)@items[i]=null;
				}
				target.Say((11),"Picking all items.");
				target.Animate(0,(27),null,true,true);
				target.Wait(1000);
				MoveItems(items,target);
			}
			else
			target.Say((11),"Nothing to pick up.");
		}
	}
	else
	{
		target.Say((11),"You are on worldmap.");
	}
}

void unsafe_DropAll(Critter&target,int,int,int,string@,array<int>@)
{
	if(!target.IsKnockout()&&!target.IsDead()&&target.Param[(75)]>=5&&!target.IsBusy())
	{
		array<Item@>items;
		int count=target.GetItems((0),items);
		if(count>0)
		{
			target.ParamBase[(75)]-=500;
			Critter@[]critters;
			if((@target.GetMap()!=null))
			{target.GetMap().GetCrittersHex(target.HexX,target.HexY,1,(0x01),critters);
				if(critters.length()>1)
				{
					target.Say((11),"Cannot use hotkey.");
					return;
				}
			}
			else
			{target.Say((11),"Cannot use hotkey.");
				return;}
			
			for(uint i=0,j=items.length();i<j;i++)
			{
				if(items[i].GetProtoId()==(9914)||items[i].GetProtoId()==(1864)
				||items[i].GetProtoId()==(1865)||items[i].GetProtoId()==(157)
				||items[i].GetProtoId()==(4608)||items[i].GetProtoId()==(571)||items[i].GetType()==(8)
				||items[i].GetProtoId()==(22096)||items[i].GetProtoId()==(22098)||items[i].GetProtoId()==(22100)
				||items[i].GetProtoId()==(22102)||items[i].GetProtoId()==(22104)||items[i].GetProtoId()==(22106)
				||items[i].GetProtoId()==(22108)||items[i].GetProtoId()==(22109)||items[i].GetProtoId()==(22110)
				||items[i].GetProtoId()==(22111)||items[i].GetProtoId()==(22112)||items[i].GetProtoId()==(22113)
				||items[i].GetProtoId()==(22114)||items[i].GetProtoId()==(22115)||items[i].GetProtoId()==(22116)
				||items[i].GetProtoId()==(22117))
				@items[i]=null;
			}
			target.Say((11),"Dropping all items.");
			target.Animate(0,(27),null,true,true);
			target.Wait(1000);
			if((@target.GetMap()!=null))MoveItems(items,target.GetMap(),target.HexX,target.HexY);
			else DeleteItems(items);
		}
		else
		target.Say((11),"Nothing to drop.");
	}
}

void unsafe_DropOne(Critter&target,int id,int,int,string@,array<int>@)
{
	if(!target.IsKnockout()&&!target.IsDead()&&!target.IsBusy()&&target.ParamBase[(75)]>0)
	{
		Item@itm=GetItem(id);
		if((@itm!=null)&&itm.CritId==target.Id)
		{
			if((@target.GetMap()!=null))
			{
				MoveItem(itm,itm.GetCount(),target.GetMap(),target.HexX,target.HexY);
				
			}
			else
			DeleteItem(itm);
		}
	}
	target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
}

void unsafe_MoveItemCrit2Cont(Critter&target,int itemId,int contId,int,string@,array<int>@)
{
	if(!target.IsKnockout()&&!target.IsDead()&&!target.IsBusy()&&target.ParamBase[(75)]>0)
	{
		Item@itm=GetItem(itemId);
		if((@itm!=null)&&itm.CritId==target.Id)
		{
			if((@target.GetMap()!=null))
			{
				Item@cont=target.GetMap().GetItem(contId);
				if((@cont!=null)&&cont.GetType()==(8))
				{
					
					if(cont.Proto.Container_Changeble&&!(((cont.LockerCondition)&((0x01)))!=0))
					{
						target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
						return;
					}
					
					uint playerItemsVolume=itm.Proto.Volume*itm.GetCount();
					uint containerItemsVolume=0;
					array<Item@>cItems;
					uint itemCount=cont.GetItems(0,cItems);
					for(uint i=0,j=cItems.length();i<j;i++)
					containerItemsVolume+=cItems[i].Proto.Volume*cItems[i].GetCount();
					
					ProtoItem@pContainer=GetProtoItem(cont.GetProtoId());
					if((playerItemsVolume+containerItemsVolume)<=pContainer.Container_Volume)
					{
						if(target.Param[(510)]!=0&&target.GetAccess()<(1))
						{
							int sk=target.Param[(209)]-10*((itm.Proto.Weight*itm.GetCount())/453);
							sk=(((sk)>(95))?(95):(((sk)<(5))?(5):(sk)));
							if(sk<Random(1,100))
							target.ParamBase[(510)]=0;
						}
						
						MoveItem(itm,itm.GetCount(),cont,0);
						cont.Update();
						itm.Update();
						target.ShowContainer(null,cont,(7));
						target.RunClientScript("client_interface@_SetScrolls",0,0,0,"",null);
					}
					else
					{
						if(itm.GetCount()>1)
						{
							int newCnt=(pContainer.Container_Volume-containerItemsVolume);
							if(itm.Proto.Volume>0)
							newCnt=newCnt/itm.Proto.Volume;
							if(newCnt>0)
							{
								if(target.Param[(510)]!=0&&target.GetAccess()<(1))
								{
									int sk=target.Param[(209)]-10*((itm.Proto.Weight*newCnt)/453);
									sk=(((sk)>(95))?(95):(((sk)<(5))?(5):(sk)));
									if(sk<Random(1,100))
									target.ParamBase[(510)]=0;
								}
								
								MoveItem(itm,newCnt,cont,0);
								cont.Update();
								itm.Update();
								target.ShowContainer(null,cont,(7));
								target.RunClientScript("client_interface@_SetScrolls",0,0,0,"",null);
							}
							else
							{
								target.Say((11),"Not enough free space in container.");
								return;
							}
						}
						else
						{
							target.Say((11),"Not enough free space in container.");
							return;
						}
					}
				}
			}
		}
	}
	target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
}

void unsafe_MoveItemCont2Crit(Critter&target,int itemId,int contId,int,string@,array<int>@)
{
	if(!target.IsKnockout()&&!target.IsDead()&&!target.IsBusy()&&target.ParamBase[(75)]>0)
	{
		Item@itm=GetItem(itemId);
		if((@itm!=null))
		{
			if((@target.GetMap()!=null))
			{
				Item@cont=target.GetMap().GetItem(contId);
				if((@cont!=null)&&cont.GetType()==(8))
				{
					int freeWeight=2*target.Param[(11)]-target.ItemsWeight();
					int itemWeight=int(itm.Proto.Weight);
					int itemCount=itm.GetCount();
					
					if(freeWeight<0)
					freeWeight=0;
					
					bool makeTransaction=false;
					if(freeWeight>=itemWeight*itemCount)
					makeTransaction=true;
					else if(itemCount>1)
					{
						if(itemWeight>0)
						itemCount=freeWeight/itemWeight;
						if(itemCount>0)
						makeTransaction=true;
					}
					
					if(itm.ContainerId!=uint(contId))
					{
						target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
						return;
					}
					
					if(cont.Proto.Container_Changeble&&!(((cont.LockerCondition)&((0x01)))!=0))
					{
						target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
						return;
					}
					
					if(makeTransaction)
					{
						if(target.Param[(510)]!=0&&target.GetAccess()<(1))
						{
							int sk=target.Param[(209)]-10*((itm.Proto.Weight*itemCount)/453);
							sk=(((sk)>(95))?(95):(((sk)<(5))?(5):(sk)));
							if(sk<Random(1,100))
							target.ParamBase[(510)]=0;
						}
						
						MoveItem(itm,itemCount,target);
						cont.Update();
						itm.Update();
						target.ShowContainer(null,cont,(7));
						target.RunClientScript("client_interface@_SetScrolls",0,0,0,"",null);
					}
					else
					target.Say((11),"You can't pick that up. You are at your maximum weight capacity.");
				}
			}
		}
	}
	target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
}

void unsafe_HexBotDetected(Critter&player,int numberOfLastActions,int numberOfCurrentActions,int numberOfPossibleCrits,string@,array<int>@playerActions)
{
	if(!(@player!=null))
	return;
	uint16 year=0,month=0,day=0,dayofweek=0,hour=0,minute=0,second=0;
	GetGameTime(__FullSecond,year,month,day,dayofweek,hour,minute,second);
	
	array<uint>lastActionsForHexBot;
	array<uint>currentActionsForHexBot;
	array<Critter@>critsForHexBot;
	
	if(numberOfLastActions==0)FLog((8),"Can't receive previous ChosenActions. Maybe it's empty array.");
	else for(uint8 i=0;i<numberOfLastActions;i++)lastActionsForHexBot.insertLast(playerActions[i]);
	
	if(numberOfCurrentActions==0)FLog((8),"Can't receive current ChosenActions. Something is wrong - this shouldn't run.");
	else for(uint8 i=numberOfLastActions;i<numberOfCurrentActions+numberOfLastActions;i++)currentActionsForHexBot.insertLast(playerActions[i]);
	
	if(numberOfPossibleCrits==0)FLog((8),"Can't receive possible Critters (victims). Something is wrong - this shouldn't run.");
	else for(uint8 i=numberOfLastActions+numberOfPossibleCrits;i<numberOfCurrentActions+numberOfLastActions+numberOfPossibleCrits;i++)critsForHexBot.insertLast(GetCritter(playerActions[i]));
	uint8 mode=0;
	if(((((mode)&0xF))==0?player.GetSlotProto((1),mode).Weapon_Skill_0:((((mode)&0xF))==1?player.GetSlotProto((1),mode).Weapon_Skill_1:((((mode)&0xF))==2?player.GetSlotProto((1),mode).Weapon_Skill_2:0)))==(203))
	return;
	
	string textToLog="";
	bool savelog=false;
	file r;
	if(numberOfLastActions!=0)
	{
		for(uint8 i=0;i<lastActionsForHexBot.length();i+=7)
		{
			switch(i)
			{
				case 0:textToLog="Last primary action was: ";break;
				case 7:textToLog="Last secondary action was: ";break;
				default:textToLog="Last there was something else, but not important.";
			}
			if(i==0||i==7)switch(lastActionsForHexBot[i])
			{
				case 0:textToLog+="CHOSEN_NONE (0)";break;
				case 1:textToLog+="CHOSEN_MOVE (1)";
				textToLog+=" to HexX <"+lastActionsForHexBot[i+1]+">, HexY <"+lastActionsForHexBot[i+2]+"> by "+(lastActionsForHexBot[i+3]==1?"running":"walking")+".";
				break;
				case 2:textToLog+="CHOSEN_MOVE_TO_CRIT (2)";
				textToLog+=" to critter.Id <"+lastActionsForHexBot[i+1]+">, "+(GetCritter(lastActionsForHexBot[i+1]).IsPlayer()?"player: ":"NPC: ")+GetCritter(lastActionsForHexBot[i+1]).Name+" by "+(lastActionsForHexBot[i+3]==1?"running":"walking")+".";
				break;
				case 3:textToLog+="CHOSEN_DIR (3)";break;
				case 4:textToLog+="CHOSEN_SHOW_ITEM (4)";
				textToLog+=" to Item.Id <"+lastActionsForHexBot[i+1]+">";
				break;
				case 5:textToLog+="CHOSEN_HIDE_ITEM (5)";
				textToLog+=" to Item.Id <"+lastActionsForHexBot[i+1]+">";
				break;
				case 6:textToLog+="CHOSEN_USE_ITEM (6)";
				textToLog+=" by Item.Id <"+lastActionsForHexBot[i+1]+">, PID <"+lastActionsForHexBot[i+2]+"> on ";
				switch(lastActionsForHexBot[i+3])
				{
					case 0:textToLog+="him self.";break;
					case 1:textToLog+="own item, ID: "+lastActionsForHexBot[i+4]+".";break;
					case 2:textToLog+="critter, ID: "+lastActionsForHexBot[i+4]+" "+(GetCritter(lastActionsForHexBot[i+4]).IsPlayer()?"player: ":"NPC: ")+GetCritter(lastActionsForHexBot[i+4]).Name+" by mode <"+lastActionsForHexBot[i+5]+".";break;
					case 3:textToLog+="item, ID: "+lastActionsForHexBot[i+4]+" by mode <"+lastActionsForHexBot[i+5]+".";break;
					case 4:textToLog+="scenery.";break;
				}
				savelog=true;
				break;
				case 7:textToLog+="CHOSEN_MOVE_ITEM (7)";
				textToLog+=" Item.Id <"+lastActionsForHexBot[i+1]+">, count <"+lastActionsForHexBot[i+2]+"> to ";
				switch(lastActionsForHexBot[i+3])
				{
					case 0:textToLog+=" inventory.";break;
					case 1:textToLog+=" first hand.";break;
					case 2:textToLog+=" second hand.";break;
					case 3:textToLog+=" armor slot.";break;
					case 4:textToLog+=" headgear slot.";break;
					case 5:textToLog+=" trophy slot.";break;
				}
				break;
				case 8:textToLog+="CHOSEN_MOVE_ITEM_CONT (8)";break;
				case 9:textToLog+="CHOSEN_TAKE_ALL (9)";break;
				case 10:textToLog+="CHOSEN_USE_SKL_ON_CRITTER (10)";
				switch(lastActionsForHexBot[i+1])
				{
					case(200):textToLog+=" Small Guns";break;
					case(201):textToLog+=" Big Guns";break;
					case(202):textToLog+=" Energy Weapons";break;
					case(203):textToLog+=" Close Combat";break;
					case(204):textToLog+=" Learning";break;
					case(205):textToLog+=" Throwing";break;
					case(206):textToLog+=" First Aid";break;
					case(207):textToLog+=" Doctor";break;
					case(208):textToLog+=" Sneak";break;
					case(209):textToLog+=" Robbery";break;
					case(210):textToLog+=" Engineering";break;
					case(211):textToLog+=" Traps";break;
					case(212):textToLog+=" Science";break;
					case(213):textToLog+=" Repair";break;
					case(214):textToLog+=" Speech";break;
					case(215):textToLog+=" Barter";break;
					case(216):textToLog+=" Crafting";break;
					case(217):textToLog+=" Outdoorsman";break;
				}
				textToLog+=" on "+(GetCritter(lastActionsForHexBot[i+2]).IsPlayer()?"player: ":"NPC: ")+GetCritter(lastActionsForHexBot[i+2]).Name+".";
				break;
				case 11:textToLog+="CHOSEN_USE_SKL_ON_ITEM (11)";
				textToLog+=" on "+(lastActionsForHexBot[i+1]==1?"own":"")+" item, ID: "+lastActionsForHexBot[i+3]+", by";
				switch(lastActionsForHexBot[i+2])
				{
					case(200):textToLog+=" Small Guns";break;
					case(201):textToLog+=" Big Guns";break;
					case(202):textToLog+=" Energy Weapons";break;
					case(203):textToLog+=" Close Combat";break;
					case(204):textToLog+=" Learning";break;
					case(205):textToLog+=" Throwing";break;
					case(206):textToLog+=" First Aid";break;
					case(207):textToLog+=" Doctor";break;
					case(208):textToLog+=" Sneak";break;
					case(209):textToLog+=" Robbery";break;
					case(210):textToLog+=" Engineering";break;
					case(211):textToLog+=" Traps";break;
					case(212):textToLog+=" Science";break;
					case(213):textToLog+=" Repair";break;
					case(214):textToLog+=" Speech";break;
					case(215):textToLog+=" Barter";break;
					case(216):textToLog+=" Crafting";break;
					case(217):textToLog+=" Outdoorsman";break;
				}
				textToLog+=" skill.";
				break;
				case 12:textToLog+="CHOSEN_USE_SKL_ON_SCEN (12)";
				textToLog+=" on scenery PID <"+lastActionsForHexBot[i+2]+">, on HexX <"+lastActionsForHexBot[i+3]+">, HexY <"+lastActionsForHexBot[i+4]+">, by";
				switch(lastActionsForHexBot[i+1])
				{
					case(200):textToLog+=" Small Guns";break;
					case(201):textToLog+=" Big Guns";break;
					case(202):textToLog+=" Energy Weapons";break;
					case(203):textToLog+=" Close Combat";break;
					case(204):textToLog+=" Learning";break;
					case(205):textToLog+=" Throwing";break;
					case(206):textToLog+=" First Aid";break;
					case(207):textToLog+=" Doctor";break;
					case(208):textToLog+=" Sneak";break;
					case(209):textToLog+=" Robbery";break;
					case(210):textToLog+=" Engineering";break;
					case(211):textToLog+=" Traps";break;
					case(212):textToLog+=" Science";break;
					case(213):textToLog+=" Repair";break;
					case(214):textToLog+=" Speech";break;
					case(215):textToLog+=" Barter";break;
					case(216):textToLog+=" Crafting";break;
					case(217):textToLog+=" Outdoorsman";break;
				}
				textToLog+=" skill.";
				break;
				case 13:textToLog+="CHOSEN_TALK_NPC (13)";
				textToLog+=" with NPC ID: "+lastActionsForHexBot[i+1]+", "+GetCritter(lastActionsForHexBot[i+1]).Name+".";
				break;
				case 14:textToLog+="CHOSEN_PICK_ITEM (14)";
				textToLog+=" item PID <"+lastActionsForHexBot[i+1]+" from HexX <"+lastActionsForHexBot[i+2]+">, HexY <"+lastActionsForHexBot[i+3]+">.";
				break;
				case 15:textToLog+="CHOSEN_PICK_CRIT (15)";
				textToLog+=" "+(GetCritter(lastActionsForHexBot[i+1]).IsPlayer()?"player: ":"NPC: ")+GetCritter(lastActionsForHexBot[i+1]).Name+" by "+(lastActionsForHexBot[i+2]==0?"looting":"pushing")+".";
				break;
				case 16:textToLog+="CHOSEN_WRITE_HOLO (16)";break;
				default:textToLog+="UNKNOWN ACTION!";
			}
			if(savelog)
			{
				FLog((8),player.Name+": "+textToLog);
				
				r.open("logs/hexbot.txt","w");
				r.writeString(player.Name+": "+textToLog);
				r.close();
			}
		}
	}
	
	if(numberOfCurrentActions!=0)
	{
		textToLog="Current action: ";
		
		for(uint8 i=0;i<currentActionsForHexBot.length();i+=7)
		{
			if(i==0&&currentActionsForHexBot[i]==1)
			{
				textToLog+="CHOSEN_MOVE (1)";
				textToLog+=" to HexX <"+currentActionsForHexBot[i+1]+">, HexY <"+currentActionsForHexBot[i+2]+"> by "+(currentActionsForHexBot[i+3]==1?"running":"walking")+".";
			}
		}
		if(savelog)
		{
			FLog((8),player.Name+": "+textToLog);
			
			r.open("logs/hexbot.txt","w");
			r.writeString(player.Name+": "+textToLog);
			r.close();
		}
	}
	
	if(numberOfCurrentActions!=0)
	{
		textToLog="There "+(numberOfPossibleCrits==1?"was":"were")+" "+critsForHexBot.length()+" critter"+(numberOfPossibleCrits==1?"":"s")+":\n";
		
		for(uint8 i=0;i<critsForHexBot.length();i++)
		{
			if(critsForHexBot[i].IsPlayer())
			{
				textToLog+="Player: "+critsForHexBot[i].Name+", ID: <"+critsForHexBot[i].Id+">.";
			}
			else
			{
				textToLog+="NPC: "+critsForHexBot[i].Name+", ID: <"+critsForHexBot[i].Id+">.";
			}
			
			if(i!=critsForHexBot.length()-1)textToLog+="\n";
		}
		
		FLog((8),player.Name+": "+textToLog);
		file f;
		f.open("logs/hexbot.txt","w");
		f.writeString(player.Name+": "+textToLog);
		f.close();
	} 
	
	if(numberOfCurrentActions!=7||numberOfPossibleCrits==0)
	{
		Log("Unknown exception, break.");
		FLog((8),"Unknown exception, break.");
		return;
	}  
	
	FLog((8),player.Name+"Hexbotter.");
	file x;
	x.open("logs/hexbot.txt","w");
	x.writeString(player.Name+" hexbot detected check logs ");
	x.close();
}

void unsafe_umbra(Critter&player,int cursor,int click,int key,string@keyText,array<int>@playerActions)
{
	uint16 year=0,month=0,day=0,dayofweek=0,hour=0,minute=0,second=0,ms=0;
	
	GetTime(year,month,day,dayofweek,hour,minute,second,ms);
	string@curso=" ";
	if(key==0)
	switch(click)
	{
		case 0:curso=" left click ";break;
		case 1:curso=" right click ";break;
		case 2:curso=" middle click ";break;
		case 3:curso=" scroll up ";break;
		case 4:curso=" scroll down ";break;
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		curso=" extra "+click;break;
		
	}
	
	string@clicko=" ";
	if(key==0)
	switch(cursor)
	{
		case 0:clicko=" defualt cursor ";break;
		case 1:clicko=" move cursor ";break;
		case 2:clicko=" use object cursor ";break;
		case 3:clicko=" aiming cursor ";break;
		case 4:clicko=" skill cursor ";break;
		case 5:clicko=" wait cursor ";break;
		case 6:clicko=" hand cursor ";break;
	}
	file x;
	x.open("logs/umbra.txt","a");
	x.writeString("["+x.getSize()+"] "+player.Name+curso+clicko+keyText+"\n");
	
	string textToLog="";
	for(uint8 i=0;i<playerActions.length();i+=7)
	{
		switch(i)
		{
			case 0:textToLog="Last primary action was: ";break;
			case 7:textToLog="Last secondary action was: ";break;
			default:textToLog="Last there was something else, but not important.";
		}
		if(i==0||i==7)switch(playerActions[i])
		{
			case 0:textToLog+="CHOSEN_NONE (0)";break;
			case 1:textToLog+="CHOSEN_MOVE (1)";
			textToLog+=" to HexX <"+playerActions[i+1]+">, HexY <"+playerActions[i+2]+"> by "+(playerActions[i+3]==1?"running":"walking")+".";
			break;
			case 2:textToLog+="CHOSEN_MOVE_TO_CRIT (2)";
			textToLog+=" to critter.Id <"+playerActions[i+1]+">, "+(GetCritter(playerActions[i+1]).IsPlayer()?"player: ":"NPC: ")+GetCritter(playerActions[i+1]).Name+" by "+(playerActions[i+3]==1?"running":"walking")+".";
			break;
			case 3:textToLog+="CHOSEN_DIR (3)";break;
			case 4:textToLog+="CHOSEN_SHOW_ITEM (4)";
			textToLog+=" to Item.Id <"+playerActions[i+1]+">";
			break;
			case 5:textToLog+="CHOSEN_HIDE_ITEM (5)";
			textToLog+=" to Item.Id <"+playerActions[i+1]+">";
			break;
			case 6:textToLog+="CHOSEN_USE_ITEM (6)";
			textToLog+=" by Item.Id <"+playerActions[i+1]+">, PID <"+playerActions[i+2]+"> on ";
			switch(playerActions[i+3])
			{
				case 0:textToLog+="him self.";break;
				case 1:textToLog+="own item, ID: "+playerActions[i+4]+".";break;
				case 2:textToLog+="critter, ID: "+playerActions[i+4]+" "+(GetCritter(playerActions[i+4]).IsPlayer()?"player: ":"NPC: ")+GetCritter(playerActions[i+4]).Name+" by mode <"+playerActions[i+5]+".";break;
				case 3:textToLog+="item, ID: "+playerActions[i+4]+" by mode <"+playerActions[i+5]+".";break;
				case 4:textToLog+="scenery.";break;
			}
			break;
			case 7:textToLog+="CHOSEN_MOVE_ITEM (7)";
			textToLog+=" Item.Id <"+playerActions[i+1]+">, count <"+playerActions[i+2]+"> to ";
			switch(playerActions[i+3])
			{
				case 0:textToLog+=" inventory.";break;
				case 1:textToLog+=" first hand.";break;
				case 2:textToLog+=" second hand.";break;
				case 3:textToLog+=" armor slot.";break;
				case 4:textToLog+=" headgear slot.";break;
				case 5:textToLog+=" trophy slot.";break;
			}
			break;
			case 8:textToLog+="CHOSEN_MOVE_ITEM_CONT (8)";break;
			case 9:textToLog+="CHOSEN_TAKE_ALL (9)";break;
			case 10:textToLog+="CHOSEN_USE_SKL_ON_CRITTER (10)";
			switch(playerActions[i+1])
			{
				case(200):textToLog+=" Small Guns";break;
				case(201):textToLog+=" Big Guns";break;
				case(202):textToLog+=" Energy Weapons";break;
				case(203):textToLog+=" Close Combat";break;
				case(204):textToLog+=" Learning";break;
				case(205):textToLog+=" Throwing";break;
				case(206):textToLog+=" First Aid";break;
				case(207):textToLog+=" Doctor";break;
				case(208):textToLog+=" Sneak";break;
				case(209):textToLog+=" Robbery";break;
				case(210):textToLog+=" Engineering";break;
				case(211):textToLog+=" Traps";break;
				case(212):textToLog+=" Science";break;
				case(213):textToLog+=" Repair";break;
				case(214):textToLog+=" Speech";break;
				case(215):textToLog+=" Barter";break;
				case(216):textToLog+=" Crafting";break;
				case(217):textToLog+=" Outdoorsman";break;
			}
			textToLog+=" on "+(GetCritter(playerActions[i+2]).IsPlayer()?"player: ":"NPC: ")+GetCritter(playerActions[i+2]).Name+".";
			break;
			case 11:textToLog+="CHOSEN_USE_SKL_ON_ITEM (11)";
			textToLog+=" on "+(playerActions[i+1]==1?"own":"")+" item, ID: "+playerActions[i+3]+", by";
			switch(playerActions[i+2])
			{
				case(200):textToLog+=" Small Guns";break;
				case(201):textToLog+=" Big Guns";break;
				case(202):textToLog+=" Energy Weapons";break;
				case(203):textToLog+=" Close Combat";break;
				case(204):textToLog+=" Learning";break;
				case(205):textToLog+=" Throwing";break;
				case(206):textToLog+=" First Aid";break;
				case(207):textToLog+=" Doctor";break;
				case(208):textToLog+=" Sneak";break;
				case(209):textToLog+=" Robbery";break;
				case(210):textToLog+=" Engineering";break;
				case(211):textToLog+=" Traps";break;
				case(212):textToLog+=" Science";break;
				case(213):textToLog+=" Repair";break;
				case(214):textToLog+=" Speech";break;
				case(215):textToLog+=" Barter";break;
				case(216):textToLog+=" Crafting";break;
				case(217):textToLog+=" Outdoorsman";break;
			}
			textToLog+=" skill.";
			break;
			case 12:textToLog+="CHOSEN_USE_SKL_ON_SCEN (12)";
			textToLog+=" on scenery PID <"+playerActions[i+2]+">, on HexX <"+playerActions[i+3]+">, HexY <"+playerActions[i+4]+">, by";
			switch(playerActions[i+1])
			{
				case(200):textToLog+=" Small Guns";break;
				case(201):textToLog+=" Big Guns";break;
				case(202):textToLog+=" Energy Weapons";break;
				case(203):textToLog+=" Close Combat";break;
				case(204):textToLog+=" Learning";break;
				case(205):textToLog+=" Throwing";break;
				case(206):textToLog+=" First Aid";break;
				case(207):textToLog+=" Doctor";break;
				case(208):textToLog+=" Sneak";break;
				case(209):textToLog+=" Robbery";break;
				case(210):textToLog+=" Engineering";break;
				case(211):textToLog+=" Traps";break;
				case(212):textToLog+=" Science";break;
				case(213):textToLog+=" Repair";break;
				case(214):textToLog+=" Speech";break;
				case(215):textToLog+=" Barter";break;
				case(216):textToLog+=" Crafting";break;
				case(217):textToLog+=" Outdoorsman";break;
			}
			textToLog+=" skill.";
			break;
			case 13:textToLog+="CHOSEN_TALK_NPC (13)";
			textToLog+=" with NPC ID: "+playerActions[i+1]+", "+GetCritter(playerActions[i+1]).Name+".";
			break;
			case 14:textToLog+="CHOSEN_PICK_ITEM (14)";
			textToLog+=" item PID <"+playerActions[i+1]+" from HexX <"+playerActions[i+2]+">, HexY <"+playerActions[i+3]+">.";
			break;
			case 15:textToLog+="CHOSEN_PICK_CRIT (15)";
			textToLog+=" "+(GetCritter(playerActions[i+1]).IsPlayer()?"player: ":"NPC: ")+GetCritter(playerActions[i+1]).Name+" by "+(playerActions[i+2]==0?"looting":"pushing")+".";
			break;
			case 16:textToLog+="CHOSEN_WRITE_HOLO (16)";break;
			default:textToLog+="UNKNOWN ACTION!";
		}
		x.writeString(year+"."+month+"."+day+" "+hour+":"+minute+":"+second+":"+ms+" "+textToLog);
	}
	
	x.writeString("\n");
	bool writeit=false;
	if(x.getSize()>1000000)
	writeit=true;
	
	x.close();
	if(writeit)
	{
		file f;
		f.open("logs/umbra.txt","w");
		f.writeString(" ===log reseted=== ");
		f.close();
	}
}

void unsafe_MoveItemBody2Crit(Critter&target,int itemId,int bodyId,int,string@,array<int>@)
{
	if(!target.IsKnockout()&&!target.IsDead()&&!target.IsBusy()&&target.ParamBase[(75)]>0)
	{
		Item@itm=GetItem(itemId);
		if((@itm!=null))
		{
			Critter@body=GetCritter(bodyId);
			
			if((@body!=null)&&body.IsDead()&&target.GetMap().Id==body.GetMap().Id&&itm.CritId==body.Id)
			{
				int freeWeight=2*target.Param[(11)]-target.ItemsWeight();
				int itemWeight=int(itm.Proto.Weight);
				int itemCount=itm.GetCount();
				
				if(freeWeight<0)
				freeWeight=0;
				
				bool makeTransaction=false;
				if(freeWeight>=itemWeight*itemCount)
				makeTransaction=true;
				else if(itemCount>1)
				{
					if(itemWeight>0)
					itemCount=freeWeight/itemWeight;
					if(itemCount>0)
					makeTransaction=true;
				}
				if(makeTransaction)
				{
					if(target.Param[(510)]!=0&&Random(0,1)==1&&target.GetAccess()<(1))
					target.ParamBase[(510)]=0;
					
					MoveItem(itm,itemCount,target);
					
					itm.Update();
					target.ShowContainer(body,null,(4));
					target.RunClientScript("client_interface@_SetScrolls",0,0,0,"",null);
				}
				else
				target.Say((11),"You can't pick that up. You are at your maximum weight capacity.");
			}
		}
	}
	target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
}

void unsafe_MoveItemCrit2Body(Critter&target,int itemId,int bodyId,int,string@,array<int>@)
{
	if(!target.IsKnockout()&&!target.IsDead()&&!target.IsBusy()&&target.ParamBase[(75)]>0)
	{
		Item@itm=GetItem(itemId);
		if((@itm!=null)&&itm.CritId==target.Id)
		{
			Critter@body=GetCritter(bodyId);
			
			if((@body!=null)&&body.IsDead()&&target.GetMap().Id==body.GetMap().Id&&itm.CritId==target.Id)
			{
				int freeWeight=2*body.Param[(11)]-body.ItemsWeight();
				int itemWeight=int(itm.Proto.Weight);
				int itemCount=itm.GetCount();
				
				if(freeWeight<0)
				freeWeight=0;
				
				bool makeTransaction=false;
				if(freeWeight>=itemWeight*itemCount)
				makeTransaction=true;
				else if(itemCount>1)
				{
					if(itemWeight>0)
					itemCount=freeWeight/itemWeight;
					if(itemCount>0)
					makeTransaction=true;
				}
				if(makeTransaction)
				{
					if(target.Param[(510)]!=0&&Random(0,1)==1&&target.GetAccess()<(1))
					target.ParamBase[(510)]=0;
					
					MoveItem(itm,itemCount,body);
					
					itm.Update();
					target.ShowContainer(body,null,(4));
					target.RunClientScript("client_interface@_SetScrolls",0,0,0,"",null);
				}
				else
				target.Say((11),"Not enough free space.");
			}
		}
	}
	target.RunClientScript("client_interface@_EnableItemsMove",0,0,0,"",null);
}

void unsafe_play_rr(Critter&player,int,int,int,string@,array<int>@)
{
	Item@[]items;
	
	uint count=player.GetItems((1),items);
	
	if(count>0)
	{
		const ProtoItem@protoBron=items[0].Proto;
		if(items[0].GetProtoId()==(313)&&items[0].AmmoCount!=0)
		{
			int roll=Random(0,99);
			int baseChance=items[0].AmmoCount*100;
			int extChance=0;
			
			if(player.Param[(215)]>50)extChance+=(player.Param[(215)]-50)/2;
			if(baseChance>extChance)baseChance=baseChance-extChance;
			else baseChance=50;
			baseChance=(((baseChance)>(600))?(600):(((baseChance)<(50))?(50):(baseChance)));
			
			if(Random(0,599)>baseChance)
			{
				player.PlaySound((Random(0,1)==0?"WOVXXXX1.ACM":"WOV1XXX1.ACM"),true);
				if(items[0].AmmoCount==1)player.Say((2),"|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" Pulls the trigger, uses "+items[0].AmmoCount+" bullet.");
				else player.Say((2),"|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" Pulls the trigger using "+items[0].AmmoCount+" bullets.");
				return;
			}
			else
			{
				player.PlaySound((Random(0,1)==0?"WAE1XXX1.ACM":"WAE1XXX2.ACM"),true);
				if(items[0].AmmoCount==1)player.Say((2),"|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" Pulls the trigger, uses "+items[0].AmmoCount+" bullet.");
				else player.Say((2),"|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" Pulls the trigger using "+items[0].AmmoCount+" bullets.");
				player.ToDead(Random(102,103),null);
				items[0].AmmoCount-=1;
				items[0].Update();
				return;
			}
			
		}
	}
	player.Say((11),"To play russian roulette, you need a loaded magnum revolver."); 
	
	return;
}

bool PushCritter(Map&map,Critter@cr,uint8 leadDir,uint8 depth)
{
	if(!(@cr!=null))
	return true;
	
	if(depth==0)
	return false;
	
	uint16 hx=cr.HexX;
	uint16 hy=cr.HexY;
	map.MoveHexByDir(hx,hy,leadDir,1);
	if(map.IsHexPassed(hx,hy)||(@map.GetCritter(hx,hy)!=null))
	if(PushCritter(map,map.GetCritter(hx,hy),leadDir,depth-1))
	{
		cr.ToKnockout(((!(cr.Dir==leadDir||cr.Dir==((leadDir+1)%6)||cr.Dir==((leadDir-1)%6)))?(82):(83)),((!(cr.Dir==leadDir||cr.Dir==((leadDir+1)%6)||cr.Dir==((leadDir-1)%6)))?(86):(87)),((!(cr.Dir==leadDir||cr.Dir==((leadDir+1)%6)||cr.Dir==((leadDir-1)%6)))?(88):(89)),0,hx,hy);
		return true;
	}
	
	hx=cr.HexX;
	hy=cr.HexY;
	map.MoveHexByDir(hx,hy,(leadDir+1)%6,1);
	if(map.IsHexPassed(hx,hy)||(@map.GetCritter(hx,hy)!=null))
	if(PushCritter(map,map.GetCritter(hx,hy),leadDir,depth-1))
	{
		cr.ToKnockout(((!(cr.Dir==leadDir||cr.Dir==((leadDir+1)%6)||cr.Dir==((leadDir-1)%6)))?(82):(83)),((!(cr.Dir==leadDir||cr.Dir==((leadDir+1)%6)||cr.Dir==((leadDir-1)%6)))?(86):(87)),((!(cr.Dir==leadDir||cr.Dir==((leadDir+1)%6)||cr.Dir==((leadDir-1)%6)))?(88):(89)),0,hx,hy);
		return true;
	}
	
	hx=cr.HexX;
	hy=cr.HexY;
	map.MoveHexByDir(hx,hy,(leadDir-1)%6,1);
	if(map.IsHexPassed(hx,hy)||(@map.GetCritter(hx,hy)!=null))
	if(PushCritter(map,map.GetCritter(hx,hy),leadDir,depth-1))
	{
		cr.ToKnockout(((!(cr.Dir==leadDir||cr.Dir==((leadDir+1)%6)||cr.Dir==((leadDir-1)%6)))?(82):(83)),((!(cr.Dir==leadDir||cr.Dir==((leadDir+1)%6)||cr.Dir==((leadDir-1)%6)))?(86):(87)),((!(cr.Dir==leadDir||cr.Dir==((leadDir+1)%6)||cr.Dir==((leadDir-1)%6)))?(88):(89)),0,hx,hy);
		return true;
	}
	return false;
}

void unsafe_PushCritter(Critter&player,int p0,int p1,int p2,string@message,array<int>@param4)
{
	Critter@cr=GetCritter(p0);
	if(!(@cr!=null))
	return;
	if(!cr.IsPlayer())
	return;
	if(!IsFlaggedAsIllegal(cr))
	return;
	if(GetCritterIllegalFlag(cr)&(0x00000004)==0)
	{
		player.Say((11),"This one isn't blocking anything yet.");
		return;
	}
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return;
	if(GetCrittersDistantion(player,cr)!=1)
	return;
	if(PushCritter(map,cr,GetDirection(player.HexX,player.HexY,cr.HexX,cr.HexY),5))
	{
		cr.Say((11),"You were pushed away by "+GetSafePlayerName(player.Id)+".");
		
	}
	else
	player.Say((11),"It's too crowded here.");
}

void unsafe_OOC(Critter&player,int,int,int,string@message,array<int>@)
{
	if(!(@message!=null)||message.rawLength()==0)
	return;
	
	bool skip=true;
	for(uint m=0,mlen=message.rawLength();m<mlen;m++)
	{
		if(message.rawGet(m)!=' ')
		{
			skip=false;
			break;
		}
	}
	if(skip)
	return;
	
	uint color=(uint((0xFF<<24)|(((130)&0xFF)<<16)|(((115)&0xFF)<<8)|((77)&0xFF)));
	uint sayType=(1);
	if(player.IsKnockout()||player.IsDead())return; 
	
	player.Say(sayType,"|"+color+" "+message);
}

import void unsafe_ExecCommand(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)from"cheats";
void unsafe_gameinfo(Critter&player,int,int,int,string@message,array<int>@)
{
	player.Say((11),"Command: "+message+".");
	if(player.GetAccess()<(1))
	{
		player.Say((11),"Access denied.");
	}
	else
	{
		unsafe_ExecCommand(player,0,0,0,message,null);
	}
}

string@AuthPasswordOwner(string&password)
{
	IConfigFile@getaccess=GetConfigFile("config\\GetAccess.cfg");
	if(!(@getaccess!=null))
	{
		Log("AccessFile invalid.");
		return(null);
	}
	
	array<string>sections;
	getaccess.GetSections(sections);
	for(uint s=0;s<sections.length();s++)
	{
		string@pass=GetConfigValue(getaccess.GetName(),sections[s],"Password");
		if((@pass!=null)&&password==pass)
		return(sections[s]);
	}
	return(null);
}

bool accessfile_loaded=false;
void accessfile_load(string&filename)
{
	if(LoadConfig(filename))
	{
		accessfile_loaded=true;
		return;
	}
	else
	{
		if((@GetConfigFile(filename)!=null))
		{
			accessfile_loaded=true;
			return;
		}
	}
	
	Log("!!! ACCESS FILE NOT LOADED !!! Panic.");
}

void unsafe_getaccess(Critter&player,int,int,int,string@message,array<int>@)
{
	if(!accessfile_loaded)
	accessfile_load("config\\GetAccess.cfg");
	
	if(!(@message!=null))
	return;
	
	if(message.length()==0)
	return;
	
	string denied="Access denied.";
	array<string@>@words=splitEx(message,"|");
	if(words.length()!=2)
	{
		player.Say((11),denied);
		return;
	}
	
	uint8 access=access_level(words[0]);
	uint8 oldaccess=player.GetAccess();
	
	if(access==(0))
	{
		if(words[1]=="pass")
		{
			RemoveAuthed(player.Id);
			player.Say((11),"Access changed.");
			player.SetAccess(access);
		}
		else
		player.Say((11),denied);
		return;
	}
	else
	{
		string@owner=AuthPasswordOwner(words[1]);
		if((@owner!=null))
		{
			int maxaccess=(0);
			string@sMaxaccess=GetConfigValue("config\\GetAccess.cfg",owner,"Access");
			if((@sMaxaccess!=null))
			{
				maxaccess=access_level(sMaxaccess);
				if(int(access)>maxaccess)
				{
					player.Say((11),denied);
					return;
				}
				else
				{
					SetAuthed(player.Id,owner);
					player.Say((11),"Access changed."+(oldaccess==(0)?" Welcome back, "+owner+".":""));
					player.SetAccess(access);
					GMLog(player,"Authenticated: "+owner+" ("+access_level(oldaccess)+"->"+access_level(access)+")");
					
					string@crs=GetConfigValue("config\\GetAccess.cfg",owner,"Critters");
					if((@crs!=null))
					{
						bool found=false;
						array<string@>@critters=splitEx(crs,",");
						for(uint c=0;c<critters.length();c++)
						{
							if(critters[c]==(""+player.Id))
							{
								found=true;
								break;
							}
						}
						if(!found)
						{
							critters.insertLast(""+player.Id);
							
							SetConfigValue("config\\GetAccess.cfg",owner,"Critters",join(critters,","));
							SaveConfig("config\\GetAccess.cfg");
						}
					}
					else
					{
						SetConfigValue("config\\GetAccess.cfg",owner,"Critters",player.Id);
						SaveConfig("config\\GetAccess.cfg");
					}
					
					player_getaccess(player,access,words[1]);
				}
			}
			else
			player.Say((11),denied);
		}
		else
		player.Say((11),denied);
	}
}

void unsafe_disconnect(Critter&player,int,int,int,string@message,array<int>@)
{
	player.Disconnect();
}   

import uint GetUnassignedFactionNames(array<int>&res)from"factions";
void unsafe_FreeFactionNames(Critter&player,int,int,int,string@,array<int>@)
{
	array<int>list;
	uint num=GetUnassignedFactionNames(list);
	player.RunClientScript("_FreeFactionNames",0,0,0,"",list);
} 

void unsafe_FactionNames(Critter&player,int,int,int,string@,array<int>@)
{
	int id=-1;
	player.Say((11),"FACTION LIST:");
	for(uint f=0,fcount=GetFactionsCount();f<fcount;f++)
	{
		IFaction@faction=GetFactionByIdx(f);
		if(!(@faction!=null))
		continue;
		if((id>0&&faction.get_Id()!=id)||
		(id<0&&(faction.get_Id()<2||faction.get_Id()>4096)))
		continue;
		
		int fid=(id>0?id:faction.get_Id());
		
		player.Say((11),""+fid+" "+faction.get_Name());
	}
	
}

void unsafe_MyInfo(Critter&player,int,int,int,string@,array<int>@)
{
	string red="|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" ";
	string green="|"+(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)))+" ";
	
	GameVar@var; 
	
	player.Say((11),
	"Name: "+red+player.Name+
	green+", Id: "+red+player.Id+
	(player.GetAccess()>(0)?(green+", Access: "+red+GetAuthString(player.GetAccess())):"")
	);
	
	player.Say((11),"You were born "+red+
	GetLvar(player,(9003))+"."+
	GetLvar(player,(9004))+"."+
	GetLvar(player,(9002)));
	
	myinfo_tent(player);
	
	if(GodOfTheRealm(player.Id))
	player.Say((11),red+"You are "+(WrathOfTheGod(player)?"":"forgotten ")+"god of this realm.");
}

void unsafe_resign(Critter&player,int,int,int,string@,array<int>@)
{
	string red="|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" ";
	string green="|"+(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)))+" ";
	int teamid=player.Param[(106)];
	int res=0;
	res=AddMember(1,player.Id,true);
}
import void AddBan(Critter&banner,int bannedid,int withip,int hours,string reasonwhy)from"main";
void unsafe_accept(Critter&player,int factionid,int,int,string@,array<int>@)
{
	int res=0;
	if(factionid==4)
	{
		player.Say((11),"NICE TRY, 1h ban");
		AddBan(player,player.Id,0,1,"NICE TRY");
		return;
	}
	if(GetStatus(factionid,player.Id)==(4))
	res=AddMember(factionid,player.Id,false);
} 

void unsafe_invite(Critter&player,int,int,int,string@playerName,array<int>@)
{             
	
	string red="|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" ";
	string green="|"+(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)))+" ";
	if(GetPlayerRank(player.Id)<(4))
	{
		player.Say((11),"Too low rank");
		return;
	}
	if(!(@playerName!=null)||playerName.length()==0)
	return; 
	
	uint initiateId=GetPlayerId(playerName);
	if(initiateId==0)
	{
		player.Say((11),"Player not found");
		return;
	}
	
	uint factionId=player.Param[(106)];
	
	if(IsMemberOffline(factionId,initiateId))
	{
		player.Say((11),"Already a member");
		return;
	}
	
	int res=InvitePlayer(factionId,initiateId);
	if(res!=(0))
	player.Say((11),"ERR: "+FD_Result2String(res));
	else
	{
		
		GameVar@var=GetLocalVar((3029),player.Id);
		if(!(@var!=null))
		{
			Log("ERR: Variable LVAR_terminal_current not defined");
		}
		var=initiateId;
		
		IFaction@faction=GetFaction(factionId);
		Critter@initiate=GetCritter(initiateId);
		if((@initiate!=null))
		UpdateBasesVisibility(faction,initiate);
		player.Say((11),"Invited "+red+playerName);
		
	}
}
void answer_invite(Critter&player,uint teamid,string&)
{
	int res=0;
	res=AddMember(teamid,player.Id,false);
}
void unsafe_expel(Critter&player,int,int,int,string@playerid,array<int>@)
{
	string red="|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" ";
	string green="|"+(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)))+" ";
	int playerID=GetPlayerId(playerid);;
	
	int teamid=player.Param[(106)];
	int res=0;
	res=AddMember(0,playerID,true);
}

void unsafe_FactionInfo(Critter&player,int,int,int,string@,array<int>@)
{
	string red="|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" "; 
	
	GameVar@var; 
	
	bool isMember=false;
	@var=GetLocalVar((4101),player.Id);
	if((@var!=null))
	{
		int fid=var.GetValue();
		if(fid>1&&FactionExists(fid)&&(fid<((4096))))
		{
			IFaction@faction=GetFaction(fid);
			if((@faction!=null))
			{
				player.Say((11),fid+" Faction: "+red+faction.get_Name());
				isMember=true;
			}
			else
			{
				string err="Cannot get faction <"+fid+"> for player <"+player.Id+">";
				Log(err);
				player.Say((11),err+", please report.");
			}
		}                                    
		
	}  
	
	bool isFriend=false;
	bool isInvited=false;
	{
		array<string>ffactions;
		array<string>ifactions;
		for(uint f=0,fc=GetFactionsCount()-1;f<fc;f++)
		{
			IFaction@faction=GetFactionByIdx(f);
			if((@faction!=null))
			{
				switch(faction.GetStatus(player.Id))
				{
					case(1):
					{
						ffactions.insertLast(faction.get_Name());
						isFriend=true;
					}
					case(4):
					{
						ifactions.insertLast(faction.get_Name());
						isInvited=true;
					}
				}
			}
		}
		if(ffactions.length()>0)
		{
			ffactions.sortAsc();
			player.Say((11),"Friendly factions:");
			for(uint f=0,fc=ffactions.length();f<fc;f++)
			{
				player.Say((11),red+" "+ffactions[f]);
			}
		}
		if(ifactions.length()>0)
		{
			ifactions.sortAsc();
			player.Say((11),"Factions invitations:");
			for(uint f=0,fc=ifactions.length();f<fc;f++)
			{
				player.Say((11),red+" "+ifactions[f]);
			}
		}
	} 
	
	if(!isMember&&!isFriend&&!isInvited)
	{
		string[]messages=
		{
			"Not a single faction has you in its ranks.",
			"You are not in any faction.",
			"You don't belong to any faction."
		};
		
		player.Say((11),messages[Random(0,messages.length()-1)]);
	}
}

void unsafe_CombatMode(Critter&player,int mode,int,int,string@,array<int>@)
{
	if(mode<(0)||mode>(2))
	{
		Log("Player "+player.Name+"<"+player.Id+"> sent invalid combat mode<"+mode+">");
		return;
	}
	
	if(player.Param[(516)]==mode)
	return; 
	
	player.ParamBase[(516)]=mode;
} 

void unsafe_EndTurnBasedTurn(Critter&player,int,int,int,string@,int[]@)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return;
	
	if(map.IsTurnBased()&&player.Param[(75)]>0||player.ParamBase[(88)]>0)
	{
		player.ParamBase[(75)]=0;
		player.ParamBase[(88)]=0;
	}
}

void unsafe_EndTurnBasedCombat(Critter&player,int,int,int,string@,int[]@)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return;
	
	if(map.IsTurnBased()&&player.Param[(75)]>0||player.ParamBase[(88)]>0)
	{
		player.ParamBase[(515)]=1;
		player.ParamBase[(75)]=0;
		player.ParamBase[(88)]=0;
	}
}

bool dischargeArmor(Critter&player)
{
	
	Item@usedArmor=player.GetItem(0,(3));
	if(usedArmor.Val3==(43)||usedArmor.Val4==(43)||usedArmor.Val5==(43)||usedArmor.Val6==(43)||usedArmor.Val7==(43)||usedArmor.Val8==(43))
	return true;
	if(usedArmor.Val3==(44)||usedArmor.Val4==(44)||usedArmor.Val5==(44)||usedArmor.Val6==(44)||usedArmor.Val7==(44)||usedArmor.Val8==(44))
	return true;
	if(usedArmor.Val3==(42)||usedArmor.Val4==(42)||usedArmor.Val5==(42)||usedArmor.Val6==(42)||usedArmor.Val7==(42)||usedArmor.Val8==(42))
	return true;
	return(false);
}

void unsafe_Discharge(Critter&player,int,int,int,string@,int[]@)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return;
	
	if(player.IsDead()||player.IsKnockout())
	return;
	bool terminator=false;
	bool tesla=true;
	int RADIUS=7;
	
	int AP_COST=(player.Param[(306)]>0?4:5);
	
	int DMG_MIN=(40+2*player.Param[(305)]+player.Param[(428)]*3+player.Param[(328)]*2+player.Param[(325)]+player.Param[(395)]);
	int DMG_MAX=(210+2*player.Param[(305)]+player.Param[(428)]*3+player.Param[(328)]*2+player.Param[(325)]+player.Param[(395)]);
	int DISCHARGE_COST=100;
	
	Item@usedArmor=player.GetItem(0,(3));
	
	if(usedArmor.Val3==42||usedArmor.Val4==42||usedArmor.Val5==42||usedArmor.Val6==42||usedArmor.Val7==42||usedArmor.Val8==42)
	{
		terminator=true;
		AP_COST=10;
		DISCHARGE_COST=500;
	}
	if(!(@usedArmor!=null)||!dischargeArmor(player))
	{
		player.Say((11),"You can't do that armor.");
		return;
	}
	
	if(((map.GetData((10))&((0x00000020)))!=0))
	{
		player.Say((11),"You can't do that here.");
		return;
	}
	
	if(usedArmor.Charge<DISCHARGE_COST)
	{
		player.Say((11),"No free charges.");
		player.Say((11),"Charges: "+usedArmor.Charge+"/"+usedArmor.Proto.Misc_ChargeMax+".");
		return;
	}
	
	if(player.ParamBase[(75)]<AP_COST*100)
	{
		player.Say((11),"You need "+AP_COST+" AP to do that.");
		return;
	}
	
	player.Say((11),"Discharging...");
	
	if(player.ParamBase[(510)]!=0)
	player.ParamBase[(510)]=0;
	if(usedArmor.Val3==43||usedArmor.Val4==43||usedArmor.Val5==43||usedArmor.Val6==43||usedArmor.Val7==43||usedArmor.Val8==43)
	{
		RADIUS=3;
		DMG_MIN=player.Param[(211)]*3;
		DMG_MAX=DMG_MIN*2;
		player.ToDead((117),null);
		tesla=false;
	}
	player.Animate(0,(28),null,true,true);
	player.Wait(1000);
	player.ParamBase[(75)]-=100*AP_COST;
	usedArmor.Charge-=DISCHARGE_COST;
	usedArmor.Update();
	player.Say((11),"Charges: "+usedArmor.Charge+"/"+usedArmor.Proto.Misc_ChargeMax+".");
	
	if(!terminator)
	CommenceDischargeEx(player,map,player.HexX,player.HexY,RADIUS,DMG_MIN,DMG_MAX,7,100,tesla);
	else terminatormode(player);
}

void terminatormode(Critter&player)
{
	Item@item=player.GetItem(0,(3));
	item.LightColor=(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)));
	item.LightIntensity=99;
	item.LightDistance=5;
	
	if(!(((item.Flags)&((0x00008000)))!=0))
	((item.Flags)=(item.Flags)|((0x00008000)));
	item.Update();
	player.ParamBase[(118)]=1000;
	
	player.ParamBase[(149)]=1;
	player.TimeoutBase[(238)]=((__FullSecond)+(((20)*__TimeMultiplier)));
	array<uint>filldata={player.Id,item.Id};   
	
	CreateTimeEvent(((__FullSecond)+(((10)*__TimeMultiplier))),"e_off_terminator",filldata,false);
}
uint e_ap_eating(array<uint>@mobdata)
{
	Critter@cr=GetCritter(mobdata[0]);
	cr.ParamBase[(75)]-=100;
	return 0;
}
uint e_off_terminator(array<uint>@mobdata)
{
	Critter@player=GetCritter(mobdata[0]);
	Item@item=GetItem(mobdata[1]);
	item.LightIntensity=0;
	item.Update();
	player.ParamBase[(149)]=0;
	player.ParamBase[(118)]=200;
	return 0;
}
void unsafe_ScienceAtHex(Critter&player,int mode,int,int,string@,array<int>@)
{
	array<Item@>allItems;
	Map@map=player.GetMap();
	if((@map!=null)&&!((map.GetData((10))&((0x00000040)))!=0)&&!map.GetLocation().IsTown()&&!map.GetLocation().IsDungeon())
	{
		if(player.IsKnockout()||player.IsDead())
		return;
		if(player.Timeout[(238)]>0)
		{
			player.Say((11),"Combat timeout.");
			return;
		}
		if(player.Param[(75)]<0)
		return;
		player.ParamBase[(75)]-=300;
		player.Wait(2000);
		player.Animate(0,(28),null,true,true);
		uint itemCount=map.GetItems(player.HexX,player.HexY,allItems);
		if(itemCount==0)
		{
			player.Say((11),"Nothing to Science");
			return;
		}
		player.PlaySound("CARREPAR.ACM",true);
		if(itemCount>299)
		{
			player.Say((11),"too much items on floor");
			return;
		}
		ReverseAllItems(player,allItems,itemCount,100); 
		
	}
	else
	player.Say((11),"Can't do that here.");
}

void unsafe_CommandReroll(Critter&player,int,int,int,string@,array<int>@)
{
	if(!(@player.GetMap()!=null))
	return;
	
	RunDialog(player,6691,player.HexX,player.HexY,false);
	
}

void unsafe_CommandPvE(Critter&player,int,int,int,string@,array<int>@)
{
	if(!(@player.GetMap()!=null))
	return;
	RunDialog(player,6689,player.HexX,player.HexY,false);
}
void unsafe_CommandCMD(Critter&player,int,int,int,string@,array<int>@)
{
	if(!(@player.GetMap()!=null))
	return;
	if(player.Param[(347)]>0)
	RunDialog(player,6680,player.HexX,player.HexY,false);
	else player.Say((11),"|0xCC0000 I'm not a |0xCCCCCC Cyborg");
}

void unsafe_CommandEngine(Critter&player,int,int,int,string@,array<int>@)
{
	if(!(@player.GetMap()!=null))
	return;
	if(IsBase(player.GetMap())||IsTent(player.GetMap()))
	RunDialog(player,7001,player.HexX,player.HexY,false);
	else player.Say((11),"|0xCC0000 I'm not in |0xCCCCCC Base or Tent");
}

bool RepairAllItems(Critter&cr,array<Item@>&items,uint cnt,uint max)
{
	for(uint i=0;i<cnt&&i<max;++i)
	TryRepairItem(cr,items[i],true);
	cr.PlaySound("fixstill.acm",true);
	return true;
} 

void unsafe_RepairAtHex(Critter&player,int,int,int,string@,array<int>@)
{
	array<Item@>allItems;
	Map@map=player.GetMap();
	if((@map!=null)&&!map.GetLocation().IsTown()&&!map.GetLocation().IsDungeon())
	{
		if((player.Timeout[(232)]>0)||player.IsKnockout()||player.IsDead()&&!player.IsBusy())
		return;
		
		if(player.Timeout[(238)]>0)
		{
			player.Say((11),"Combat timeout.");
			return;
		}
		
		if(player.Param[(75)]<5)
		return;
		player.ParamBase[(75)]-=500;
		
		player.Wait(1000);
		player.Animate(0,(28),null,true,true);
		
		uint itemCount=map.GetItems(player.HexX,player.HexY,allItems);
		
		array<Item@>validItems;
		for(uint i=0;i<itemCount;++i)
		{
			if((@allItems[i]!=null)&&allItems[i].IsDeteriorable())
			{
				if((((((allItems[i].Val9))&((0x80000000)))!=0)))
				{
					
					continue;
				}
				validItems.insertLast(allItems[i]);
			}
		}
		
		if(validItems.length()>0&&RepairAllItems(player,validItems,validItems.length(),100))
		{
			player.Say((11),"Repairing items on current hex.");
			if((player.Param[(510)]!=0)&&(player.IsPlayer()&&player.GetAccess()==(0)))
			{
				player.ParamBase[(510)]=0;
			}
			
			uint success=0;
			for(uint i=0;i<validItems.length();++i)
			{
				uint16 condition=100-(validItems[i].Deterioration*100)/(10000);
				uint16 maxCond=(100-validItems[i].BrokenCount);
				if(condition==maxCond)
				{
					success++;
					continue;
				}
				
				MoveItem(validItems[i],1,player);
			}
			
			uint fails=validItems.length()-success;
			if(fails>0)
			player.Say((11),"Failed maintainence of "+fails+" item"+((fails!=1)?"s":"")+".");
		}
		else
		player.Say((11),"Nothing to repair here.");
		
	}
	else
	player.Say((11),"Can't do that here."); 
	
}
void unsafe_ExecLeader(Critter&player,int,int,int,string@,array<int>@)
{
	if(!(@player.GetMap()!=null))
	return;
	if(player.Param[(441)]>0)
	RunDialog(player,6681,player.HexX,player.HexY,false);
	else player.Say((11),"|0xCC0000 I'm not a |0xCCCCCC Leader");
}
void unsafe_ExecShowFactionDomination(Critter&player,int,int,int,string@,array<int>@)
{
	ITown@town=RetrieveTown(player);
	if(!(@town!=null))
	{
		player.Say((11),"You're not in a TC town.");
		return;
	}
	int id=-1;
	player.Say((11),"List of factions with domination points in "+town.GetTownName()+":");
	for(uint f=0,fcount=GetFactionsCount();f<fcount;f++)
	{
		IFaction@faction=GetFactionByIdx(f);
		if(!(@faction!=null))
		continue;
		if((id>0&&faction.get_Id()!=id)||
		(id<0&&(faction.get_Id()<2||faction.get_Id()>4096)))
		continue;
		int fid=(id>0?id:faction.get_Id());
		float s=town.GetInfluence(fid);
		if(s<1)
		continue;
		player.Say((11),faction.get_Name()+" "+s+" points");
	}
}

void unsafe_ExecShowBaseList(Critter&player,int,int,int,string@,array<int>@)
{
	array<Critter@>players;
	uint num=GetAllPlayers(players);
	Map@map=player.GetMap();
	if(!IsBase(map))
	return;
	Location@loc=map.GetLocation();
	for(uint i=0;i<num;i++)
	{
		if(!players[i].IsKnownLoc(true,loc.Id))
		continue;
		
		player.Say((11),players[i].Name+" have access"); 
		
	}
}

void unsafe_pat_grant_access(Critter&player,int,int,int,string@coded,array<int>@)
{
	int code=0;
	StrToInt(coded,code);
	file r;
	string check_id="";
	r.open("logs/pat/"+code+"_id.txt","r");
	bool used=false;
	r.readString(r.getSize(),check_id);
	if(check_id=="used")
	used=true;
	if(check_id!="free"&&!used)
	{
		player.Say((11),"Code its valid or used");
		return;
	}
	r.close();
	file t;
	string tier="";
	int pat_tier=0;
	t.open("logs/pat/"+code+"_tier.txt","r");
	t.readString(t.getSize(),tier);
	StrToInt(tier,pat_tier);
	t.close();
	if(pat_tier<1||pat_tier>5)
	{
		player.Say((11),"Code tier its broken, contact with kompreSor");
		return;
	}
	file f;
	f.open("logs/pat/"+code+"_id.txt","w");
	f.writeString(player.Id+"");
	f.close();
	
	player.ParamBase[(1001)]=code;
	player.ParamBase[(1002)]=pat_tier;
	uint16 second=0;
	uint16 minute=0;
	uint16 hour=0;
	uint16 d=0;
	uint16 month=0;
	uint16 a,c,g;
	GetTime(a,month,c,d,hour,minute,second,g);
	player.ParamBase[(1003)]=month;
	if(!used)
	{
		switch(pat_tier)
		{
			case 1:
			player.ParamBase[(1004)]+=1;
			break;
			case 2:
			player.ParamBase[(1004)]+=3;
			player.ParamBase[(1005)]+=1;
			player.ParamBase[(1006)]+=1;
			break;
			case 3:
			player.ParamBase[(1004)]+=5;
			player.ParamBase[(1005)]+=10;
			player.ParamBase[(1006)]+=3;
			break;
			case 4:
			case 5:
			player.ParamBase[(1006)]+=10;
			break;
		}
	}
	else
	{
		file s;
		string skins="";
		int skin=0;
		s.open("logs/pat/"+code+"_skins.txt","r");
		s.readString(s.getSize(),skins);
		StrToInt(skins,skin);
		s.close();
		file c;
		string colors="";
		int color=0;
		c.open("logs/pat/"+code+"_colors.txt","r");
		c.readString(c.getSize(),colors);
		StrToInt(colors,color);
		c.close();
		file n;
		string names="";
		int name=0;
		n.open("logs/pat/"+code+"_names.txt","r");
		n.readString(n.getSize(),names);
		StrToInt(names,name);
		n.close();
		player.ParamBase[(1004)]+=skin;
		player.ParamBase[(1005)]+=color;
		player.ParamBase[(1006)]+=name;
		player.Say((11),"Access granted");
	}
}

void unsafe_pat_console(Critter&player,int,int,int,string@coded,array<int>@)
{
	if(!(@player.GetMap()!=null))
	{
		player.Say((11),"|0xCC0000 Not on Worldmap");
		return;
	}
	RunDialog(player,6690,player.HexX,player.HexY,false);
}

void unsafe_outdoor(Critter&player,int id,int as,int,string@coded,array<int>@)
{
	Critter@cr=GetCritter(id);
	if(cr.Param[(1171)]==0)
	{
		cr.ParamBase[(1171)]=1;
		cr.Say((11),"Safe Travelling enabled");
		return;
	}
	else
	{
		cr.ParamBase[(1171)]=0;
		cr.Say((11),"Safe Travelling disabled");
		return;
	}
}

void unsafe_AS(Critter&player,int id,int as,int,string@coded,array<int>@)
{
	Critter@cr=GetCritter(id);   
	
}

void unsafe_AS2(Critter&player,int id,int as,int,string@coded,array<int>@)
{
	Critter@cr=GetCritter(id);  
	
} 

uint e_as(array<uint>@mobdata)
{
	
	Critter@cr=GetCritter(mobdata[0]);
	if(!(@cr!=null))
	return 0;    
	
	return 0;
}

void unsafe_playanim(Critter&player,int id,int as,int,string@coded,array<int>@data)
{ 
	
}
uint e_anim(array<int>@mobdata)
{
	
	Critter@cr=GetCritter(mobdata[1]);
	cr.ParamBase[(1169)]-=1;
	cr.RunClientScript("client_mapper_animation@_playanimagain",mobdata[0],0,0,"",mobdata);
	return 0;
}

void unsafe_config_dialog(Critter&player,int dialog,int,int,string@,array<int>@)
{
	if(dialog<4009)
	{
		player.ParamBase[(1025)]=225;
		player.ParamBase[(1026)]=225;
		player.ParamBase[(1027)]=225;
	}
	else
	{
		player.ParamBase[(1025)]=4;
		player.ParamBase[(1026)]=4;
		player.ParamBase[(1027)]=4;
	}
	if(dialog>4013)
	{
		player.ParamBase[(1025)]=0;
		player.ParamBase[(1026)]=0;
		player.ParamBase[(1027)]=0;
		player.ParamBase[(1028)]=0;
		player.ParamBase[(1029)]=0;
		player.ParamBase[(1030)]=0;
		player.ParamBase[(1031)]=0;
		player.ParamBase[(1032)]=0;
		player.ParamBase[(1033)]=0;
		player.ParamBase[(1034)]=0;
	}
	if(!(@player.GetMap()!=null))
	{
		player.Say((11),"Not on Worldmap");
		return;
	}
	RunDialog(player,dialog,player.HexX,player.HexY,false);
}
void unsafe_ExecShowFactionMembers(Critter&player,int dialog,int,int,string@,array<int>@)
{
	array<Critter@>crs;
	uint num=GetAllOnlinePlayers(crs);
	uint index=0;
	if(player.Param[(106)]<2)
	{
		player.Say((11),"You are not in faction");
		return;
	}
	for(uint i=0;i<num;i++)
	{
		player.Say((11),"Listing members from  your faction that are online:");
		if(player.Param[(106)]==crs[i].Param[(106)])
		{
			index++;
			player.Say((11),"["+index+"] "+crs[i].Name);
		}
	}
}

