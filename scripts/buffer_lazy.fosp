

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                          

shared interface Buffer
{
	bool IsRaw(uint len);
	
	Buffer@opCom();
	
	Buffer@opNeg();                    
	
	 Buffer@opShr(int8&value); Buffer@opShl(int8 value); Buffer@Get(int8&value); Buffer@Set(int8&value);
	 Buffer@opShr(int16&value); Buffer@opShl(int16 value); Buffer@Get(int16&value); Buffer@Set(int16&value);
	 Buffer@opShr(int32&value); Buffer@opShl(int32 value); Buffer@Get(int32&value); Buffer@Set(int32&value);
	 Buffer@opShr(int64&value); Buffer@opShl(int64 value); Buffer@Get(int64&value); Buffer@Set(int64&value);
	 Buffer@opShr(uint8&value); Buffer@opShl(uint8 value); Buffer@Get(uint8&value); Buffer@Set(uint8&value);
	 Buffer@opShr(uint16&value); Buffer@opShl(uint16 value); Buffer@Get(uint16&value); Buffer@Set(uint16&value);
	 Buffer@opShr(uint32&value); Buffer@opShl(uint32 value); Buffer@Get(uint32&value); Buffer@Set(uint32&value);
	 Buffer@opShr(uint64&value); Buffer@opShl(uint64 value); Buffer@Get(uint64&value); Buffer@Set(uint64&value);
	 Buffer@opShr(bool&value); Buffer@opShl(bool value); Buffer@Get(bool&value); Buffer@Set(bool&value);
	 Buffer@opShr(string&value); Buffer@opShl(string value); Buffer@Get(string&value); Buffer@Set(string&value);
	 Buffer@opShr(float&value); Buffer@opShl(float value); Buffer@Get(float&value); Buffer@Set(float&value);
	
	 Buffer@opShr(array<int8>&value); Buffer@opShl(array<int8>&value); Buffer@Get(array<int8>&value); Buffer@Set(array<int8>&value);
	 Buffer@opShr(array<int16>&value); Buffer@opShl(array<int16>&value); Buffer@Get(array<int16>&value); Buffer@Set(array<int16>&value);
	 Buffer@opShr(array<int32>&value); Buffer@opShl(array<int32>&value); Buffer@Get(array<int32>&value); Buffer@Set(array<int32>&value);
	 Buffer@opShr(array<int64>&value); Buffer@opShl(array<int64>&value); Buffer@Get(array<int64>&value); Buffer@Set(array<int64>&value);
	 Buffer@opShr(array<uint8>&value); Buffer@opShl(array<uint8>&value); Buffer@Get(array<uint8>&value); Buffer@Set(array<uint8>&value);
	 Buffer@opShr(array<uint16>&value); Buffer@opShl(array<uint16>&value); Buffer@Get(array<uint16>&value); Buffer@Set(array<uint16>&value);
	 Buffer@opShr(array<uint32>&value); Buffer@opShl(array<uint32>&value); Buffer@Get(array<uint32>&value); Buffer@Set(array<uint32>&value);
	 Buffer@opShr(array<uint64>&value); Buffer@opShl(array<uint64>&value); Buffer@Get(array<uint64>&value); Buffer@Set(array<uint64>&value);
	 Buffer@opShr(array<bool>&value); Buffer@opShl(array<bool>&value); Buffer@Get(array<bool>&value); Buffer@Set(array<bool>&value);
	 Buffer@opShr(array<string>&value); Buffer@opShl(array<string>&value); Buffer@Get(array<string>&value); Buffer@Set(array<string>&value);
	 Buffer@opShr(array<float>&value); Buffer@opShl(array<float>&value); Buffer@Get(array<float>&value); Buffer@Set(array<float>&value);
	
	 Buffer@opShr(array<array<int8>>&value); Buffer@opShl(array<array<int8>>&value); Buffer@Get(array<array<int8>>&value); Buffer@Set(array<array<int8>>&value);
	 Buffer@opShr(array<array<int16>>&value); Buffer@opShl(array<array<int16>>&value); Buffer@Get(array<array<int16>>&value); Buffer@Set(array<array<int16>>&value);
	 Buffer@opShr(array<array<int32>>&value); Buffer@opShl(array<array<int32>>&value); Buffer@Get(array<array<int32>>&value); Buffer@Set(array<array<int32>>&value);
	 Buffer@opShr(array<array<int64>>&value); Buffer@opShl(array<array<int64>>&value); Buffer@Get(array<array<int64>>&value); Buffer@Set(array<array<int64>>&value);
	 Buffer@opShr(array<array<uint8>>&value); Buffer@opShl(array<array<uint8>>&value); Buffer@Get(array<array<uint8>>&value); Buffer@Set(array<array<uint8>>&value);
	 Buffer@opShr(array<array<uint16>>&value); Buffer@opShl(array<array<uint16>>&value); Buffer@Get(array<array<uint16>>&value); Buffer@Set(array<array<uint16>>&value);
	 Buffer@opShr(array<array<uint32>>&value); Buffer@opShl(array<array<uint32>>&value); Buffer@Get(array<array<uint32>>&value); Buffer@Set(array<array<uint32>>&value);
	 Buffer@opShr(array<array<uint64>>&value); Buffer@opShl(array<array<uint64>>&value); Buffer@Get(array<array<uint64>>&value); Buffer@Set(array<array<uint64>>&value);
	 Buffer@opShr(array<array<bool>>&value); Buffer@opShl(array<array<bool>>&value); Buffer@Get(array<array<bool>>&value); Buffer@Set(array<array<bool>>&value);
	 Buffer@opShr(array<array<string>>&value); Buffer@opShl(array<array<string>>&value); Buffer@Get(array<array<string>>&value); Buffer@Set(array<array<string>>&value);
	 Buffer@opShr(array<array<float>>&value); Buffer@opShl(array<array<float>>&value); Buffer@Get(array<array<float>>&value); Buffer@Set(array<array<float>>&value);
	
	 Buffer@opShr(array<array<array<int8>>>&value); Buffer@opShl(array<array<array<int8>>>&value); Buffer@Get(array<array<array<int8>>>&value); Buffer@Set(array<array<array<int8>>>&value);
	 Buffer@opShr(array<array<array<int16>>>&value); Buffer@opShl(array<array<array<int16>>>&value); Buffer@Get(array<array<array<int16>>>&value); Buffer@Set(array<array<array<int16>>>&value);
	 Buffer@opShr(array<array<array<int32>>>&value); Buffer@opShl(array<array<array<int32>>>&value); Buffer@Get(array<array<array<int32>>>&value); Buffer@Set(array<array<array<int32>>>&value);
	 Buffer@opShr(array<array<array<int64>>>&value); Buffer@opShl(array<array<array<int64>>>&value); Buffer@Get(array<array<array<int64>>>&value); Buffer@Set(array<array<array<int64>>>&value);
	 Buffer@opShr(array<array<array<uint8>>>&value); Buffer@opShl(array<array<array<uint8>>>&value); Buffer@Get(array<array<array<uint8>>>&value); Buffer@Set(array<array<array<uint8>>>&value);
	 Buffer@opShr(array<array<array<uint16>>>&value); Buffer@opShl(array<array<array<uint16>>>&value); Buffer@Get(array<array<array<uint16>>>&value); Buffer@Set(array<array<array<uint16>>>&value);
	 Buffer@opShr(array<array<array<uint32>>>&value); Buffer@opShl(array<array<array<uint32>>>&value); Buffer@Get(array<array<array<uint32>>>&value); Buffer@Set(array<array<array<uint32>>>&value);
	 Buffer@opShr(array<array<array<uint64>>>&value); Buffer@opShl(array<array<array<uint64>>>&value); Buffer@Get(array<array<array<uint64>>>&value); Buffer@Set(array<array<array<uint64>>>&value);
	 Buffer@opShr(array<array<array<bool>>>&value); Buffer@opShl(array<array<array<bool>>>&value); Buffer@Get(array<array<array<bool>>>&value); Buffer@Set(array<array<array<bool>>>&value);
	 Buffer@opShr(array<array<array<string>>>&value); Buffer@opShl(array<array<array<string>>>&value); Buffer@Get(array<array<array<string>>>&value); Buffer@Set(array<array<array<string>>>&value);
	 Buffer@opShr(array<array<array<float>>>&value); Buffer@opShl(array<array<array<float>>>&value); Buffer@Get(array<array<array<float>>>&value); Buffer@Set(array<array<array<float>>>&value);
	
	 Buffer@opUShr(array<int8>&arr); Buffer@opUShrAssign(array<int8>&arr); array<int8>AsInt8();
	 Buffer@opUShr(array<int16>&arr); Buffer@opUShrAssign(array<int16>&arr); array<int16>AsInt16();
	 Buffer@opUShr(array<int32>&arr); Buffer@opUShrAssign(array<int32>&arr); array<int32>AsInt32();
	 Buffer@opUShr(array<int64>&arr); Buffer@opUShrAssign(array<int64>&arr); array<int64>AsInt64();
	 Buffer@opUShr(array<uint8>&arr); Buffer@opUShrAssign(array<uint8>&arr); array<uint8>AsUint8();
	 Buffer@opUShr(array<uint16>&arr); Buffer@opUShrAssign(array<uint16>&arr); array<uint16>AsUint16();
	 Buffer@opUShr(array<uint32>&arr); Buffer@opUShrAssign(array<uint32>&arr); array<uint32>AsUint32();
	 Buffer@opUShr(array<uint64>&arr); Buffer@opUShrAssign(array<uint64>&arr); array<uint64>AsUint64();
};  

import Buffer@NewBuffer()from"buffer";    

 import Buffer@NewBuffer(array<int8>@data)from"buffer";
 import Buffer@NewBuffer(array<int16>@data)from"buffer";
 import Buffer@NewBuffer(array<int32>@data)from"buffer";
 import Buffer@NewBuffer(array<int64>@data)from"buffer";
 import Buffer@NewBuffer(array<uint8>@data)from"buffer";
 import Buffer@NewBuffer(array<uint16>@data)from"buffer";
 import Buffer@NewBuffer(array<uint32>@data)from"buffer";
 import Buffer@NewBuffer(array<uint64>@data)from"buffer

class CBufferLazy
{
	uint id_source;
	uint id_target;
	
	string funcName;
	
	int p0;
	int p1;
	int p2;
	string@p3;
	array<int>p4; 
	
	CBufferLazy(string&funcName,array<int>p4)
	{
		this.id_source=CreateBufferLazyId();
		this.funcName=funcName;
		
		this.p4=p4;
	} 
	
	CBufferLazy(string&funcName,int p0,int p1,int p2,string@p3)
	{
		this.id_source=CreateBufferLazyId();
		this.funcName=funcName;
		
		this.p0=p0;
		this.p1=p1;
		this.p2=p2;
		@this.p3=p3;
		this.p4.resize(0);
	}
};
array<CBufferLazy@>LazyBuffers; 

uint CreateBufferLazyId()
{
	uint result=GetTick();
	while((@GetBufferLazy(result)!=null))
	{
		result=GetTick()+Random(-100000,100000);
	}
	
	return(result);
} 

CBufferLazy@GetBufferLazy(uint id)
{
	for(uint lazy=0,lazyLen=LazyBuffers.length();lazy<lazyLen;lazy++)
	{
		if(LazyBuffers[lazy].id_source==id)
		return(@LazyBuffers[lazy]);
	}
	
	return(null);
} 

bool RemoveBufferLazy(uint id)
{
	for(uint lazy=0,lazyLen=LazyBuffers.length();lazy<lazyLen;lazy++)
	{
		if(LazyBuffers[lazy].id_source==id)
		{
			LazyBuffers.removeAt(lazy);
			return(true);
		}
	}
	
	return(false);
}                

void RunLazyScript(Critter&player,string&funcName,int p0,int p1,int p2,string@p3,array<int>@p4)

{
	if(!(@p4!=null)||p4.length()==0)
	{ 
		
		{};       
		
		player.RunClientScript(funcName,p0,p1,p2,p3,p4); 
		
		return;
	}
	
	array<int32>data;
	Buffer@buff=NewBuffer();  
	
	LazyBuffers.insertLast(CBufferLazy(funcName,p4));
	
	buff<<uint8((0));
	buff<<LazyBuffers.last().id_source;
	;
	buff<<funcName;  
	
	buff>>>=data;
	
	player.RunClientScript("buffer_lazy"+"@"+"handshake",p0,p1,p2,p3,data);
}      

void handshake_result(Critter&player,uint8 result,int id_source,int id_target=-1)

{
	array<int32>data;
	Buffer@buff=NewBuffer();
	
	buff<<result;
	buff<<id_source;
	if(id_target>=0)
	buff<<id_target;
	buff>>>=data;
	player.RunClientScript("buffer_lazy"+"@"+"handshake",int(0),int(0),int(0),@" ",data); 
	
	if(result==(255))
	{
		player.Say((11),"Access denied. Disconnect.");
		player.Disconnect();
	}
	
}    

void unsafe_handshake(Critter&player,int p0,int p1,int p2,string@p3,array<int>@p4)

{
	if(!(@p4!=null)||p4.length()==0)
	{
		{Log("BufferLazy: "+"empty data, ignoring");};
		return;
	}
	
	Buffer@buff=NewBuffer(p4);
	uint8 handshake=0;
	uint32 id_source=0;
	
	buff>>handshake;
	buff>>id_source;
	
	if(handshake==(0))
	{
		string funcName="";
		buff>>funcName;
		
		array<string@>@nameSplit=split(funcName,"@");
		if(!(@nameSplit!=null)||nameSplit.length()!=2)
		{
			{Log("BufferLazy: "+
				
				player.Name+"<"+player.Id+"> "+
				
				"trying to use invalid function name<"+funcName+">");};
			
			handshake_result(
			
			player,
			
			(254),id_source);
			
			return;
		}   
		
		bool unsafe=true;
		buff>>unsafe; 
		
		if(unsafe&&(nameSplit[1].length()<=7||substring(nameSplit[1],0,7)!="unsafe_"))
		{
			{Log("BufferLazy: "+player.Name+"<"+player.Id+"> trying to use unsafe function<"+funcName+"> without required prefix");};
			handshake_result(player,(255),id_source);
			
			return;
		}  
		
		if(((2))<=(0))
		{Log("BufferLazy: "+"WARNING ! BUFFERLAZY_SAFE_ACCESS <= ACCESS_CLIENT");};
		
		if(!unsafe&&player.GetAccess()<((2)))
		{
			{Log("BufferLazy: "+player.Name+"<"+player.Id+"> trying to use safe function<"+funcName+"> without required access");};
			handshake_result(player,(255),id_source);
			
			return;
		} 
		
		~buff;
		
		if(!IsLocalScript(funcName))
		{
			{Log("BufferLazy: "+
				
				player.Name+"<"+player.Id+"> "+
				
				"trying to use unknown function<"+funcName+">");};
			
			handshake_result(
			
			player,
			
			(253),id_source);
			return;
		} 
		
		LazyBuffers.insertLast(CBufferLazy(funcName,p0,p1,p2,p3));
		uint32 id_target=LazyBuffers.last().id_source;
		
		{}; 
		
		handshake_result(
		
		player,
		
		(1),id_source,id_target);
		
		return;
	}
	else
	{
		switch(handshake)
		{
			case(1):
			{
				
				uint32 id_target=0;
				buff>>id_target;    
				
				unsafe_request(player,
				
				id_source,id_target,int(0),@" ",null);
				
			};
			break;
			
			case(253):
			case(254):
			case(255):
			RemoveBufferLazy(id_source);
			break;
			
			default:
			{Log("BufferLazy: "+"unknown handshake result <"+handshake+">, ignoring");};
			return;
		}
	}
}    

void unsafe_request(Critter&player,int id_source,int id_target,int position,string@,array<int>@)

{
	array<int>data;
	bool dataEnd=false;
	
	CBufferLazy@bufflazy=GetBufferLazy(id_source);
	if(!(@bufflazy!=null))
	{
		{};
		return;
	}
	
	uint size=16+bufflazy.funcName.length();
	int positionMax=bufflazy.p4.length();
	while(size+4<__FloodSize-32)
	{
		data.insertLast(bufflazy.p4[position++]);
		if(position==positionMax)
		{
			dataEnd=true;
			break;
		}
		size+=4;
	}
	{};
	
	player.RunClientScript("buffer_lazy"+"@"+"receive",id_source,id_target,position,
	(dataEnd==true?"-":"+"),data);
}    

void unsafe_receive(Critter&player,int id_source,int id_target,int position,string@dataEnd,array<int>@data)

{
	CBufferLazy@lazy=GetBufferLazy(id_target);
	if(!(@lazy!=null))
	{
		{};
		return;
	}
	
	for(uint d=0,dLen=data.length();d<dLen;d++)
	{
		lazy.p4.insertLast(data[d]);
	}
	
	if(dataEnd=="-")
	{
		{};    
		
		player.RunLocalScript(
		
		lazy.funcName,lazy.p0,lazy.p1,lazy.p2,lazy.p3,lazy.p4);
		
		for(uint l=0,lLen=LazyBuffers.length();l<lLen;l++)
		{
			if(LazyBuffers[l].id_target==lazy.id_target)
			{
				LazyBuffers.removeAt(l);
				break;
			}
		}
	}
	else
	player.RunClientScript("buffer_lazy"+"@"+"request",id_source,id_target,position,"+",null);
}

