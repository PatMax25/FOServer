

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                        

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                                                                                                                                                                                                                                                                                                                                                                                                                      

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                           

import void AddElevator(IElevator@elevator)from"elevators";
import void HandleElevator(IElevator@elevator,Critter&critter,bool)from"elevators";    

class CFloor
{
	uint MapId;
	uint8 EntireNum;
	uint16 HexX;
	uint16 HexY;
	CFloor(uint mapId,uint8 num)
	{
		this.MapId=mapId;
		this.EntireNum=num;
		Map@map=GetMap(mapId);
		map.GetEntireCoords(EntireNum,0,HexX,HexY);
	}
};

shared interface IElevatorOnMove
{
	bool OnMove(Critter@,uint&);
};

shared interface IElevator
{
	void Transit(Critter&player,uint floor);
	IElevator@AddFloor(uint mapId,uint8 entireNum);
	bool IsInside(Critter&player);
	void AddPlayer(Critter&player);
	void RemovePlayer(Critter@player);
	uint GetCurrentLevel(Critter&player);
	void PlaySound(Critter&player,int floor);
	void Debug(Critter&player);
	void SetOnMove(IElevatorOnMove@callback);
	uint get_Type();
};

class CElevator:IElevator
{
	array<CFloor>floors; 
	
	array<uint>players;
	
	uint type;
	IElevatorOnMove@onmove;
	uint get_Type(){return type;}    
	
	CElevator(uint type)
	{
		this.type=type;
		@onmove=null;
		
	}                   
	
	uint GetDescriptor(Critter&cr)
	{
		return((uint((GetCurrentLevel(cr))&0xFFFF)<<16)|(type)&0xFFFF);
	}  
	
	uint Floors()
	{
		return floors.length();
	}            
	
	uint GetCurrentLevel(Critter&player)
	{
		for(uint i=0,j=floors.length();i<j;i++)
		{
			if(floors[i].MapId==player.GetMapId())
			return i;
		}
		return 0;
	}  
	
	bool IsInside(Critter&player)
	{
		
		for(uint i=0;i<players.length();i++)
		{
			
			if(players[i]==player.Id)
			return true;
		}
		return false;
	}   
	
	void AddPlayer(Critter&player)
	{
		for(uint i=0;i<players.length();i++)
		{
			
			if(players[i]==player.Id)
			return;
		}
		players.insertLast(player.Id);
	}  
	
	void RemovePlayer(Critter@player)
	{
		for(uint i=0;i<players.length();i++)
		{
			if(players[i]==player.Id)
			{
				players.removeAt(i);
				return;
			}
		}
		
	}  
	
	void Transit(Critter&player,uint floor)
	{
		
		this.RemovePlayer(player);
		if((@onmove!=null)&&!onmove.OnMove(player,floor))
		return;
		CFloor@dest=floors[floor];
		
		if(player.GetMapId()!=dest.MapId)
		{
			Map@map=GetMap(dest.MapId);
			map.PlaySound("elv1_2.acm",dest.HexX,dest.HexY,100);
			player.TransitToMap(dest.MapId,dest.EntireNum);
		}
	}
	void PlaySound(Critter&player,int floornum)
	{
		CFloor@floor=floors[floornum];
		Map@map=GetMap(floor.MapId);
		map.PlaySound("elevator.acm",floor.HexX,floor.HexY,10);
	}  
	
	IElevator@AddFloor(uint mapId,uint8 entireNum)
	{
		{;};
		floors.insertLast(CFloor(mapId,entireNum));
		return this;
	}
	
	void Debug(Critter&player)
	{
		player.Say((11),"=== Elevator ===");
		for(uint i=0;i<floors.length();i++)
		{
			player.Say((11),""+i+", "+floors[i].MapId+"/"+floors[i].EntireNum);
		}
	} 
	
	void SetOnMove(IElevatorOnMove@callback)
	{
		@onmove=callback;
	}
};      

class CPidElevator:IElevator
{
	array<CPidFloor>floors; 
	
	array<uint>players;
	
	uint type;
	IElevatorOnMove@onmove;
	uint get_Type(){return type;}    
	
	CPidElevator(uint type)
	{
		this.type=type;
		@onmove=null;
		
	}  
	
	uint GetDescriptor(Critter&cr)
	{
		return((uint((GetCurrentLevel(cr))&0xFFFF)<<16)|(type)&0xFFFF);
	}  
	
	uint Floors()
	{
		return floors.length();
	}  
	
	uint GetCurrentLevel(Critter&player)
	{
		for(uint i=0,j=floors.length();i<j;i++)
		{
			if(floors[i].MapPid==player.GetMapProtoId())
			return i;
		}
		return 0;
	}  
	
	bool IsInside(Critter&player)
	{
		
		for(uint i=0;i<players.length();i++)
		{
			
			if(players[i]==player.Id)
			return true;
		}
		return false;
	}   
	
	void AddPlayer(Critter&player)
	{
		for(uint i=0;i<players.length();i++)
		{
			
			if(players[i]==player.Id)
			return;
		}
		players.insertLast(player.Id);
	}  
	
	void RemovePlayer(Critter@player)
	{
		for(uint i=0;i<players.length();i++)
		{
			if(players[i]==player.Id)
			{
				players.removeAt(i);
				return;
			}
		}
		
	}  
	
	void Transit(Critter&player,uint floor)
	{
		
		this.RemovePlayer(player);
		if((@onmove!=null)&&!onmove.OnMove(player,floor))
		return;
		CPidFloor@dest=floors[floor];
		
		if(player.GetMapProtoId()!=dest.MapPid)
		{
			Location@loc=GetLocationOf(player);
			if((@loc!=null))
			{
				Map@destinationMap=loc.GetMap(dest.MapPid);
				if((@destinationMap!=null))
				player.TransitToMap(destinationMap.Id,dest.EntireNum);
			}
		}
	}
	void PlaySound(Critter&player,int floornum)
	{
		CPidFloor@floor=floors[floornum];
		Location@loc=GetLocationOf(player);
		if((@loc!=null))
		{
			Map@map=loc.GetMap(floor.MapPid);
			map.PlaySound("elevator.acm",floor.HexX,floor.HexY,10);
		}
	}  
	
	IElevator@AddFloor(uint mapId,uint8 entireNum)
	{
		{;};
		floors.insertLast(CPidFloor(mapId,entireNum));
		return this;
	}
	
	void Debug(Critter&player)
	{
		player.Say((11),"=== Elevator ===");
		for(uint i=0;i<floors.length();i++)
		{
			player.Say((11),""+i+", "+floors[i].MapPid+"/"+floors[i].EntireNum);
		}
	} 
	
	void SetOnMove(IElevatorOnMove@callback)
	{
		@onmove=callback;
	}
};

class CPidFloor
{
	uint MapPid;
	uint8 EntireNum;
	uint16 HexX;
	uint16 HexY;
	CPidFloor(uint mapId,uint8 num)
	{
		Map@map=GetMap(mapId);
		this.MapPid=map.GetProtoId();
		this.EntireNum=num;
		map.GetEntireCoords(EntireNum,0,HexX,HexY);
	}
}

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}                                     

import void MultihexSpawned(Item&item)from"multihex";
import void MultihexDeleted(Item&item)from"multihex";

import uint GetMHexes(Item@item,array<Item@>@mHexes)from"multihex";
import bool IsMultihex(Item@item)from"multihex";
import bool IsMultihexBlocked(Item@item)from"multihex";
import void MultihexClose(Item@item)from"multihex";
import void MultihexOpen(Item@item)from"multihex

import void TryPickupContainer(Critter&cr,Item&locker)from"movable_container";
import void TryRotateContainer(Critter&cr,Item&locker)from"movable_container";
import bool IsCarTrunk(Item@item)from"car";

bool UseItemOnLocker(Critter&cr,Item&locker,Item&item)
{
	return true;
}

bool UseSkillOnLocker(Critter&cr,Item&locker,int skill)
{
	Map@map=cr.GetMap();
	if(!(@map!=null))
	{
		cr.SayMsg((11),(3),(10202));
		return true;
	}
	
	if(skill==(-1))
	{
		return HandleLocker(cr,map,locker,false);
	}
	else if(skill==(210))
	{
		if(locker.GetType()==(8)&&(((locker.LockerCondition)&((0x01)))!=0))
		{
			LockerClose(locker);
			OnClose(locker);
			
		}
		else
		cr.SayMsg((11),(3),(10202));
	}
	else if(skill==(209))
	{     
		
		Map@map=cr.GetMap();
		
		if(map.GetProtoId()==(221)&&IsCarTrunk(locker))
		{
			cr.Say((11),"You can't lockpick car trunk here.");
			return true;
		}
		
		if(IsCarTrunk(locker)&&((map.GetData((10))&((0x00000100)))!=0))
		{
			cr.Say((11),"Find the key!");
			return true;
		}
		
		if(cr.Timeout[(234)]>0)
		{
			cr.SayMsg((11),(3),(3401));
			return true;
		}
		
		if(locker.LockerId==0||(((locker.LockerCondition)&((0x01)))!=0))
		{
			cr.SayMsg((11),(3),(10202));
			return true;
		}
		
		if(locker.GetType()==(8)&&locker.GetScriptId()>0)
		if(GetScriptName(locker.GetScriptId())=="item_spawner_container@item_init")
		if(locker.LockerComplexity>100)
		locker.LockerComplexity=100; 
		
		int base=cr.Param[(209)]-locker.LockerComplexity;
		uint8 mode=0;
		uint16 activePid=cr.GetSlotProto((1),mode).ProtoId;
		Item@lockpicks=cr.GetItem(0,(1));
		if((@lockpicks!=null)&&lockpicks.Proto.Misc_ToolSkillNum==(209))
		{
			base+=lockpicks.Proto.Misc_ToolSkillBonus;
			if(Random(0,30)==0)
			cr.DeleteItem(lockpicks.GetProtoId(),1);
		}   
		
		base=(((base)>(95))?(95):(((base)<(0))?(0):(base)));  
		
		if(base>=Random(1,100))
		{
			if(locker.Proto.Container_Changeble&&!LockerOpen(locker))
			Log("ERR: something wrong with this locker: "+locker.MapId+","+locker.HexX+","+locker.HexY+" pid "+locker.GetProtoId());
			locker.LockerId=0;
			locker.LockerComplexity=0;
			
			if(locker.GetType()==(8))
			cr.ShowContainer(null,locker,locker.Proto.GroundLevel?(2):(1));
			cr.ParamBase[(76)]+=50*(GetGvar((62001)));
			LogExperience(cr,50*(GetGvar((62001))),(209),"Locker",locker.GetProtoId());
			AddScore(cr,(19),1);
		}           
		
		else
		{
			cr.SayMsg((11),(3),(3440));
		}
		
		cr.TimeoutBase[(234)]=((__FullSecond)+(((((275-cr.Param[(209)])/15)*__TimeMultiplier)+cr.Param[(395)])));
	}
	else if(skill==(212))
	{
		if(cr.IsPlayer()&&cr.GetAccess()>=(2))
		cr.Say((11),"Complexity: "+locker.LockerComplexity+", id: "+locker.LockerId);
		
		TryPickupContainer(cr,locker);
	}
	else if(skill==(213))
	{
		TryRotateContainer(cr,locker);
	}
	else
	{
		cr.SayMsg((11),(3),(10202));
	}
	return true;
}

bool HandleLocker(Critter&cr,Map@map,Item&locker,bool disregardKey)
{
	if(locker.GetType()==(9))
	{
		bool not_auto_door=false;
		
		uint mapProtoId=map.GetProtoId();
		if(
		((mapProtoId==(105)||mapProtoId==(103))&&
		(locker.HexX==192&&locker.HexY==210)||
		(locker.HexX==202&&locker.HexY==188))||
		
		((mapProtoId==(578))&&
		(locker.HexX==201&&locker.HexY==278)||
		(locker.HexX==204&&locker.HexY==291)||
		(locker.HexX==198&&locker.HexY==291))
		)
		
		{
			not_auto_door=true;
			
		}
		else
		{
			not_auto_door=false;
			
		}  
		
		if(!locker.Proto.Container_Changeble)
		{
			cr.SayMsg((11),(3),(10202));
			return true;
		} 
		
		if((((locker.LockerCondition)&((0x01)))!=0))
		{
			if(DoorIsBlocked(locker))
			{
				cr.SayMsg((11),(3),(10211));
				return true;
			}
		} 
		
		if(!(((locker.LockerCondition)&((0x01)))!=0)&&locker.LockerId!=0&&
		!(((locker.LockerCondition)&((0x08)))!=0)&&!IsKeyAviable(cr,locker.LockerId)&&!((cr.Param[(534)]&((0x00002000)))!=0)&&!disregardKey)
		{
			cr.SayMsg((11),(3),(10100));
			LockerBudge(locker);
			return true;
		} 
		
		if((((locker.LockerCondition)&((0x01)))!=0))
		{
			LockerClose(locker);
			OnClose(locker);
		}
		else
		{
			if(IsMultihex(locker))
			{
				if(IsMultihexBlocked(locker))
				{
					cr.Say((11),"Something or someone is blocking the door.");
					LockerBudge(locker);
					return true;
				}
				;
			} 
			
			LockerOpen(locker);
			if(IsAutoDoor(locker))
			OnOpenAutoDoor(locker,not_auto_door);
			else
			OnOpenDoor(locker,not_auto_door);
		}
	}
	else if(locker.GetType()==(8))
	{
		
		if(!(((locker.LockerCondition)&((0x01)))!=0)&&locker.LockerId!=0&&
		!(((locker.LockerCondition)&((0x08)))!=0)&&!IsKeyAviable(cr,locker.LockerId)&&!disregardKey)
		{
			cr.SayMsg((11),(3),(10100));
			LockerBudge(locker);
			return true;
		} 
		
		if(locker.Proto.Container_Changeble)
		{
			
			if((((locker.LockerCondition)&((0x01)))!=0))
			{ 
				
				cr.ShowContainer(null,locker,locker.Proto.GroundLevel?(2):(1));
			}
			else
			{
				LockerOpen(locker);
				OnOpenContainer(locker);
				cr.ShowContainer(null,locker,locker.Proto.GroundLevel?(2):(1));
			}
		}
		
		else
		{
			cr.ShowContainer(null,locker,locker.Proto.GroundLevel?(2):(1));
		}
	}
	return true;
}

bool IsKeyAviable(Critter&cr,uint lockerId)
{
	if(lockerId==0)
	return true;
	if((0x80000000|(cr.Id))==lockerId||(0x40000000|(cr.Id))==lockerId)
	return true;
	array<Item@>keys;
	for(uint i=0,j=cr.GetItemsByType((7),keys);i<j;i++)
	if(keys[i].LockerId==lockerId)
	return true;
	if(((cr.Param[(534)]&((0x00002000)))!=0))
	return true;
	return false;
}

uint GetKeyId(Critter&cr,uint lockerId)
{
	if(lockerId==0||(0x80000000|(cr.Id))==lockerId||(0x40000000|(cr.Id))==lockerId)
	return 0;
	array<Item@>keys;
	for(uint i=0,j=cr.GetItemsByType((7),keys);i<j;i++)
	if(keys[i].LockerId==lockerId)
	return keys[i].Id;
	return 0;
}

void SwitchState(Item&locker)
{ 
	
	if(locker.GetType()==(9)||locker.GetType()==(8))
	{
		
		if(locker.Proto.Container_Changeble)
		{
			
			if((((locker.LockerCondition)&((0x01)))!=0))
			LockerClose(locker);
			else
			LockerOpen(locker);
		}
	}
}      

bool IsAutoDoor(Item&door)
{
	uint pid=door.GetProtoId(); 
	
	return(pid==3387||pid==3388||pid==3389||pid==3390||pid==3391||pid==3392
	
	||pid==3337
	
	||pid==2018||pid==2019
	
	||pid==2151||pid==2152||pid==2153
	
	||pid==2421||pid==2470
	
	||pid==2195);
	
}   

bool IsOpenableContainer(uint pid)
{            
	
	ProtoItem@proto=GetProtoItem(pid);
	return proto.Container_Changeble;
}   

bool IsLockableContainer(uint pid)
{
	ProtoItem@proto=GetProtoItem(pid);
	return proto.Container_Changeble||pid==42||pid==43||pid==44||
	(pid>=128&&pid<=139)||
	(pid>=188&&pid<=189)||
	pid==245||
	(pid>=367&&pid<=370)||
	pid==501||pid==502||
	(pid>=197&&pid<=204)|| 
	
	pid==22139||pid==22140||
	pid==22442||pid==22447||
	pid==22567||pid==22568||
	pid==22990||pid==22121||
	(pid>=197&&pid<=204)||
	(pid>=66&&pid<=70)||
	(pid>=181&&pid<=187)||
	(pid>=22142&&pid<=22146)||
	(pid>=22148&&pid<=22150)||
	pid==22174||pid==22262||
	pid==22312||pid==22313||
	pid==22399||pid==22400||
	pid==22413||pid==22634||
	(pid>=22829&&pid<=22832)||
	pid==25197; 
	
}   

bool DoorIsBlocked(Item@door)
{
	if(!(@door!=null))
	return false;
	
	uint16 doorX=0;
	uint16 doorY=0;
	Map@doorMap=door.GetMapPosition(doorX,doorY);
	
	if(!(@doorMap!=null))
	return false;
	
	if(IsMultihex(door))
	{
		return IsMultihexBlocked(door);
	}
	else
	{
		if(!doorMap.IsHexPassed(doorX,doorY))
		return true;
	}
	return false;
}   

void OnOpenAutoDoor(Item@targetItem,bool not_auto_door)
{
	if(targetItem.Val5!=0)
	EraseTimeEvent(targetItem.Val5); 
	
	if(not_auto_door==false)
	targetItem.Val5=CreateTimeEvent(((__FullSecond)+(((Random(10,20))*__TimeMultiplier))),"e_CloseDoor",targetItem.Id,true);
}   

void OnOpenDoor(Item@targetItem,bool not_auto_door)
{
	if(targetItem.Val5!=0)
	EraseTimeEvent(targetItem.Val5);
	
	Map@map=GetMap(targetItem.MapId);
	if((@map!=null)&&
	(map.GetLocation().IsTown()||
	map.GetLocation().IsDungeon()||
	map.GetLocation().IsTCTown()||
	map.GetLocation().IsReplication()))
	{
		if(not_auto_door==false)
		targetItem.Val5=CreateTimeEvent(((__FullSecond)+(((Random(3,6))*__TimeMultiplier*60))),"e_CloseDoor",targetItem.Id,true);
	}
}   

void OnClose(Item@targetItem)
{
	if(targetItem.Val5!=0)
	EraseTimeEvent(targetItem.Val5);
}

void OnOpenContainer(Item@targetItem)
{
	if(targetItem.Val5!=0)
	EraseTimeEvent(targetItem.Val5);
	targetItem.Val5=CreateTimeEvent(((__FullSecond)+(((Random(3,6))*__TimeMultiplier*60))),
	"e_CloseDoor",targetItem.Id,true);
}   

uint e_CloseDoor(array<uint>@values)
{
	uint __nowZZZ=GetTick();
	Item@item=GetItem(values[0]);
	if(!(@item!=null))
	return 0;
	uint16 x=0,y=0;
	Map@map=item.GetMapPosition(x,y);
	if(!(@map!=null))
	return 0;  
	
	if(item.GetType()==(9)&&DoorIsBlocked(item))
	return((3)*__TimeMultiplier); 
	
	if(item.GetScriptId()>0)
	if(GetScriptName(item.GetScriptId())=="lockers@lockthedoor")
	lockthedoor(item,true);
	
	LockerClose(item);
	item.Val5=0;
	uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
	return 0;
}

bool LockerClose(Item&item)
{
	if(!item.LockerClose())
	return false;
	if(!item.Proto.Container_Changeble)
	return false;
	if(IsMultihex(item))
	MultihexClose(item);
	Map@map=GetMap(item.MapId);
	if(!(@map!=null))
	return true;
	string sound=item.GetType()==(9)?"SCDOORSA.ACM":"ICCNTNRA.ACM";
	sound.rawSet(7,item.Proto.SoundId);
	map.PlaySound(sound,item.HexX,item.HexY,(15));
	return true;
}

bool LockerOpen(Item&item)
{
	if(!item.LockerOpen())
	return false;
	if(!item.Proto.Container_Changeble)
	return false;
	if(IsMultihex(item))
	MultihexOpen(item);
	Map@map=GetMap(item.MapId);
	if(!(@map!=null))
	return true;
	string sound=item.GetType()==(9)?"SODOORSA.ACM":"IOCNTNRA.ACM";
	sound.rawSet(7,item.Proto.SoundId);
	map.PlaySound(sound,item.HexX,item.HexY,(15));
	return true;
}

void LockerBudge(Item&item)
{
	Map@map=GetMap(item.MapId);
	if(!(@map!=null))
	return;
	string sound=item.GetType()==(9)?"SLDOORSA.ACM":"ILCNTNRA.ACM";
	sound.rawSet(7,item.Proto.SoundId);
	map.PlaySound(sound,item.HexX,item.HexY,(15));
}

void lockthedoor(Item&door,bool firstTime)
{
	uint16 lockerComplex;
	
	door.Val8=(400);
	
	if(firstTime)
	{
		if(door.Val0<=0||door.Val1<=0
		||door.Val0>250||door.Val1>250
		||door.Val0>door.Val1)
		{
			lockerComplex=Random(150,200);
		}
		else
		{
			lockerComplex=Random(door.Val0,door.Val1);
		}
		door.LockerId=Random(98989,989898);
		door.LockerComplexity=lockerComplex;
	}
}

bool IsMovableLocker(uint16 pid)
{
	return pid==(652)||pid==(654)
	||pid==(658)||pid==(662)
	||pid==(660)||pid==(664)
	||pid==(666)||pid==(656)
	||pid==(650);
}                                                                                                                                                                                                                                                                                                                                                                                                                    

funcdef bool TRIGGER_FUNC(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values);                                                                                                                                                      

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";                                                                                                                                                                                       

array<TRIGGER_FUNC@>TriggerFuncs=
{
	@Default,
	@AntiBlock,
	@Aggravate,
	@Teleport,
	@FLCRobbery,
	@TeleportMap,
	@TeleportEntMap
};       

bool Default(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	cr.Say((11),"Default trigger.");
	cr.Say((11),"Trigger function tick #"+count+".");
	return true;
}     

void _AntiBlock(Item&tr,bool firstTime)
{
	TriggerInit(tr,(1),(0x00000800),0,1);
}

bool AntiBlock(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	if(count<15)
	{
		if(count>2)
		cr.SayMsg((11),(0),count<5?4300:4301);
		if(count>6)
		{
			cr.SendMessage((1001),(0),(0));
			SetCritterIllegalFlag(cr,(0x00000004));
		}
		return true;
	}
	else
	{
		cr.SendMessage((1001),(1),(0));
		return false;
	}
}     

void _Aggravate(Item&tr,bool firstTime)
{
	TriggerInit(tr,(2),(0x00000800),0,0);
}

bool Aggravate(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	array<Critter@>critters;
	cr.GetMap().GetCritters(0,(0x01)|(0x20),critters);
	for(int i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].Param[(106)]==tr.Val2)
		{
			if(critters[i].IsNoPlanes())
			{
				AddAttackPlane(critters[i],(50),cr);
			}
		}
	}
	return false;
}      

void _Teleport(Item&tr,bool firstTime)
{
	TriggerInit(tr,(3),(0x00000800),0,0);
}

bool Teleport(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	cr.TransitToHex(uint16(tr.Val2),uint16(tr.Val3),uint8(tr.Val4));
	return false;
}

void teleport(Critter&cr,int x,int y,int dir)
{
	Map@map=cr.GetMap();
	if((@map!=null))
	{
		Item@trigger=map.AddItem(cr.HexX,cr.HexY,(825),1);
		_Teleport(trigger,true);
		trigger.Val2=x;
		trigger.Val3=y;
		trigger.Val4=dir;
		cr.Say((11),"Placing teleport trigger Id "+trigger.Id+" teleporting to ["+x+","+y+"].");
	}
	else
	{
		cr.Say((11),"You have to be in a valid map to put a teleport trigger");
	}
}      

void _FLCRobbery(Item&tr,bool firstTime)
{
	TriggerInit(tr,(4),(0x00000800),0,0);
}

bool FLCRobbery(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	
	array<Critter@>critters;
	cr.GetMap().GetCritters(0,(0x01)|(0x20),critters);
	for(int i=0,j=critters.length();i<j;i++)
	{ 
		
		if(critters[i].Param[(106)]==tr.Val2)
		{
			if(critters[i].IsNoPlanes())
			{
				AddAttackPlane(critters[i],(50),cr);
			}
		}
	} 
	
	return false;
}     

void _TeleportMap(Item&tr,bool firstTime)
{
	TriggerInit(tr,(5),(0x00000800),0,0);
}

bool TeleportMap(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	cr.TransitToMap(uint16(tr.Val1),uint16(tr.Val2),uint16(tr.Val3),uint8(tr.Val4));
	return false;
}    

void _TeleportEntMap(Item&tr,bool firstTime)
{
	TriggerInit(tr,(6),(0x00000800),0,0);
}

bool TeleportEntMap(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	cr.TransitToMap(uint16(tr.Val2),uint16(tr.Val3));
	return false;
}      

void _Trigger(Item&tr,bool firstTime)
{
	tr.SetEvent((7),"_TriggerStep");
} 

void TriggerInit(Item@tr,uint funcId,uint settings,uint delay,uint nextTick)
{
	tr.SetEvent((7),"_TriggerStep");
	tr.Val0=funcId;
	(((tr.Val1))=((tr.Val1))|(settings));
	tr.Val1=(((tr.Val1)&0xFF00FFFF)|(((delay)&0xFF)<<16));
	tr.Val1=(((tr.Val1)&0x00FFFFFF)|(((nextTick)&0xFF)<<24));
}   

bool hexHasTrigger(Map@map,uint16 x,uint16 y,int func,int settings)
{
	if(!(@map!=null))
	return false;
	
	array<Item@>triggers;
	uint triggersNum=map.GetItems(x,y,0,(825),triggers);
	for(uint i=0;i<triggersNum;i+=1)
	{
		if(((triggers[i].Val0)==func)&&((triggers[i].Val1)==settings))
		return true;
	}
	return false;
}   

void _TriggerStep(Item&tr,Critter&cr,bool entered,uint8 dir)
{
	if(entered)
	{ 
		
		if(cr.IsPlayer()&&((((tr.Val1))&((0x00000200)))!=0))
		return;
		if((((cr.Param[(534)]&((0x00000020)))!=0))&&((((tr.Val1))&((0x00000400)))!=0))
		return;
		if((cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&((((tr.Val1))&((0x00000800)))!=0))
		return;  
		
		if(!((((tr.Val1))&((0x00000100)))!=0))
		{
			Map@map=cr.GetMap();
			uint16 prevHexX=cr.HexX;
			uint16 prevHexY=cr.HexY;
			map.MoveHexByDir(prevHexX,prevHexY,(((((dir))+(3))%6)),1);
			if(hexHasTrigger(map,prevHexX,prevHexY,(tr.Val0),(tr.Val1)))
			return;
		}
		
		array<uint>values={tr.Id,cr.Id,uint(dir),0};
		CreateTimeEvent(((__FullSecond)+((((((tr.Val1)>>16)&0xFF))*__TimeMultiplier))),"e_TriggerTick",values,true);
	}
}   

uint e_TriggerTick(array<uint>@values)
{
	Item@tr=GetItem(values[(0)]);
	if(!(@tr!=null))
	return 0;
	
	Critter@cr=GetCritter(values[(1)]);
	if((@cr!=null)||((((tr.Val1))&((0x00004000)))!=0))
	{
		bool repeat=false;
		
		if(((((tr.Val1))&((0x00002000)))!=0))
		{
			repeat=TriggerFuncs[(tr.Val0)](tr,cr,values[(2)],values[(3)],values);
			values[(3)]+=1;
		}
		else if((@cr!=null))
		{
			if(hexHasTrigger(cr.GetMap(),cr.HexX,cr.HexY,(tr.Val0),(tr.Val1)))
			{
				repeat=TriggerFuncs[(tr.Val0)](tr,cr,values[(2)],values[(3)],values);
				values[(3)]+=1;
			}
		}
		
		if(((((tr.Val1))&((0x00001000)))!=0))
		{
			DeleteItem(tr);
			return 0;
		}
		
		if(repeat&&(((tr.Val1)>>16)&0xFF)==0&&values[(3)]==1&&(((tr.Val1)>>24)&0xFF)>0)
		{
			CreateTimeEvent(((__FullSecond)+((((((tr.Val1)>>24)&0xFF))*__TimeMultiplier))),"e_TriggerTick",values,true);
			return 0;
		}
		else
		{
			if(repeat&&(((tr.Val1)>>24)&0xFF)>0)
			return(((((tr.Val1)>>24)&0xFF))*__TimeMultiplier);
			else
			return 0;
		}
	}
	return 0;
}  

import void InitializeDynamicMob(Map&map)from"mob_dynamic";
import void AffectRadiation(Critter&cr,int value)from"radiation";
import void AffectPoison(Critter&cr,int value)from"poison";    

CElevator FirstElevator((9));
bool ElevatorsAdded=false;

void map_init(Map&map,bool firstTime)
{
	if(!ElevatorsAdded)
	{
		
		AddElevator(FirstElevator);
		ElevatorsAdded=true;
	}
	
	uint16 x=0,y=0; 
	
	switch(map.GetProtoId())
	{
		case(578):
		if(map.GetEntireCoords(1,0,x,y))
		FirstElevator.AddFloor(map.Id,1);
		
		break;
		case(579):
		if(map.GetEntireCoords(1,0,x,y))
		FirstElevator.AddFloor(map.Id,1);
		break;
		default:
	} 
	
	array<uint>filldata={map.Id};
	if(map.GetProtoId()!=(577))
	{ 
		
	}
	
	if(firstTime)InitializeDynamicMob(map);
}              

bool gasmask(Critter&player)
{
	uint16[]scaryHelmets=
	{
		(25588),
		(25578),
		(721),
		(737),
		(735),
		(736)
	};
	
	Item@helmet=player.GetItem(0,(4));
	if((@helmet!=null)&&Present(helmet.GetProtoId(),scaryHelmets))
	return(true);
	else
	return(false);
} 

void _gas(Map&map)
{
	array<Critter@>crits;
	
	uint num=map.GetCritters(0,(0x10)|(0x0F),crits);
	for(uint i=0;i<crits.length();i++)
	{
		if(crits[i].GetItem(0,(3)).GetProtoId()==(25588))
		continue;
		else
		AffectPoison(crits[i],Random(50,100));
	}
}

void t_ElevatorFirst(Critter&critter,Scenery&trigger,bool entered,uint8 dir)
{
	HandleElevator(FirstElevator,critter,entered);
}   

bool s_KeybTerminal(Critter&player,Scenery&keyboard,int skill,Item@item)
{
	if(!player.IsPlayer())
	return false;
	
	if((@item!=null))
	{
		player.Say((11),"Something tells you that you can't use it here.");
		return true;
	}
	
	if(skill==(-1))
	{
		Map@map=player.GetMap();
		Item@MainGate=map.GetItem(201,278,3999);
		Item@LeftSideDoor=map.GetItem(204,291,2018);
		Item@RightSideDoor=map.GetItem(198,291,2018);
		
		if(!(@MainGate!=null)||!(@LeftSideDoor!=null)||!(@RightSideDoor!=null))
		{
			player.Say((11),"Remek jest najlepszym elektrykiem ever - przyjdzie i zrobi. Something is broken here - call 997 and type HUJ. Just kidding - write to game staff.");
			return true;
		} 
		
		if(!(((MainGate.LockerCondition)&((0x01)))!=0)&&(((LeftSideDoor.LockerCondition)&((0x01)))!=0)&&(((RightSideDoor.LockerCondition)&((0x01)))!=0))
		{
			SwitchState(MainGate);
			SwitchState(LeftSideDoor);
			SwitchState(RightSideDoor);
		}
		else if((((MainGate.LockerCondition)&((0x01)))!=0)&&!(((LeftSideDoor.LockerCondition)&((0x01)))!=0)&&!(((RightSideDoor.LockerCondition)&((0x01)))!=0))
		{
			SwitchState(MainGate);
			SwitchState(LeftSideDoor);
			SwitchState(RightSideDoor);
		}
		else if(!(((LeftSideDoor.LockerCondition)&((0x01)))!=0)&&!(((RightSideDoor.LockerCondition)&((0x01)))!=0))
		{
			SwitchState(LeftSideDoor);
			SwitchState(RightSideDoor);
		}
		else if(!(((LeftSideDoor.LockerCondition)&((0x01)))!=0))
		{
			SwitchState(LeftSideDoor);
		}
		else if(!(((RightSideDoor.LockerCondition)&((0x01)))!=0))
		{
			SwitchState(RightSideDoor);
		}
		else if(!(((MainGate.LockerCondition)&((0x01)))!=0))
		{
			SwitchState(MainGate);
		}
		else
		{
			player.Say((11),"Perhaps you will never open it without server administrator's help.");
		}
		return true;
	}
	
	return false;
}      

void _TalchemSurface(Map&map,bool firstTime)
{ 
	
}          

void _TalchemFirstFloor(Map&map,bool firstTime)
{           
	
}

void _MapLoop0TwoRectangleZone(Map&map)
{
	AffectRadiotationTwoRectangleZoneCritters(map,0);
	map.SetLoopTime(0,(Random(10000,20000))/20);
}

void AffectRadiotationTwoRectangleZoneCritters(Map&map,int value1)
{
	
	uint minX1=150;
	uint minY1=175;
	uint maxX1=190;
	uint maxY1=211;
	
	uint minX2=150;
	uint minY2=212;
	uint maxX2=174;
	uint maxY2=219;
	
	if(value1==0)
	value1=Random(map.GetData(0),map.GetData(1));
	
	array<Critter@>critters;
	map.GetCritters(0,(0x03),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].IsPlayer()&&((critters[i].HexX>=minX1&&critters[i].HexX<=maxX1&&critters[i].HexY>=minY1&&critters[i].HexY<=maxY1)||
		(critters[i].HexX>=minX2&&critters[i].HexX<=maxX2&&critters[i].HexY>=minY2&&critters[i].HexY<=maxY2)))
		{
			AffectRadiation(critters[i],value1);
		}
	}
}

void _MapLoop1DangerZone(Map&map)
{
	AffectRadiationAndPoisonToDangerZoneCritters(map,0,0);
	map.SetLoopTime(1,(Random(10000,20000))/1);
}

void AffectRadiationAndPoisonToDangerZoneCritters(Map&map,int value1,int value2)
{
	uint minX=130;
	uint minY=160;
	uint maxX=265;
	uint maxY=277;
	
	if(value1==0)
	value1=Random(map.GetData(2),map.GetData(3));
	if(value2==0)
	value2=Random(map.GetData(4),map.GetData(5));
	
	array<Critter@>critters;
	map.GetCritters(0,(0x03),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].IsPlayer()&&critters[i].HexX>=minX&&critters[i].HexX<=maxX&&critters[i].HexY>=minY&&critters[i].HexY<=maxY)
		{
			AffectRadiation(critters[i],value1);
			AffectPoison(critters[i],value2);
		}
	}
}              

const uint[][]DOOR_GROUPS=
{
	{(993),(995),(997)},
	{(991),(992),(995),(996)},
	{(991),(992),(994),(997)}
};

void _TalchemSecondFloor(Map&map,bool firstTime)
{                          
	
}

void _MapLoop1PowerDoor(Map&map)
{
	PowerDoor(map);
	map.SetLoopTime(0,(((1)*__TimeMultiplier*60)));
}

void PowerDoor(Map&map)
{
	uint previous=map.GetData((22));
	uint next=previous+Random(1,(DOOR_GROUPS.length()-1));
	next=next%DOOR_GROUPS.length();
	map.SetData((22),next);
	
	for(uint i=0;i<DOOR_GROUPS[previous].length();i++)
	{
		uint16 hexX=0;
		uint16 hexY=0;
		map.GetEntireCoords(DOOR_GROUPS[previous][i],0,hexX,hexY);
		Item@door=map.GetDoor(hexX,hexY);
		if((@door!=null))
		{
			door.SetEvent((4),"");
		}
	}
	
	for(uint i=0;i<DOOR_GROUPS[next].length();i++)
	{
		uint16 hexX=0;
		uint16 hexY=0;
		map.GetEntireCoords(DOOR_GROUPS[next][i],0,hexX,hexY);
		Item@door=map.GetDoor(hexX,hexY);
		if((@door!=null))
		{
			door.SetEvent((4),"_PowerelessDoorUse");
		}
	}
}

bool _PowerelessDoorUse(Item&item,Critter&player,int skill)
{
	if(skill==-1)
	{
		player.Say((11),"The door has no power.");
		return true;
	}
	return false;
}

void _MapLoop0DangerZone(Map&map)
{
	AffectRadiationAndPoisonToCritters(map,0,0);
	map.SetLoopTime(0,(Random(10000,20000))/1);
}

void AffectRadiationAndPoisonToCritters(Map&map,int value1,int value2)
{
	if(value1==0)
	value1=Random(map.GetData(0),map.GetData(1));
	if(value2==0)
	value2=Random(map.GetData(2),map.GetData(3));
	
	array<Critter@>critters;
	map.GetCritters(0,(0x03),critters);
	for(uint i=0,j=critters.length();i<j;i++)
	{
		AffectRadiation(critters[i],value1);
		AffectPoison(critters[i],value2);
	}
}
