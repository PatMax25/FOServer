                      

import uint tier3armor()from"item_pools";
import uint tier3helmet()from"item_pools";
import uint tier3weapon()from"item_pools";
import uint tier3alien()from"item_pools";
import uint tier3bp()from"item_pools";
import uint tier3drugs()from"item_pools";
import uint tier3ammo()from"item_pools";
import uint tierlowammo()from"item_pools";
import uint tier4parts()from"item_pools";
import uint tier4bp()from"item_pools";
import uint tier4item()from"item_pools";
import uint tier4ammo()from"item_pools";
import uint rareitem()from"item_pools";
import uint implant()from"item_pools";
import uint implant_combat()from"item_pools";
import uint verti_parts()from"item_pools";
import uint currency()from"item_pools";
import uint low_tier()from"item_pools";
import uint books()from"item_pools";
import uint mats()from"item_pools";
import uint misc()from"item_pools";
import void addbasemap(Critter&player)from"personal_base";
import void addbasemap(Item&con)from"personal_base";

import bool istier3armor(uint pid)from"item_pools";
import bool istier3helmet(uint pid)from"item_pools";
import bool istier3weapon(uint pid)from"item_pools";
import bool istier3bp(uint pid)from"item_pools";
import bool istier3drugs(uint pid)from"item_pools";
import bool istier3ammo(uint pid)from"item_pools";
import bool istierlowammo(uint pid)from"item_pools";
import bool istier4parts(uint pid)from"item_pools";
import bool istier4bp(uint pid)from"item_pools";
import bool istier4item(uint pid)from"item_pools";
import bool istier4ammo(uint pid)from"item_pools";
import bool israreitem(uint pid)from"item_pools";
import bool isimplant(uint pid)from"item_pools";
import bool isimplant_combat(uint pid)from"item_pools";
import bool isverti_parts(uint pid)from"item_pools";
import bool iscurrency(uint pid)from"item_pools";
import bool islow_tier(uint pid)from"item_pools";
import bool isHelmet(uint pid)from"item_pools";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

shared interface IBroadcastBuffer
{
	string GetString();
	
	void SetType(int type);
	int GetType();
	void SetTime(int time);
	int GetTime();
	void SetSetup(int setup);
	int GetSetup();
	void SetMessage(string message);
	void AppendMessage(string message);
	string GetMessage();
	void SetData(array<int>data);
	
	void SetStart(int time);
	void ResetStart();
	
	void SetLifetime(int lifetime);
	
	void SetFilters(int filters);
	void SetFilter(int filter);
	void SetFilter(int filter,int data);
	void UnsetFilter(int filter);
	bool Filter(int filter);
	bool CheckFilters(Critter@player);
	
	bool Send(Critter@player);
	uint SendToAll();
	
	void SetGM(int id);
	void UnsetGM();
	
	void ToDelete();
};  

import void UpdateBroadcast()from"broadcast";

import IBroadcastBuffer@AddBroadcastBuffer(int type,int time,int setup,string&message,array<int>&data,int lifetime,int flags)from"broadcast";
import void DumpBroadcastBuffer(Critter@player)from"broadcast";
import uint FindBroadcastBufferByType(int type,array<IBroadcastBuffer@>&buf)from"broadcast";
import uint FindBroadcastBufferByGM(int id,array<IBroadcastBuffer@>&buf)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int&time)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message)from"broadcast"; 

import void Broadcast_TownControl_Set(string&message,int location,int time,int faction)from"broadcast";
import void Broadcast_TownControl_Set(int location,int time,int faction,Critter&player)from"broadcast";
import void Broadcast_TownControl_Stop(int location)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Influence(int location,int time,string&message)from"broadcast"; 

import uint Broadcast_RequestHelp(Critter@player,string&message)from"broadcast";
import void Broadcast_CheckRequestHelpBuffer(Critter@gm)from"broadcast";
import void Broadcast_DumpRequestHelpBuffer(Critter@gm)from"broadcast"; 

import void baseControl(string msg,int mapId,uint time)from"broadcast";
import void baseControlRadio(string msg,uint time,int mapId,uint factionId)from"broadcast"; 

import void ServerEventMSG(uint time,string msg)from"broadcast"; 

import IBroadcastBuffer@GetEventCountDownBuffer(int location,int type)from"broadcast";
import void ServerEventCNTSet(string message,uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTSet(uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTStop(uint location,uint type)from"broadcast";                                                                                                                                                                                                                                                                                                                                                                                                 

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                         

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";          

import void InitEconomy()from"economy";
import void SendLevelThresholds(Critter&)from"economy"; 

import bool BankAccountExists(uint bankid,uint account)from"economy";
import bool BankAccountRemoveMoney(uint bankid,uint account,uint amount)from"economy";
import bool BankHasAccess(uint bankid,uint account,uint playerid)from"economy";
import int BankGetAccountBalance(uint bankid,uint account)from"economy";
import int BankGetAccountID(uint bankid,uint playerid)from"economy";
import uint BankAddAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankCreateAccount(uint bankid,uint playerid)from"economy";
import uint BankDepositMoney(uint bankid,uint playerid,uint account,int amount)from"economy";
import uint BankGetAccessCount(uint bankid,uint account)from"economy";
import uint BankGetAccountOwner(uint bankid,uint account)from"economy";
import uint BankGetAccountType(uint bankid,uint account)from"economy";
import uint BankGetCreditRating(uint bankid,uint account)from"economy";
import uint BankGetLoan(uint bankid,uint account)from"economy";
import uint BankRemoveAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankSetAccountType(uint bankid,uint account,uint accounttype)from"economy";
import uint BankSetCreditRating(uint bankid,uint account,uint rating)from"economy";
import uint BankSetLoan(uint bankid,uint account,uint loan)from"economy";
import uint BankTakeLoan(uint bankid,uint account,uint amount)from"economy";
import uint BankTransferMoney(uint bankid,uint fromaccount,uint toaccount,uint amount)from"economy";
import uint BankWithdrawMoney(uint bankid,uint playerid,uint account,int amount)from"economy"; 

import bool BanksTransferFromCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import bool BanksTransferToCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import uint BanksGetTotalMoney()from"economy";
import void BanksAddMoney(uint amount)from"economy";
import void BanksRemoveMoney(uint amount)from"economy"; 

import bool BankAddMoney(uint bankid,uint amount)from"economy";
import bool BankRemoveMoney(uint bankid,uint amount)from"economy";
import bool BankSetMoney(uint bankid,uint amount)from"economy";
import uint BankGetLoanInterest(uint bankid)from"economy";
import uint BankGetNumberOfAccounts(uint bankid)from"economy";
import float BankGetSaveInterest(uint bankid)from"economy";
import uint BankGetTotalMoney(uint bankid)from"economy";
import uint BankGetTotalBalance(uint bankid)from"economy";
import float BankGetReserveRatio(uint bankid)from"economy";
import uint BankSetLoanInterest(uint bankid,uint interest)from"economy";
import uint BankSetSaveInterest(uint bankid,float interest)from"economy";
import bool BankTransferFromCritter(uint bankId,Critter&critter,uint amount,uint type,bool virtual)from"economy";

import void SaveBankData()from"economy";   

import int GetItemSellModifier(Critter&player,Critter&trader)from"economy";
import int GetItemBuyModifier(Critter&player,Critter&trader)from"economy";
import uint GetItemCost(Item&item,Critter&cr,Critter&trader,bool sell)from"economy";
import uint GetItemCostPlain(Item&item,Critter&cr,Critter&trader)from"economy";

import array<int>GetTraderLevels(Critter@npc)from"economy";
import uint GetTraderLevel(Critter@npc,uint type)from"economy";

import uint ItemLevel(Item&item)from"economy";
import uint ItemLevel(uint pid)from"economy";
import uint TraderCapacity(Critter@npc)from"economy";
import uint TraderCapacity(Critter@npc,uint type,uint level)from"economy";
import uint TraderMoneyCapacity(Critter@npc)from"economy";
import uint TradingItemType(Item&item)from"economy";
import uint TradingItemType(uint pid)from"economy";                                                                                                          

const string@FD_Bank_Result2String(uint res)
{
	if(res==(1))
	return"FD_BANK_RESULT_SUCCESS";
	else if(res==(2))
	return"FD_BANK_RESULT_UNKNOWN";
	else if(res==(3))
	return"FD_BANK_RESULT_TOO_MANY_ACCOUNTS";
	else if(res==(4))
	return"FD_BANK_RESULT_ALREADY_HAS_ACCOUNT";
	else if(res==(5))
	return"FD_BANK_RESULT_NOT_ENOUGH_MONEY";
	else if(res==(6))
	return"FD_BANK_RESULT_BANK_FULL";
	else if(res==(7))
	return"FD_BANK_RESULT_BANK_EMPTY";
	else if(res==(8))
	return"FD_BANK_RESULT_DATA_ERROR";
	else if(res==(9))
	return"FD_BANK_RESULT_INVALID_PLAYER";
	else if(res==(10))
	return"FD_BANK_RESULT_NO_ACCOUNT";
	else
	return"FD_Result: Unknown error code";
}

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                      

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}      

import bool IsBigFaction(uint faction)from"factions";
import bool IsTheSameFaction(uint player1Id,uint player2Id)from"factions";
import void _Resign(uint playerId)from"factions"; 

import int RegisterFaction(uint id,const string@name,bool playerDriven)from"factions";
import int RegisterFaction(const string@name,bool playerDriven,uint&out id)from"factions";

import bool RemoveFaction(uint faction)from"factions"; 

import bool GetFactionNameStr(uint faction,string&out name)from"factions";
import bool GetFactionId(const string@name,uint&out id)from"factions"; 

import bool IsFactionNameFree(const string&)from"factions";
import bool IsFactionNameValid(const string&)from"factions";

import bool IsGang(uint faction)from"factions";

import uint16 GetFactionRadioChannel(uint faction)from"factions";
import void SetFactionRadioChannel(uint faction,uint16 channel)from"factions"; 

import int AddPlayer(uint faction,uint id)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)from"factions"; 

import int RemovePlayer(uint faction,uint id)from"factions"; 

import int GetFaction(uint faction,uint id)from"factions";
import int GetStatus(uint faction,uint id)from"factions";
import int GetRank(uint faction,uint id)from"factions";
import bool IsMember(uint faction,Critter&cr)from"factions";
import bool IsMemberOffline(uint faction,uint id)from"factions";
import bool StoredInDB(uint faction,uint id)from"factions";
import uint GetRecordsCount(uint faction)from"factions";
import uint GetMembersCount(uint faction)from"factions";
import uint GetMembers(uint faction,array<uint>&ids)from"factions";
import uint GetLeaderId(uint faction)from"factions";
import void SetLeaderId(uint faction,uint id)from"factions";
import uint GetClaimId(uint faction)from"factions";
import void SetClaimId(uint faction,uint id)from"factions";
import uint GetLeaderTime(uint faction)from"factions";
import void SetLeaderTime(uint faction,uint time)from"factions";
import uint GetClaimTime(uint faction)from"factions";
import void SetClaimTime(uint faction,uint time)from"factions";
import uint GetFactionLocationId(uint faction)from"factions";
import bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)from"factions";

import void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)from"factions";

import uint GetFactionScore(uint faction)from"factions";
import void ModifyFactionScore(uint faction,int amount)from"factions";
import void UpdateLastUsed(uint faction)from"factions";
import uint GetFactionsCount()from"factions"; 

import int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)from"factions";
import int GetNextId(uint faction,uint currId,bool members,uint&out nextId)from"factions";
import int GetFirstId(uint faction,bool members,uint&out id)from"factions"; 

import int ModifyRank(uint faction,uint id,uint newRank)from"factions";
import int ModifyStatus(uint faction,uint id,uint newStatus)from"factions";
import int ModifyFaction(uint faction,uint id,uint newFaction)from"factions"; 

import int InvitePlayer(uint faction,uint playerId)from"factions";
import int ConfirmInvitation(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId,bool applyModifiers)from"factions";
import int ChangeRank(uint faction,uint playerId,uint newRank)from"factions";
import int ExpelMember(uint faction,uint playerId)from"factions";
import int ExpelMember(uint faction,uint playerId,bool applyModifiers)from"factions";

import uint GetPlayerFaction(uint playerId)from"factions";
import uint GetPlayerRank(uint playerId)from"factions"; 

import void AddFactionNews(uint faction,uint master,uint slave,uint type)from"factions";
import bool GetFactionNews(uint faction,uint index,uint&out master,uint&out slave,uint&out type,uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)from"factions";
import uint GetFactionNewsCount(uint faction)from"factions"; 

import uint CheckFactionBaseCoords(uint x,uint y)from"factions";

import bool SaveFactionData(uint faction)from"factions";
import bool FactionExists(uint faction)from"factions"; 

import uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)from"factions";   

import void InitFactions()from"factions";
import void UpdateFactionsInfo(Critter&cr)from"factions";
import IFaction@GetFaction(int)from"factions";
import IFaction@GetFaction(const string&)from"factions";
import IFaction@GetFactionByIdx(int idx)from"factions";
import void UpdateGroupVars(Critter&player)from"factions";     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);
	void settag(int index,int tag,int r,int g,int b);
	int get_tag(int index);
	int get_b(int index);
	int get_r(int index);
	int get_g(int index);  
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
};                                                                                                                                                                                                                                                                                                                                                                                                                                                          

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                                                                                                                                                                                                                                                        

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                  

import string GetRandomFirstName(uint gender)from"npc_names";
import string GetRandomFirstName(uint gender,int&index)from"npc_names";

import string GetRandomNick(uint gender)from"npc_names";

import string GetRandomSurname()from"npc_names";

import string GetRandomFullName(uint gender)from"npc_names";
import string GetRandomFullName(uint gender,int&firstName,bool&genderNick,int&nick,int&surname)from"npc_names"; 

import string GetFirstName(uint gender,uint index)from"npc_names";
import string GetNick(uint gender,uint index,bool genderNick)from"npc_names";
import string GetSurname(uint index)from"npc_names";  

import void LogNames(bool printNames)from"npc_names

shared class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(!IsAnyData(name))
		return false;
		if(!GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const bool&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const string&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const float&value)
	{
		int dummy=FloatToInt(value);
		return Set(dummy);
	}
	
	Serializator@opShl(const float&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const array<int64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<bool>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<bool>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<string>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<string>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<float>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(FloatToInt(values[i]));
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<float>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Critter&cr)
	{
		return Set(cr);
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Item&item)
	{
		return Set(item);
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@opShr(bool&value)
	{
		return Get(value);
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@opShr(string&str)
	{
		return Get(str);
	}
	
	Serializator@Get(float&value)
	{
		int dummy=0;
		Get(dummy);
		value=IntToFloat(dummy);
		return this;
	}
	
	Serializator@opShr(float&value)
	{
		return Get(value);
	}
	
	Serializator@Get(array<int64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<float>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		{
			int dummy=0;
			Get(dummy);
			values[i]=IntToFloat(dummy);
		}
		return this;
	}
	
	Serializator@opShr(array<float>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<bool>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<bool>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<string>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<string>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@opShr(Critter@&cr)
	{
		return Get(cr);
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	Serializator@opShr(Item@&item)
	{
		return Get(item);
	}
	
	array<uint8>Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};   

import bool AddToFollowerlist(Critter&master,Critter&follower)from"follower_common";  

uint e_DisableBagRefresh(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))
	{
		cr.SetBagRefreshTime((uint(-1)));
		{;};
	}
	return 0;
}

void NerfWeaponSkills(Critter&cr,uint primary,uint secondary)
{
	for(uint i=(200);i<=(205);i++)
	{
		if(i!=primary&&i!=secondary)
		{
			if(i==(201))
			cr.ParamBase[i]=-80;
			else
			cr.ParamBase[i]=-30;
		}
	}
}

shared interface IMerc
{
	IMerc@Dialog(int dialogid);
	IMerc@Script(string&script);
	IMerc@AI(int aipack);
	IMerc@Bag(int bagid);
	IMerc@Team(int teamid);
	IMerc@Level(int level);
	IMerc@PID(int pid);
	IMerc@PID(array<int>npcpids);
	IMerc@Type(int type);
	IMerc@ID(int id);
	IMerc@Cost(int cost);
	IMerc@StartCost(int cost);
	IMerc@SellPrice(int price);
	IMerc@DynamicPrice();
	
	bool IsDynamicPrice();
	int GetDialog();
	string@GetScript();
	int GetAIPack();
	int GetBagID();
	int GetBagValue();
	int GetTeamID();
	int GetLevel();
	int GetLastPID();
	array<int>GetPIDs();
	uint GetType();
	int8 GetBaseType();
	int GetCost();
	int GetSellPrice();
	uint GetID();
	string@GetName();
	
	bool Spawn(Critter&master);
}; 

class CMerc:IMerc
{
	bool dynamicprice;
	int dir;
	int dialogid;
	string script;
	int aipack;
	int8 basetype;
	int bagid;
	int teamid;
	int level;
	int respawnTime;
	array<int>npcpids;
	int npcpid;
	int cost;
	int bagvalue;
	int startcost;
	uint type;
	int sellprice;
	uint id;
	string name;
	
	Serializator serializer;
	
	CMerc()
	{
		dir=Random(0,6);
		dialogid=(9310);
		script="follower@critter_init";
		basetype=-1;
		aipack=0;
		bagid=0;
		teamid=0;
		level=1;
		respawnTime=(-2);
		cost=0;
		sellprice=0;
		id=0;
		type=0;
		dynamicprice=false;
	}
	
	bool Spawn(Critter&master)
	{
		npcpid=(npcpids[Random(0,npcpids.length()-1)]);
		
		Critter@SpawnedNpc=AddNpc(master.GetMap(),npcpid,master.HexX,master.HexY,dir,dialogid,script,aipack,bagid,teamid,false,level);
		if((@SpawnedNpc!=null))
		{
			SpawnedNpc.FollowerVarBase[(929)]=(master.Param[(106)]);
			SpawnedNpc.FollowerVarBase[(932)]=type;
			SpawnedNpc.FollowerVarBase[(930)]=id;
			basetype=SpawnedNpc.CrType;
			SpawnedNpc.FollowerVarBase[(933)]=master.Id;
			SpawnedNpc.ParamBase[(84)]=respawnTime;
			
			if(type==(3)||type==(4)||type==(2))
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			switch(type)
			{
				case(6):
				case(12):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(7):
				case(13):
				NerfWeaponSkills(SpawnedNpc,(200),0);
				break;
				case(8):
				case(11):
				NerfWeaponSkills(SpawnedNpc,(201),0);
				break;
				case(5):
				case(10):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(9):
				NerfWeaponSkills(SpawnedNpc,(202),0);
				break;
				default:
				break;
			}
			
			SpawnedNpc.ChangeCrType(SpawnedNpc.ParamBase[(112)]);
			
			CreateTimeEvent(((__FullSecond)+(((3)*60))),"e_DisableBagRefresh",SpawnedNpc.Id,true);
			ArmBestWeapon(SpawnedNpc);
			
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(306)]+=1;
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(315)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(405)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(309)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(313)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(330)]+=1;
			
			for(uint i=0;i<=6;i++)SpawnedNpc.ParamBase[i]+=Random(-1,1);   
			
			SpawnedNpc.ParamBase[(7)]+=(Random(0,20));
			SpawnedNpc.ParamBase[(7)]-=10;
			
			SpawnedNpc.ParamBase[(72)]=SpawnedNpc.Param[(7)];
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			if(!AddToFollowerlist(master,SpawnedNpc))
			Log("Failed to assign merc's id to master("+master.Id+") followerlist");
			
			this.name=GenerateNewName(SpawnedNpc);
			
			if(this.name.length()>0)
			SetLexem(SpawnedNpc,"$name",this.name);
			
			return true;
		}
		else
		{
			Log("Failed to create mercenary of PID "+npcpid+" with mercid "+id+" on map id "+master.GetMapId());
			master.Say((11),"Failed to create mercenary, report this error immediately");
		} 
		
		return false;
	}
	
	IMerc@Dialog(int dialogid)
	{
		this.dialogid=dialogid;
		return this;
	}
	
	IMerc@Script(string&script)
	{
		this.script=script;
		return this;
	}
	
	IMerc@AI(int aipack)
	{
		this.aipack=aipack;
		return this;
	}
	
	IMerc@Bag(int bagid)
	{
		this.bagid=bagid;
		
		bagvalue=0;
		array<uint>mincounts,maxcounts;
		array<int>slots;
		array<uint16>pids;
		uint num=GetBagItems(bagid,pids,mincounts,maxcounts,slots);
		uint cost=0;
		for(uint i=0;i<num;i++)
		{
			bagvalue+=BaseItemValue(pids[i],7,80,true)*(mincounts[i]+maxcounts[i])/2;
		}
		
		return this;
	}
	
	IMerc@Team(int teamid)
	{
		this.teamid=teamid;
		return this;
	}
	
	IMerc@Level(int level)
	{
		this.level=level;
		return this;
	}
	
	IMerc@PID(int npcpid)
	{
		this.npcpids.insertLast(npcpid);
		return this;
	}
	
	IMerc@PID(array<int>npcpids)
	{
		for(uint i=0;i<npcpids.length();i++)
		{
			this.npcpids.insertLast(npcpids[i]);
		}
		return this;
	}
	
	IMerc@Type(int type)
	{
		this.type=type;
		return this;
	}
	
	IMerc@ID(int id)
	{
		this.id=id;
		return this;
	}
	
	IMerc@DynamicPrice()
	{
		dynamicprice=true;
		return this;
	}
	
	bool IsDynamicPrice()
	{
		return dynamicprice;
	}
	
	IMerc@StartCost(int cost)
	{
		serializer.Clear();
		if(!serializer.Load("merc_"+id)||GetGvar((12000))==0)
		{
			this.cost=cost;
			serializer.Clear();
			serializer.Set(this.cost).Save("merc_"+id);
		}
		else
		serializer.Get(this.cost);
		
		return this;
	}
	
	IMerc@Cost(int cost)
	{
		{;};
		this.cost=cost;
		
		serializer.Clear();
		serializer.Set(this.cost).Save("merc_"+id);
		
		return this;
	}
	
	IMerc@SellPrice(int sellprice)
	{
		this.sellprice=sellprice;
		return this;
	}
	
	int GetDialog(){return dialogid;}
	string@GetScript(){return script;}
	int8 GetBaseType(){return basetype;}
	int GetAIPack(){return aipack;}
	int GetBagID(){return bagid;}
	int GetTeamID(){return teamid;}
	int GetLevel(){return level;}
	int GetLastPID(){return npcpid;}
	array<int>GetPIDs(){return npcpids;}
	int GetCost(){return cost;}
	int GetBagValue(){return bagvalue;}
	int GetSellPrice(){return sellprice;}
	uint GetID(){return id;}
	uint GetType(){return type;}
	string@GetName(){return name;}
}; 

import bool IsFollowing(Critter&critter)from"follower_common";
import bool IsOwnersFollower(Critter&owner,Critter&critter)from"follower_common";
import bool CanHaveMoreFollowers(Critter&player,uint FollowerType)from"follower_common";
import Critter@GetFollowersOwner(Critter&critter)from"follower_common";
import bool RightDistance(Critter&follower,Critter&owner)from"follower_common";
import bool HasFollowerOfBaseType(Critter&owner,uint basetype)from"follower_common";
import Critter@GetFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import bool RemoveFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import int GetNumberOfFollowingFollowersOfPlayer(Critter&player)from"follower_common";
import int GetNumberOfFollowersOfPlayer(Critter&player)from"follower_common";
import uint GetSlaveTypes(Critter&player)from"follower_common";
import void ClearFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import void AddFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import uint NumberOfFollowersOnMap(Map@map)from"follower_common";
import uint GetFollowerType(Critter&critter)from"follower_common";
import bool DisbandFollower(Critter&player,Critter&cr,bool reset)from"follower_common";
import bool MakeFollower(Critter&critter,uint type,string&script,uint dialogid,Critter&owner,bool FreeBarter)from"follower_common";
import Critter@LocateFollowerByType(IMerc@merc,Critter&owner)from"follower_common";
import Critter@LocateFollowerByID(uint id,Critter&owner)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers,bool OnlyIsSeen)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers)from"follower_common";
import int GetFollowers(Critter&player,bool all,array<Critter@>&followers)from"follower_common";
import uint CountFollowers(Critter&player,bool all)from"follower_common";
import uint CountFollowers(Critter&player,Map@map)from"follower_common";
import uint GetPartyPointsMax(Critter&player)from"follower_common";
import uint GetPartyPointsUsed(Critter&player)from"follower_common";
import bool IsMerc(Critter&follower)from"follower_common";                                                                                                                                                        

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}                                                                                                                                                                                                                                                                       

shared interface IPolygon
{
	IPolygon@AddVertex(uint16 x,uint16 y);
	IPolygon@AddVertices(array<uint16>&hexes);   
	
	bool IsWithin(Critter&cr);
	bool IsWithin(Item&item);  
	
	bool IsWithin(uint16 x,uint16 y);
};  

import IPolygon@NewPolygon()from"polygon"; 

import IPolygon@LoadShapeFromEntires(Map&map,uint first,uint last)from"polygon

import void ApplyReputationModifiers(Critter&cr,uint index,int num,int den)from"reputations_modifiers";
import int GetReputationModifier(uint,uint)from"reputations_modifiers";
import int GetGroupsStatus(uint,uint)from"reputations_modifiers";               

void AddReputation(Critter@cr,uint index,int val)
{
	if(index<2||index>99){{;};return;};
	cr.ReputationBase[index]=cr.Reputation[index]+val;
}       

void SubReputation(Critter@cr,uint index,int val)
{
	if(index<2||index>99){{;};return;};
	cr.ReputationBase[index]=cr.Reputation[index]-val;
}         

void AddReputation(Critter@cr,uint index,int val,int cap)
{
	if(index<2||index>99){{;};return;};
	int rep=cr.Reputation[index];
	if(rep>=cap)
	return;
	rep+=val;
	if(rep>cap)
	rep=cap;
	cr.ReputationBase[index]=rep;
}        

void SubReputation(Critter@cr,uint index,int val,int cap)
{
	if(index<2||index>99){{;};return;};
	int rep=cr.Reputation[index];
	if(rep<=cap)
	return;
	rep-=val;
	if(rep<cap)
	rep=cap;
	cr.ReputationBase[index]=rep;
}       

uint ReputationIndex(uint locid)
{
	switch(locid)
	{
		case(1):
		return(81);
		case(2):
		return(80);
		case(3):
		return(82);
		case(4):
		return(6);
		case(5):
		return(84);
		case(6):
		return(13);
		case(7):
		return(87);
		case(10):
		return(5);
		case(11):
		return(4);
		case(13):
		return(85);
		case(14):
		return(20);
		case(15):
		return(3);
		case(17):
		return(89);
		case(18):
		return(2);
		case(22):
		return(10);
		case(24):
		return(88);
		case(25):
		return(90);
		case(26):
		return(29);
		case(27):
		case(29):
		return(7);
		default:
	}
	return(1);
} 

void ProcessProfitReputation(Critter@cr,uint index,int profit)
{
	if(index<2||index>99){{;};return;};
	int points=cr.Reputation[index];
	if(points>=(900))
	return;
	points=points*(((points)>0)?(points):(-(points)));
	points+=profit;
	if(points<0)
	{
		int sq=-int(sqrt(float(-points)));
		if(sq<=cr.Reputation[index])
		return;
		cr.ReputationBase[index]=sq;
		return;
	}
	int sq=int(sqrt(float(points)));
	if(sq>(900))
	sq=(900);
	if(sq>cr.Reputation[index])
	cr.ReputationBase[index]=sq;
}

import ITown@GetTownByIndex(uint index)from"towns";
import ITown@GetTown(uint id)from"towns";
import uint GetTownCount()from"towns";
import uint GetTowns(array<ITown@>@towns)from"towns";                     

class PresenceStruct
{
	uint factionId;
	uint count;
	PresenceStruct(uint factionId)
	{
		this.factionId=factionId;
		this.count=1;
	}
};

shared interface ITown
{
	ITown@SetMapID(uint id);
	ITown@SetTownID(uint id);
	ITown@SetBaseRewardValue(uint value);
	ITown@SetInfluenceMemberRequirement(uint number);
	ITown@SetNearbyMemberRequirement(uint number);
	ITown@SetTotalMemberRequirement(uint number);
	ITown@SetLimboContainer(Item@container);
	ITown@SetRewardContainer(Item@container);
	ITown@SetTownLeader(Critter@leader);
	ITown@SetSpeechModifier(int modifier);
	ITown@SetHour(uint hour);
	ITown@SetCaptureArea(IPolygon@capturearea);
	ITown@SetMilitiaEnabled();
	ITown@SetRewardStartCaps(uint caps);
	ITown@SetVersion(uint version);
	
	uint GetVersion();
	
	uint GetTownID();
	string GetTownName();
	bool LoadData();
	bool SaveData();
	bool IsMilitiaEnabled();
	bool IsFriendlyFaction(uint factionid);
	bool IsFriend(Critter&cr);
	bool IsValidCaptor(Critter&cr);
	bool IsWithinCaptureArea(Critter&cr);
	void AreaCheck();
	bool AddFriendlyFaction(uint factionid);
	bool RemoveFriendlyFaction(uint factionid);
	array<uint>GetFriendlyFactions();
	float GetControllingInfluence();
	uint GetMilitiaMax();
	uint GetControllingFaction();
	uint GetNumberOfKilledNPCs();
	uint GetControlCycles();
	uint GetStatus();
	void SetStatus(uint status);
	void SetScore();
	void SetPreviousFaction(uint previous);
	uint GetlastSecond();
	void SetlastSecond(uint sec);
	uint GetAreaCount();
	uint GetCountdown();
	void SetCountdownStatus(bool enabled);
	bool GetCountdownStatus();
	void SendCountdownTime(Critter&player);
	uint GetMemberNearbyRequirement();
	uint GetMemberTotalRequirement();
	Item@GetLimboContainer();
	Item@GetRewardContainer();
	uint GetTownLeaderId();
	uint GetMapID();
	int GetSpeechModifier();
	bool GainControl(Critter&player);
	void IncreaseNPCDeath(uint num);
	void ModifyInfluence(uint factionId,float value);
	void SetInfluence(uint factionId,float value);
	void ResetStats();
	void ResetControl();
	void RevertControl();
	void ClearRewardContainer();
	void ClearLimboContainer();
	void ClearContainers();
	void Update(uint hour,uint minute);
	void UpdateCountdown();
	void UpdateTick();
	void TownCheck();
	
	bool IsLaw(uint law);
	void SetLaw(uint law,bool enabled);
	
	void AddMoney(int money);
	int GetMoney(); 
	
	float GetInfluence(uint faction);
	
	Location@GetLocation();
}

import void ClearContainerSoft(Item@container)from"utils";
import int GetWearProcent(Item&item)from"repair";
import void unsafe_ExecGMHelpCommand(Critter&player,int p0,int p1,int p2,string@commandString,array<int>@param4)from"unsafe_client";

array<uint>bags;
array<uint>mil_modoc_pids;
array<uint>mil_klamath_pids;
array<uint>mil_bh_pids;
array<uint>mil_den_pids;
array<uint>mil_redding_pids;
array<uint>mil_gecko_pids;
array<uint>mil_necro_pids;

void InitMilitia()
{
	for(uint i=458;i<498;i++)
	bags.insertLast(i); 
	
	for(uint j=0;j<100;j++)
	{
		for(uint i=36;i<49;i++)
		{
			mil_modoc_pids.insertLast(i);
			mil_klamath_pids.insertLast(i);
			mil_bh_pids.insertLast(i);
			mil_den_pids.insertLast(i);
			mil_redding_pids.insertLast(i);
			mil_gecko_pids.insertLast(i);
			mil_necro_pids.insertLast(i);
		}
		for(uint i=134;i<138;i++)
		{
			mil_modoc_pids.insertLast(i);
			mil_klamath_pids.insertLast(i);
			mil_bh_pids.insertLast(i);
			mil_den_pids.insertLast(i);
			mil_redding_pids.insertLast(i);
			mil_gecko_pids.insertLast(i);
			mil_necro_pids.insertLast(i);
		}
		
		for(uint i=222;i<223;i++)
		{
			mil_modoc_pids.insertLast(i);
			mil_klamath_pids.insertLast(i);
			mil_bh_pids.insertLast(i);
			mil_den_pids.insertLast(i);
			mil_redding_pids.insertLast(i);
			mil_gecko_pids.insertLast(i);
			mil_necro_pids.insertLast(i);
		}
		
		for(uint i=250;i<251;i++)
		{
			mil_modoc_pids.insertLast(i);
			mil_klamath_pids.insertLast(i);
			mil_bh_pids.insertLast(i);
			mil_den_pids.insertLast(i);
			mil_redding_pids.insertLast(i);
			mil_gecko_pids.insertLast(i);
			mil_necro_pids.insertLast(i);
		}
		
		for(uint i=261;i<262;i++)
		{
			mil_modoc_pids.insertLast(i);
			mil_klamath_pids.insertLast(i);
			mil_bh_pids.insertLast(i);
			mil_den_pids.insertLast(i);
			mil_redding_pids.insertLast(i);
			mil_gecko_pids.insertLast(i);
			mil_necro_pids.insertLast(i);
		}
		
		for(uint i=261;i<262;i++)
		{
			mil_modoc_pids.insertLast(i);
			mil_klamath_pids.insertLast(i);
			mil_bh_pids.insertLast(i);
			mil_den_pids.insertLast(i);
			mil_redding_pids.insertLast(i);
			mil_gecko_pids.insertLast(i);
			mil_necro_pids.insertLast(i);
		}
		for(uint i=886;i<889;i++)
		{
			mil_modoc_pids.insertLast(i);
			mil_klamath_pids.insertLast(i);
			mil_bh_pids.insertLast(i);
			mil_den_pids.insertLast(i);
			mil_redding_pids.insertLast(i);
			mil_gecko_pids.insertLast(i);
			mil_necro_pids.insertLast(i);
		}
	} 
	
	for(uint i=291;i<292;i++)
	{
		mil_modoc_pids.insertLast(i);
		mil_klamath_pids.insertLast(i);
		mil_bh_pids.insertLast(i);
		mil_den_pids.insertLast(i);
		mil_redding_pids.insertLast(i);
		mil_gecko_pids.insertLast(i);
		mil_necro_pids.insertLast(i);
	} 
	
	mil_modoc_pids.insertLast(291);
	mil_klamath_pids.insertLast(291);
	mil_bh_pids.insertLast(291);
	mil_den_pids.insertLast(291);
	mil_redding_pids.insertLast(291);
	mil_gecko_pids.insertLast(291);
	mil_necro_pids.insertLast(291);
	
	mil_modoc_pids.insertLast(893);
	mil_klamath_pids.insertLast(893);
	mil_bh_pids.insertLast(893);
	mil_den_pids.insertLast(893);
	mil_redding_pids.insertLast(893);
	mil_gecko_pids.insertLast(893);
	mil_necro_pids.insertLast(893);
	
}

void item_init(Item&item,bool firstTime)
{
	item.SetEvent((4),"_UseRewardContainer");
}

void _Safehousedoor(Item&item,bool firstTime)
{
	item.SetEvent((4),"_Safehouse");
}

bool _Safehouse(Item&item,Critter&crit,int skill)
{
	item.Val7=9999999;
	item.Val6=9999999;
	
	if((skill==-1)||(skill==(210)))
	{
		ITown@town=GetTown(RetrieveTownId(crit));
		if(!(@town!=null))
		{
			crit.Say((11),"Error. Report this.");
			return false;
		}
		
		if(GetGroupIndex(crit)!=town.GetControllingFaction())
		{
			
			crit.Say((11),"You don't control this town.");
			return true;
		}
		if(town.GetVersion()!=(2)&&town.GetCountdown()>0)
		{
			crit.Say((11),"You don't control this town yet. Wait until it's taken");
			return true;
		}
		
		if((not((item.LockerCondition&(0x01))!=0)))
		{
			item.LockerId=0;
			return false;
		}
	}
	return false;
}

bool _UseRewardContainer(Item&item,Critter&crit,int skill)
{
	
	if((skill==-1)||(skill==(210)))
	{
		ITown@town=GetTown(RetrieveTownId(crit));
		if(!(@town!=null))
		{
			crit.Say((11),"Error. Report this.");
			return false;
		}
		
		if(GetGroupIndex(crit)!=town.GetControllingFaction())
		{
			crit.Say((11),"You don't control this town.");
			return true;
		}
		
		if(town.GetVersion()!=(2)&&town.GetCountdown()>0)
		{
			crit.Say((11),"You don't control this town yet. Wait until it's taken");
			return true;
		}
		
		if(town.GetVersion()==(2)&&town.GetControllingInfluence()<(5))
		{
			crit.Say((11),"You don't have enough influence.");
			return true;
		} 
		
		if((not((item.LockerCondition&(0x01))!=0)))
		{
			item.LockerId=0;
			return false;
		}
	}
	return false;
}

bool IsTCTown(Map@map)
{
	if(!(@map!=null))
	{
		Log("ERR: Couldn't obtain map object");
		return false;
	}
	
	uint id=map.GetData((3));
	
	return(id!=0);
}

uint RetrieveTownId(Map@map)
{
	if(!(@map!=null))
	return 0;
	return map.GetData((3));
}

uint RetrieveTownId(Critter&critter)
{
	return RetrieveTownId(critter.GetMap());
}

ITown@RetrieveTown(Map&map)
{
	return(GetTown(RetrieveTownId(map)));
}

ITown@RetrieveTown(Critter&critter)
{
	return(GetTown(RetrieveTownId(critter)));
}

bool ValidTown(ITown@town)
{
	if(!(@town!=null))
	{
		Log("Town is not valid.");
		return false;
	}
	return true;
}

void GainControl(Critter&player)
{
	ITown@town=RetrieveTown(player);
	if(!(@town!=null))
	{
		player.Say((11),"Error TC_1. Report this.");
		Log("Trying to gain control of invalid town");
		return;
	}
	
	town.GainControl(player); 
	
	uint faction=town.GetControllingFaction();
}

uint GetNearMembers(Critter&player)
{
	ITown@town=RetrieveTown(player);
	
	array<Critter@>crits;
	uint num=player.GetMap().GetCritters(0,(0x0F),crits);
	
	uint nearmembers=0;
	
	for(uint i=0;i<num;i++)
	{
		if((GetCrittersDistantion(player,crits[i])<(15))&&GetGroupIndex(player)==GetGroupIndex(crits[i]))
		{
			if(town.IsValidCaptor(crits[i]))
			nearmembers++;
			else
			crits[i].Say((11),"The town considers you weak, and don't want your protection.");
		}
	}
	
	{;};
	
	return nearmembers;
}

bool IsPolicy(Critter&player,uint policy)
{
	ITown@town=RetrieveTown(player);
	
	if(!ValidTown(town))
	return false;
	
	return(town.IsLaw(policy));
}

bool IsControllingTown(Critter&player)
{
	ITown@town=RetrieveTown(player);
	
	if(!(@town!=null))
	return false;
	
	return(town.GetControllingFaction()==GetGroupIndex(player));
}

bool d_IsNotControllingTown(Critter&player,Critter@npc,int val)
{
	return(!IsControllingTown(player));
}

bool d_IsControllingTown(Critter&player,Critter@npc,int val)
{
	return(IsControllingTown(player));
}

bool d_CanRecruitMilitia(Critter&player,Critter@npc)
{
	
	ITown@town=RetrieveTown(player);
	if(!(@town!=null))
	return false;
	if(!IsControllingTown(player))
	return false;
	
	if(town.GetVersion()==(2))
	return(town.GetControllingInfluence()>=(25));
	else
	return(town.IsMilitiaEnabled());
}

bool d_CanChangeLaws(Critter&player,Critter@npc)
{
	ITown@town=RetrieveTown(player);
	if(town.GetCountdown()>0)return false;
	if(IsControllingTown(player))return true; 
	
	return false;
} 

bool d_CanTakeOver(Critter&player,Critter@npc)
{
	ITown@town=RetrieveTown(player);
	
	if(town.GetCountdown()>0)
	return false;   
	
	if(town.GetVersion()==(2))
	return false;
	
	if(town.GetVersion()==(1))
	return((town.GetStatus()==(0))||(town.GetCountdown()>0));
	else if(town.GetVersion()==(0))
	return true;
	return true;
}

bool d_IsBigEnoughFaction(Critter&player,Critter@npc,int val)
{
	return(GetMembersCount(GetGroupIndex(player))>=RetrieveTown(player).GetMemberTotalRequirement());
}

bool d_IsEnoughMembersPresent(Critter&player,Critter@npc,int val)
{
	return(GetNearMembers(player)>=RetrieveTown(player).GetMemberNearbyRequirement());
}

bool d_CanBecomeMilitia(Critter&player,Critter@npc)
{
	ITown@town=RetrieveTown(player);
	if(!(@town!=null))
	return false;
	
	return(town.IsMilitiaEnabled()&&IsControllingTown(player)&&(CountMilitia(player.GetMap())<int(town.GetMilitiaMax())));
}

bool d_IsMilitiaNotFull(Critter&player,Critter@npc)
{
	ITown@town=RetrieveTown(player);
	if(!(@town!=null))
	return false;
	
	return(CountMilitia(player.GetMap())<int(town.GetMilitiaMax()));
}

void r_FriendlyFactionsBrowse(Critter&player,Critter@npc,int val)
{
	ITown@town=RetrieveTown(player);
	array<uint>factions=town.GetFriendlyFactions();
	
	if(int(npc.ParamBase[((90))]+val)<0)
	npc.ParamBase[((90))]=0;
	else
	npc.ParamBase[((90))]+=val;
	if(npc.ParamBase[((90))]>int(factions.length()-1))
	npc.ParamBase[((90))]=factions.length()-1;
}

void r_SetFriendlyFactionsMode(Critter&player,Critter@npc,int val)
{
	npc.ParamBase[((92))]=val;
}

void dlg_ShowMilitiaCost(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	
	text+="$cost"+(1000);
	string money;
	string prefix;
	switch(npc.Param[(139)])
	{
		case 1:money="Dollars";
		case 2:money="Chips";
		case 3:money="Scrips";
		case 4:money="Pounds";
		case 5:money="Rings";
		default:money="Caps";
	}
	switch(npc.Param[(139)])
	{
		case 1:prefix="Enclave ";
		case 2:prefix="Memory ";
		case 3:prefix="NCR ";
		case 4:prefix="Vault City ";
		case 5:prefix="Pull ";
		default:prefix="Bottle ";
	}
	text+=("$prefix"+prefix);
	text+=("$money"+money);
}

void dlg_ManipulateFriendlyFactions(Critter&player,Critter@npc,string@say)
{
	if(!((@say!=null)&&say.length()>0))
	return;
	
	ITown@town=RetrieveTown(player);
	
	uint faction=0;
	if(GetFactionId(say,faction))
	{
		if(faction==town.GetControllingFaction())
		{
			player.Say((12),"Don't try to fool me, that's your gang.");
			return;
		}
		
		if(npc.Param[((92))]==(0))
		{
			if(town.AddFriendlyFaction(faction))
			player.Say((12),say+" successfully added to list of friendly factions. If you want to add another faction, you may enter it.");
			else
			player.Say((12),say+" already exists in the list.");
		}
		else
		{
			if(town.RemoveFriendlyFaction(faction))
			player.Say((12),say+" successfully removed from list of friendly factions. If you want to remove another faction, you may enter it");
			else
			player.Say((12),say+" is not in the list.");
		}
	}
	else
	player.Say((12),say+" is not a valid faction.");
}

void dlg_ShowFriendlyFactions(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	
	ITown@town=RetrieveTown(player);
	
	string str;
	array<uint>factions=town.GetFriendlyFactions();
	
	if(factions.length()==0)
	{
		text+="$faction"+"There's no faction on the list.";
		return;
	}
	
	if(GetFactionNameStr(factions[npc.Param[((90))]],str))
	text+="$faction"+str;
	else
	text+="$faction"+"***Invalid faction***";
}

bool AlertMilitia(Critter&cr)
{
	Map@map=cr.GetMap();
	array<Critter@>crits;
	uint num=map.GetCritters(0,(0x01)|(0x20),crits);
	bool activemilitia=false;
	for(uint i=0;i<num;i++)
	{
		if(((crits[i].Param[(534)]&((0x00001000)))!=0))
		{
			activemilitia=true;
			AttackCritter(crits[i],cr,0);
		}
	}
	if(activemilitia)
	return true;
	
	return false;
}

uint r_ClaimControl(Critter&player,Critter@npc,int val)
{   
	
	ITown@town=RetrieveTown(player);
	
	{;};
	{;};
	
	if(GetMembersCount(GetGroupIndex(player))<town.GetMemberTotalRequirement())
	{
		return(302);
	}
	
	{;};
	
	if(GetNearMembers(player)<town.GetMemberNearbyRequirement())
	{
		return(301);
	}
	
	if(AlertMilitia(player))
	{
		return(330);
	}
	
	return(310);
	
}

void SpawnInitMilitia(Map@map)
{
	
	ITown@town=GetTown(RetrieveTownId(map));
	if(!(@town!=null)||town.GetControllingFaction()!=0)
	return;
	
	if(!town.IsMilitiaEnabled())
	return;
	
	for(uint i=0;i<(6);i++)
	AddMilitia(map);
	
} 

int SelectBag(uint crpid)
{
	do{uint __temp;uint pos;for(uint __i=0;__i<bags.length()-1;__i++){pos=Random(__i,bags.length()-1);__temp=bags[pos];bags[pos]=bags[__i];bags[__i]=__temp;}}while(false);
	for(uint i=0;i<bags.length()-1;i++)
	{
		if(!HasUnusableWeapon(crpid,bags[i]))
		return bags[i];
	}
	return 1;
}

void dlg_ShowFactionName(Critter&player,Critter@npc,string@text)
{
	ITown@town=RetrieveTown(player);
	if((@town!=null))
	{
		if(!((@text!=null)&&text.length()==0))
		return;
		
		string name;
		if(!GetFactionNameStr(town.GetControllingFaction(),name))
		{
			Log("Failed to retrieve faction name");
		}
		
		if(name=="Unknown")
		{
			text+="$faction"+"us";
			return;
		}
		
		text+="$faction"+name;
	}
	else
	text+="$faction"+"us";
	string money;
	string prefix;
	switch(npc.Param[(139)])
	{
		case 1:money="Dollars";
		case 2:money="Chips";
		case 3:money="Scrips";
		case 4:money="Pounds";
		case 5:money="Rings";
		default:money="Caps";
	}
	switch(npc.Param[(139)])
	{
		case 1:prefix="Enclave ";
		case 2:prefix="Memory ";
		case 3:prefix="NCR ";
		case 4:prefix="Vault City ";
		case 5:prefix="Pull ";
		default:prefix="Bottle ";
	}
	text+=("$prefix"+prefix);
	text+=("$money"+money);
}

int CountMilitia(Map@map)
{
	array<Critter@>crits;
	uint count=0;
	uint num=map.GetCritters(0,(0x0F)|(0x20),crits);
	for(uint i=0;i<num;i++)
	{
		if(((crits[i].Param[(534)]&((0x00001000)))!=0))
		count++;
	}
	return count;
}

int GetMilitiaPid(uint MapProtoId)
{
	switch(MapProtoId)
	{
		case 6:
		return(mil_den_pids[Random(0,mil_den_pids.length()-1)]);
		case 9:
		return(mil_klamath_pids[Random(0,mil_klamath_pids.length()-1)]);
		case 18:
		return(mil_modoc_pids[Random(0,mil_modoc_pids.length()-1)]);
		case 31:
		return(mil_gecko_pids[Random(0,mil_gecko_pids.length()-1)]);
		case 141:
		return(mil_necro_pids[Random(0,mil_necro_pids.length()-1)]);
		case 62:
		return(mil_redding_pids[Random(0,mil_redding_pids.length()-1)]);
		case 115:
		return(mil_bh_pids[Random(0,mil_bh_pids.length()-1)]);
		
		default:
		return-1;
	}
	return-1;
}

void r_ModifyInfluenceBuffer(Critter&cr,Critter@npc,int value)
{
	ModifyInfluenceBuffer(cr,value);
}        

void ModifyInfluenceBuffer(Critter&cr,int value)
{
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return;
	
	if(!map.GetLocation().IsTCTown())
	return;
	
	for(uint i=1;i<=(7);i++)
	{
		ITown@town=GetTown(i);
		if(!(@town!=null))
		continue;
		
		if(town.GetLocation().Id==map.GetLocation().Id)
		{
			if(town.GetVersion()!=(2))
			{
				Log("ERR: trying to modify influence in a non-influence town, town id="+i+", value="+value);
				return;
			} 
			
			if(GetGroupIndex(cr)!=town.GetControllingFaction())
			{
				GameVar@var=GetLocalVar((12003),cr.Id);
				var+=value;
			}
			break;
		}
	}
}

void ClearInfluenceBuffer(Critter&cr)
{
	GameVar@var=GetLocalVar((12003),cr.Id);
	var=0;
}
bool cantakemodoc=true;
bool cantakenecro=true;
bool cantakegecko=true;
bool cantakebroke=true;
bool cantakereddi=true;
bool cantakeden=true;
bool cantakeklama=true;
bool cantakereno=true;
void setTCCD(Location@loc)
{
	
}

uint e_RemovemodocCD(array<uint>@data)
{
	return 0;
}
void FlushInfluenceBuffer(Critter&cr,ITown@town)
{
	GameVar@var=GetLocalVar((12003),cr.Id);
	if((@town!=null))
	{
		{;};
		float value=float(var/1000);
		
		string s;
		s.ParseFloat(value,16);
		{;};
		town.ModifyInfluence(town.GetControllingFaction(),value);
	} 
	
	var=0;
}

bool AddMilitia(Map@map)
{
	if(!(@map!=null))
	return false;
	
	if(mil_den_pids.length()==0)
	InitMilitia(); 
	
	int pid=GetMilitiaPid(map.GetProtoId());
	if(pid==-1)
	{
		Log("Unknown town, can't create militia");
		return false;
	}
	
	uint count=CountMilitia(map);
	if(count>=(15))
	return false;
	
	uint bag=SelectBag(pid);
	
	array<Entire>entires;
	ParseEntires(map,entires,(0));
	uint r=Random(0,entires.length()-1);
	Critter@SpawnedNpc=AddNpc(map,pid,entires[r].HexX,entires[r].HexY,Random(0,5),(10600),"town_militia@critter_init",0,bag,(1),false,Random(20,60));
	if(!(@SpawnedNpc!=null))
	return false;
	
	return true;
}
uint Addpropermoney(Critter@npc)
{
	switch(npc.Param[(139)])
	{
		case 0:return(41);
		case 1:return(1212);
		case 2:return(1211);
		case 3:return(1214);
		case 4:return(1213);
		case 5:return(1215);
	}
	return(41);
	
}
uint r_RecruitMilitia(Critter&player,Critter@npc)
{
	ITown@town=RetrieveTown(player);
	if(!(@town!=null))
	{
		Log("Unknown town, can't create militia");
		return(440);
	}
	
	if(town.GetCountdown()>0)
	{
		return(450);
	}
	
	if((1000)>player.CountItem(Addpropermoney(npc)))
	{
		return(430);
	}
	
	Map@map=player.GetMap();
	
	uint count=CountMilitia(map);
	
	if(count>=town.GetMilitiaMax())
	{
		return(420);
	}
	
	int pid=GetMilitiaPid(map.GetProtoId());
	if(pid==-1)
	{
		Log("Unknown town, can't create militia");
		return(440);
	}
	
	uint bag=SelectBag(pid);
	
	if(!BanksTransferFromCritter(player,(1000),(3),false))
	{
		Log("Couldn't remove money");
		return(440);
	}
	
	Critter@SpawnedNpc=AddNpc(player.GetMap(),pid,player.HexX,player.HexY,Random(0,5),(10600),"town_militia@critter_init",0,bag,(1),false,Random(10,40));
	
	return(410);
}

void r_GainControl(Critter&player,Critter@npc,int val)
{
	GainControl(player);
}

void r_SetPolicy(Critter&player,Critter@npc,int policy,int value)
{
	ITown@town=RetrieveTown(player);
	town.SetLaw(policy,value==1?true:false);
}

bool d_IsPolicy(Critter&player,Critter@npc,int policy)
{
	return IsPolicy(player,policy);
}

bool d_IsNotPolicy(Critter&player,Critter@npc,int policy)
{
	return!IsPolicy(player,policy);
}

void dlg_ShowPolicies(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	
	text+="$stealing"+((IsPolicy(player,(1)))?"Yes":"No");
	text+="$weapons"+((IsPolicy(player,(2)))?"Yes":"No");
	text+="$attackflagged"+((IsPolicy(player,(3)))?"Yes":"No");
	string money;
	string prefix;
	switch(npc.Param[(139)])
	{
		case 1:money="Dollars";
		case 2:money="Chips";
		case 3:money="Scrips";
		case 4:money="Pounds";
		case 5:money="Rings";
		default:money="Caps";
	}
	switch(npc.Param[(139)])
	{
		case 1:prefix="Enclave ";
		case 2:prefix="Memory ";
		case 3:prefix="NCR ";
		case 4:prefix="Vault City ";
		case 5:prefix="Pull ";
		default:prefix="Bottle ";
	}
	text+=("$prefix"+prefix);
	text+=("$money"+money);
}

void dlg_ShowTownName(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	
	ITown@town=RetrieveTown(player);
	
	text+="$town"+town.GetTownName();
	string money;
	string prefix;
	switch(npc.Param[(139)])
	{
		case 1:money="Dollars";
		case 2:money="Chips";
		case 3:money="Scrips";
		case 4:money="Pounds";
		case 5:money="Rings";
		default:money="Caps";
	}
	switch(npc.Param[(139)])
	{
		case 1:prefix="Enclave ";
		case 2:prefix="Memory ";
		case 3:prefix="NCR ";
		case 4:prefix="Vault City ";
		case 5:prefix="Pull ";
		default:prefix="Bottle ";
	}
	text+=("$prefix"+prefix);
	text+=("$money"+money);
}

bool d_InfluenceAtLeast(Critter&player,Critter@npc,int influence)
{
	ITown@town=RetrieveTown(player);
	return(town.GetInfluence(GetGroupIndex(player))>=influence);
}

bool d_IsVersion(Critter&player,Critter@npc,int version)
{
	ITown@town=RetrieveTown(player);
	return(town.GetVersion()==uint(version));
} 

bool d_GainControl(Critter&player,Critter@npc,int val)
{
	GainControl(player);
	return true;
} 

bool d_PresentAlmost(Critter&player,Critter@npc,int val)
{
	ITown@town=RetrieveTown(player);
	return(GetNearMembers(player)+1==town.GetMemberNearbyRequirement()&&
	GetMembersCount(GetGroupIndex(player))>=town.GetMemberTotalRequirement());
} 

bool d_MembersAlmost(Critter&player,Critter@npc,int val)
{
	ITown@town=RetrieveTown(player);
	return(GetNearMembers(player)>=town.GetMemberNearbyRequirement()&&
	GetMembersCount(GetGroupIndex(player))+1==town.GetMemberTotalRequirement());
}

uint r_TakeoverCheck(Critter&player,Critter@npc,int val)
{
	ITown@town=RetrieveTown(player);
	
	if(AlertMilitia(player))
	{
		return(330);
	}
	
	if((player.Param[(214)]+town.GetSpeechModifier()>=Random(1,100)))
	return(320);
	return(130);
}

bool _LeaderAttacked(Critter&cr,Critter&attacker)
{
	return false;
}

void _LeaderDead(Critter&cr,Critter@killer)
{
	ITown@town=RetrieveTown(cr);
	if(!(@town!=null)||!(@killer!=null))
	return;                       
	
}

void setinfluence(Critter&cr,int factionId,int value,int)
{
	ITown@town=RetrieveTown(cr);
	town.SetInfluence(factionId,value);
}  

ITown@CreateTown(string Name)
{
	return CTown(Name);
}

class CTown:ITown
{
	uint tcVersion;
	array<float>factionInfluence;
	
	bool militiaEnabled;
	uint militiamax;
	uint status;
	uint faction;
	uint previousfaction;
	uint memberNearbyReq;
	uint memberInfluenceReq;
	uint memberTotalReq;
	uint npcDeaths;
	uint controlCycles;
	uint rewardCapsStart;
	uint rewardCaps;
	uint mapid;
	uint lastHour;
	uint lastMinute;
	uint lastSecond;
	uint townLeaderId;
	uint id;
	uint hour;
	uint countdown;
	int ch;
	int speech;
	int baseValue;
	int speechModifier;
	array<uint>friendsList;
	Location@location;
	
	bool lawIllegalWeapons;
	bool lawPunishThieves;
	bool lawKillAggressor;
	
	array<IPolygon@>captureareas;
	uint outsideAreaCount;
	
	string name;
	
	Item@LimboContainer;
	Item@RewardContainer;
	
	Serializator serializer;
	
	CTown(string&name)
	{
		Money=faction=countdown=controlCycles=npcDeaths=memberNearbyReq=memberTotalReq=townLeaderId=
		mapid=ch=speech=baseValue=speechModifier=status=rewardCaps=rewardCapsStart=militiamax=lastMinute=0;
		
		militiaEnabled=true;
		
		this.name=name;
		if(!LoadData())
		SaveData();
		
		if(mapid==0)
		return;
		
		Map@map=GetMap(mapid);
		if(!(@map!=null))
		{
			Log("Map invalid, can't init TC in town "+id);
		}
		else
		{
			Critter@leader=map.GetNpc((60),(0x0F)|(0x20),0);
			if((@leader!=null))
			InitTownLeader(leader);
			if(militiaEnabled)
			InitTownMilitia(map,leader);
			else
			RemoveTownMilitia(map);
			@location=map.GetLocation();
		}
	}
	
	void SetLaw(uint law,bool enabled)
	{
		if(law==(2))
		lawIllegalWeapons=enabled;
		if(law==(1))
		lawPunishThieves=enabled;
		if(law==(3))
		lawKillAggressor=enabled;
	}
	
	bool IsLaw(uint law)
	{
		if(law==(2))
		return lawIllegalWeapons;
		if(law==(1))
		return lawPunishThieves;
		if(law==(3))
		return lawKillAggressor;
		return false;
	}
	
	uint GetMilitias(Map&map,array<Critter@>@militia)
	{
		array<Critter@>crits;
		uint num=map.GetCritters(0,(0x0F)|(0x20),crits);
		for(uint i=0;i<num;i++)
		{
			if(((crits[i].Param[(534)]&((0x00001000)))!=0))
			militia.insertLast(crits[i]);
		}
		return militia.length();
	}
	
	void InitTownMilitia(Map&map,Critter&leader)
	{
		array<Critter@>crits;
		uint num=GetMilitias(map,crits);
		for(uint i=0;i<num;i++)
		{
			AssignMilitiaTeam(crits[i]);
			if((@leader!=null))
			crits[i].ParamBase[(90)]=leader.Id;
		}
	}
	
	void RemoveTownMilitia(Map&map)
	{
		array<Critter@>crits;
		uint num=GetMilitias(map,crits);
		for(uint i=0;i<num;i++)
		DeleteNpc(crits[i]);
	}
	
	void InitTownLeader(Critter&leader)
	{
		if((@leader!=null))
		{
			leader.ParamBase[(84)]=((2)*60);
			leader.ParamBase[((90))]=0;
			(leader.ParamBase[(534)]=leader.Param[(534)]|((0x00002000)));
			leader.SetEvent((16),"town@_LeaderAttacked");
			leader.SetEvent((2),"town@_LeaderDead");
		}
	}
	
	bool LoadData()
	{
		serializer.Clear();
		if(!IsAnyData(this.name))
		return false;
		
		if(!serializer.Load(this.name))
		{
			friendsList.resize(0);
			return false;
		}
		serializer.Get(faction).Get(npcDeaths).Get(controlCycles)
		.Get(mapid).Get(ch).Get(speech).Get(Money).Get(status).Get(countdown)
		.Get(previousfaction).Get(rewardCaps).Get(friendsList).Get(militiamax)
		.Get(factionInfluence)
		.Get(lawIllegalWeapons).Get(lawKillAggressor).Get(lawPunishThieves);
		return true;
	}
	
	bool SaveData()
	{
		serializer.Clear();
		return serializer.Set(faction).Set(npcDeaths).Set(controlCycles)
		.Set(mapid).Set(ch).Set(speech).Set(Money).Set(status).Set(countdown)
		.Set(previousfaction).Set(rewardCaps).Set(friendsList).Set(militiamax)
		.Set(factionInfluence)
		.Set(lawIllegalWeapons).Set(lawKillAggressor).Set(lawPunishThieves).Save(this.name);
	}
	
	float GetControllingInfluence()
	{
		return GetInfluence(faction);
	}      
	
	float GetLargestInfluence(uint&factionid)
	{
		float largest=-1.0f;
		factionid=0;
		uint len=factionInfluence.length();
		for(uint i=1;i<len;i+=2)
		{
			if(factionInfluence[i]>largest)
			{
				largest=factionInfluence[i];
				factionid=factionInfluence[i-1];
			}
		}
		return largest;
	}
	
	void SortInfluence()
	{
		for(uint j=factionInfluence.length()-1;j>2;j-=2)
		{
			float temp;
			if(factionInfluence[j]>factionInfluence[j-2])
			{
				temp=factionInfluence[j];
				factionInfluence[j]=factionInfluence[j-2];
				factionInfluence[j-2]=temp;
				temp=factionInfluence[j-1];
				factionInfluence[j-1]=factionInfluence[j-3];
				factionInfluence[j-3]=temp;
			}
			else
			continue;
		}
	}       
	
	uint GetTopInfluence(array<uint>&factions,uint num)
	{
		SortInfluence();
		uint searchNum=(((num)>(factionInfluence.length()))?(factionInfluence.length()):(((num)<(0))?(0):(num)));
		for(uint i=0,j=searchNum;i<j;i+=2)
		factions.insertLast(factionInfluence[i]);
		
		return searchNum;
	}
	
	float GetInfluence(uint factionId)
	{
		uint len=factionInfluence.length();
		for(uint i=0;i<len;i+=2)
		{
			if(uint(factionInfluence[i])==factionId)
			return(factionInfluence[i+1]);
		}
		return 0.0f;
	}
	
	void SetInfluence(uint factionId,float value)
	{
		uint len=factionInfluence.length();
		bool found;
		for(uint i=0;i<len;i+=2)
		{
			if(uint(factionInfluence[i])==factionId)
			{
				{;};
				{;};
				factionInfluence[i+1]=value;
				factionInfluence[i+1]=(((factionInfluence[i+1])>(50000.0f))?(50000.0f):(((factionInfluence[i+1])<(0.0f))?(0.0f):(factionInfluence[i+1])));
				found=true;
			}
		}
		if(found)
		return;
		
		{;};
		factionInfluence.insertLast(factionId);
		factionInfluence.insertLast(value);
	}
	
	void ModifyInfluence(uint factionId,float value)
	{
		SetInfluence(factionId,GetInfluence(factionId)+value);
	}
	
	array<uint>GetFriendlyFactions()
	{
		return friendsList;
	}
	
	bool IsMilitiaEnabled()
	{
		return militiaEnabled;
	}
	
	bool IsFriendlyFaction(uint factionid)
	{
		for(uint i=0;i<friendsList.length();i++)
		{
			if(friendsList[i]==factionid)
			return true;
		}
		return false;
	}
	
	bool IsWithinCaptureArea(Critter&cr)
	{
		for(uint i=0;i<captureareas.length();i++)
		{
			if(captureareas[i].IsWithin(cr))
			return true;
		}
		return false;
	}
	
	bool IsFriend(Critter&cr)
	{
		if((cr.Param[(106)])==int(faction))
		return true;
		for(uint i=0;i<friendsList.length();i++)
		if((cr.Param[(106)])==int(friendsList[i]))
		return true;
		return false;
	}   
	
	float GetCaptorInfluence(Critter&cr)
	{
		float influence=0.0f;
		if(!(@cr!=null))
		return 0.0f;
		influence+=(cr.Param[(77)]*0.0001)+(cr.Param[(3)]*0.0002);
		Item@armor=cr.GetItem(0,(3));
		
		Item@weapon=cr.GetItem(0,(1));
		if((@weapon!=null)&&weapon.GetType()==(3)&&ItemLevel(weapon)>=(1)&&GetWearProcent(weapon)<=(75))
		influence+=0.0003*ItemLevel(weapon);
		else
		{
			@weapon=cr.GetItem(0,(2));
			if((@weapon!=null)&&weapon.GetType()==(3)&&ItemLevel(weapon)>=(1)&&GetWearProcent(weapon)<=(75))
			influence+=0.0003*ItemLevel(weapon);
		}
		
		return influence;
	}
	
	bool IsValidCaptor(Critter&cr)
	{
		if(cr.Param[(510)]!=0||cr.Cond!=(1)||cr.GetSocket()==-1)
		return false;
		if(cr.Param[(77)]<(12))
		return false;
		Item@weapon=cr.GetItem(0,(1));
		if(!(@weapon!=null))
		return false;
		if((@weapon!=null)&&weapon.GetType()==(3)&&ItemLevel(weapon)>=(1)&&GetWearProcent(weapon)<=(75))
		return true;
		@weapon=cr.GetItem(0,(2));
		return(@weapon!=null)&&weapon.GetType()==(3)&&ItemLevel(weapon)>=(1)&&GetWearProcent(weapon)<=(75);
	}
	
	bool AddFriendlyFaction(uint factionid)
	{
		int index=FindInArray(friendsList,factionid);
		if(index!=-1)
		return false;
		friendsList.insertLast(factionid);
		return true;
	}
	
	uint GetAreaCount()
	{
		return captureareas.length();
	}
	
	bool RemoveFriendlyFaction(uint factionid)
	{
		int index=FindInArray(friendsList,factionid);
		if(index==-1)
		return false;
		friendsList.removeAt(uint(index));
		return true;
	}  
	
	uint GetStatus()
	{
		return status;
	}
	
	void SetStatus(uint status)
	{
		this.status=status;
	}
	
	void SetPreviousFaction(uint previous)
	{
		previousfaction=previous;
	}
	
	void RevertControl()
	{
		Log("revert: faction "+faction);
		if(faction==previousfaction)
		faction=0;
		else
		faction=previousfaction;
		
		Broadcast_TownControl_Stop(this.location.GetProtoId());
		
		countdown=(__FullSecond);
		
		SetCountdownStatus(false);
		SetScore();
	}
	
	void SetScore()
	{
		string factionname;
		GetFactionNameStr(faction,factionname);
		if(factionname=="")
		SetBestScore((25)+id,null,"None");
		else
		SetBestScore((25)+id,null,factionname);
	}
	
	void AssignMilitiaTeam(Critter@cr)
	{
		if(faction>0)
		SetGroupInfo(cr,faction,3,(1));
		else
		{
			uint locpid=cr.GetMap().GetLocation().GetProtoId();
			if(locpid==(6))
			SetGroupInfo(cr,(14),3,(1));
			else if(locpid==(1))
			SetGroupInfo(cr,(9),3,(1));
			else
			SetGroupInfo(cr,ReputationIndex(locpid),3,(1));
		}
	}
	
	uint NumberOfValidFactionMembersPresent(Map&map,uint someFaction)
	{
		array<Critter@>crits;
		uint n=map.GetCritters(0,(0x01)|(0x10),crits);
		uint num=0;
		for(uint i=0;i<n;i++)
		{
			if((GetGroupIndex(crits[i])==someFaction)&&IsValidCaptor(crits[i]))
			num++;
		}
		return num;
	}  
	
	void TownCheck()
	{
		
		array<PresenceStruct@>factions;
		Map@map=GetMap(mapid);
		if(!(@map!=null))
		Log("TC: Invalid map "+mapid+" in town "+id);
		
		array<Critter@>crits;
		uint num=map.GetCritters(0,(0x01)|(0x10),crits);
		for(uint i=0;i<num;i++)
		{
			
			bool validCaptor=IsValidCaptor(crits[i]);
			uint factionId=GetGroupIndex(crits[i]);
			{;};
			if(factionId<0||!validCaptor)
			continue;
			
			bool found=false;
			for(uint i=0,j=factions.length();i<j;i++)
			{
				if(factions[i].factionId==factionId)
				{
					factions[i].count++;
					found=true;
				}
			}
			if(!found)
			{
				PresenceStruct@str=PresenceStruct(factionId);
				factions.insertLast(str);
			}
		}  
		
		for(uint i=0,j=factions.length();i<j;i++)
		{
			if(factions[i].count<memberInfluenceReq)
			{
				factions.removeAt(i);
				j--;
			}
		}           
		
		if(factions.length()==0)
		{
			
			return;
		} 
		
		{;};
		
		for(uint i=0,j=factionInfluence.length();i<j;i+=2)
		{
			bool Found=false;
			for(uint k=0,l=factions.length();k<l;k++)
			{
				if(factionInfluence[i]==float(factions[k].factionId))
				Found=true;
			}
			if(!Found)
			factionInfluence[i+1]-=0.0005;
		}
		
		IBroadcastBuffer@msgMultipleFactions=Broadcast_Influence(
		this.location.GetProtoId(),
		(((10)*__TimeMultiplier)),
		"Multiple factions are now contesting for influence in this town.");
		bool multipleFactions=(factions.length()>1);
		
		if(multipleFactions&&Random(0,4)==0)
		{
			for(uint i=0;i<num;i++)
			{
				uint factionId=GetGroupIndex(crits[i]);
				if(factionId<0||!IsValidCaptor(crits[i]))
				continue;
				msgMultipleFactions.Send(crits[i]);
				
			}
			{;};
			return;
		}
		
		IBroadcastBuffer@msgContest=Broadcast_Influence(
		this.location.GetProtoId(),
		(((10)*__TimeMultiplier)),
		"Reports are coming in from "+name+" that another gang is trying to gain a foothold there!");
		
		if(factions[0].factionId!=faction)
		{
			array<uint>ids;
			uint num=GetMembers(faction,ids);
			for(uint i=0;i<num;i++)
			{
				Critter@factionMember=GetCritter(num);
				if(!(@factionMember!=null))
				continue;
				msgContest.Send(factionMember);
			}
		}
		
		IBroadcastBuffer@msgInfluence=Broadcast_Influence(
		this.location.GetProtoId(),
		(((10)*__TimeMultiplier)),
		"Your faction is gaining influence in "+name+" now.");
		
		for(uint i=0;i<num;i++)
		{
			uint factionId=GetGroupIndex(crits[i]);
			if(factionId!=factions[0].factionId)
			continue;
			msgInfluence.Send(crits[i]);
		}
		
		float modifyNum=0.0f;
		for(uint i=0;i<num;i++)
		{
			uint factionId=GetGroupIndex(crits[i]);
			if(factionId==factions[0].factionId)
			{
				modifyNum+=GetCaptorInfluence(crits[i]);
			}
		}
		string s;
		s.ParseFloat(modifyNum,32);
		{;};
		
		ModifyInfluence(factions[0].factionId,modifyNum); 
		
		uint influenceFaction=0;
		GetLargestInfluence(influenceFaction);
		if(SetControl(influenceFaction))
		{
			array<Critter@>playersLoc;
			for(uint i=0,j=GetCrittersLoc(map.GetLocation(),0,(0x01)|(0x10),playersLoc);i<j;i++)
			ClearInfluenceBuffer(playersLoc[i]);
		}
		{;};
	} 
	
	void AreaCheck()
	{
		if((faction==0)||(countdown<=(__FullSecond)))
		return;
		Map@map=GetMap(mapid);
		if(!(@map!=null))
		return;
		
		uint numwithin=0;
		array<Critter@>crits;
		uint num=map.GetCritters(0,(0x01)|(0x10),crits);
		for(uint i=0;i<num;i++)
		{
			if((GetGroupIndex(crits[i])==faction)&&IsValidCaptor(crits[i]))
			{
				if(IsWithinCaptureArea(crits[i]))
				numwithin++;
			}
		}
		
		if(GetMemberNearbyRequirement()>numwithin)
		{
			if(outsideAreaCount++>2)
			{
				for(uint i=0;i<num;i++)
				{
					if((GetGroupIndex(crits[i])==faction))
					crits[i].Say((11),"Your faction has lost control of the town due to leaving the combat zone.");
				}
				
			}
			else
			{
				for(uint i=0;i<num;i++)
				{
					if((GetGroupIndex(crits[i])==faction))
					{
						if(!IsValidCaptor(crits[i])&&(IsWithinCaptureArea(crits[i])))
						crits[i].Say((11),"You're too weak to help your factions cause.");
						if(IsValidCaptor(crits[i])&&(!IsWithinCaptureArea(crits[i])))
						crits[i].Say((11),"You're outside of the combat zone, return there immediately or your faction may lose control.");
					}
				}
			}
		}
		else
		outsideAreaCount=0;
		
	} 
	
	void Update(uint hour,uint minute)
	{
		if(id==0)
		return;
		
		if(lastMinute==minute&&lastHour==hour)
		return;
		lastHour=hour;
		lastMinute=minute; 
		
		if(GetVersion()==(1)&&minute==0)
		{
			if(this.hour==hour)
			SetStatus((0));
			else
			SetStatus((1));
		} 
		
		Map@map=GetMap(mapid);
		
		array<Critter@>crits;
		uint count=0;
		uint num=map.GetCritters(0,(0x0F),crits);
		for(uint i=0;i<num;i++)
		{
			if(((crits[i].Param[(534)]&((0x00001000)))!=0))
			{
				if(Random(0,2)==0)
				Heal(crits[i]);
				count++;
			}
			
			if(crits[i].IsPlayer()&&GetGroupIndex(crits[i])==faction)
			{
				uint localfaction=ReputationIndex(map.GetLocation().GetProtoId());
				if(crits[i].ReputationBase[localfaction]<0)
				crits[i].ReputationBase[localfaction]=0;
			}
		} 
		
		if(militiaEnabled&&((count<militiamax)))
		CreateTimeEvent(((__FullSecond)+(((2)*__TimeMultiplier))),"e_add_militia",map.Id,true); 
		
		GiveReward(count); 
		
		this.ModifyInfluence(faction,1);
		string factionname;
		GetFactionNameStr(faction,factionname);
		GameVar@bestScore=GetGlobalVar(61000+id);
		float bestScoreVar=bestScore.GetValue();
		if(this.GetInfluence(faction)>bestScoreVar)
		{
			bestScore+=1;
			if(factionname=="")
			{SetBestScore((35)+id,null,"None");}
			else
			SetBestScore((35)+id,null,factionname);
		}
	}
	
	void GiveReward(uint militiaCount)
	{
		Item@cont=GetRewardContainer();
		
		if(militiamax<(15))
		militiamax++;
		
		uint bonus=0;
		if(tcVersion==(2))
		bonus=int((((GetInfluence(this.faction)/10)>(100))?(100):(((GetInfluence(this.faction)/10)<(0))?(0):(GetInfluence(this.faction)/10))));
		else
		bonus=militiaCount/2;
		
		{;};
		
		array<uint>ammo=
		{
			(363),(38),(34),(36),(39),(575)
		};
		
		array<uint>Weapon=
		{
			(13),(15),(28),(115),(143),(241),(296),(354),(355),(387),(389),(400),(401),(522),(620),(25566),(25567),(396),(407),(353),(268)
		};
		array<uint>Armor=
		{
			(379),(265),(25548),(380),(22095),(25549),(240),(381),(239),(761),(9654),(752),(25550),(25551),(778),(524)
		};
		array<uint>rocketAmmo={(621),(37),(382),(25568),(25570),(26),(25)};
		
		uint dummy;       
		
		bool giveBetterReward;
		if(tcVersion==(2))
		giveBetterReward=(GetLargestInfluence(dummy)>=(15));
		else
		giveBetterReward=(Random(0,2)==0);
		
		{cont.AddItem(misc(),Random(3,6),0); };
		{cont.AddItem(books(),Random(3,6),0); };
		{cont.AddItem(mats(),Random(3,6),0); };
		
		if(Random(0,99)<5){if(giveBetterReward) cont.AddItem(rareitem(),Random(0,1),0);};
		if(Random(0,99)<30){cont.AddItem(tier3armor(),Random(0,1),0); };
		if(Random(0,99)<30){cont.AddItem(tier3weapon(),Random(0,1),0); };
		{if(giveBetterReward) cont.AddItem((9935),Random(1,2),0);};
		uint16 second=0;
		uint16 minute=0;
		uint16 hour=0;
		uint16 day=0;
		uint16 a,b,c,d,g;
		GetTime(a,b,c,day,hour,minute,second,g);
		
		if(hour==19)
		{
			switch(day)
			{
				case 1:if(id==(2))
				{
					
					{cont.AddItem(currency(),Random(5000,25000),0); };
					{cont.AddItem(rareitem(),Random(1,3),0); };
					{cont.AddItem(implant(),Random(1,3),0); };
					{cont.AddItem(tier4parts(),Random(1,3),0); };
					{cont.AddItem(tier4ammo(),Random(50,100),0); };
				}break;
				case 2:if(id==(5))
				{
					
					{cont.AddItem(currency(),Random(5000,25000),0); };
					{cont.AddItem(rareitem(),Random(1,3),0); };
					{cont.AddItem(implant(),Random(1,3),0); };
					{cont.AddItem(tier4parts(),Random(1,3),0); };
					{cont.AddItem(tier4ammo(),Random(50,100),0); };
				}break;
				case 3:if(id==(1))
				{
					
					{cont.AddItem(currency(),Random(5000,25000),0); };
					{cont.AddItem(rareitem(),Random(1,3),0); };
					{cont.AddItem(implant(),Random(1,3),0); };
					{cont.AddItem(tier4parts(),Random(1,3),0); };
					{cont.AddItem(tier4ammo(),Random(50,100),0); };
				}break;
				case 4:if(id==(3))
				{
					
					{cont.AddItem(currency(),Random(5000,25000),0); };
					{cont.AddItem(rareitem(),Random(1,3),0); };
					{cont.AddItem(implant(),Random(1,3),0); };
					{cont.AddItem(tier4parts(),Random(1,3),0); };
					{cont.AddItem(tier4ammo(),Random(50,100),0); };
				}break;
				case 5:if(id==(6))
				{
					
					{cont.AddItem(currency(),Random(5000,25000),0); };
					{cont.AddItem(rareitem(),Random(1,3),0); };
					{cont.AddItem(implant(),Random(1,3),0); };
					{cont.AddItem(tier4parts(),Random(1,3),0); };
					{cont.AddItem(tier4ammo(),Random(50,100),0); };
				}break;
				case 6:if(id==(4))
				{
					
					{cont.AddItem(currency(),Random(5000,25000),0); };
					{cont.AddItem(rareitem(),Random(1,3),0); };
					{cont.AddItem(implant(),Random(1,3),0); };
					{cont.AddItem(tier4parts(),Random(1,3),0); };
					{cont.AddItem(tier4ammo(),Random(50,100),0); };
				}break;
				case 7:if(id==(7))
				{
					
					{cont.AddItem(currency(),Random(5000,25000),0); };
					{cont.AddItem(rareitem(),Random(1,3),0); };
					{cont.AddItem(implant(),Random(1,3),0); };
					{cont.AddItem(tier4parts(),Random(1,3),0); };
					{cont.AddItem(tier4ammo(),Random(50,100),0); };
				}break;
				default:Log("error");break;
			}
		}                                                                
		
	}
	
	void UpdateTick()
	{
		if(tcVersion!=3)
		UpdateCountdown();
	}
	
	void UpdateCountdown()
	{
		if(!GetCountdownStatus())
		return;  
		
		if(countdown<=(__FullSecond))
		{
			
			if(GetControllingFaction()!=0)
			{
				
				{;};
				SetScore();
				countdown=(__FullSecond);
				rewardCaps=rewardCapsStart;
				militiamax=(6);
				ClearRewardContainer();
				
				friendsList.resize(0);
				
				Map@map=GetMap(mapid);
				array<Critter@>crits;
				uint num=map.GetCritters(0,(0x0F),crits);
				
				for(uint i=0;i<num;i++)
				{
					
					if(((crits[i].Param[(534)]&((0x00001000)))!=0))
					{
						
						SetGroupInfo(crits[i],faction,3,(1));
						if(Random(0,1)==0)
						{
							
							if(crits[i].IsDead())
							crits[i].ToLife();
							crits[i].ParamBase[(72)]=crits[i].Param[(7)];
							
						}
					}
					
					if(crits[i].IsPlayer()&&GetGroupIndex(crits[i])==faction)
					{
						
						uint localfaction=ReputationIndex(map.GetLocation().GetProtoId());
						if(crits[i].ReputationBase[localfaction]<0)
						crits[i].ReputationBase[localfaction]=0;
						crits[i].Say((11),"Your faction is now in control of this town.");
						
					}
				} 
				
				SetCountdownStatus(false);
				
				return;
			}
		}
	}
	
	void IncreaseNPCDeath(uint num)
	{
		npcDeaths+=num;
	}
	
	void IncreasecontrolCycles(uint num)
	{
		controlCycles+=num;
	}
	
	uint GetlastSecond()
	{
		return lastSecond;
	}
	
	void SetlastSecond(uint sec)
	{
		this.lastSecond=sec;
	}
	
	uint GetCountdown()
	{
		if((__FullSecond)>countdown)
		return 0;
		return countdown-(__FullSecond);
	}
	
	uint GetVersion(){return tcVersion;}
	
	uint GetControlCycles()
	{
		return controlCycles;
	}
	
	uint GetNumberOfKilledNPCs()
	{
		return npcDeaths;
	}
	
	uint GetControllingFaction()
	{
		return faction;
	}
	
	uint GetMemberNearbyRequirement()
	{
		return memberNearbyReq;
	}
	
	uint GetMemberTotalRequirement()
	{
		return memberTotalReq;
	}
	
	int GetSpeechModifier()
	{
		return speechModifier;
	}
	
	uint GetMilitiaMax()
	{
		return militiamax;
	}
	
	Item@GetLimboContainer()
	{
		return LimboContainer;
	}
	
	Item@GetRewardContainer()
	{
		return RewardContainer;
	}
	
	uint GetMapID()
	{
		return mapid;
	}
	
	void SendCountdownTime(Critter&player)
	{
		string factionname;
		GetFactionNameStr(faction,factionname);
		
		player.RunClientScript("_CountDownStart",id-1,0,int(countdown),factionname,null);
	}
	
	bool SetControl(uint newFaction)
	{
		if(newFaction==faction)
		return false;
		
		faction=newFaction;
		
		ResetStats();
		Map@map=GetMap(GetMapID());
		ClearEnemyStacksOnMap(map);
		SetScore();
		if(tcVersion==3)
		{
			IBroadcastBuffer@msg=Broadcast_Message("Your faction is now the largest influence in "+name+"!",((20)*__TimeMultiplier),(0),false);
			msg.SetFilter((0x00002000),newFaction);
			msg.SendToAll();
		}
		return true;
	} 
	
	bool GainControl(Critter&player)
	{
		uint newfaction=GetGroupIndex(player);
		if(newfaction==faction)
		return false;
		
		if((newfaction<0)&&(player.GetAccess()==(0)))
		return false;
		
		outsideAreaCount=0;
		previousfaction=faction;
		faction=newfaction;
		
		array<Critter@>crits;
		
		uint num=player.GetMap().GetCritters(0,(0x0F)|(0x10),crits);
		uint nearmembers=0;
		for(uint i=0;i<num;i++)
		{
			if((GetCrittersDistantion(player,crits[i])<(15))&&GetGroupIndex(player)==GetGroupIndex(crits[i]))
			{
				if(IsValidCaptor(crits[i]))
				nearmembers++;
			}
		}
		
		Money=0;
		countdown=1;         
		
		Log("faction "+faction+" gaining control over town "+id+" with countdown target="+countdown);
		SetCountdownStatus(true);
		
		return true;
	}
	
	void SetCountdownStatus(bool enabled)
	{
		Map@map=GetMap(mapid);
		if(!(@map!=null))
		return;
		map.SetData((8),(enabled?1:0));
	}
	
	bool GetCountdownStatus()
	{
		Map@map=GetMap(mapid);
		if(!(@map!=null))
		return false;
		return map.GetData((8))==1;
	}
	
	void ResetControl()
	{
		Log("reset: faction "+faction);
		faction=0;
		countdown=(__FullSecond);
		SetScore();
		ResetStats();
		
		Broadcast_TownControl_Stop(this.location.GetProtoId());
		
		SetCountdownStatus(false);
	}
	
	void ResetStats()
	{
		npcDeaths=0;
		controlCycles=0;
	}
	
	void ClearRewardContainer()
	{
		ClearContainerSoft(RewardContainer);
	}
	
	void ClearLimboContainer()
	{
		ClearContainerSoft(LimboContainer);
	}
	
	void ClearContainers()
	{
		ClearRewardContainer();
		ClearLimboContainer();
	}
	
	uint GetTownID()
	{
		return id;
	}
	
	string GetTownName()
	{
		return name;
	}
	
	uint GetTownLeaderId()
	{
		return townLeaderId;
	}
	
	ITown@SetRewardStartCaps(uint caps)
	{
		rewardCapsStart=caps;
		return this;
	}
	
	ITown@SetMilitiaEnabled()
	{
		militiaEnabled=true;
		return this;
	}
	
	ITown@SetCaptureArea(IPolygon@capturearea)
	{
		this.captureareas.insertLast(capturearea);
		return this;
	}
	
	ITown@SetHour(uint hour)
	{
		this.hour=hour;
		return this;
	}
	
	ITown@SetTownID(uint id)
	{
		this.id=id;
		return this;
	}
	
	ITown@SetMapID(uint id)
	{
		this.mapid=id;
		return this;
	} 
	
	ITown@SetTownLeader(Critter@leader)
	{
		if(!(@leader!=null))
		{
			Log("Townleader in town #"+id+" is invalid");
			return this;
		}
		this.townLeaderId=leader.Id;
		return this;
	}
	
	ITown@SetVersion(uint version)
	{
		this.tcVersion=version;
		return this;
	} 
	
	ITown@SetTownLeader(uint id)
	{
		this.townLeaderId=id;
		return this;
	}
	
	ITown@SetBaseRewardValue(uint baseValue)
	{
		this.baseValue=baseValue;
		return this;
	}
	
	ITown@SetSpeechModifier(int modifier)
	{
		speechModifier=modifier;
		return this;
	}
	
	ITown@SetLimboContainer(Item@container)
	{
		if(!(@container!=null))
		{
			Log("Limbocontainer in "+name+"("+id+")is invalid");
		}
		
		@this.LimboContainer=container;
		return this;
	}
	
	ITown@SetRewardContainer(Item@container)
	{
		if(!(@container!=null))
		{
			Log("Rewardcontainer in "+name+"("+id+")is invalid");
		}
		
		@this.RewardContainer=container;
		return this;
	}
	
	ITown@SetInfluenceMemberRequirement(uint number)
	{
		this.memberInfluenceReq=number;
		return this;
	}
	
	ITown@SetTotalMemberRequirement(uint number)
	{
		this.memberTotalReq=number;
		return this;
	}
	
	ITown@SetNearbyMemberRequirement(uint number)
	{
		this.memberNearbyReq=number;
		return this;
	}
	
	int Money;
	
	void AddMoney(int money)
	{
		Money+=money;
	}
	
	int GetMoney()
	{
		return Money;
	}
	
	Location@GetLocation()
	{
		return(this.location);
	}
};    

void _flag(Item&item,bool firstTime)
{
	((item.Flags)=(item.Flags)|((0x10000000)));
	item.Update();
	item.SetEvent((4),"_UseB");
}
bool tcstartedbh=false;
bool tcstartedredding=false;
bool tcstartednecro=false;
bool tcstartedgecko=false;
bool tcstartedmodoc=false;
bool tcstartedden=false;
bool tcstartedklamath=false;
bool tcstartedreno=false;
uint bhtimer=0;
uint reddingtimer=0;
uint geckotimer=0;
uint modoctimer=0;
uint dentimer=0;
uint klamathtimer=0;
uint renotimer=0;
uint necrotimer=0; 

bool gettcstarted(Critter&cr)
{
	ITown@town=RetrieveTown(cr);
	switch(cr.GetMap().GetLocation().GetProtoId())
	{
		case(24):return tcstartednecro;
		case(6):return tcstartedbh;
		case(13):return tcstartedredding;
		case(5):return tcstartedgecko;
		case(3):return tcstartedmodoc;
		case(1):return tcstartedden;
		case(2):return tcstartedklamath;
		case(7):return tcstartedreno;
	}
	return tcstartedreno;
}

bool getwindow(Critter&cr)
{
	uint16 second=0;
	uint16 minute=0;
	uint16 hour=0;
	uint16 a,b,c,d,g;
	GetTime(a,b,c,d,hour,minute,second,g);
	if(GetGvar((62019))>5)
	can_tc_modoc=true;
	if(GetGvar((62021))>5)
	can_tc_gecko=true;
	if(GetGvar((62024))>5)
	can_tc_den=true;
	if(GetGvar((62020))>5)
	can_tc_klamath=true;
	if(GetGvar((62023))>5)
	can_tc_redding=true;
	if(GetGvar((62022))>5)
	can_tc_bh=true;
	if(GetGvar((62025))>5)
	can_tc_necro=true;
	switch(GetGvar((62019)))
	{
		case 1:if(hour>=16&&hour<19)can_tc_modoc=true;else can_tc_modoc=false;break;
		case 2:if(hour>=18&&hour<21)can_tc_modoc=true;else can_tc_modoc=false;break;
		case 3:if(hour>=20&&hour<23)can_tc_modoc=true;else can_tc_modoc=false;break;
		case 4:if(hour>=22||hour<1)can_tc_modoc=true;else can_tc_modoc=false;break;
		case 5:if(hour<3)can_tc_modoc=true;else can_tc_modoc=false;break;
		default:can_tc_modoc=true;break;
	}
	switch(GetGvar((62021)))
	{
		case 1:if(hour>=16&&hour<19)can_tc_gecko=true;else can_tc_gecko=false;break;
		case 2:if(hour>=18&&hour<21)can_tc_gecko=true;else can_tc_gecko=false;break;
		case 3:if(hour>=20&&hour<23)can_tc_gecko=true;else can_tc_gecko=false;break;
		case 4:if(hour>=22||hour<1)can_tc_gecko=true;else can_tc_gecko=false;break;
		case 5:if(hour<3)can_tc_gecko=true;else can_tc_gecko=false;break;
		default:can_tc_gecko=true;break;
	}
	switch(GetGvar((62024)))
	{
		case 1:if(hour>=16&&hour<19)can_tc_den=true;else can_tc_den=false;break;
		case 2:if(hour>=18&&hour<21)can_tc_den=true;else can_tc_den=false;break;
		case 3:if(hour>=20&&hour<23)can_tc_den=true;else can_tc_den=false;break;
		case 4:if(hour>=22||hour<1)can_tc_den=true;else can_tc_den=false;break;
		case 5:if(hour<3)can_tc_den=true;else can_tc_den=false;break;
		default:can_tc_den=true;break;
	}
	switch(GetGvar((62020)))
	{
		case 1:if(hour>=16&&hour<19)can_tc_klamath=true;else can_tc_klamath=false;break;
		case 2:if(hour>=18&&hour<21)can_tc_klamath=true;else can_tc_klamath=false;break;
		case 3:if(hour>=20&&hour<23)can_tc_klamath=true;else can_tc_klamath=false;break;
		case 4:if(hour>=22||hour<1)can_tc_klamath=true;else can_tc_klamath=false;break;
		case 5:if(hour<3)can_tc_klamath=true;else can_tc_klamath=false;break;
		default:can_tc_klamath=true;break;
	}
	switch(GetGvar((62023)))
	{
		case 1:if(hour>=16&&hour<19)can_tc_redding=true;else can_tc_redding=false;break;
		case 2:if(hour>=18&&hour<21)can_tc_redding=true;else can_tc_redding=false;break;
		case 3:if(hour>=20&&hour<23)can_tc_redding=true;else can_tc_redding=false;break;
		case 4:if(hour>=22||hour<1)can_tc_redding=true;else can_tc_redding=false;break;
		case 5:if(hour<3)can_tc_redding=true;else can_tc_redding=false;break;
		default:can_tc_redding=true;break;
	}
	switch(GetGvar((62025)))
	{
		case 1:if(hour>=16&&hour<19)can_tc_necro=true;else can_tc_necro=false;break;
		case 2:if(hour>=18&&hour<21)can_tc_necro=true;else can_tc_necro=false;break;
		case 3:if(hour>=20&&hour<23)can_tc_necro=true;else can_tc_necro=false;break;
		case 4:if(hour>=22||hour<1)can_tc_necro=true;else can_tc_necro=false;break;
		case 5:if(hour<3)can_tc_necro=true;else can_tc_necro=false;break;
		default:can_tc_gecko=true;break;
	}
	switch(GetGvar((62022)))
	{
		case 1:if(hour>=16&&hour<19)can_tc_bh=true;else can_tc_bh=false;break;
		case 2:if(hour>=18&&hour<21)can_tc_bh=true;else can_tc_bh=false;break;
		case 3:if(hour>=20&&hour<23)can_tc_bh=true;else can_tc_bh=false;break;
		case 4:if(hour>=22||hour<1)can_tc_bh=true;else can_tc_bh=false;break;
		case 5:if(hour<3)can_tc_bh=true;else can_tc_bh=false;break;
		default:can_tc_bh=true;break;
	}
	ITown@town=RetrieveTown(cr);
	switch(cr.GetMap().GetLocation().GetProtoId())
	{
		case(24):return can_tc_necro;
		case(6):return can_tc_bh;
		case(13):return can_tc_redding;
		case(5):return can_tc_gecko;
		case(3):return can_tc_modoc;
		case(1):return can_tc_den;
		case(2):return can_tc_klamath;
		case(7):return can_tc_reno;
	}
	return can_tc_reno;
}

void gettcstart()
{
	tcstartednecro=true;
}

void gettcstop()
{
	tcstartednecro=false;
}

void gettimer(uint flagid,uint teamid,uint flagval1,uint flagval2,uint mapid,uint crid,uint time)
{
	array<uint>filldata={flagid,teamid,flagval1,flagval2,mapid,crid,time};
	switch(GetMap(mapid).GetLocation().GetProtoId())
	{
		case(24):necrotimer=CreateTimeEvent(((__FullSecond)+(((time)*__TimeMultiplier*60))),"e_end_tc",filldata,false);break;
		case(6):bhtimer=CreateTimeEvent(((__FullSecond)+(((time)*__TimeMultiplier*60))),"e_end_tc",filldata,false);break;
		case(13):reddingtimer=CreateTimeEvent(((__FullSecond)+(((time)*__TimeMultiplier*60))),"e_end_tc",filldata,false);break;
		case(5):geckotimer=CreateTimeEvent(((__FullSecond)+(((time)*__TimeMultiplier*60))),"e_end_tc",filldata,false);break;
		case(3):modoctimer=CreateTimeEvent(((__FullSecond)+(((time)*__TimeMultiplier*60))),"e_end_tc",filldata,false);break;
		case(1):dentimer=CreateTimeEvent(((__FullSecond)+(((time)*__TimeMultiplier*60))),"e_end_tc",filldata,false);break;
		case(2):klamathtimer=CreateTimeEvent(((__FullSecond)+(((time)*__TimeMultiplier*60))),"e_end_tc",filldata,false);break;
		case(7):renotimer=CreateTimeEvent(((__FullSecond)+(((time)*__TimeMultiplier*60))),"e_end_tc",filldata,false);break;
	}
	
}

uint tcnpc1=0;
uint tcnpc2=0;
uint tcnpc3=0;
uint tcnpc4=0;
uint tcnpc5=0;
uint tcnpc6=0;
uint tcnpc7=0;

void getnpc(uint mapid,uint npcid)
{
	switch(GetMap(mapid).GetLocation().GetProtoId())
	{
		case(24):tcnpc1=npcid;break;
		case(6):tcnpc2=npcid;break;
		case(13):tcnpc3=npcid;break;
		case(5):tcnpc4=npcid;break;
		case(3):tcnpc5=npcid;break;
		case(1):tcnpc6=npcid;break;
		case(2):tcnpc7=npcid;break;
	}
}

uint gettcnpc(uint mapid)
{
	switch(GetMap(mapid).GetLocation().GetProtoId())
	{
		case(24):return tcnpc1;
		case(6):return tcnpc2;
		case(13):return tcnpc3;
		case(5):return tcnpc4;
		case(3):return tcnpc5;
		case(1):return tcnpc6;
		case(2):return tcnpc7;
	}
	return 0;
}

bool checknpc(uint mapid)
{
	switch(GetMap(mapid).GetLocation().GetProtoId())
	{
		case(24):if(tcnpc1==0)return false;else return true;
		case(6):if(tcnpc2==0)return false;else return true;
		case(13):if(tcnpc3==0)return false;else return true;
		case(5):if(tcnpc4==0)return false;else return true;
		case(3):if(tcnpc5==0)return false;else return true;
		case(1):if(tcnpc6==0)return false;else return true;
		case(2):if(tcnpc7==0)return false;else return true;
	}
	return false;
}
bool _UseB(Item&flag,Critter&cr,int skill)
{
	ITown@town=RetrieveTown(cr);
	if(!(@town!=null)||!(@cr!=null))
	return false;
	cr.ParamBase[(510)]=0;
	string factionname;
	int type=(21);
	int location=cr.GetMap().Id+1000;
	GetFactionNameStr(cr.Param[(106)],factionname);
	
	uint16 second=0;
	uint16 minute=0;
	uint16 hour=0;
	uint time=30;
	uint npcid=gettcnpc(cr.GetMap().Id);
	uint16 a,b,c,d,g;
	GetTime(a,b,c,d,hour,minute,second,g);
	
	if(getwindow(cr))
	Log(town.GetTownName()+" can");
	if(!getwindow(cr))
	Log(town.GetTownName()+" can't");
	uint factionmembers=0;
	if(!getwindow(cr))
	{
		cr.Say((11),"We can't capture this town, we should check pipboy to know when we can");
		return false;
	}
	if(!(@cr.GetItem(0,(1))!=null)&&cr.GetItem(0,(1)).Val0>75000)
	{
		cr.Say((11),"We need Weapons to capture town, those weapons should be at least level 2");
		return false;
	}
	
	array<Critter@>players;
	int num=cr.GetMap().GetCritters(0,(0x10)|(0x03),players);
	for(int i=0;i<num;i++)
	{
		if(players[i].Param[(106)]!=cr.Param[(106)])
		continue;
		factionmembers++;
	}
	array<Critter@>militia;
	if(factionmembers<3&&!gettcstarted(cr))
	{
		cr.Say((11),"We need at least 3 members to start capture");
		return false;
	}
	uint mili=cr.GetMap().GetCritters(0,(0x20)|(0x03),militia);
	if(cr.Param[(106)]>1&&factionmembers>2&&!tcstartednecro&&cr.Param[(106)]!=flag.Val1&&getwindow(cr))
	{
		Critter@win=AddNpc(cr.GetMap(),1,3,3,3,(11003),"town@win_npc",0,0,0,true,50);
		getnpc(cr.GetMap().Id,win.Id);
		npcid=gettcnpc(cr.GetMap().Id);
		win.ParamBase[(106)]=cr.Param[(106)];
		ServerEventCNTSet(factionname+" are taking "+town.GetTownName()+", %COUNTDOWN% until taken.",location,type,((time)*__TimeMultiplier*60));
		cr.GetMap().SetData((8),1);
		gettcstart();
		flag.ChangeProto(9200+cr.Param[(106)]);
		flag.Val1=cr.Param[(106)];
		flag.Val0=0;
		flag.Val4=0;
		flag.Update();
		
		gettimer(flag.Id,cr.Param[(106)],flag.Val1,flag.Val4,cr.GetMap().Id,npcid,time);
		
		for(uint i=0;i<mili;i++)
		{
			if(militia[i].Param[(106)]!=int(town.GetControllingFaction()))
			continue;
			if(militia[i].Param[(106)]==cr.Param[(106)])
			continue;
			AttackCritter(militia[i],cr,__DeadHitPoints);
		}
		return true;
	}
	array<uint>filldata2={flag.Id,cr.Param[(106)],flag.Val1,flag.Val4,cr.GetMap().Id,npcid};
	if(GetTimeEvent(flag.Val5,((500)*__TimeMultiplier/1000),filldata2)==false)
	{
		flag.Val1=0;
		flag.Val4=0;
		flag.Update();
	}
	if(flag.Val0!=cr.Param[(106)]&&flag.Val4<1&&flag.Val1!=cr.Param[(106)]&&tcstartednecro)
	{
		
		flag.Val0=cr.Param[(106)];
		flag.Val4+=1;
		Critter@win=GetCritter(npcid);
		win.ParamBase[(106)]=cr.Param[(106)];
		array<uint>filldata={flag.Id,cr.Param[(106)],flag.Val1,flag.Val4,cr.GetMap().Id,npcid};
		uint taking_flag=CreateTimeEvent(((__FullSecond)+(((500)*__TimeMultiplier/1000))),"e_flag",filldata,false);
		flag.Val5=taking_flag;
		flag.Update();
		for(uint i=0;i<mili;i++)
		{
			if(militia[i].Param[(106)]!=int(town.GetControllingFaction()))
			continue;
			if(militia[i].Param[(106)]==cr.Param[(106)])
			continue;
			AttackCritter(militia[i],cr,__DeadHitPoints);
		}
		return true;
	}
	return true;
}

void setscore(Critter&cr,int factionId,int,int)
{
	ITown@town=RetrieveTown(cr);
	town.SetScore();
}
uint e_end_tc(array<uint>@LocData)
{
	Item@flag=GetItem(LocData[0]);
	int team=LocData[1];
	int flagowner=LocData[2];
	int points=flag.Val4;
	Map@map=GetMap(LocData[4]);
	
	Critter@cr=GetCritter(LocData[5]);
	
	ITown@town=RetrieveTown(cr);
	
	switch(map.GetLocation().GetProtoId())
	{
		case(24):necrotimer=0;EraseTimeEvent(necrotimer);break;
		case(6):bhtimer=0;EraseTimeEvent(bhtimer);break;
		case(13):reddingtimer=0;EraseTimeEvent(reddingtimer);break;
		case(5):geckotimer=0;EraseTimeEvent(geckotimer);break;
		case(3):modoctimer=0;EraseTimeEvent(modoctimer);break;
		case(1):dentimer=0;Log("4");EraseTimeEvent(dentimer);Log("5");break;
		case(2):klamathtimer=0;EraseTimeEvent(klamathtimer);break;
		case(7):renotimer=0;EraseTimeEvent(renotimer);break;
	}
	if(!(@town!=null)||!(@cr!=null))
	return 0;
	
	string factionname;
	int type=(21);
	int location=map.Id+1000;
	map.SetData((8),0);
	GetFactionNameStr(cr.Param[(106)],factionname);
	int dys=0;
	int members=0;
	string teamname="";
	int teamid=0;
	
	gettcstop();             
	
	array<Item@>flag_caputured;
	uint c=map.GetItems(9200+team,flag_caputured);
	
	array<Item@>flag_defend;
	uint d=map.GetItems(9200+town.GetControllingFaction(),flag_defend);
	
	array<Item@>restflags;
	array<Item@>team_a;
	uint ta=0;
	uint al=0;
	uint f=0;                   
	
	if(c>3)
	{
		
		uint winner=flag_caputured[0].Proto.ProtoId-9200; 
		
		Critter@win=GetCritter(gettcnpc(map.Id));
		win.ParamBase[(106)]=team;
		town.GainControl(win);
		town.SetScore();
		ServerEventCNTSet(factionname+" took control over "+town.GetTownName(),location,type,((10)*__TimeMultiplier));
		DeleteNpc(win);
		
	}
	array<Item@>flag_all;
	uint a=0;
	
	for(uint i=1;i<399;i++)
	{
		uint all=map.GetItems(9200+i,flag_all);
		a+=all;
	}
	for(uint i=0;i<a;i++)
	{
		flag_all[i].ChangeProto(9200+town.GetControllingFaction());
		flag_all[i].Val1=town.GetControllingFaction();
		flag_all[i].Val0=0;
		flag_all[i].Val4=0;
		flag_all[i].Update();
	}
	
	return 0;
}

uint e_flag(array<uint>@LocData)
{
	Item@flag=GetItem(LocData[0]);
	int team=LocData[1];
	int flagowner=LocData[2];
	int points=flag.Val4;
	Map@map=GetMap(LocData[4]);
	int dys=0;
	int members=0;
	string teamname;
	int type=(21);
	int location=map.Id+1000;
	Critter@cr=GetCritter(LocData[5]);
	GetFactionNameStr(cr.Param[(106)],teamname);
	int teamid=0;
	ITown@town=RetrieveTown(cr);
	array<Critter@>militia;
	uint mili=map.GetCritters(0,(0x20)|(0x03),militia);
	if(!(@town!=null)||!(@cr!=null))
	return 0;
	array<Item@>flag_caputured;
	uint c=map.GetItems(9200+team,flag_caputured);
	
	array<Item@>flag_defend;
	uint d=map.GetItems(9200+town.GetControllingFaction(),flag_defend);
	
	array<Critter@>players;
	uint num=map.GetCritters(0,(0x10)|(0x03),players);
	for(uint i=0;i<num;i++)
	{
		if(players[i].Param[(510)]>0)
		continue;
		dys=GetDistantion(flag.HexX,flag.HexY,players[i].HexX,players[i].HexY);
		if(dys<21&&players[i].Param[(106)]==team)
		{
			points+=47;
			members+=1;
			flag.Val4+=47;
			flag.Update();
			players[i].Say((11),teamname+" is Capturing "+points/100+"%");
		}
		if(dys<21&&players[i].Param[(106)]!=team)
		{
			if(points>0)
			{
				points-=47;
				flag.Val4-=47;
				flag.Update();
				players[i].Say((11),teamname+" is Defending "+points/100+"%");
			}
		}
	}
	if(points<1)
	{
		flag.Val0=0;
		flag.Val4=0;
		flag.Update();
		d=map.GetItems(9200+town.GetControllingFaction(),flag_defend);
		c=map.GetItems(9200+team,flag_caputured);
		if(c>5)
		CreateTimeEvent(((__FullSecond)+(((2)*__TimeMultiplier))),"e_end_tc",LocData,false);
		if(d>5)
		CreateTimeEvent(((__FullSecond)+(((2)*__TimeMultiplier))),"e_end_tc",LocData,false);
		return 0;
	}
	if(points>9999)
	{
		flag.ChangeProto(9200+team);
		flag.Val1=team;
		flag.Val0=0;
		flag.Val4=0;
		flag.Update();
		array<Item@>flag_all;
		uint a=0;
		Log("16");
		for(uint i=1;i<399;i++)
		{
			uint all=map.GetItems(9200+i,flag_all);
			a+=all;
		}
		for(uint i=0;i<a;i++)
		{
			flag_all[i].Val0=0;
			flag_all[i].Val4=0;
			flag_all[i].Update();
		}
		Critter@win=GetCritter(gettcnpc(map.Id));
		win.ParamBase[(106)]=team;
		CreateTimeEvent(((__FullSecond)+(((2)*__TimeMultiplier))),"e_add_militia",map.Id,false);
		
		for(uint j=0;j<num;j++)
		for(uint i=0;i<mili;i++)
		{
			if(militia[i].Param[(106)]!=int(town.GetControllingFaction()))
			continue;
			if(militia[i].Param[(106)]==players[j].Param[(106)])
			continue;
			AttackCritter(militia[i],players[j],__DeadHitPoints);
		}
		d=map.GetItems(9200+town.GetControllingFaction(),flag_defend);
		c=map.GetItems(9200+team,flag_caputured);
		if(c>5)
		CreateTimeEvent(((__FullSecond)+(((2)*__TimeMultiplier))),"e_end_tc",LocData,false);
		if(d>5)
		CreateTimeEvent(((__FullSecond)+(((2)*__TimeMultiplier))),"e_end_tc",LocData,false);
		
		return 0;
	}
	return((2500)*__TimeMultiplier/1000);
}

uint e_add_militia(array<uint>@LocData)
{
	for(int i=0;i<Random(3,6);i++)
	AddMilitia(GetMap(LocData[0]));
	return 0;
}

