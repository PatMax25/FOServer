

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;             

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                                                                                                                                                                                                                                                                                                                                                                                                               

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                      

shared interface IBroadcastBuffer
{
	string GetString();
	
	void SetType(int type);
	int GetType();
	void SetTime(int time);
	int GetTime();
	void SetSetup(int setup);
	int GetSetup();
	void SetMessage(string message);
	void AppendMessage(string message);
	string GetMessage();
	void SetData(array<int>data);
	
	void SetStart(int time);
	void ResetStart();
	
	void SetLifetime(int lifetime);
	
	void SetFilters(int filters);
	void SetFilter(int filter);
	void SetFilter(int filter,int data);
	void UnsetFilter(int filter);
	bool Filter(int filter);
	bool CheckFilters(Critter@player);
	
	bool Send(Critter@player);
	uint SendToAll();
	
	void SetGM(int id);
	void UnsetGM();
	
	void ToDelete();
};                                                                 

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}      

import bool IsBigFaction(uint faction)from"factions";
import bool IsTheSameFaction(uint player1Id,uint player2Id)from"factions";
import void _Resign(uint playerId)from"factions"; 

import int RegisterFaction(uint id,const string@name,bool playerDriven)from"factions";
import int RegisterFaction(const string@name,bool playerDriven,uint&out id)from"factions";

import bool RemoveFaction(uint faction)from"factions"; 

import bool GetFactionNameStr(uint faction,string&out name)from"factions";
import bool GetFactionId(const string@name,uint&out id)from"factions"; 

import bool IsFactionNameFree(const string&)from"factions";
import bool IsFactionNameValid(const string&)from"factions";

import bool IsGang(uint faction)from"factions";

import uint16 GetFactionRadioChannel(uint faction)from"factions";
import void SetFactionRadioChannel(uint faction,uint16 channel)from"factions"; 

import int AddPlayer(uint faction,uint id)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)from"factions"; 

import int RemovePlayer(uint faction,uint id)from"factions"; 

import int GetFaction(uint faction,uint id)from"factions";
import int GetStatus(uint faction,uint id)from"factions";
import int GetRank(uint faction,uint id)from"factions";
import bool IsMember(uint faction,Critter&cr)from"factions";
import bool IsMemberOffline(uint faction,uint id)from"factions";
import bool StoredInDB(uint faction,uint id)from"factions";
import uint GetRecordsCount(uint faction)from"factions";
import uint GetMembersCount(uint faction)from"factions";
import uint GetMembers(uint faction,array<uint>&ids)from"factions";
import uint GetLeaderId(uint faction)from"factions";
import void SetLeaderId(uint faction,uint id)from"factions";
import uint GetClaimId(uint faction)from"factions";
import void SetClaimId(uint faction,uint id)from"factions";
import uint GetLeaderTime(uint faction)from"factions";
import void SetLeaderTime(uint faction,uint time)from"factions";
import uint GetClaimTime(uint faction)from"factions";
import void SetClaimTime(uint faction,uint time)from"factions";
import uint GetFactionLocationId(uint faction)from"factions";
import bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)from"factions";

import void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)from"factions";

import uint GetFactionScore(uint faction)from"factions";
import void ModifyFactionScore(uint faction,int amount)from"factions";
import void UpdateLastUsed(uint faction)from"factions";
import uint GetFactionsCount()from"factions"; 

import int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)from"factions";
import int GetNextId(uint faction,uint currId,bool members,uint&out nextId)from"factions";
import int GetFirstId(uint faction,bool members,uint&out id)from"factions"; 

import int ModifyRank(uint faction,uint id,uint newRank)from"factions";
import int ModifyStatus(uint faction,uint id,uint newStatus)from"factions";
import int ModifyFaction(uint faction,uint id,uint newFaction)from"factions"; 

import int InvitePlayer(uint faction,uint playerId)from"factions";
import int ConfirmInvitation(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId,bool applyModifiers)from"factions";
import int ChangeRank(uint faction,uint playerId,uint newRank)from"factions";
import int ExpelMember(uint faction,uint playerId)from"factions";
import int ExpelMember(uint faction,uint playerId,bool applyModifiers)from"factions";

import uint GetPlayerFaction(uint playerId)from"factions";
import uint GetPlayerRank(uint playerId)from"factions"; 

import void AddFactionNews(uint faction,uint master,uint slave,uint type)from"factions";
import bool GetFactionNews(uint faction,uint index,uint&out master,uint&out slave,uint&out type,uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)from"factions";
import uint GetFactionNewsCount(uint faction)from"factions"; 

import uint CheckFactionBaseCoords(uint x,uint y)from"factions";

import bool SaveFactionData(uint faction)from"factions";
import bool FactionExists(uint faction)from"factions"; 

import uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)from"factions";   

import void InitFactions()from"factions";
import void UpdateFactionsInfo(Critter&cr)from"factions";
import IFaction@GetFaction(int)from"factions";
import IFaction@GetFaction(const string&)from"factions";
import IFaction@GetFactionByIdx(int idx)from"factions";
import void UpdateGroupVars(Critter&player)from"factions";     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);
	void settag(int index,int tag,int r,int g,int b);
	int get_tag(int index);
	int get_b(int index);
	int get_r(int index);
	int get_g(int index);  
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
};              

import bool GodOfTheRealm(uint id)from"cheats";
import int GetFactionNameMsg(uint faction)from"factions";
import void PlayMusic(Critter&cr,string&musicName,uint pos,uint repeat)from"media";

class CBroadcastBuffer:IBroadcastBuffer
{
	
	int type;
	int time;
	int setup;
	string message;
	array<int>data;
	
	int started;
	int lifetime;
	int filters;
	int filter_level;
	int filter_location;
	int filter_map;
	int filter_faction;
	int gm;
	bool toDelete;
	
	CBroadcastBuffer(int type,int time,int setup,string message,array<int>data,int lifetime,int filters)
	{
		this.type=type;
		this.time=time;
		this.setup=setup;
		this.message=message;
		this.data=data;
		this.started=(__FullSecond);
		this.lifetime=lifetime;
		this.filters=filters;
		this.filter_level=0;
		this.filter_location=0;
		this.filter_map=0;
		this.gm=0;
		this.toDelete=false;
	}  
	
	string GetString()
	{
		string result="";
		string sdata="";
		if(data.length()>0)
		{
			for(uint d=0;d<this.data.length();d++)
			{
				if(d>0)
				sdata+="^";
				sdata+=""+data[d];
			}
		}
		return(
		this.type+"&"+
		this.time+"&"+
		this.setup+"&"+
		this.message+"&"+
		sdata
		);
	}
	
	void SetType(int type)
	{
		this.type=type;
	}
	
	int GetType()
	{
		return(this.type);
	}
	
	void SetTime(int time)
	{
		this.time=time;
	}
	
	int GetTime()
	{
		return(this.time);
	}
	
	void SetSetup(int setup)
	{
		this.setup=setup;
	}
	
	int GetSetup()
	{
		return(this.setup);
	}
	
	void SetMessage(string message)
	{
		this.message=message;
	}
	
	void AppendMessage(string message)
	{
		this.message=this.message+message;
	}
	
	string GetMessage()
	{
		return(this.message);
	}
	
	void SetData(array<int>data)
	{
		this.data=data;
	}
	
	void SetStart(int time)
	{
		this.started=time;
	}
	
	void ResetStart()
	{
		this.started=(__FullSecond);
	}
	
	void SetLifetime(int lifetime)
	{
		this.lifetime=lifetime;
	}
	
	void SetFilters(int filters)
	{
		this.filters=filters;
	}
	
	void SetFilter(int filter)
	{
		((this.filters)=(this.filters)|(filter));
	}
	
	void SetFilter(int filter,int data)
	{
		this.SetFilter(filter);
		if((((filter)&((0x00000200)))!=0))
		this.filter_level=data;
		if((((filter)&((0x00000400)))!=0))
		this.filter_location=data;
		if((((filter)&((0x00001000)))!=0))
		this.filter_map=data;
		if((((filter)&((0x00002000)))!=0))
		this.filter_faction=data;
	}
	
	void UnsetFilter(int filter)
	{
		(this.filters=((this.filters)&(~(filter))));
	}
	
	bool Filter(int filter)
	{
		if((((this.filters)&(filter))!=0))
		return(true);
		else
		return(false);
	}
	
	bool CheckFilters(Critter@player)
	{
		if(this.type==(0)||this.toDelete||this.started<0)
		return(false);
		
		if(!(@player!=null))
		return(false);
		
		if(!player.IsPlayer())
		return(false);
		
		if(this.filters>0)
		{
			if(this.Filter((0x00000001))&&player.GetAccess()<(1))
			return(false);
			if(this.Filter((0x00000002))&&player.GetAccess()<(2))
			return(false);
			if(this.Filter((0x00000004))&&player.GetAccess()<(3))
			return(false);
			if(this.Filter((0x00000008))&&!GodOfTheRealm(player.Id))
			return(false);
			if(this.Filter((0x00000010))&&GodOfTheRealm(player.Id))
			return(false);
			if(this.Filter((0x00000020))&&player.Param[(71)]!=(1))
			return(false);
			if(this.Filter((0x00000040))&&player.Param[(71)]!=(0))
			return(false);
			if(this.Filter((0x00000080))&&(@player.GetMap()!=null))
			return(false);
			if(this.Filter((0x00000100))&&!(@player.GetMap()!=null))
			return(false);
			if(this.Filter((0x00000200))&&player.Param[(77)]<this.filter_level)
			return(false);
			if(this.Filter((0x00000400)))
			{
				if(!(@player.GetMap()!=null))
				return(false);
				
				if(int(player.GetMap().GetLocation().Id)!=this.filter_location)
				return(false);
			}
			if(this.Filter((0x00000800)))
			{
				if(!(@player.GetMap()!=null))
				return(true);
				
				if(int(player.GetMap().GetLocation().Id)==this.filter_location)
				return(false);
			}
			if(this.Filter((0x00001000)))
			{
				if(!(@player.GetMap()!=null))
				return(false);
				
				else if(int(player.GetMap().Id)!=this.filter_map)
				return(false);
			}
			if(this.Filter((0x00002000))&&player.Param[(106)]!=this.filter_faction)
			return(false);
		}
		return(true);
	}
	
	bool Send(Critter@player)
	{
		if(this.type==(0)||this.toDelete||this.started<0)
		return(false);
		
		if(!(@player!=null))
		{
			
			return(false);
		}
		
		if(!player.IsPlayer())
		{
			
			return(false);
		}
		
		if(this.CheckFilters(player))
		{
			player.RunClientScript("client_broadcast@_Receive",this.type,this.time,this.setup,this.message,this.data);
			return(true);
		}
		else
		return(false);
	}
	
	uint SendToAll()
	{
		if(this.type==(0)||this.toDelete||this.started<0)
		return(0);
		
		array<Critter@>player;
		uint num=GetAllOnlinePlayers(player);
		uint count=0;
		for(uint p=0;p<num;p++)
		{
			if(!(@player[p]!=null))
			continue;
			
			if(this.Send(player[p]))
			count++;
		}
		return(count);
	}
	
	void SetGM(int id)
	{
		this.gm=id;
	}
	
	void UnsetGM()
	{
		this.gm=0;
	}
	
	void ToDelete()
	{
		this.toDelete=true;
	}
};
array<CBroadcastBuffer>BroadcastBuffer;

IBroadcastBuffer@AddBroadcastBuffer(int t,int i,int s,string&m,array<int>&d,int l,int f)
{
	BroadcastBuffer.insertLast(CBroadcastBuffer(t,i,s,m,d,l,f));
	int idx=BroadcastBuffer.length()-1;
	return(BroadcastBuffer[idx]);
}

void DumpBroadcastBuffer(Critter@player)
{  
	
	if(!(@player!=null))
	{
		
		return;
	}
	
	string dump=" ";
	for(uint b=0;b<BroadcastBuffer.length();b++)
	{
		if(b>0)
		dump+="|";
		
		dump+=BroadcastBuffer[b].GetString();
	}
	{;};
	array<int>data;
	player.RunClientScript("client_broadcast@_ReceiveDump",0,0,0,dump,data);
}

void dump(Critter&player,int,int,int)
{
	DumpBroadcastBuffer(player);
}

uint FindBroadcastBufferByType(int type,array<IBroadcastBuffer@>&buf)
{
	if(BroadcastBuffer.length()==0)
	return(0);
	
	uint count=0;
	for(uint b=0;b<BroadcastBuffer.length();b++)
	{
		if(BroadcastBuffer[b].type==type)
		{
			buf.insertLast(BroadcastBuffer[b]);
			count++;
		}
	}
	return(count);
}

uint FindBroadcastBufferByGM(int id,array<IBroadcastBuffer@>&buf)
{
	if(BroadcastBuffer.length()==0)
	return(0);
	
	uint count=0;
	for(uint b=0;b<BroadcastBuffer.length();b++)
	{
		if(BroadcastBuffer[b].gm==id)
		{
			buf.insertLast(BroadcastBuffer[b]);
			count++;
		}
	}
	return(count);
}

void UpdateBroadcast()
{
	if(BroadcastBuffer.length()==0)
	return;
	
	for(uint b=0;b<BroadcastBuffer.length();b++)
	{
		if(BroadcastBuffer[b].toDelete||
		((BroadcastBuffer[b].type==((3))&&int((__FullSecond))>=BroadcastBuffer[b].lifetime)||
		(BroadcastBuffer[b].type!=((3))&&int((__FullSecond))>=BroadcastBuffer[b].started+BroadcastBuffer[b].lifetime))||
		((BroadcastBuffer[b].type==(9)&&int((__FullSecond))>=BroadcastBuffer[b].lifetime)||
		(BroadcastBuffer[b].type!=(9)&&int((__FullSecond))>=BroadcastBuffer[b].started+BroadcastBuffer[b].lifetime))&&
		BroadcastBuffer[b].started>=0)
		{
			
			BroadcastBuffer.removeAt(b);
			b=0;
		}
	}
} 

bool LockState=true;
uint[]LockedLocations=
{
	
	(2),
	(3),
	(5),
	(6),
	(1),
	(13),
	(24)
};

bool IsLocked(uint location_pid)
{
	if(LockState==false)
	return(false);
	
	if(Present(location_pid,LockedLocations))
	return(true);
	
	return(false);
}

void tclock(Critter&player,int one,int two,int lock)
{
	if((one*two)==1613759)
	{
		if(lock==0)
		LockState=false;
		else if(lock==1)
		LockState=true;
		player.Say((11),"Broadcast TC lock: "+(LockState?"en":"dis")+"abled");
	}
}  

IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters,bool send)
{
	array<int>data;
	IBroadcastBuffer@msg=AddBroadcastBuffer((1),time,0,message,data,time,filters);
	if(send)
	msg.SendToAll();
	if(findFirst(message,"killed")==-1||findFirst(message,"provided")==-1||findFirst(message,"control over Flag")==-1)
	{
		FLog((18),message);
		dbLog("broadcast",message);
	}
	return(msg);
}

IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters)
{
	return(Broadcast_Message(message,time,filters,true));
} 

IBroadcastBuffer@Broadcast_Message(string&message,int&time)
{
	return(Broadcast_Message(message,time,(0),true));
}

IBroadcastBuffer@Broadcast_Message(string&message,bool send)
{
	int time=((1)*__TimeMultiplier*60)+((100*message.length())*__TimeMultiplier/1000);
	return(Broadcast_Message(message,time,(0),send));
}

IBroadcastBuffer@Broadcast_Message(string&message)
{
	int time=((1)*__TimeMultiplier*60)+((100*message.length())*__TimeMultiplier/1000);
	return(Broadcast_Message(message,time,(0),true));
}  

IBroadcastBuffer@GetTownControlBuffer(int location)
{
	if(BroadcastBuffer.length()==0)
	return(null);
	
	for(uint b=0;b<BroadcastBuffer.length();b++)
	{
		if(BroadcastBuffer[b].type==(3)&&BroadcastBuffer[b].data.length()>0&&
		BroadcastBuffer[b].data[0]==location)
		{
			{;};
			return(BroadcastBuffer[b]);
		}
	}
	return(null);
}

void Broadcast_TownControl_Set(string&message,int location,int time,int faction)
{
	if(time<=0)
	{
		Broadcast_TownControl_Stop(location);
		return;
	}
	
	IBroadcastBuffer@tc=GetTownControlBuffer(location);
	
	int[]data={location,GetFactionNameMsg(faction)};
	if((@tc!=null))
	{
		
		tc.SetTime(time);
		tc.SetData(data);
		tc.SetMessage(message);
		tc.SetLifetime(time);
		tc.ResetStart();
	}
	else
	{
		
		@tc=AddBroadcastBuffer(((3)),time,(1),message,data,time,(0));
	}
	
	FLog((18),message+" are taking a town");
	tc.SendToAll();
}

void Broadcast_TownControl_Set(int location,int time,int faction,Critter&player)
{
	uint factionID=player.Param[(106)];
	string factionname;
	GetFactionNameStr(factionID,factionname);
	Broadcast_TownControl_Set(factionname,location,time,faction);
	
}

void Broadcast_TownControl_Stop(int location)
{
	IBroadcastBuffer@tc=GetTownControlBuffer(location);
	if((@tc!=null))
	{
		{;};
		int[]data={location};
		tc.SetTime(0);
		tc.SetSetup((0));
		tc.SetData(data);
		tc.SetFilters((0));
		
		tc.SendToAll();
		
		tc.ResetStart();
		tc.SetLifetime(0);
		tc.ToDelete();
		
		UpdateBroadcast();
	}
}

 void tc(Critter&player,int location,int time,int faction,string@unused1,array<int>@unused2) {tc(player,location,time,faction);} void tc(Critter&player,int location,int time,int faction)
{
	if(location<=0)
	{
		player.Say((11),"Wrong location pid.");
		return;
	}
	
	if(IsLocked(location))
	{
		player.Say((11),"Location <"+location+"> is locked, can't be modified.");
		return;
	}
	
	Broadcast_TownControl_Set(location,((__FullSecond)+(((time)*__TimeMultiplier))),faction,player);
}  

IBroadcastBuffer@GetInfluenceBuffer(int location)
{
	if(BroadcastBuffer.length()==0)
	return(null);
	
	for(uint b=0;b<BroadcastBuffer.length();b++)
	{
		if(BroadcastBuffer[b].type==(4)&&BroadcastBuffer[b].data.length()>0&&
		BroadcastBuffer[b].data[0]==location)
		{
			{;};
			return(BroadcastBuffer[b]);
		}
	}
	return(null);
}

IBroadcastBuffer@Broadcast_Influence(int location,int time,string&message)
{
	IBroadcastBuffer@influence=GetInfluenceBuffer(location);
	if((@influence!=null))
	{
		influence.ResetStart();
		influence.SetLifetime(0);
		influence.ToDelete();
		
		UpdateBroadcast();
	}
	int[]data={location};
	@influence=AddBroadcastBuffer((4),time*2,0,message,data,time,(0));
	
	return(influence);
}

 void influence(Critter&player,int location,int time,int unused1,string@unused2,array<int>@unused3) {influence(player,location,time,unused1);} void influence(Critter&player,int location,int time,int unused1)
{
	IBroadcastBuffer@influence=Broadcast_Influence(location,time,"Influence "+__FullSecond);
	
	influence.Send(player);
}  

uint Broadcast_RequestHelp(Critter@player,string&message)
{
	if(!(@player!=null))
	return 0;
	
	Critter@gm=GetOnlineGM();
	
	array<int>data;
	if((@gm!=null))
	{
		
		IBroadcastBuffer@req=AddBroadcastBuffer((2),((1)*__TimeMultiplier*60),0,
		GetCritterInfo(player)+"|"+message,data,0,((0x00000001)));
		
		player.Say((11),"Sending help request. If an administrator won't appear within a few minutes, try again later.");
		FLog((4),player.Name+" Asking the GM/Admin "+gm.Name+" to assist.");
		
		if(req.Send(gm)==true)
		{
			
			gm.Say((11),"|4294901760 "+"GM help requested: the character "+GetCritterInfo(player)+" has requested help. Message:");
			gm.Say((11),"|4294901760 "+message);
			
			PlayMusic(gm,"requesthelp.ogg",0,0); 
			
			SetRequestedHelp(player,15); 
			
			req.SetSetup(1);
			req.SetMessage(GetCritterInfo(player)+"|"+GetCritterInfo(gm));
			
			array<Critter@>auth;
			uint all=GetAuthenticatedPlayers(auth);
			for(uint a=0;a<all;a++)
			{
				if(auth[a].Id==gm.Id)
				continue;
				req.SetTime(((Random(25,35))*__TimeMultiplier));
				req.Send(auth[a]);
			}
			req.ToDelete();
		}
		else
		{
			player.Say((11),"Error during sending request. Report it.");
			SetRequestedHelp(player,5);
		} 
		
		return gm.Id;
	}
	else
	{
		string msg=message;
		SetRequestedHelp(player,10);
		
		IBroadcastBuffer@req=AddBroadcastBuffer((2),((1)*__TimeMultiplier*60),0,
		GetCritterInfo(player)+"|"+msg,data,((30)*__TimeMultiplier*60),
		((0x00000001)));
		
		player.Say((11),"Sending help request. If an admin won't appear within a few minutes, you can try use our forum.");
		return 0;
	}
}

void Broadcast_CheckRequestHelpBuffer(Critter@gm)
{
	if(BroadcastBuffer.length()==0)
	return;
	
	if(!(@gm!=null))
	{
		
		return;
	}
	
	int count=0;
	for(uint b=0;b<BroadcastBuffer.length();b++)
	{
		if(BroadcastBuffer[b].type==(2))
		count++;
	}
	
	if(count>0)
	{
		if(GodOfTheRealm(gm.Id)  
		
		)
		{
			array<int>data;
			IBroadcastBuffer@info=AddBroadcastBuffer((1),((40)*__TimeMultiplier),0,
			"Awaiting requests: "+count+" - use `getrequests to read",data,0,
			
			(0));
			if(info.Send(gm))
			info.ToDelete();
		}
		else
		{
			Broadcast_DumpRequestHelpBuffer(gm);
		}
	}
}

void Broadcast_DumpRequestHelpBuffer(Critter@gm)
{
	if(BroadcastBuffer.length()==0)
	return;
	
	if(!(@gm!=null))
	{
		
		return;
	}
	
	for(uint b=0;b<BroadcastBuffer.length();b++)
	{
		if(BroadcastBuffer[b].type==(2))
		{
			
			BroadcastBuffer[b].SetFilters((0));
			if(BroadcastBuffer[b].Send(gm))
			{
				BroadcastBuffer[b].ToDelete();
				array<string@>@msg=split(BroadcastBuffer[b].GetMessage(),"|");
				int id=0;
				gm.Say((11),"|4294901760 "+"GM help requested: the character "+
				(msg.length()>0&&((@msg[0]!=null))?msg[0]:"?")+
				" has requested help. Message:");
				gm.Say((11),"|4294901760 "+(msg.length()>1&&((@msg[1]!=null))?msg[1]:""));
			}
			else
			{
				
				return;
			}
		}
	}
	return;
}

 void req(Critter&player,int unused1,int unused2,int unused3,string@unused4,array<int>@unused5) {req(player,unused1,unused2,unused3);} void req(Critter&player,int unused1,int unused2,int unused3)
{
	Broadcast_RequestHelp(player,"help my");
}

 void reqclear(Critter&player,int unused1,int unused2,int unused3,string@unused4,array<int>@unused5) {reqclear(player,unused1,unused2,unused3);} void reqclear(Critter&player,int unused1,int unused2,int unused3)
{
	SetRequestedHelp(player,0);
}  

IBroadcastBuffer@GetEventCountDownBuffer(int location,int type)
{
	if(BroadcastBuffer.length()==0)
	return(null);
	
	for(uint b=0;b<BroadcastBuffer.length();b++)
	{
		if(BroadcastBuffer[b].type==(9)&&BroadcastBuffer[b].data.length()>0&&
		BroadcastBuffer[b].data[0]==location&&BroadcastBuffer[b].data[1]==type)
		{
			{;};
			return(BroadcastBuffer[b]);
		}
	}
	return(null);
}

void ServerEventCountDownStart(string&message,int location,int time,int type)
{
	if(time<=0)
	{
		ServerEventCountDownStop(location,type);
		return;
	}
	
	IBroadcastBuffer@event=GetEventCountDownBuffer(location,type);
	
	int[]data={location,type};
	if((@event!=null))
	{
		
		event.SetTime(time);
		event.SetData(data);
		event.SetMessage(message);
		event.SetLifetime(time);
		event.ResetStart();
	}
	else
	{
		
		@event=AddBroadcastBuffer((9),time,((1)),message,data,time,(0));
	}
	event.SendToAll();
}

void ServerEventCountDownStart(int location,int time,int type)
{
	ServerEventCountDownStart(" ",location,time,type);
}

void ServerEventCountDownStop(int location,int type)
{
	IBroadcastBuffer@event=GetEventCountDownBuffer(location,type);
	if((@event!=null))
	{
		{;};
		int[]data={location,type};
		event.SetTime(0);
		event.SetSetup(((0)));
		event.SetData(data);
		event.SetFilters((0));
		
		event.SendToAll();
		
		event.ResetStart();
		event.SetLifetime(0);
		event.ToDelete();
		
		UpdateBroadcast();
	}
}

 void event(Critter&player,int location,int time,int type,string@unused1,array<int>@unused2) {event(player,location,time,type);} void event(Critter&player,int location,int time,int type)
{
	if(location<=0)
	{
		player.Say((11),"Wrong location pid.");
		return;
	}      
	
	ServerEventCountDownStart(location,((__FullSecond)+(((time)*__TimeMultiplier))),type);
}

void wipe(Critter&player,int,int,int)
{
	array<int>data;
	AddBroadcastBuffer((1),(__FullSecond)*10,0,"Everything is dead or dying.",data,(__FullSecond)*10,(0))
	.SendToAll();
}

void baseControl(string msg,int mapId,uint time)
{
	array<int>data={mapId};
	
	AddBroadcastBuffer((6),time,0,msg,data,time,(0))
	.SendToAll();
}

void baseControlRadio(string msg,uint time,int mapId,uint factionId)
{
	array<int>data;
	IBroadcastBuffer@radioInfo=AddBroadcastBuffer((7),time,0,msg,data,0,(0));
	radioInfo.SetFilter((0x00001000),mapId);
	radioInfo.SetFilter((0x00002000),factionId);
	radioInfo.SendToAll();
}

void ServerEventMSG(uint time,string msg)
{
	array<int>data;
	AddBroadcastBuffer((8),((time)*__TimeMultiplier),0,msg,data,((time)*__TimeMultiplier),(0))
	.SendToAll();
}

void ServerEventMSG2(uint time,string msg)
{
	array<int>data;
	AddBroadcastBuffer((8),((time)*__TimeMultiplier),0,msg,data,((time)*__TimeMultiplier),(0))
	.SendToAll();
}

void ServerEventCNTSet(string message,uint location,uint type,uint time)
{
	if(findFirst(message,"killed")==-1||findFirst(message,"provided")==-1||findFirst(message,"control over Flag")==-1)
	{
		FLog((18),message);
		dbLog("broadcast",message);
	}
	ServerEventCountDownStart(message,location,(__FullSecond)+time,type);
}

void ServerEventCNTSet(uint location,uint type,uint time)
{
	ServerEventCountDownStart(" ",location,(__FullSecond)+time,type);
}

void ServerEventCNTStop(uint location,uint type)
{
	ServerEventCountDownStop(location,type);
}           

void V13test(Critter&player,int time,int,int)
{
	array<int>data;
	AddBroadcastBuffer((8),((time)*__TimeMultiplier),0,"Vault 13 outer door are opened for %COUNTDOWN% left.",data,((time)*__TimeMultiplier),(0))
	.SendToAll();
}

void V13teststart(Critter&player,int location,int type,int seconds)
{
	ServerEventCountDownStart("Vault 13 outer door are opened for %COUNTDOWN%. DEBUG: Location: "+location+", type: "+type,location,(__FullSecond)+((seconds)*__TimeMultiplier),type);
}

void V13teststarthuman(Critter&player,int location,int type,int seconds)
{
	ServerEventCountDownStart("Vault 13 outer door are opened for %COUNTDOWN_HUMAN%. DEBUG: Location: "+location+", type: "+type,location,(__FullSecond)+((seconds)*__TimeMultiplier),type);
}

void V13teststop(Critter&player,int location,int type,int)
{
	ServerEventCountDownStop(location,type);
}

void teststart(Critter&player,int location,int type,int seconds)
{
	ServerEventCountDownStart(location,(__FullSecond)+((seconds)*__TimeMultiplier),type);
} 

void teststop(Critter&player,int location,int type,int)
{
	ServerEventCountDownStop(location,type);
}

void war(Critter&player,int time,int location,int kek)
{
	int type=(21);
	array<int>data;
	string message="The War event will start in %COUNTDOWN%. Join near NCR";
	
	ServerEventCNTSet(message,location,type,((15)*__TimeMultiplier*60));
}

void war2(Critter&player,int location,int typed,int seconds)
{
	int type=(21);
	ServerEventCountDownStart("The War event will start in %COUNTDOWN%. Join near NCR",location,((15)*__TimeMultiplier*60),type);
}   

