

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                  

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";            

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";            

enum ChessColor
{
	White=0,
	Black=1
};

enum ChessFigure
{
	Pawn=0,
	Knight=1,
	Bishop=2,
	Rook=3,
	Queen=4,
	King=5
};

interface IChessTile
{
	IChessBoard@Board{get;}
	IChessNpc@Npc{get;set;}
	uint8 X{get;}
	uint8 Y{get;}
	uint16 HexX{get;}
	uint16 HexY{get;}
	ChessColor Color{get;}
	bool IsTaken{get;}
	bool IsWhite{get;}
	bool IsBlack{get;}
	
	void Spawn();
	Item@GetItem();
};

interface IChessNpc
{
	IChessBoard@Board{get;}
	IChessTile@Tile{get;}
	ChessFigure Figure{get;}
	ChessColor Color{get;}
	bool IsPawn{get;}
	bool IsKnight{get;}
	bool IsBishop{get;}
	bool IsRook{get;}
	bool IsQueen{get;}
	bool IsKing{get;}
	bool IsWhite{get;}
	bool IsBlack{get;}
	bool IsMoved{get;}
	
	void Spawn();
	
	Critter@GetCritter();
	
	bool Move(uint8 toX,uint8 toY);
};

interface IChessBoard
{
	uint16 BaseHexX{get;}
	uint16 BaseHexY{get;}
	string TileWhite{get;}
	string TileBlack{get;}
	int16 TileOffsetX{get;}
	int16 TileOffsetY{get;}
	
	void Create();
	bool AddTile(uint8 x,uint y,ChessColor color);
	bool AddFigure(uint8 x,uint8 y,ChessFigure figure,ChessColor color);
	bool AddFigure(IChessTile&tile,ChessFigure figure,ChessColor color);
	
	void Spawn(Map&map,uint16 hx,uint16 hy);
	
	bool Move(uint8 fromX,uint8 fromY,uint8 toX,uint8 toY);
	
	IChessTile@GetTile(uint8 x,uint8 y);
	IChessNpc@GetNpc(uint8 x,uint8 y);
	uint GetNpcSkin(ChessFigure figure,ChessColor color);
	Location@GetLocation();
	Map@GetMap();
	Item@GetItem(uint8 x,uint8 y);
	Critter@GetCritter(uint8 x,uint8 y);
};

interface IChessMatch
{
	IChessBoard@Board{get;}
	
	Critter@White{get;}
	Critter@Black{get;}
};            

string[]FIGURE={"Pawn","Knight","Bishop","Rook","Queen","King"};
string[]FIGUREINFO=
{
	"Pawns are cool.",
	"Knights are cool.",
	"Bishops are cool.",
	"Rooks are cool.",
	"Queens are super cool.",
	"Kings are cool."
};

class CChessTile:IChessTile
{
	IChessBoard@board;
	ChessColor color;
	IChessNpc@npc;
	
	array<uint8>coord;
	array<uint16>hex;
	uint itemId;
	
	CChessTile(IChessBoard&parent,uint8 x,uint8 y,ChessColor&color)
	{
		@this.board=parent;
		this.coord.resize(2);
		this.coord[0]=x;
		this.coord[1]=y;
		this.color=color;
		
		this.hex.resize(0);
		this.itemId=0;
		@this.npc=null;
	}
	
	~CChessTile()
	{
		if((@npc!=null))
		{
			Critter@critter=npc.GetCritter();
			if((@critter!=null))
			{
				DeleteNpc(critter);
			}
		}
		
		Item@it=this.GetItem();
		if((@it!=null))
		DeleteItem(it);
	}
	
	IChessBoard@get_Board()
	{
		if(!(@this.board!=null))
		return(null);
		
		return(this.board);
	}
	
	IChessNpc@get_Npc()
	{
		if(!(@this.npc!=null))
		return(null);
		
		return(this.npc);
	}
	
	void set_Npc(IChessNpc@npc)
	{
		
		if((@this.npc!=null))
		@npc=null;
		
		@this.npc=npc;
	}
	
	uint8 get_X()
	{
		if(this.coord.length()!=2)
		return(0);
		
		return(this.coord[0]);
	}
	
	uint8 get_Y()
	{
		if(this.coord.length()!=2)
		return(0);
		
		return(this.coord[1]);
	}
	
	uint16 get_HexX()
	{
		if(this.hex.length()!=2)
		return(0);
		
		return(this.hex[0]);
	}
	
	uint16 get_HexY()
	{
		if(this.hex.length()!=2)
		return(0);
		
		return(this.hex[1]);
	}
	
	ChessColor get_Color()
	{
		return(this.color);
	}
	
	bool get_IsTaken()
	{
		return((@this.npc!=null));
	}
	
	bool get_IsWhite()
	{
		if(this.Color==White)
		return(true);
		else
		return(false);
	}
	
	bool get_IsBlack()
	{
		if(this.Color==Black)
		return(true);
		else
		return(false);
	}
	
	void Spawn()
	{
		if(!(@this.board!=null))
		return;
		
		Map@map=board.GetMap();
		if(!(@map!=null))
		return;
		
		this.hex.resize(2);
		this.hex[0]=board.BaseHexX+(int(this.X-1)*-2);
		this.hex[1]=board.BaseHexY+(int(this.Y-1)*-2);
		Item@item=map.AddItem(this.HexX,this.HexY,(820),1);
		if(!(@item!=null))
		return;
		
		this.itemId=item.Id;
		item.Flags=0;
		((item.Flags)=(item.Flags)|((0x00000002)|(0x00000004)|(0x00000008)|(0x00000010)|(0x00000200)|(0x00001000)|(0x00040000)|(0x00080000)|(0x00100000)));
		
		string coordHuman="A"+this.Y;
		coordHuman[0]=coordHuman[0]+(this.X-1);
		SetLexem(item,"$-",coordHuman);
		SetLexem(item,"$~","You see "+coordHuman+" ("+(this.IsWhite?"white":"black")+")");
		
		item.PicMap=item.PicInv=GetStrHash(this.IsWhite?board.TileWhite:board.TileBlack);
		
		if(board.TileOffsetX!=0)
		item.OffsetX=board.TileOffsetX;
		if(board.TileOffsetY!=0)
		item.OffsetY=board.TileOffsetY;
		
		item.Update();  
		
	}
	
	Item@GetItem()
	{
		if(this.itemId==0)
		return(null);
		
		Item@tile=::GetItem(this.itemId);
		if((@tile!=null))
		return(tile);
		else
		return(null);
	}
};

class CChessNpc:IChessNpc
{
	IChessTile@tile;
	
	ChessFigure figure;
	ChessColor color;
	
	uint critterId;
	bool moved;
	
	CChessNpc(IChessTile&parent,ChessFigure figure,ChessColor color)
	{
		@this.tile=parent;
		
		this.figure=figure;
		this.color=color;
		this.critterId=0;
		this.moved=false;
	}
	
	IChessBoard@get_Board()
	{
		if(!(@this.tile!=null))
		return(null);
		
		IChessBoard@board=tile.Board;
		if(!(@board!=null))
		return(null);
		
		return(@board);
	}
	
	IChessTile@get_Tile()
	{
		if(!(@this.tile!=null))
		return(null);
		
		return(@this.tile);
	}
	
	ChessFigure get_Figure()
	{
		return(this.figure);
	}
	
	ChessColor get_Color()
	{
		return(this.color);
	}
	
	bool get_IsPawn()
	{
		return(this.Figure==Pawn);
	}
	
	bool get_IsKnight()
	{
		return(this.Figure==Knight);
	}
	
	bool get_IsBishop()
	{
		return(this.Figure==Bishop);
	}
	
	bool get_IsRook()
	{
		return(this.Figure==Rook);
	} 
	
	bool get_IsQueen()
	{
		return(this.Figure==Queen);
	}
	
	bool get_IsKing()
	{
		return(this.Figure==King);
	}
	
	bool get_IsWhite()
	{
		return(this.Color==White);
	}
	
	bool get_IsBlack()
	{
		return(this.Color==Black);
	}
	
	bool get_IsMoved()
	{
		return(this.moved);
	}
	
	void Spawn()
	{
		if(this.Tile.HexX==0||this.Tile.HexY==0)
		return;
		
		Map@map=this.Board.GetMap();
		if(!(@map!=null))
		return;
		
		Critter@critter=map.AddNpc((1),tile.HexX,tile.HexY,this.IsWhite?5:2,null,null,null);
		this.critterId=critter.Id;
		int skin=this.Board.GetNpcSkin(this.Figure,this.Color);
		if(critter.ChangeCrType(skin))
		critter.ParamBase[(112)]=skin;
		critter.SetHomePos(critter.HexX,critter.HexY,critter.Dir);
		
		SetLexem(critter,"$name",(this.IsWhite?"White":"Black")+" "+FIGURE[this.figure]);
		SetLexem(critter,"$~",FIGUREINFO[this.figure]);
		
		critter.ParamBase[(66)]=
		critter.ParamBase[(104)]=
		critter.ParamBase[(73)]=
		critter.ParamBase[(74)]=
		critter.ParamBase[(105)]=
		critter.ParamBase[(106)]=
		critter.ParamBase[(107)]=
		0;
		
		critter.ParamBase[(8)]=9999;
		critter.ParamBase[(75)]=9999;
		critter.ParamBase[(14)]=100;
		critter.ParamBase[(10)]=Random(5,10);
		critter.ParamBase[(7)]=1;
		critter.ParamBase[(39)]=-6;
		critter.ParamBase[(72)]=critter.Param[(7)];
		
		critter.ParamBase[(200)]=
		critter.ParamBase[(201)]=
		critter.ParamBase[(202)]=
		critter.ParamBase[(203)]=
		critter.ParamBase[(204)]=
		critter.ParamBase[(205)]=
		300;
		
		critter.ParamBase[(511)]=
		critter.ParamBase[(532)]=
		critter.ParamBase[(536)]=
		critter.ParamBase[(514)]=
		critter.ParamBase[(522)]=
		1;
		
		string module="";
		if(GetCurrentModule(module))
		{
			if(!critter.SetScript(module+"@critter_init"))
			critter.Say((1),"Can't set script: "+module+"@critter_init");
		}
		
		critter.RefreshVisible(); 
		
		@this.tile=@tile;
	}
	
	Critter@GetCritter()
	{
		if(this.critterId==0)
		return(null);
		
		Critter@figure=::GetCritter(this.critterId);
		if((@figure!=null))
		return(figure);
		else
		return(null);
	}
	
	bool Move(uint8 toX,uint8 toY)
	{
		Map@map=this.Board.GetMap();
		if(!(@map!=null))
		return(false);
		
		IChessTile@tile=this.Board.GetTile(toX,toY);
		if(!(@tile!=null))
		return(false); 
		
		Critter@critter=this.GetCritter();
		if(!(@critter!=null))
		return(false);
		
		if(tile.IsTaken)
		{
			Critter@enemy=tile.Npc.GetCritter();
			if((@enemy!=null))
			{
				if(critter.IsCanWalk())
				{
					AddAttackPlane(critter,10,enemy);
				}
				else
				{
					map.RunEffect((4008),enemy.HexX,enemy.HexY,1);
					DeleteNpc(enemy);
				}
			}
		}
		
		if(critter.IsCanWalk())
		{
			AddWalkPlane(critter,0,tile.HexX,tile.HexY,this.IsWhite?5:2,false,0);
		}
		else
		{
			map.RunEffect((4008),critter.HexX,critter.HexY,1);
			critter.TransitToHex(tile.HexX,tile.HexY,this.IsWhite?5:2);
		}
		
		critter.SetHomePos(tile.HexX,tile.HexY,this.IsWhite?5:2);
		
		@tile.Npc=this;
		@this.Tile.Npc=null;
		
		return(true);
	}
};

class CChessBoard:IChessBoard
{
	uint mapId;
	array<uint16>hex;
	array<string>tilePicture;
	array<int16>tileOffset;
	
	array<IChessTile@>tiles;
	array<uint>npcSkins;
	
	CChessBoard(string&tileWhite,string&tileBlack,array<uint>npcSkins,int16 tileOffsetX=0,int16 tileOffsetY=0)
	{
		
		string[]_tilePicture={tileWhite,tileBlack};
		this.tilePicture=_tilePicture;
		int16[]_tileOffset={tileOffsetX,tileOffsetY};
		this.tileOffset=_tileOffset;
		
		this.npcSkins=npcSkins; 
		
		this.npcSkins.resize(12);
		for(uint f=0,flen=this.npcSkins.length();f<flen;f++)
		{
			if(this.npcSkins[f]==0)
			this.npcSkins[f]=1;
		}
	}
	
	~CChessBoard()
	{
		this.tiles.resize(0);
	}
	
	uint16 get_BaseHexX()
	{
		if(this.hex.length()!=2)
		return(0);
		
		return(this.hex[0]);
	}
	
	uint16 get_BaseHexY()
	{
		if(this.hex.length()!=2)
		return(0);
		
		return(this.hex[1]);
	}
	
	string get_TileWhite()
	{
		return(this.tilePicture[0]);
	}
	
	string get_TileBlack()
	{
		return(this.tilePicture[1]);
	}
	
	int16 get_TileOffsetX()
	{
		return(this.tileOffset[0]);
	}
	
	int16 get_TileOffsetY()
	{
		return(this.tileOffset[1]);
	}
	
	void Create()
	{
		ChessColor last=White;
		for(uint8 x=1;x<=8;x++)
		{
			for(uint8 y=1;y<=8;y++)
			{
				this.AddTile(x,y,(x+y)%2==0?Black:White);
			}
		}
		
		for(uint x=1;x<=8;x++)
		{
			this.AddFigure(x,2,Pawn,White);
			this.AddFigure(x,7,Pawn,Black);
		}
		
		this.AddFigure(1,1,Rook,White);
		this.AddFigure(8,1,Rook,White);
		this.AddFigure(1,8,Rook,Black);
		this.AddFigure(8,8,Rook,Black);
		
		this.AddFigure(2,1,Knight,White);
		this.AddFigure(7,1,Knight,White);
		this.AddFigure(2,8,Knight,Black);
		this.AddFigure(7,8,Knight,Black);
		
		this.AddFigure(3,1,Bishop,White);
		this.AddFigure(6,1,Bishop,White);
		this.AddFigure(3,8,Bishop,Black);
		this.AddFigure(6,8,Bishop,Black);
		
		this.AddFigure(4,1,Queen,White);
		this.AddFigure(4,8,Queen,Black);
		
		this.AddFigure(5,1,King,White);
		this.AddFigure(5,8,King,Black);
	}
	
	bool AddTile(uint8 x,uint y,ChessColor color)
	{
		if((@this.GetTile(x,y)!=null))
		return(false);
		
		IChessTile@tile=CChessTile(this,x,y,color);
		if(!(@tile!=null))
		return(false);
		
		this.tiles.insertLast(tile);
		
		return(true);
	}
	
	bool AddFigure(uint8 x,uint8 y,ChessFigure figure,ChessColor color)
	{
		IChessTile@tile=this.GetTile(x,y);
		if(!(@tile!=null))
		return(false);
		
		return(this.AddFigure(tile,figure,color));
	}
	
	bool AddFigure(IChessTile&tile,ChessFigure figure,ChessColor color)
	{
		IChessNpc@npc=@CChessNpc(tile,figure,color);
		@tile.Npc=npc;
		
		return(true);
	}
	
	void Spawn(Map&map,uint16 hx,uint16 hy)
	{
		this.mapId=map.Id;
		
		this.hex.resize(2);
		this.hex[0]=hx;
		this.hex[1]=hy;
		
		for(uint t=0,tlen=this.tiles.length();t<tlen;t++)
		{
			this.tiles[t].Spawn();
			
			IChessNpc@npc=this.tiles[t].Npc;
			if((@npc!=null))
			npc.Spawn();
		}
	}
	
	bool Move(uint8 fromX,uint8 fromY,uint8 toX,uint8 toY)
	{
		IChessNpc@npc=this.GetNpc(fromX,fromY);
		if(!(@npc!=null))
		{
			{;};
			return(false);
		}
		
		int dir=(npc.IsWhite?int(1):-1);
		
		if(0==0)
		{}
		else
		{
			Critter@critter=npc.GetCritter();
			if((@critter!=null))
			critter.Say((2),"Not implemented");
			
			return(false);
		}
		
		return(npc.Move(toX,toY));
	}
	
	IChessTile@GetTile(uint8 x,uint8 y)
	{
		for(uint t=0,tlen=this.tiles.length();t<tlen;t++)
		{
			if(this.tiles[t].X==x&&this.tiles[t].Y==y)
			return(@this.tiles[t]);
		}
		
		return(null);
	}
	
	IChessNpc@GetNpc(uint8 x,uint8 y)
	{
		IChessTile@tile=this.GetTile(x,y);
		if(!(@tile!=null))
		return(null);
		
		IChessNpc@npc=tile.Npc;
		if(!(@npc!=null))
		return(null);
		
		return(@npc);
	}
	
	uint GetNpcSkin(ChessFigure figure,ChessColor color)
	{
		return(this.npcSkins[figure+(6*color)]);
	}
	
	Location@GetLocation()
	{
		Map@map=this.GetMap();
		if(!(@map!=null))
		return(null);
		
		Location@location=map.GetLocation();
		if(!(@location!=null))
		return(null);
		
		return(location);
	}
	
	Map@GetMap()
	{
		Map@map=::GetMap(this.mapId);
		if(!(@map!=null))
		return(null);
		
		return(map);
	}
	
	Item@GetItem(uint8 x,uint8 y)
	{
		IChessTile@tile=this.GetTile(x,y);
		if(!(@tile!=null))
		return(null);
		
		Item@item=tile.GetItem();
		if(!(@item!=null))
		return(null);
		
		return(item);
	}
	
	Critter@GetCritter(uint8 x,uint8 y)
	{
		IChessNpc@npc=this.GetNpc(x,y);
		if(!(@npc!=null))
		return(null);
		
		Critter@critter=npc.GetCritter();
		if(!(@critter!=null))
		return(null);
		
		return(critter);
	}
};

class CChessMatch:IChessMatch
{
	IChessBoard@board;
	
	array<uint>player;
	
	CChessMatch(IChessBoard&board,Critter&playerWhite,Critter&playerBlack)
	{
		@this.board=board;
		
		uint[]_player={playerWhite.Id,playerBlack.Id};
		this.player=_player;
	}
	
	IChessBoard@get_Board()
	{
		if(!(@this.board!=null))
		return(null);
		
		return(this.board);
	}
	
	Critter@get_White()
	{
		if(this.player.length()!=2)
		return(null);
		
		Critter@critter=GetCritter(this.player[0]);
		if(!(@critter!=null))
		return(null);
		
		return(critter);
	}
	
	Critter@get_Black()
	{
		if(this.player.length()!=2)
		return(null);
		
		Critter@critter=GetCritter(this.player[1]);
		if(!(@critter!=null))
		return(null);
		
		return(critter);
	}
};

IChessMatch@NewChessMatch(IChessBoard&board,Critter&playerWhite,Critter&playerBlack)
{
	IChessMatch@match=CChessMatch(board,playerWhite,playerBlack);
	
	return(match);
}

IChessBoard@NewChessBoard(string&tileWhite,string&tileBlack,array<uint>&npcSkins,int16 tileOffsetX=0,int16 tileOffsetY=0)
{
	IChessBoard@board=CChessBoard(tileWhite,tileBlack,npcSkins,tileOffsetX,tileOffsetY);
	
	return(board);
} 

void ParseMove(Critter&critter,uint inputI,string&inputS)
{
	{};
	array<string@>@args;
	
	@args=splitEx(strupr(inputS),"-");
	if(args.length()<2)
	{
		@args=splitEx(strupr(inputS)," ");
		if(args.length()<2)
		{
			{};
			return;
		}
	}
	args.resize(2);
	{};
	if(  
	
	(args[0].rawLength()<2||args[0].rawLength()>3)||
	(args[1].rawLength()<2||args[1].rawLength()>3))
	{
		{};
		return;
	}
	
	uint8 fx=(args[0].rawGet(0)-'A')+1;
	uint8 tx=(args[1].rawGet(0)-'A')+1;
	
	uint8 fy=0,ty=0;
	if(!StrToInt(substring(args[0],1,args[0].rawLength()-1),fy)||
	!StrToInt(substring(args[1],1,args[1].rawLength()-1),ty))
	{
		{};
	}
	
	{};
	xboard.Move(fx,fy,tx,ty);
}

void critter_init(Critter&critter,bool firstTime)
{
	critter.SetEvent((0),"critter_idle");
}

void critter_idle(Critter&)
{}

IChessBoard@xboard=null;
void board(Critter&cr,int,int ox,int oy)
{
	array<array<uint>>npcSkins=
	{
		{
			
			0,0,0,0,0,0,
			0,0,0,0,0,0
		},
		{
			
			75,86,29,127,1,21,
			16,80,28,84,71,20
		},
		{
			
			27,48,14,112,104,72,
			103,36,35,111,34,73
		}
	};
	
	@xboard=NewChessBoard("art\\tiles\\adb028.frm","art\\tiles\\bld2043.frm",
	npcSkins[Random(1,npcSkins.length()-1)],
	
	ox,oy);
	xboard.Create();
	xboard.Spawn(cr.GetMap(),cr.HexX+5,cr.HexY+5);
}

void move(Critter&cr,int,int,int who)
{
	if(!(@xboard!=null))
	{
		cr.Say((11),"no board yet");
		return;
	}
	
	cr.ShowScreen((5),0,"ParseMove");
	cr.Say((39),"Enter your move...");
	
}

