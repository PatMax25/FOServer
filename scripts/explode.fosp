

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                   

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}                                                                                                                                                                                                                             

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";               

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                 

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";                                                                                                                                                                       

import void AddReputation(Critter@cr,uint index,int val)from"reputations";
import void SubReputation(Critter@cr,uint index,int val)from"reputations";
import void AddReputation(Critter@cr,uint index,int val,int cap)from"reputations";
import void SubReputation(Critter@cr,uint index,int val,int cap)from"reputations";
import uint ReputationIndex(uint locid)from"reputations";
import void ProcessProfitReputation(Critter@cr,uint index,int profit)from"reputations";

import void InitGroups()from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index)from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index,float fraction)from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index,int num,int den)from"reputations_modifiers";
import int GetReputationModifier(uint fac1,uint fac2)from"reputations_modifiers";
import int GetGroupsStatus(uint fac1,uint fac2)from"reputations_modifiers";
import int GetGroupsStatus(Critter&c1,Critter&c2)from"reputations_modifiers";
import void ReputationsInit(Critter&cr)from"reputations_modifiers";
import void FeedReputations(Critter@cr,uint index,int cap)from"reputations_modifiers";                                                                                                                                                                                                                                                                                                                                                                                                                       

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                     

import bool IsNight()from"world_common";
import bool IsDay()from"world_common";
import bool IsMorning()from"world_common";
import bool IsAfternoon()from"world_common";
import bool IsEvening()from"world_common";
import bool IsHospital(Map@map)from"world_common";
import bool IsCave(Map@map)from"world_common";
import bool IsMine(Map@map)from"world_common";
import bool IsJail(Map@map)from"world_common";
import bool IsBase(Map@map)from"world_common";
import bool IsTent(Map@map)from"world_common";
import bool IsWarzone(Map@map)from"world_common";                                                                                                                                  

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}                                             

import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId)from"combat";
import void QuakeScreen(Map&map)from"effects";
import bool IsTCTown(Map@map)from"town";
import void ExplodeEmitterOnHex(Map&map,uint16 hexX,uint16 hexY)from"special_map_objects";    

void ExpLog(string&s)
{  
	
	FLog((3),s);
	
} 

bool OnUseExplode(Critter&cr,Item&explode,Critter@targetCr,Item@targetItem,Scenery@targetScen,uint timer)
{
	if((@targetCr!=null)||(@targetItem!=null)||(@targetScen!=null))
	return false;
	uint16 pid=explode.GetProtoId();
	if(pid!=(51)&&pid!=(206)&&
	pid!=(85)&&pid!=(209)&&pid!=(222)&&
	pid!=(544)&&pid!=(545))
	return false;
	
	bool isExpert=cr.Param[(383)]!=0;
	int trapsSkill=(((cr.Param[(211)]*2)<(300))?(cr.Param[(211)]*2):(300));
	if(trapsSkill<0)
	trapsSkill=0; 
	
	if(pid==(51))
	{
		Item@activateExpl=cr.AddItem((206),1);
		VerboseAction(cr,"arms dynamite");
		if(!(@activateExpl!=null))
		return false;
		activateExpl.SetEvent((5),"explode@_OnExplDrop");
		if(!isExpert)
		timer=timer*Random(80,120)/100;
		
		if(int(timer)<(1))
		timer=(1);
		if(int(timer)>(599))
		timer=(599);
		
		uint numEvent=CreateTimeEvent(((__FullSecond)+(((timer)*__TimeMultiplier))),"explode@e_Explode",activateExpl.Id,true);
		((activateExpl.Flags)=(activateExpl.Flags)|((0x00020000)));
		activateExpl.Val1=int(numEvent);
		activateExpl.Val2=int(cr.Id);
		activateExpl.TrapValue=(((((cr.Param[(211)]*2)<(300))?(cr.Param[(211)]*2):(300)))/5+10);
		(activateExpl.Val3)=(((cr.Param[(211)]*2)<(300))?(cr.Param[(211)]*2):(300));
		activateExpl.Val4=(trapsSkill);
		activateExpl.Val5=(isExpert?cr.Param[(383)]:0);
		if(int(cr.Timeout[(945)])<int(((timer+5)*60)))
		cr.TimeoutBase[(945)]=((__FullSecond)+(((timer+5)*60)));
		ExpLog(""+activateExpl.Id+" dynamite armed by "+cr.Name);
		
	}
	
	else if(pid==(85))
	{
		Item@expl=cr.AddItem((209),1);
		VerboseAction(cr,"arms plastic explosive");
		if(!(@expl!=null))
		return false;
		expl.SetEvent((5),"explode@_OnExplDrop");
		Item@explSwitch=cr.AddItem((222),1);
		if(!(@explSwitch!=null))
		return false;
		
		((expl.Flags)=(expl.Flags)|((0x00020000)));
		explSwitch.Val1=int(expl.Id);
		expl.Val2=int(cr.Id);
		expl.TrapValue=(((((cr.Param[(211)]*2)<(300))?(cr.Param[(211)]*2):(300)))/5+10);
		(expl.Val3)=(((cr.Param[(211)]*2)<(300))?(cr.Param[(211)]*2):(300));
		expl.Val4=(trapsSkill);
		expl.Val5=(isExpert?cr.Param[(383)]:0);
		
		SetLexem(expl,"$frequency",""+expl.Id);
		SetLexem(explSwitch,"$frequency",""+expl.Id);
		expl.Update();
		explSwitch.Update();
		ExpLog(""+expl.Id+" plastic armed by "+cr.Name);
		
	}
	
	else if(pid==(222))
	{
		Item@expl=GetItem(uint(explode.Val1));
		if((@expl!=null))
		{
			uint16 hexX=0,hexY=0,toggleHexX=0,toggleHexY=0;
			Map@map=expl.GetMapPosition(hexX,hexY);
			Map@toggleMap=explode.GetMapPosition(toggleHexX,toggleHexY);
			
			if((@map!=null)&&(@toggleMap!=null))
			{
				if((map.Id==toggleMap.Id)&&(GetDistantion(hexX,hexY,toggleHexX,toggleHexY)<=40))
				{
					ExpLog(""+expl.Id+" plastic detonated with switch by "+cr.Name);
					Critter@crExpl=(expl.Accessory==(1)?::GetCritter(expl.CritId):null);
					Explode(map,hexX,hexY,crExpl,(209),uint(expl.Val2),(expl.Val4),(expl.Val5));
					DeleteItem(expl);
				}
				else
				{
					cr.SayMsg((11),(0),(4920));
					return true;
				}
			}
		}
	}
	
	else if(pid==(544))
	{
		Item@mine=cr.AddItem((545),1);
		if(!(@mine!=null))
		return false;
		
		MakeMine(mine,cr.Id,(((cr.Param[(211)]*2)<(300))?(cr.Param[(211)]*2):(300)),(((cr.Param[(211)]*2)<(300))?(cr.Param[(211)]*2):(300)),trapsSkill,isExpert?cr.Param[(383)]:0);
		VerboseAction(cr,"arms landmine");
	}
	
	else if(pid==(206)||pid==(209)||pid==(545))
	{
		if(pid==(206))
		EraseTimeEvent(uint(explode.Val1));
		
		int chance=(((cr.Param[(211)]*2)<(300))?(cr.Param[(211)]*2):(300))-(cr.Id==uint(explode.Val2)?(explode.Val3):((explode.Val3)/2));
		chance=(((chance)>(95))?(95):(((chance)<(5))?(5):(chance))); 
		
		if(chance>Random(1,100))
		{
			if(pid==(206))
			{
				cr.AddItem((51),1);
				VerboseAction(cr,"disarms dynamite");
			}
			else if(pid==(545))
			{
				
				VerboseAction(cr,"disarms landmine");
			}
			else if(pid==(209))
			{
				cr.AddItem((85),1);
				VerboseAction(cr,"disarms plastic explosive");
				cr.ParamBase[(76)]+=(150)*(GetGvar((62001)));
				LogExperience(cr,(150)*(GetGvar((62001))),(211));
			}
		}
		
		else
		{
			Map@map=cr.GetMap();
			if((@map!=null))
			{
				if(explode.Accessory==(1))
				{
					Critter@cr=GetCritter(explode.CritId);
					if(cr.Cond!=(3))
					{
						if(!IsTCTown(map))
						SubReputation(cr,ReputationIndex(map.GetLocation().GetProtoId()),(25));
						cr.ToDead((117),null);
						
						ExpLog("Explosion inside suicide bomber "+cr.Name+", item id "+explode.Id);
					}
				}
			}
			Explode(map,cr.HexX,cr.HexY,cr,pid,uint(explode.Val2),(explode.Val4),(explode.Val5));
		}
	}
	
	do{if(explode.GetCount()>(1)) explode.SetCount(explode.GetCount()-(1));else DeleteItem(explode);}while(false);
	return true;
} 

void _ExplodeInit(Item&item,bool firstTime)
{
	if(firstTime)
	((item.Flags)=(item.Flags)|((0x00020000)));
	if(item.GetProtoId()==(545))
	item.SetEvent((7),"_MineWalk");
} 

void _MineWalk(Item&mine,Critter&cr,bool entered,uint8 dir)
{
	if(entered&&cr.Param[(68)]!=(3)&&(cr.Param[(397)]==0||Random(0,1)==0))
	{
		CreateTimeEvent((__FullSecond),"e_Explode",mine.Id,false);
	}
} 

uint e_Explode(array<uint>@values)
{
	uint __nowZZZ=GetTick();
	Item@item=GetItem(values[0]);
	if(!(@item!=null))
	{
		uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
		return 0;
	}
	
	ExpLog("Explosion by item id "+item.Id);
	
	uint16 explodePid=item.GetProtoId();
	uint ownerId=uint(item.Val2);
	int bonusDamage=(item.Val4);
	int bonusRadius=(item.Val5);
	uint16 hexX=0;
	uint16 hexY=0;
	Map@map=item.GetMapPosition(hexX,hexY);
	
	if((@map!=null))
	{
		if(item.Accessory==(1))
		{
			Critter@cr=GetCritter(item.CritId);
			if(cr.Cond!=(3))
			{
				if(!IsTCTown(map))
				SubReputation(cr,ReputationIndex(map.GetLocation().GetProtoId()),(25));
				cr.ToDead((117),null);
				
				ExpLog("Explosion inside suicide bomber "+cr.Name+", item id "+item.Id);
			}
		}
		Explode(map,hexX,hexY,null,explodePid,ownerId,bonusDamage,bonusRadius);
	}
	else if(item.Accessory==(1))
	{
		Critter@cr=GetCritter(item.CritId);
		if((@cr!=null))
		Explode(null,0,0,cr,explodePid,ownerId,bonusDamage,bonusRadius);
	}
	DeleteItem(item);
	uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
	return 0;
}             

void MakeMine(Item&mine,uint explodeOwner,uint complexity,uint hideSkill,uint bonusDamage,uint bonusRadius)
{
	mine.Val2=int(explodeOwner);
	if(hideSkill>0)
	mine.TrapValue=((hideSkill)/5+10);
	(mine.Val3)=complexity;
	mine.Val4=(bonusDamage);
	mine.Val5=(bonusRadius);
	mine.SetScript("_ExplodeInit");
}  

void RemoveActiveExplosives(Map@map,uint16 hexX,uint16 hexY,uint radius)
{
	if(!(@map!=null))
	return;
	
	if(radius<=0)
	radius=1; 
	
	array<Item@>plasticExplosives;
	uint plasticExplosivesCnt=map.GetItems((209),plasticExplosives);
	for(uint i=0;i<plasticExplosivesCnt;++i)
	{
		if(GetDistantion(hexX,hexY,plasticExplosives[i].HexX,plasticExplosives[i].HexY)<=radius)
		DeleteItem(plasticExplosives[i]);
	}
	
	array<Item@>dynamites;
	uint dynamitesCnt=map.GetItems((206),dynamites);
	for(uint i=0;i<dynamitesCnt;++i)
	{
		if(GetDistantion(hexX,hexY,dynamites[i].HexX,dynamites[i].HexY)<=radius)
		DeleteItem(dynamites[i]);
	}
	
	array<Item@>mines;
	uint minesCnt=map.GetItems((545),mines);
	for(uint i=0;i<minesCnt;++i)
	{
		if(GetDistantion(hexX,hexY,mines[i].HexX,mines[i].HexY)<=radius)
		DeleteItem(mines[i]);
	} 
	
	array<Item@>containers;
	uint containersCnt=map.GetItemsByType((8),containers);
	for(uint i=0;i<containersCnt;++i)
	{
		if(GetDistantion(hexX,hexY,containers[i].HexX,containers[i].HexY)<=radius)
		{
			array<Item@>containerItems;
			uint containerItemsCnt=containers[i].GetItems(0,containerItems);
			for(uint i=0;i<containerItemsCnt;i++)
			if(containerItems[i].GetProtoId()==(209)
			||containerItems[i].GetProtoId()==(206)
			||containerItems[i].GetProtoId()==(545))
			DeleteItem(containerItems[i]);
		}
	} 
	
	array<Critter@>critters;
	uint crittersCnt=map.GetCrittersHex(hexX,hexY,radius,(0x0F),critters);
	for(uint i=0;i<crittersCnt;++i)
	{
		array<Item@>critterItems;
		uint critterItemCount=critters[i].GetItems(0,critterItems);
		for(uint i=0;i<critterItemCount;i++)
		if(critterItems[i].GetProtoId()==(209)
		||critterItems[i].GetProtoId()==(206)
		||critterItems[i].GetProtoId()==(545))
		DeleteItem(critterItems[i]);
	}
} 

void Explode(Map@map,uint16 hexX,uint16 hexY,Critter@cr,uint16 explodePid,uint ownerId,int bonusDamage,int bonusRadius)
{
	uint16 effectPid;
	uint effectRadius;
	uint damage;
	uint damageType;
	uint damageRadius;
	
	switch(explodePid)
	{
		case(206):
		effectPid=(4011);
		effectRadius=1;
		damage=Random(30,50);
		damageType=(7);
		damageRadius=3;
		RemoveActiveExplosives(map,hexX,hexY,(damageRadius+bonusRadius));
		break;
		case(209):
		effectPid=(4011);
		effectRadius=2;
		damage=Random(40,80);
		damageType=(7);
		damageRadius=3;
		RemoveActiveExplosives(map,hexX,hexY,(damageRadius+bonusRadius));
		break;
		case(545):
		effectPid=(4011);
		effectRadius=1;
		damage=Random(30,70);
		damageType=(7);
		damageRadius=3;
		break;
		default:
		Log("Invalid explode pid.");
		return;
	} 
	
	damage=damage+(damage*bonusDamage)/55;
	
	if(damage<=0)
	damage=1;
	damageRadius+=bonusRadius;
	if(damageRadius<=0)
	damageRadius=1;
	
	if((@map!=null))
	ExplodeEx(map,hexX,hexY,effectPid,effectRadius,damage,damageType,damageRadius,ownerId,explodePid);
	if((@cr!=null))
	{
		
		cr.ToDead((117),null);
		
		ExpLog("Explosion inside suicide bomber "+cr.Name);
		if(cr.IsNpc()&&cr.IsDead())
		LogExperience(cr,cr.Param[(66)]*(GetGvar((62001))),(211),"Explode",0);
	}
}

void ExplodeEx(Map&map,uint16 hexX,uint16 hexY,uint16 effectPid,uint effectRadius,uint damage,uint damageType,uint damageRadius,uint ownerId,uint16 explodePid)
{
	map.RunEffect(effectPid,hexX,hexY,effectRadius);
	map.PlaySound(Random(0,1)==0?"WHN1XXX1.ACM":"WHN1XXX2.ACM");
	QuakeScreen(map);
	
	array<Critter@>critters;
	uint n=map.GetCrittersHex(hexX,hexY,damageRadius,(0x03),critters);
	for(uint i=0;i<n;i++)
	{
		Critter@cr=critters[i];
		uint dist=GetDistantion(hexX,hexY,cr.HexX,cr.HexY);
		int dir=(dist==0?(cr.Dir+3)%6:GetDirection(hexX,hexY,cr.HexX,cr.HexY));
		InjureCritter(cr,damage,damageType,0,ownerId);
		if(cr.IsNpc()&&cr.IsDead())
		LogExperience(cr,cr.Param[(66)]*(GetGvar((62001))),(211),"Explode",0);
		if(ownerId!=0)
		{
			cr.AddEnemyInStack(ownerId);
			Critter@attacker=GetCritter(ownerId);
			if(!(@attacker!=null))
			continue;
			if(IsTown(map))
			SubReputation(attacker,(cr.Param[(106)]),(cr.IsDead()?(150):(25))*(((1)>((cr.Param[(121)])))?(1):((cr.Param[(121)]))));
			else
			TryReportOffense(cr,attacker,(cr.IsDead()?(150):(25))*(((1)>((cr.Param[(121)])))?(1):((cr.Param[(121)]))));
		}
	}
	
	if(damageType==(7))
	{
		Critter@attacker=GetCritter(ownerId);
		
		uint16 hx=hexX;
		uint16 hy=hexY;
		Item@door=map.GetDoor(hx,hy);
		if((@door!=null)&&door.GetScriptId()==0&&(@attacker!=null))
		ExplodeDoor(door,damage,attacker,explodePid);
		
		for(uint i=0;i<6;i++)
		{
			hx=hexX;
			hy=hexY;
			map.MoveHexByDir(hx,hy,i,1);
			@door=map.GetDoor(hx,hy);
			if((@door!=null)&&door.GetScriptId()==0&&(@attacker!=null))
			ExplodeDoor(door,damage,attacker,explodePid);
		}
	}
	
	if(damageType==(7)||damageType==(6))
	{
		uint16 hx=hexX;
		uint16 hy=hexY;
		
		for(uint i=0;i<6;i++)
		{
			hx=hexX;
			hy=hexY;
			map.MoveHexByDir(hx,hy,i,1);
			ExplodeEmitterOnHex(map,hx,hy);
		}
	}
}

void ExplodeDoor(Item&door,int damage,Critter&attacker,uint16 explodePid)
{
	if(door.Accessory!=(2))
	return;
	
	uint16 hexX=0;
	uint16 hexY=0;
	Map@map=door.GetMapPosition(hexX,hexY);   
	
	if(door.Val6==9999999)
	{
		map.SetText(hexX,hexY,((uint((0xFF<<24)|(((0xC8)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),"The doors are invulnerable to explosions.");
		return;
	}
	
	switch(explodePid)
	{
		case(206):
		damage*=1.5;
		if(door.Proto.Material==(1)&&damage>=0)damage*=1.0;
		if((door.Proto.Material==(5)||door.Proto.Material==(6))&&damage>=0)damage*=1.75;
		if((door.Proto.Material==(3)||door.Proto.Material==(7))&&damage>=0)damage*=1.25;
		break;
		case(209):
		damage*=1.5;
		if(door.Proto.Material==(1)&&damage>=0)damage*=1.75;
		if((door.Proto.Material==(5)||door.Proto.Material==(6))&&damage>=0)damage*=1.0;
		if((door.Proto.Material==(3)||door.Proto.Material==(7))&&damage>=0)damage*=1.25;
		break;
		default:
		Log("Invalid explode pid.");
		return;
	} 
	
	if(damage>int(door.Val7))
	damage=int(door.Val7);
	
	int _door_HP_left=int(door.Val7)-damage;
	
	if(_door_HP_left<=0)
	{
		map.SetText(hexX,hexY,((uint((0xFF<<24)|(((0xC8)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),""+damage);
		
		if(IsTown(GetMap(door.MapId))||IsDungeon(GetMap(door.MapId)))
		{
			door.Val7=door.Val6;
			uint[]values={door.MapId,door.HexX,door.HexY,door.GetProtoId(),door.Val6,door.Val7};
			CreateTimeEvent(((__FullSecond)+((((30)*__TimeMultiplier*60)))),"e_RespawnDoor",values,true);
		}
		DeleteItem(door);
		attacker.Say((11),"The doors were destroyed.");
	}
	else
	{
		
		door.Val7=_door_HP_left;
		map.SetText(hexX,hexY,((uint((0xFF<<24)|(((0xC8)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),""+damage);
		
		attacker.Say((11),"The doors treshold left: "+door.Val7);
	}
}

uint e_RespawnDoor(array<uint>@values)
{
	uint __nowZZZ=GetTick();
	Map@map=GetMap(values[0]);
	if(!(@map!=null))
	{
		uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
		return 0;
	}
	if((@map.GetDoor(values[1],values[2])!=null))
	{
		uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
		return 0;
	}
	if((@map.GetCritter(values[1],values[2])!=null))
	{
		uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
		return(((30)*__TimeMultiplier*60));
	}
	Item@door=map.AddItem(values[1],values[2],values[3],1);
	if(!(@door!=null))
	{
		uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
		return(((30)*__TimeMultiplier*60));
	}
	door.LockerOpen();
	door.LockerClose();
	
	door.Val6=values[4];
	door.Val7=values[5];
	
	uint __endZZZ=GetTick();if(__endZZZ-__nowZZZ>40) Log("I am being executed for a very long time! ("+(__endZZZ-__nowZZZ)+" ms)");
	return 0;
}

void _OnExplDrop(Item&item,Critter&crit)
{
	array<Critter@>crits;
	Map@map=GetMap(item.MapId);
	if(!(@map!=null))
	return;
	uint n=crit.GetCritters(true,(0x03),crits);
	bool reported=false;
	for(uint i=0;i<n;i++)
	{
		if(!HasIntelligentBrain(crits[i]))
		continue;
		if(!reported&&(((crits[i].Param[(534)]&((0x00000008)))!=0)||crits[i].IsPlayer()))
		{
			SetCritterIllegalFlag(crit,(0x00000008));
			reported=true;
		}
		if(crits[i].IsPlayer())
		continue;
		uint16 hx=crits[i].HexX;
		uint16 hy=crits[i].HexY;
		uint dir=GetDirection(item.HexX,item.HexY,hx,hy);
		uint dist=GetDistantion(item.HexX,item.HexY,hx,hy);
		dist++;
		
		for(uint j=0;j<10;j++)
		{
			map.MoveHexByDir(hx,hy,dir,1);
			if(dist+j<5)
			continue;
			if(map.IsHexPassed(hx,hy))
			break;
		}
		
		if(map.IsHexPassed(hx,hy))
		{
			if(!IsTown(map))
			crits[i].SetHomePos(hx,hy,Random(0,5));
			AddAttackPlane(crits[i],(50),crit);
			AddWalkPlane(crits[i],(50)+20,hx,hy,Random(0,5),true,0);
		}
	}
	if(reported&&!IsTCTown(map))
	SubReputation(crit,ReputationIndex(map.GetLocation().GetProtoId()),(25));
}
