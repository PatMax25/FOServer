//
// FOnline: 2238
// Rotators
//
// critter_item_movement.fos
//

#include "_defines.fos"
#include "_basetypes.fos"
#include "_macros.fos"
#ifdef __SERVER
# include "item_perks_h.fos"
# include "logging_h.fos"
# include "mapdata_h.fos"
# include "utils_h.fos"
#include "follower.fos"
#include "mob_dynamic_h.fos"
#include "npc_roles_h.fos"
#include "flags_h.fos"
import bool GodOfTheRealm(uint) from "cheats";
import bool GuardNotLegit(Critter@ cr, Item@ item, bool deleteItem) from "cheats";
import void GuardMultihexMove(Item& item, uint8 fromSlot, uint8 toSlot) from "multihex";
import void hunting(Critter& player, Critter@ trainer) from "perks";
import void killer(Critter& player, Critter@ trainer) from "perks";
import void assasin(Critter& player, Critter@ trainer) from "perks";
import void allstatup(Critter& player, Critter@ trainer) from "perks";
import void czosnek(Critter& player, Critter@ trainer) from "perks";
import void faith(Critter& player, Critter@ trainer) from "perks";
import void CallMobs(Critter& cr, int howmany, int whatkind, int whattype) from "mob_dynamic";
#endif

#ifdef __CLIENT
# define Critter    CritterCl
# define Item       ItemCl
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.
bool critter_check_move_item(Critter& cr, Item& item, uint8 toSlot, Item@ itemSwap)
{
    uint8 fromSlot = item.CritSlot;
	if(!valid(item))
		return false;
    // Guarding not legit items - although transaction is allowed it will delete item if not legit
    #ifdef __SERVER
    if(GuardNotLegit(cr, item, true))
        return true;
	if((toSlot == SLOT_HAND1 || toSlot == SLOT_HAND2) && (fromSlot == SLOT_ARMOR || fromSlot == SLOT_HEAD))
		return false;
	if(valid(itemSwap))
	{
	if(fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 && (item.Proto.ProtoId == PID_ACTIVE_MOTION_SENSOR || itemSwap.Proto.ProtoId == PID_ACTIVE_MOTION_SENSOR ))
		return false;
	if(fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 && (item.Proto.ProtoId == PID_ACTIVE_MOTION_SENSOR || itemSwap.Proto.ProtoId == PID_ACTIVE_MOTION_SENSOR ))
		return false;	
	if(fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 && (item.Proto.ProtoId == PID_ACTIVE_MOTION_SENSOR_CYBORG || itemSwap.Proto.ProtoId == PID_ACTIVE_MOTION_SENSOR_CYBORG ))
		return false;
	if(fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 && (item.Proto.ProtoId == PID_ACTIVE_MOTION_SENSOR_CYBORG || itemSwap.Proto.ProtoId == PID_ACTIVE_MOTION_SENSOR_CYBORG ))
		return false;	
	}
/*	if(item.GetType() == ITEM_TYPE_WEAPON && (fromSlot == SLOT_HAND1 || toSlot == SLOT_HAND1) && item.IsStackable())
	{
	item.Val0 = 0;
	item.Val4 = 0;
	item.Val5 = 0;
	item.Val6 = 0;
	item.Val7 = 0;
	item.Val8 = 0;
	item.Update();
	}
	if(item.GetType() == ITEM_TYPE_WEAPON && (fromSlot == SLOT_HAND2 || toSlot == SLOT_HAND2) && item.IsStackable())
	{
	item.Val0 = 0;
	item.Val4 = 0;
	item.Val5 = 0;
	item.Val6 = 0;
	item.Val7 = 0;
	item.Val8 = 0;
	item.Update();
	}
	if(item.GetType() == ITEM_TYPE_WEAPON && (fromSlot == SLOT_INV || toSlot == SLOT_INV) && item.IsStackable())
	{
	item.Val0 = 0;
	item.Val4 = 0;
	item.Val5 = 0;
	item.Val6 = 0;
	item.Val7 = 0;
	item.Val8 = 0;
	item.Update();
	}
	if(item.GetType() == ITEM_TYPE_WEAPON && (fromSlot == SLOT_GROUND || toSlot == SLOT_GROUND) && item.IsStackable())
	{
	item.Val0 = 0;
	item.Val4 = 0;
	item.Val5 = 0;
	item.Val6 = 0;
	item.Val7 = 0;
	item.Val8 = 0;
	item.Update();
	}*/
	#endif
    // Drop
	if(toSlot == SLOT_GROUND)
    {
        #ifdef __SERVER
        // this is just ugly
        if(item.GetType() == ITEM_TYPE_CONTAINER)
        {
            Location@ loc = GetLocationOf(cr);
            if(valid(loc) && !loc.IsBase() && !loc.IsEncounter() && !loc.IsTent())
            {
                cr.Say(SAY_NETMSG, "You can't drop this here.");
                return false;
            }
        }
        #endif
        return true;
    }
    // If busy, then allow only hands item swapping
    bool handsSwap = ((fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2) || (fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1));
    if(valid(itemSwap) && !handsSwap)
        return false;

    // Weapon animation
    if(toSlot == SLOT_HAND1)
    {
        if(item.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1(cr.CrType, item.Proto.Weapon_Anim1))
            return false;
    }

    // Armor animation
    if(toSlot == SLOT_ARMOR)
    {
        bool can = true;
        if(item.GetType() != ITEM_TYPE_ARMOR || item.Proto.Slot != SLOT_ARMOR)
        {
            if(cr.ParamBase[PE_TERMINATOR] == 1337)
            {
                #ifdef __SERVER
                if(GodOfTheRealm(cr.Id))
                #endif
                can = true;
            }
            else
                can = false;						
        }

        if(can && !IsCritterCanArmor(cr.CrType))
            can = false;
		
		// Able to wear broken special armors from encouters.
			// Item@ armor = cr.GetItem(item.GetProtoId());
			
		uint armor = item.GetProtoId();
			
		if((armor == PID_POWERED_ARMOR || armor == PID_HARDENED_POWER_ARMOR
		|| armor == PID_ADVANCED_POWER_ARMOR || armor == PID_ADVANCED_POWER_ARMOR_MK2) && item.BrokenFlags == BI_ETERNAL)
		
		/* Item@ armor = cr.GetItem(item);
			
		if((armor.Proto.ProtoId == PID_NCR_ARMOR 
		|| armor.Proto.ProtoId == PID_BROTHERHOOD_COMBAT_ARMOR || armor.Proto.ProtoId == PID_ENCLAVE_COMBAT_ARMOR 
		|| armor.Proto.ProtoId == PID_POWERED_ARMOR || armor.Proto.ProtoId == PID_HARDENED_POWER_ARMOR
		|| armor.Proto.ProtoId == PID_ADVANCED_POWER_ARMOR || armor.Proto.ProtoId == PID_ADVANCED_POWER_ARMOR_MK2)) // && FLAG(item.BrokenFlags, BI_BROKEN)) */
		
		can = false;

        return(can);
    }
	
	// Able to wear broken special helmets from encounters.
	if(toSlot == SLOT_HEAD)
    {
        bool can = true;
		
		if(item.GetType() != ITEM_TYPE_ARMOR || item.Proto.Slot != SLOT_HEAD)
        {
            if(cr.ParamBase[PE_TERMINATOR] == 1337)
            {
                #ifdef __SERVER
                if(GodOfTheRealm(cr.Id))
                #endif
                can = true;
            }
            else
                can = false;						
        }
			
		uint armor = item.GetProtoId();
			
		if((armor == PID_NCR_HELMET 
		|| armor == PID_BROTHERHOOD_HELMET || armor == PID_ENCLAVE_COMBAT_HELMET || armor == PID_ENCLAVE_COMBAT_HELMET_MK2 
		|| armor == PID_POWER_HELMET || armor == PID_HARDENED_POWER_HELMET 
		|| armor == PID_APA_HELMET || armor == PID_APA_HELMET_MK2) && item.BrokenFlags == BI_ETERNAL)
		
		can = false;

        return(can);
    }
	

    // Custom slot checks
    if(toSlot > SLOT_ARMOR)
    {
        if(toSlot != item.Proto.Slot)
        {
            if(cr.ParamBase[PE_TERMINATOR] == 1337)
            {
                #ifdef __SERVER
                if(GodOfTheRealm(cr.Id))
                #endif
                return(true);
            }
            return(false);
        }

        if(toSlot == SLOT_TROPHY && cr.IsPlayer())           // add ST_BASE_CRTYPE here?
            return(false);
    }

    // Allow moving
    return true;
}

const int[][] armorRedirect =
{
    //	ST_BASE_CRTYPE					ST_GENDER					fallback
    //																-1 = use Armor_CrType
    //	Armor_CrType	->	->	->	->	override

    /* PLAYER */
    {
        CRTYPE_LHD_JUMPSUIT,                    GENDER_MALE,                            -1,
        CRTYPE_MALE_LEATHER_JACKET,             CRTYPE_LHD_LEATHER_JACKET,
        CRTYPE_MALE_LEATHER_ARMOR,              CRTYPE_LHD_LEATHER_ARMOR,
        CRTYPE_MALE_METAL_ARMOR,                CRTYPE_LHD_METAL_ARMOR,
    },

    {
        CRTYPE_BHD_JUMPSUIT,                    GENDER_MALE,                            -1,
        CRTYPE_MALE_LEATHER_JACKET,             CRTYPE_BHD_LEATHER_JACKET,
        CRTYPE_MALE_LEATHER_ARMOR,              CRTYPE_BHD_LEATHER_ARMOR,
        CRTYPE_MALE_METAL_ARMOR,                CRTYPE_BHD_METAL_ARMOR,
    },

    /* NPC */
    {
        CRTYPE_PUNK_JUMPSUIT,           GENDER_FEMALE,                          -1,
        CRTYPE_FEMALE_LEATHER_ARMOR,    CRTYPE_PUNK_JUMPSUIT,
    }
	
};

#ifdef __SERVER
////////////////////////////////////////////////////////////////////////////////////////////////////
// Call on critter change item in active slot - Hands or Armor.
// If Item::CritSlot == 0xFF than item dropped/erased
void critter_move_item(Critter& cr, Item& item, uint8 fromSlot)
{
    uint8 toSlot = item.CritSlot;
	if(cr.Param[ST_ANIM_BLOCK]>0)
		return;
    GuardMultihexMove(item, fromSlot, toSlot);

    // Armor changing
    if(item.GetType() == ITEM_TYPE_ARMOR && (fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR))
    {
		cr.ParamBase[ST_CURRENT_AP] -= 500;
        if(GetCritterAnimType(cr.CrType) != ANIM_TYPE_3D)
        {
            // Default dude
            bool isMale = (cr.Param[ST_GENDER] == GENDER_MALE);
            uint crType = cr.Param[ST_BASE_CRTYPE];
            if(crType == 0)
                crType = (isMale ? CRTYPE_MALE_DEFAULT : CRTYPE_FEMALE_DEFAULT);

            if(toSlot == SLOT_ARMOR)
            {
                if(cr.Param[ST_OVERRIDE_CRTYPE] == 0)               // old, default behaviour
                    crType = (isMale ? item.Proto.Armor_CrTypeMale : item.Proto.Armor_CrTypeFemale);
                else
                {
                    uint over = cr.Param[ST_OVERRIDE_CRTYPE];
                    if(isMale)
                    {
                        if(over == item.Proto.Armor_CrTypeMale2 ||
                           over == item.Proto.Armor_CrTypeMale3 ||
                           over == item.Proto.Armor_CrTypeMale4)
                            crType = over;
                    }
                    else
                    {
                        if(over == item.Proto.Armor_CrTypeFemale2 ||
                           over == item.Proto.Armor_CrTypeFemale3 ||
                           over == item.Proto.Armor_CrTypeFemale4)
                            crType = over;
                    }
                }
            }

            // Long hair dude redirects
            if(cr.Param[ST_BASE_CRTYPE] == CRTYPE_LHD_JUMPSUIT && isMale)
            {
                crType = CRTYPE_LHD_JUMPSUIT;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = CRTYPE_LHD_LEATHER_ARMOR;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = CRTYPE_LHD_LEATHER_JACKET;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = CRTYPE_LHD_METAL_ARMOR;
                }
            }
			
			            // Mutant
            if(cr.Param[ST_BASE_CRTYPE] == CRTYPE_MUTANT)
            {
                crType = CRTYPE_MUTANT;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = CRTYPE_NIGHTKIN;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = CRTYPE_NIGHTKIN;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = CRTYPE_LIEUTANANT;
					else if(crType == CRTYPE_POWER_ARMOR)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_ENCLAVE)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_POWER_ARMOR_BLUE)
						crType = CRTYPE_FRANK;
					else 
						{
					DeleteItem(item);
					cr.Say(SAY_NETMSG, "That armor was too small...It broken while you was trying wear it");
						}
					
                }
            }
			if(cr.Param[ST_BASE_CRTYPE] == 435 )
            {
                crType = 435;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = 435;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = 435;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = 435;
					else if(crType == CRTYPE_POWER_ARMOR)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_ENCLAVE)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_POWER_ARMOR_BLUE)
						crType = CRTYPE_FRANK;
					else 
						{
					DeleteItem(item);
					cr.Say(SAY_NETMSG, "That armor was too small...It broken while you was trying wear it");
						}
					
                }
            }
			if(cr.Param[ST_BASE_CRTYPE] == 489 )
            {
                crType = 489;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = 489;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = 489;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = 489;
					else if(crType == CRTYPE_POWER_ARMOR)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_ENCLAVE)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_POWER_ARMOR_BLUE)
						crType = CRTYPE_FRANK;
					else 
						{
					DeleteItem(item);
					cr.Say(SAY_NETMSG, "That armor was too small...It broken while you was trying wear it");
						}
					
                }
            }
			if(cr.Param[ST_BASE_CRTYPE] == 490 )
            {
                crType = 490;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = 490;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = 490;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = 490;
					else if(crType == CRTYPE_POWER_ARMOR)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_ENCLAVE)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_POWER_ARMOR_BLUE)
						crType = CRTYPE_FRANK;
					else 
						{
					DeleteItem(item);
					cr.Say(SAY_NETMSG, "That armor was too small...It broken while you was trying wear it");
						}
					
                }
            }
			if(cr.Param[ST_BASE_CRTYPE] == 491 )
            {
                crType = 491;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = 491;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = 491;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = 491;
					else if(crType == CRTYPE_POWER_ARMOR)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_ENCLAVE)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_POWER_ARMOR_BLUE)
						crType = CRTYPE_FRANK;
					else 
						{
					DeleteItem(item);
					cr.Say(SAY_NETMSG, "That armor was too small...It broken while you was trying wear it");
						}
					
                }
            }
			if(cr.Param[ST_BASE_CRTYPE] == 492 )
            {
                crType = 492;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = 492;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = 492;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = 492;
					else if(crType == CRTYPE_POWER_ARMOR)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_ENCLAVE)
                        crType = CRTYPE_FRANK;
					else if(crType == CRTYPE_POWER_ARMOR_BLUE)
						crType = CRTYPE_FRANK;
					else 
						{
					DeleteItem(item);
					cr.Say(SAY_NETMSG, "That armor was too small...It broken while you was trying wear it");
						}
					
                }
            }
            // Bald Head Dude redirects
            if(cr.Param[ST_BASE_CRTYPE] == CRTYPE_BHD_JUMPSUIT && isMale)
            {
                crType = CRTYPE_BHD_JUMPSUIT;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = CRTYPE_BHD_LEATHER_ARMOR;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = CRTYPE_BHD_LEATHER_JACKET;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = CRTYPE_BHD_METAL_ARMOR;
                }
            }

            // Punk Girl redirects
            if(cr.Param[ST_BASE_CRTYPE] == CRTYPE_PUNK_JUMPSUIT && !isMale)
            {
                crType = CRTYPE_PUNK_JUMPSUIT;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeFemale;
                    if(crType == CRTYPE_FEMALE_LEATHER_ARMOR)
                        crType = CRTYPE_PUNK_LA;
					else if(crType == CRTYPE_FEMALE_METAL_ARMOR)
                        crType = CRTYPE_PUNK_MA;
					else if(crType == CRTYPE_FEMALE_LEATHER_JACKET)
                        crType = CRTYPE_PUNK;
                    //else
                    //    crType = CRTYPE_PUNK;
                }
            }
			
			// Ian redirects
            if(cr.Param[ST_BASE_CRTYPE] == CRTYPE_IAN && isMale)
            {
                crType = CRTYPE_IAN;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = CRTYPE_LHD_LEATHER_ARMOR;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = CRTYPE_LHD_LEATHER_JACKET;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = CRTYPE_LHD_METAL_ARMOR;
                }
            }
			
			// Old Ian redirects
            if(cr.Param[ST_BASE_CRTYPE] == CRTYPE_OLDIAN && isMale)
            {
                crType = CRTYPE_OLDIAN;
                if(toSlot == SLOT_ARMOR)
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if(crType == CRTYPE_MALE_LEATHER_ARMOR)
                        crType = CRTYPE_LHD_LEATHER_ARMOR;
                    else if(crType == CRTYPE_MALE_LEATHER_JACKET)
                        crType = CRTYPE_LHD_LEATHER_JACKET;
                    else if(crType == CRTYPE_MALE_METAL_ARMOR)
                        crType = CRTYPE_LHD_METAL_ARMOR;
                }
            }
			if(cr.Param[ST_BASE_CRTYPE] > 399)
				crType = cr.Param[ST_BASE_CRTYPE];
            /*
               for( uint a=0,aLen=armorRedirect.length(); a<aLen; a++ )
               {
                    if( cr.IsNpc() && cr.Param[ST_OVERRIDE_CRTYPE] != 0 )
                            break;

                    if( armorRedirect[a].length() < 5 )
                            continue;

                    if( cr
               }
             */

            if(cr.CrType != crType)
                cr.ChangeCrType(crType);
        }

        // Armor modifiers
        if(toSlot == SLOT_ARMOR)
            EnableItemPerk(cr, item, ITEM_PERK_ARMOR);
        else if(fromSlot == SLOT_ARMOR)
            DisableItemPerk(cr, item, ITEM_PERK_ARMOR);

	}
    if(fromSlot == SLOT_HEAD || toSlot == SLOT_HEAD)
    {
        // Helmet modifiers
        if(toSlot == SLOT_HEAD)
            EnableItemPerk(cr, item, ITEM_PERK_HELMET);
        else if(fromSlot == SLOT_HEAD)
            DisableItemPerk(cr, item, ITEM_PERK_HELMET);
    }


    // Add/remove sneak penalty for carrying active explosives.
    // It works also for arming/disarming, because explosives are replaced with
    // a new item when armed/disarmed.
    //
    if(item.Proto.ProtoId == PID_ACTIVE_PLASTIC_EXPLOSIVE ||
       item.Proto.ProtoId == PID_ACTIVE_DYNAMITE ||
       item.Proto.ProtoId == PID_ACTIVE_MINE)
    {
        if(fromSlot == SLOT_GROUND)
        {
            SETFLAG(cr.ParamBase[ST_SNEAK_FLAGS], 0x1);
            DSay(cr, "Added sneak penalty for armed explosives.");
        }
        else
        {
            if(!valid(cr.GetItem(PID_ACTIVE_PLASTIC_EXPLOSIVE, -1)) &&
               !valid(cr.GetItem(PID_ACTIVE_DYNAMITE, -1)) &&
               !valid(cr.GetItem(PID_ACTIVE_MINE, -1)))
            {
                UNSETFLAG(cr.ParamBase[ST_SNEAK_FLAGS], 0x1);
                DSay(cr, "Removed sneak penalty for armed explosives.");
            }
        }
    }

	//speedboost(cr);
}

bool isFlag(Item& flag)
{
    uint16[] flages =
    {
        PID_FLAG_BOS,
		PID_FLAG_HEAL,
		PID_FLAG_ENCLAVE,
		PID_FLAG_ORANGE,
		PID_FLAG_PIRATE,
		PID_FLAG_NEUTRAL,
		PID_FLAG_VC,
		PID_FLAG_GREEN,
		PID_FLAG_UNKNOWN,
		PID_FLAG_PINK,
		PID_FLAG_RED,
		PID_FLAG_GREY,
		PID_FLAG_YELLOW,
		PID_FLAG_DARK,
		PID_FLAG_TTA,
		26698,
		27143,
		26699
    };

    if(valid(flag) && Present(flag.GetProtoId(), flages))
        return(true);
    else
        return(false);
}

//Speed boost bonus for runing. 1 is 0,5%
void speedboost(Critter& cr)
{
	Map@ map = cr.GetMap();
	int val = 50;
	val += cr.Param[ST_SEQUENCE]; // 1% per sequence
	val += cr.Param[ST_AGILITY]; // 1% per ag
	val += cr.Param[TRAIT_FAST_SHOT]*5; // 5%
	val += cr.Param[PE_CLAW]*5; // 5%
	val += cr.Param[PE_CLAW2]*5; // 5%
	if(cr.Param[TRAIT_CHEM_RESISTANT]!=0 && cr.Param[TO_CIGARETTES] > 0) val += 10;
	
	if( valid(cr.GetItem(SLOT_HAND1, 0)))
	if(FLAG(cr.GetItem(SLOT_HAND1, 0).Flags,ITEM_TWO_HANDS))
		val += cr.Param[PE_COWBOY] * 30; //30% 
	if(cr.Param[PE_COWBOY] > 0 && cr.Param[PE_EARLIER_SEQUENCE] > 0  && cr.Param[PE_WEAPON_HANDLING] > 0 && cr.Param[PE_QUICK_POCKETS] > 0)
		val += 15; //15%	
	if( valid(cr.GetItem(SLOT_HAND1, 0)))
		{
		if(cr.GetItem(SLOT_HAND1, 0).Val3 == WP_BONUS_SPEED)
				val += 5;
		if(cr.GetItem(SLOT_HAND1, 0).Val4 == WP_BONUS_SPEED)
				val += 5;
		if(cr.GetItem(SLOT_HAND1, 0).Val5 == WP_BONUS_SPEED)
				val += 5;
		if(cr.GetItem(SLOT_HAND1, 0).Val6 == WP_BONUS_SPEED)
				val += 5;
		if(cr.GetItem(SLOT_HAND1, 0).Val7 == WP_BONUS_SPEED)
				val += 5;
		if(cr.GetItem(SLOT_HAND1, 0).Val8 == WP_BONUS_SPEED)
				val += 5;
				
		}
	if( valid(cr.GetItem(SLOT_HAND1, 0)))
		if(cr.GetItem(SLOT_HAND1, 0).Proto.Weapon_Skill_0 == SK_UNARMED || cr.GetItem(SLOT_HAND1, 0).Proto.Weapon_Skill_0 == SK_ENGINE )
			if(cr.Param[PE_GAIN_STRENGTH]>0 && cr.Param[PE_IN_YOUR_FACE]>0 && cr.Param[PE_BONUS_HTH_DAMAGE_II]>0)
				val /= 2;
	
				
	int realval = 500000 / 1700;
	cr.ParamBase[ST_ATTACK_SPEED]=1700;	//Formula
	
	
    if(!valid(map))
        return;
	if(cr.Param[ST_TEAM_ID] > 1)
	{
	IFaction@ faction = GetFaction(cr.Param[ST_TEAM_ID]);
	if(valid(faction))
	{
	cr.ParamBase[FACTION_TAG1] = faction.get_tag(1);
	cr.ParamBase[FACTION_TAG2] = faction.get_tag(2);
	cr.ParamBase[FACTION_TAG3] = faction.get_tag(3);
	cr.ParamBase[FACTION_TAG4] = faction.get_tag(4);
	cr.ParamBase[FACTION_TAG5] = faction.get_tag(5);
	cr.ParamBase[FACTION_R1] = faction.get_r(1);
	cr.ParamBase[FACTION_R2] = faction.get_r(2);
	cr.ParamBase[FACTION_R3] = faction.get_r(3);
	cr.ParamBase[FACTION_R4] = faction.get_r(4);
	cr.ParamBase[FACTION_R5] = faction.get_r(5);
	cr.ParamBase[FACTION_G1] = faction.get_g(1);
	cr.ParamBase[FACTION_G2] = faction.get_g(2);
	cr.ParamBase[FACTION_G3] = faction.get_g(3);
	cr.ParamBase[FACTION_G4] = faction.get_g(4);
	cr.ParamBase[FACTION_G5] = faction.get_g(5);
	cr.ParamBase[FACTION_B1] = faction.get_b(1);
	cr.ParamBase[FACTION_B2] = faction.get_b(2);
	cr.ParamBase[FACTION_B3] = faction.get_b(3);
	cr.ParamBase[FACTION_B4] = faction.get_b(4);
	cr.ParamBase[FACTION_B5] = faction.get_b(5);
	}
	}
	if(IsCompanion(cr) && valid(cr))
		{
		cr.ParamBase[MODE_NO_AIM] = 1;
		cr.TraitBase[TRAIT_FAST_SHOT] = 1;
		}
	if(_IsSlave(cr) && valid(cr))
		{
		cr.ParamBase[MODE_NO_AIM] = 1;
		cr.TraitBase[TRAIT_FAST_SHOT] = 1;
		}
	if(cr.Param[ST_SUMMONER] > 0)
		summoner(cr);
	if(cr.Param[PE_SOLDIER] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 3;
	if(cr.Param[PE_MUTANT] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 2;
	if(cr.Param[PE_CHOSEN] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 4;
	if(cr.Param[PE_PRIEST] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 5;

	if(cr.Param[PE_DEATHCLAW] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 7;
	if(cr.Param[PE_HUNTER] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 6;
	if(cr.Param[PE_CYBORG] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 8;
	if(cr.Param[PE_KILLER] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 9;
	if(cr.Param[PE_ASSASIN] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 10;
	if(cr.Param[PE_LEADER] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 11;
	if(cr.Param[PE_PARAMEDIC] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 12;
	if(cr.Param[PE_SNIPER] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 13;
	if(cr.Param[PE_INFANTRY] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 14;
	if(cr.Param[PE_ALIEN] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 15;
	if(cr.Param[PE_MASTER] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 16;
	if(cr.Param[PE_WRECKER] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 17;
	if(cr.Param[PE_CLONE] > 0)
		cr.ParamBase[ST_DESCRIPTION1] = 18;
	if(cr.Param[PE_RANDOM] > 0) //must be last
		{
		cr.ParamBase[ST_DESCRIPTION1] = 1;
		rollstats(cr);
		}
	if(cr.Param[PE_ASSASIN] != 0 && cr.Param[MODE_HIDE] == 0 && Random(1,10)==10)
		cr.ParamBase[MODE_HIDE] = 1;
	if(cr.IsPlayer())
	{
	int ap = 30;
	ap -= cr.Param[ST_STRENGTH];
	if(cr.Param[PE_QUICK_RECOVERY]>0)
		ap = ap / 2;
	if(cr.Param[PE_SOLDIER] > 0 && Random(1,100) == 1 )
		cr.ToKnockout(KNOCKOUT_ANIM2_DEFAULT(Random(0, 1) == 0), ap , cr.HexX, cr.HexY);
		
	if(cr.ParamBase[SK_SMALL_GUNS] >= 300 + cr.ParamBase[SK_SMALL_GUNS_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_SMALL_GUNS] = 300 + cr.ParamBase[SK_SMALL_GUNS_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_BIG_GUNS] >= 300 + cr.ParamBase[SK_BIG_GUNS_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_BIG_GUNS] = 300 + cr.ParamBase[SK_BIG_GUNS_CAP];
	if(cr.ParamBase[SK_ENERGY_WEAPONS] >= 300 + cr.ParamBase[SK_ENERGY_WEAPONS_CAP]) cr.ParamBase[SK_ENERGY_WEAPONS] = 300 + cr.ParamBase[SK_ENERGY_WEAPONS_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_UNARMED] >= 300 + cr.ParamBase[SK_UNARMED_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_UNARMED] = 300 + cr.ParamBase[SK_UNARMED_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_THROWING] >= 300 + cr.ParamBase[SK_THROWING_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_THROWING] = 300 + cr.ParamBase[SK_THROWING_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_SNEAK] >= 300 + cr.ParamBase[SK_SNEAK_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_SNEAK] = 300 + cr.ParamBase[SK_SNEAK_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_SPEECH] >= 300 + cr.ParamBase[SK_SPEECH_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_SPEECH] = 300 + cr.ParamBase[SK_SPEECH_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_LEARNING] >= 200 + cr.ParamBase[SK_LEARNING_CAP]) cr.ParamBase[SK_LEARNING] = 200 + cr.ParamBase[SK_LEARNING_CAP];
	if(cr.ParamBase[SK_FIRST_AID] >= 200 + cr.ParamBase[SK_FIRST_AID_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_FIRST_AID] = 200 + cr.ParamBase[SK_FIRST_AID_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_DOCTOR] >= 200 + cr.ParamBase[SK_DOCTOR_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_DOCTOR] = 200 + cr.ParamBase[SK_DOCTOR_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_LOCKPICK] >= 200 + cr.ParamBase[SK_LOCKPICK_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_LOCKPICK] = 200 + cr.ParamBase[SK_LOCKPICK_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_ENGINE] >= 200 + cr.ParamBase[SK_ENGINE_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_ENGINE] = 200 + cr.ParamBase[SK_ENGINE_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_OUTDOORSMAN] >= 200 + cr.ParamBase[SK_OUTDOORSMAN_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_OUTDOORSMAN] = 200 + cr.ParamBase[SK_OUTDOORSMAN_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_REPAIR] >= 200 + cr.ParamBase[SK_REPAIR_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_REPAIR] = 200 + cr.ParamBase[SK_REPAIR_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_SCIENCE] >= 200 + cr.ParamBase[SK_SCIENCE_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_SCIENCE] = 200 + cr.ParamBase[SK_SCIENCE_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_TRAPS] >= 150 + cr.ParamBase[SK_TRAPS_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_TRAPS] = 150 + cr.ParamBase[SK_TRAPS_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_BARTER] >= 150 + cr.ParamBase[SK_BARTER_CAP] + cr.Param[ST_INTELLECT]) cr.ParamBase[SK_BARTER] = 150 + cr.ParamBase[SK_BARTER_CAP] + cr.Param[ST_INTELLECT];
	if(cr.ParamBase[SK_CRAFTING] >= 150 + cr.ParamBase[SK_CRAFTING_CAP] + cr.Param[ST_INTELLECT])  cr.ParamBase[SK_CRAFTING] = 150 + cr.ParamBase[SK_CRAFTING_CAP] + cr.Param[ST_INTELLECT] + cr.Param[PE_ALIEN]*50;	
	uint current_weight; 										//Get current weight count
	uint skill=cr.Param[SK_UNARMED];							//Get Unarmed skill count
	uint bonus=0; 										//50 max(25%)
	current_weight = cr.ItemsWeight(); 							//Get count to var
	uint penalty=0;						//Weight penalty 1 for every 5kg(0,5% every 5kg)
	Item@ CritterArmor = cr.GetItem(0,SLOT_ARMOR);				//Get critter armor indentifier
	Item@ CritterHelmet = cr.GetItem(0,SLOT_HEAD);				//Get critter helm identifier
	uint8 mode = 0;
	uint8 use = _WeaponModeUse(mode);
	ProtoItem@ weapon1 = cr.GetSlotProto(SLOT_HAND1, mode);
	ProtoItem@ weapon2 = cr.GetSlotProto(SLOT_HAND2, mode);
	int skillNum1 = _WeaponSkill(weapon1, use);
	int skillNum2 = _WeaponSkill(weapon2, use);
	if(cr.Trait[TRAIT_BRUISER]!=0) penalty +=20;
	if ( (cr.Param[PE_BONUS_HTH_ATTACKS] !=0) &&  (cr.Param[PE_BONUS_HTH_DAMAGE] !=0 ) && ( cr.Param[PE_VAMPIRE] !=0  ) ) 	bonus+=50;		//Bonus from Bonus HtH Attacks perk 14 pts (7%)
	if ( valid(weapon1) )										//No bonus if player have BG weapon or Gatling in 1st slot
	{
		if ( (skillNum1 == SK_SMALL_GUNS) || (skillNum1 == SK_BIG_GUNS) || (skillNum1 == SK_ENERGY_WEAPONS) ) bonus/=2;
	}
	if ( valid(weapon2) )										//No bonus if player have BG weapon or Gatling in 2nd slot
	{
		if ( (skillNum2 == SK_SMALL_GUNS) || (skillNum2 == SK_BIG_GUNS) || (skillNum2 == SK_ENERGY_WEAPONS) ) bonus/=2;
	}
	
	if(cr.Trait[TRAIT_CHEM_RESISTANT]!=0 && cr.Timeout[TO_PSYCHO] > 0) bonus+=10;
	if ( (cr.Param[PE_BONUS_MOVE] !=0)) bonus+=20;	
	if ( (cr.Param[PE_DEATHCLAW] !=0)) bonus+=20;
	if(valid(CritterArmor))
	{
	if(CritterArmor.Val3 == AP_BONUS_MOVE ) bonus+=20; 
	if(CritterArmor.Val4 == AP_BONUS_MOVE ) bonus+=20; 
	if(CritterArmor.Val5 == AP_BONUS_MOVE ) bonus+=20; 
	if(CritterArmor.Val6 == AP_BONUS_MOVE ) bonus+=20; 
	if(CritterArmor.Val7 == AP_BONUS_MOVE ) bonus+=20; 
	if(CritterArmor.Val8 == AP_BONUS_MOVE ) bonus+=20;
	}
	if ( (cr.Param[PE_TIGER2] > 0)) bonus+=20;	//Bonus from Bonus Move perk 10 pts (5%)
	if (valid(CritterArmor))
	{
		if( (CritterArmor.GetProtoId()== PID_LEATHER_JACKET) ||
			(CritterArmor.GetProtoId()== PID_CURED_LEATHER_ARMOR) ||
			(CritterArmor.GetProtoId()== PID_LEATHER_ARMOR) ||
			(CritterArmor.GetProtoId()== PID_LEATHER_ARMOR_MK_II))
		{	
			bonus+=4;												//Additional bonus for Leather Armors 6 pts (3%)
		}
	
	}
	if(cr.Param[ST_TERMINATOR] > 0)
	bonus -= 1000;
	else if(bonus<0)
		bonus=0;
	bonus -= cr.Param[ST_SLOW];
	bonus -= cr.Param[ST_SLOW];
	array<Critter@> teammates;
	uint k = cr.GetMap().GetCritters(0, FIND_ONLY_PLAYERS | FIND_ALL, teammates);
	if(cr.Param[PE_LEADER] > 0 && cr.Param[ST_NPC_ROLE] < 2)
	{
	for(uint i = 0; i < k; i++)
    {
	if(teammates[i].Param[ST_TEAM_ID] != cr.Param[ST_TEAM_ID])
	continue;
	if(teammates[i].Id == cr.Id)
	continue;
	bonus+=8;
	}
	}
	if(cr.Param[PE_EMP_IMPLANT]==3)
	bonus -= 60;
	cr.ParamBase[ST_RUN_TIME]=CLAMP(200-bonus+penalty,100,14414);	//Formula
	if(cr.Param[ST_SLOW] > 0)
		cr.ParamBase[ST_SLOW] -= 1;
	if(cr.Param[ARMOR_WEAKER] > 0 && Random(1,2)==2)
		cr.ParamBase[ARMOR_WEAKER] -= 1;
	if(cr.Param[PE_MUTANT]>0)
	cr.ParamBase[ST_WALK_TIME]=350-cr.Param[ST_ENDURANCE];	//Formula
	//LEADER BONUS, Values are in DLL
	cr.ParamBase[ST_LEADER_BONUS] = 0;
	cr.ParamBase[ST_LEADERS] = 0;
	
	
	
	
	
	
	if(cr.IsPlayer() && cr.Param[ST_TEAM_ID] > 1 &&  cr.Param[ST_NPC_ROLE] < 2 )
	{
	array<Item@> items;
	uint n = map.GetItems(9200 + cr.Param[ST_TEAM_ID], items);
	if(n==0) return;
	if(valid(items[0]))
	{
	for(uint i = 0; i < n; i++)
	{
	if(items[i].Val8 == cr.Param[ST_TEAM_ID])
		{
		cr.ParamBase[ST_LEADER_BONUS] = items[i].Val9;
		cr.ParamBase[ST_LEADERS] = n;
		}
	}
	
	}
	if(!valid(items[0]))
	{
	cr.ParamBase[ST_LEADER_BONUS] = 0;
	cr.ParamBase[ST_LEADERS] = 0;
	}
	}
	if(cr.IsPlayer() && cr.Param[ST_NPC_ROLE] > 1 )
	{
	array<Item@> items;
	uint n = map.GetItems(9000 + cr.Param[ST_NPC_ROLE], items);
	if(n==0) return;
	if(valid(items[0]))
	{
	for(uint i = 0; i < n; i++)
	{
	if(items[i].Val6 == cr.Param[ST_NPC_ROLE])
		{
		cr.ParamBase[ST_LEADER_BONUS] = items[i].Val9;
		cr.ParamBase[ST_LEADERS] = n;
		}
	}
	
	}
	if(!valid(items[0]))
	{
	cr.ParamBase[ST_LEADER_BONUS] = 0;
	cr.ParamBase[ST_LEADERS] = 0;
	}
	}
	}
	if(Random(1,100)<cr.ParamBase[ST_AGILITY])
		speedboost(cr);
}

void rollstats(Critter& player)
{
	if(Random(1,5)==1)
		{
		for(int i = 0; i < 9; i++)
			{
			player.ParamBase[PARAM_CLASS_1 + i] = Random(1,34);
			if(Random(1,25) < player.Param[ST_LUCK] && player.Param[PARAM_CLASS_1 + i]%2==0)
				player.ParamBase[PARAM_CLASS_1 + i]++;
				
			}
		player.Say(SAY_NETMSG, "You got a rolled");
		}
}

void summoner(Critter& cr)
{
	uint numMobs = cr.GetMap().GetNpcCount(ROLE_MOB_DYNAMIC, FIND_ONLY_NPC | FIND_LIFE);
	if(numMobs>19)
	return;
	CallMobs(cr, Random(1,3), cr.Param[ST_SUMMONER], Random(1,3)); 

}

#endif