

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           

shared interface IPolygon
{
	IPolygon@AddVertex(uint16 x,uint16 y);
	IPolygon@AddVertices(array<uint16>&hexes);   
	
	bool IsWithin(Critter&cr);
	bool IsWithin(Item&item);  
	
	bool IsWithin(uint16 x,uint16 y);
};  

import IPolygon@NewPolygon()from"polygon"; 

import IPolygon@LoadShapeFromEntires(Map&map,uint first,uint last)from"polygon";                 

import bool AddMilitia(Map@map)from"town";
import void InitMilitia()from"town";
import bool IsTCTown(Map@map)from"town";
import uint RetrieveTownId(Map@map)from"town";
import uint RetrieveTownId(Critter&critter)from"town";
import ITown@RetrieveTown(Critter&critter)from"town";
import bool ValidTown(ITown@town)from"town";
import void GainControl(Critter&player)from"town";
import uint GetNearMembers(Critter&player)from"town";
import bool IsPolicy(Critter&player,uint policy)from"town";
import bool IsControllingTown(Critter&player)from"town";
import bool AlertMilitia(Critter&cr)from"town";
import int SelectBag(uint crpid)from"town";
import void SpawnInitMilitia(Map@map)from"town";
import int CountMilitia(Map@map)from"town";
import void ClearInfluenceBuffer(Critter&cr)from"town";  

class PresenceStruct
{
	uint factionId;
	uint count;
	PresenceStruct(uint factionId)
	{
		this.factionId=factionId;
		this.count=1;
	}
};

shared interface ITown
{
	ITown@SetMapID(uint id);
	ITown@SetTownID(uint id);
	ITown@SetBaseRewardValue(uint value);
	ITown@SetInfluenceMemberRequirement(uint number);
	ITown@SetNearbyMemberRequirement(uint number);
	ITown@SetTotalMemberRequirement(uint number);
	ITown@SetLimboContainer(Item@container);
	ITown@SetRewardContainer(Item@container);
	ITown@SetTownLeader(Critter@leader);
	ITown@SetSpeechModifier(int modifier);
	ITown@SetHour(uint hour);
	ITown@SetCaptureArea(IPolygon@capturearea);
	ITown@SetMilitiaEnabled();
	ITown@SetRewardStartCaps(uint caps);
	ITown@SetVersion(uint version);
	
	uint GetVersion();
	
	uint GetTownID();
	string GetTownName();
	bool LoadData();
	bool SaveData();
	bool IsMilitiaEnabled();
	bool IsFriendlyFaction(uint factionid);
	bool IsFriend(Critter&cr);
	bool IsValidCaptor(Critter&cr);
	bool IsWithinCaptureArea(Critter&cr);
	void AreaCheck();
	bool AddFriendlyFaction(uint factionid);
	bool RemoveFriendlyFaction(uint factionid);
	array<uint>GetFriendlyFactions();
	float GetControllingInfluence();
	uint GetMilitiaMax();
	uint GetControllingFaction();
	uint GetNumberOfKilledNPCs();
	uint GetControlCycles();
	uint GetStatus();
	void SetStatus(uint status);
	void SetScore();
	void SetPreviousFaction(uint previous);
	uint GetlastSecond();
	void SetlastSecond(uint sec);
	uint GetAreaCount();
	uint GetCountdown();
	void SetCountdownStatus(bool enabled);
	bool GetCountdownStatus();
	void SendCountdownTime(Critter&player);
	uint GetMemberNearbyRequirement();
	uint GetMemberTotalRequirement();
	Item@GetLimboContainer();
	Item@GetRewardContainer();
	uint GetTownLeaderId();
	uint GetMapID();
	int GetSpeechModifier();
	bool GainControl(Critter&player);
	void IncreaseNPCDeath(uint num);
	void ModifyInfluence(uint factionId,float value);
	void SetInfluence(uint factionId,float value);
	void ResetStats();
	void ResetControl();
	void RevertControl();
	void ClearRewardContainer();
	void ClearLimboContainer();
	void ClearContainers();
	void Update(uint hour,uint minute);
	void UpdateCountdown();
	void UpdateTick();
	void TownCheck();
	
	bool IsLaw(uint law);
	void SetLaw(uint law,bool enabled);
	
	void AddMoney(int money);
	int GetMoney(); 
	
	float GetInfluence(uint faction);
	
	Location@GetLocation();
};           

uint16[]klamath_we_area_v=
{
	10000,10000,
	10000,20000,
	20000,20000,
	20000,30000,
	40000,30000,
	40000,20000,
	30000,20000,
	20000,25000,
	10000,20000
}; 

uint16[]modoc_area_v=
{
	214,217,
	107,217,
	107,126,
	70,126,
	70,90,
	93,90,
	93,71,
	145,71,
	214,174
}; 

uint16[]redding_area_v=
{
	130,140,
	130,155,
	172,155,
	172,183,
	170,183,
	170,197,
	172,197,
	172,217,
	148,217,
	148,230,
	106,230,
	106,147,
	64,147,
	64,60,
	135,60,
	135,97,
	155,97,
	155,140
};

uint16[]klamath_area_v=
{
	289,161,
	319,161,
	394,275,
	294,275,
	294,262,
	266,262,
	266,237,
	246,237,
	246,226,
	127,226,
	127,156,
	191,156,
	191,191,
	241,191,
	241,149,
	249,149,
	249,164,
	261,164,
	261,157,
	257,157,
	257,150,
	283,150,
	283,152,
	289,152
	
};

uint16[]den_area_v=
{
	40,100,
	125,100,
	125,70,
	210,70,
	210,130,
	195,130,
	195,210,
	125,210,
	125,188,
	40,188
}; 

uint16[]bh_area_v=
{
	258,147,
	287,147,
	288,171,
	340,171,
	340,203,
	262,203,
	262,235,
	226,235,
	226,210,
	120,210,
	120,173,
	76,173,
	76,153,
	181,153,
	181,155,
	200,155,
	200,143,
	210,143,
	210,117,
	240,117,
	246,122,
	258,122
}; 

uint16[]gecko_area_v=
{
	236,135,
	236,155,
	282,155,
	282,203,
	282,313,
	223,313,
	223,278,
	226,278,
	226,255,
	242,255,
	242,223,
	236,223,
	235,203,
	220,203,
	220,201,
	216,201,
	216,197,
	207,197,
	208,189,
	204,189,
	204,135
};

uint16[]necro_area_v=
{
	212,80,
	214,80,
	214,117,
	166,117,
	166,153,
	138,153,
	138,149,
	128,149,
	128,155,
	102,155,
	102,165,
	78,165,
	78,139,
	54,139,
	54,97,
	150,97,
	150,81,
	164,81,
	164,68,
	212,68
	
};

uint16[]reno_area_v=
{
	212,80,
	214,80,
	214,117,
	166,117,
	166,153,
	138,153,
	138,149,
	128,149,
	128,155,
	102,155,
	102,165,
	78,165,
	78,139,
	54,139,
	54,97,
	150,97,
	150,81,
	164,81,
	164,68,
	212,68
};  

array<ITown@>Towns;

import ITown@CreateTown(string Name)from"town";

ITown@GetTownByIndex(uint index)
{
	return Towns[index];
}

ITown@GetTown(uint id)
{
	for(uint i=0;i<Towns.length();i++)
	{
		if(id==Towns[i].GetTownID())
		{
			return Towns[i];
		}
	}
	return null;
}

uint GetTownCount()
{
	return Towns.length();
}

void AddTown(ITown&town)
{
	Towns.insertLast(town);
}

uint GetTowns(array<ITown@>@towns)
{
	for(uint i=0,j=Towns.length();i<j;i++)
	{
		towns.insertLast(Towns[i]);
	}
	return Towns.length();
}

bool VerifyMaps(array<Map@>&maps)
{
	for(uint i=0;i<maps.length();i++)
	if(!(@maps[i]!=null))
	return false;
	return true;
}

void InitTowns()
{
	Map@map_modoc=GetMapByPid((18),0);
	Map@map_klamath=GetMapByPid((9),0);
	Map@map_broken=GetMapByPid((115),0);
	Map@map_redding=GetMapByPid((62),0);
	Map@map_den=GetMapByPid((6),0);
	Map@map_gecko=GetMapByPid((31),0);
	Map@map_necro=GetMapByPid((141),0); 
	
	Map@[]maps={map_modoc,map_klamath,map_broken,map_redding,map_den,map_gecko,map_necro};
	
	if(!VerifyMaps(maps))
	{
		Log("Error while finding TC maps, the TC system in some towns may fail to work properly");
	}
	
	uint16 rx,ry,lx,ly;
	rx=ry=lx=ly=0;
	map_modoc.GetEntireCoords(180,0,rx,ry);
	map_modoc.GetEntireCoords(181,0,lx,ly);  
	
	IPolygon@modoc_area=NewPolygon();
	modoc_area.AddVertices(modoc_area_v);
	ITown@Modoc=CreateTown("Modoc");Modoc.SetMapID(map_modoc.Id)
	.SetTownID(1)
	.SetBaseRewardValue(9)      
	
	.SetNearbyMemberRequirement(1)
	.SetTotalMemberRequirement(1)
	.SetInfluenceMemberRequirement(99)
	
	.SetSpeechModifier(0)
	.SetLimboContainer(map_modoc.GetItem(lx,ly,(128)))
	.SetRewardContainer(map_modoc.GetItem(rx,ry,(130)))
	.SetHour(21)
	.SetCaptureArea(modoc_area)
	.SetRewardStartCaps(900)
	.SetVersion((0))
	.SetMilitiaEnabled()
	;AddTown(Modoc); 
	
	map_klamath.GetEntireCoords(180,0,rx,ry);
	map_klamath.GetEntireCoords(181,0,lx,ly);
	
	IPolygon@klamath_area=NewPolygon();
	klamath_area.AddVertices(klamath_area_v);
	ITown@Klamath=CreateTown("Klamath");Klamath.SetMapID(map_klamath.Id)
	.SetTownID(2)
	.SetBaseRewardValue(9)     
	
	.SetNearbyMemberRequirement(1)
	.SetTotalMemberRequirement(1)
	
	.SetSpeechModifier(0)
	.SetLimboContainer(map_klamath.GetItem(lx,ly,(128)))
	.SetRewardContainer(map_klamath.GetItem(rx,ry,(128)))
	.SetHour(20)
	.SetCaptureArea(klamath_area)
	.SetRewardStartCaps(1350)
	.SetInfluenceMemberRequirement(99)
	.SetVersion((0))
	.SetMilitiaEnabled()
	;AddTown(Klamath); 
	
	map_gecko.GetEntireCoords(180,0,rx,ry);
	map_gecko.GetEntireCoords(181,0,lx,ly);
	
	IPolygon@gecko_area=NewPolygon();
	gecko_area.AddVertices(gecko_area_v);
	ITown@Gecko=CreateTown("Gecko");Gecko.SetMapID(map_gecko.Id)
	.SetTownID(3)
	.SetBaseRewardValue(9)     
	
	.SetNearbyMemberRequirement(1)
	.SetTotalMemberRequirement(1)
	
	.SetSpeechModifier(0)
	.SetLimboContainer(map_gecko.GetItem(lx,ly,(128)))
	.SetRewardContainer(map_gecko.GetItem(rx,ry,(130)))
	.SetHour(10)
	.SetCaptureArea(gecko_area)
	
	.SetRewardStartCaps(1500)
	.SetInfluenceMemberRequirement(99)
	.SetVersion((0))
	.SetMilitiaEnabled()
	;AddTown(Gecko); 
	
	map_broken.GetEntireCoords(180,0,rx,ry);
	map_broken.GetEntireCoords(181,0,lx,ly);
	
	IPolygon@bh_area=NewPolygon();
	bh_area.AddVertices(bh_area_v);
	ITown@Broken=CreateTown("Broken Hills");Broken.SetMapID(map_broken.Id)
	.SetTownID(4)
	.SetBaseRewardValue(11)     
	
	.SetNearbyMemberRequirement(1)
	.SetTotalMemberRequirement(1)
	
	.SetSpeechModifier(0)
	.SetLimboContainer(map_broken.GetItem(lx,ly,(128)))
	.SetRewardContainer(map_broken.GetItem(rx,ry,(130)))
	.SetHour(22)
	.SetCaptureArea(bh_area)
	.SetRewardStartCaps(2000)
	.SetInfluenceMemberRequirement(99)
	.SetVersion((0))
	.SetMilitiaEnabled()
	;AddTown(Broken); 
	
	map_den.GetEntireCoords(180,0,rx,ry);
	map_den.GetEntireCoords(181,0,lx,ly);
	
	IPolygon@den_area=NewPolygon();
	den_area.AddVertices(den_area_v);
	ITown@Den=CreateTown("Den");Den.SetMapID(map_den.Id)
	.SetTownID(5)
	.SetBaseRewardValue(9)     
	
	.SetNearbyMemberRequirement(1)
	.SetTotalMemberRequirement(1)
	
	.SetSpeechModifier(0)
	.SetLimboContainer(map_den.GetItem(lx,ly,(128)))
	.SetRewardContainer(map_den.GetItem(rx,ry,(128)))
	.SetHour(22)
	.SetCaptureArea(den_area)
	.SetRewardStartCaps(1500)
	.SetInfluenceMemberRequirement(99)
	.SetVersion((0))
	.SetMilitiaEnabled()
	;AddTown(Den); 
	
	map_redding.GetEntireCoords(180,0,rx,ry);
	map_redding.GetEntireCoords(181,0,lx,ly);
	
	IPolygon@redding_area=NewPolygon();
	redding_area.AddVertices(redding_area_v);
	ITown@Redding=CreateTown("Redding");Redding.SetMapID(map_redding.Id)
	.SetTownID(6)
	.SetBaseRewardValue(11)     
	
	.SetNearbyMemberRequirement(1)
	.SetTotalMemberRequirement(1)
	
	.SetSpeechModifier(0)
	.SetLimboContainer(map_redding.GetItem(lx,ly,(128)))
	.SetRewardContainer(map_redding.GetItem(rx,ry,(130)))
	.SetHour(21)
	.SetCaptureArea(redding_area)
	.SetRewardStartCaps(1700)
	.SetInfluenceMemberRequirement(99)
	.SetVersion((0))
	.SetMilitiaEnabled()
	;AddTown(Redding);
	
	map_necro.GetEntireCoords(180,0,rx,ry);
	map_necro.GetEntireCoords(181,0,lx,ly);
	
	IPolygon@necro_area=NewPolygon();
	necro_area.AddVertices(necro_area_v);
	ITown@Necropolis=CreateTown("Necropolis");Necropolis.SetMapID(map_necro.Id)
	.SetTownID(7)
	.SetBaseRewardValue(11)     
	
	.SetNearbyMemberRequirement(1)
	.SetTotalMemberRequirement(1)
	
	.SetSpeechModifier(0)
	.SetLimboContainer(map_necro.GetItem(lx,ly,(128)))
	.SetRewardContainer(map_necro.GetItem(rx,ry,(130)))
	.SetHour(0)
	.SetCaptureArea(necro_area)
	.SetRewardStartCaps(1700)
	.SetInfluenceMemberRequirement(99)
	.SetVersion((0))
	.SetMilitiaEnabled()
	;AddTown(Necropolis);                         
	
	for(uint i=0;i<Towns.length();i++)
	{
		Towns[i].SetScore();
	}
	
	InitMilitia();
}

