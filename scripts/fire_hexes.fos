
#include "_macros.fos"
#include "_colors.fos"

#define MAX_STEP               ( Random(1,5) )
#define MAX_NAPALM_STEP		   ( 1 )
#define MAX_NAPALM_BALL_STEP   ( 2 )
#define NAPALM_FIRE_TIME	   ( (REAL_SECOND(5)) )
#define RND                    # ( v1, v2 )( Random( v1, v2 ) == 1 )
#define BURN_DAMAGE			   ( Random(4,9) )
#define FIRE_STEP_ON		   ( Random(4,9) )
#define TIME_FOR_RT            (1000) // for adjust in miliseconds
#define TIME_FOR_TB            (2000) // for adjust in miliseconds
#define MAX_BURN_STACK         (10) //for adjust, default 12
#define MAX_BURN_DURATION      (8) //for adjust, default 3
#define ADD_BURN_STACK         (1) //for adjust, default 4

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId) from "combat";
import void InjureCritter(Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId, Item@ realWeapon) from "combat";
import void AffectBurn(Critter& cr, int value) from "combat";
//import uint cte_Burn(Critter& cr, int identifier, uint& rate) from "combat";
//import uint GetBurnDuration(Critter& cr) from "combat";
//import void ApplyDamage(AttackStruct &attack, Critter &target, uint rounds, bool isCritical, bool intentionally, CombatRes[]& results) from "combat";

void MolotovBlast( Map& map, uint16 hexX, uint16 hexY, uint16 firePid, uint ownerId )
{
    uint[] values = { map.Id, hexX, hexY, 0, firePid, ownerId };
    CreateTimeEvent( __FullSecond, "e_MolotovBlast", values, false );
	map.PlaySound( "molotov.wav", hexX, hexY, 25 );
}

void NapalmBlast( Map& map, uint16 hexX, uint16 hexY, uint16 firePid, uint ownerId )
{
    uint[] values = { map.Id, hexX, hexY, 0, firePid, ownerId };
    CreateTimeEvent( __FullSecond, "e_NapalmBlast", values, false );
}

void NapalmBall( Map& map, uint16 hexX, uint16 hexY, uint16 firePid, uint ownerId )
{
    uint[] values = { map.Id, hexX, hexY, 0, firePid, ownerId };
    CreateTimeEvent( __FullSecond, "e_NapalmBall", values, false );
}

uint e_MolotovBlast( uint[] @ values )
{
    Map@   map = GetMap( values[ 0 ] );
	if(!valid(map)) return 0;
    uint16 hexX = values[ 1 ];
    uint16 hexY = values[ 2 ];
    uint8  step = values[ 3 ];
    uint16 pid = values[ 4 ];
    uint   ownerId = values[ 5 ];
    uint   penaltyLowSkill = 0;
    if( step > ( MAX_STEP - penaltyLowSkill ) )
        return 0;
    uint[] fireIds;
	
    AddFire( map, hexX, hexY, ( step == 0 || ( step < 2 && RND( 1, 2 ) ) ), pid, ownerId, fireIds );

    for( uint curStep = 1; curStep < step; curStep++ )
    {
        hexX = values[ 1 ];
        hexY = values[ 2 ];
        map.MoveHexByDir( hexX, hexY, 4, curStep );
        for( uint i = 0; i < 6; i++ )
        {
            for( uint j = 0; j < curStep; j++ )
            {
                map.MoveHexByDir( hexX, hexY, i, 1 );
                AddFire( map, hexX, hexY, ( curStep + 2 > step ) || ( ( curStep + 3 > step ) && RND( 1, 2 ) ) || RND( 1, 3 ), pid, ownerId, fireIds );
            }
        }
    }
    if( fireIds.length() > 0 )
        CreateTimeEvent( __FullSecond + uint( REAL_SECOND( Random( 1, 2 ) ) * ( 12 - step ) * ( 5 - penaltyLowSkill ) / 5 ), "e_DeleteFire", fireIds, true );
    values[ 3 ]++;
    return 2;
}

uint e_NapalmBlast( uint[] @ values )
{
    Map@   map = GetMap( values[ 0 ] );
    uint16 hexX = values[ 1 ];
    uint16 hexY = values[ 2 ];
    uint8  step = values[ 3 ];
    uint16 pid = values[ 4 ];
    uint   ownerId = values[ 5 ];
    uint   penaltyLowSkill = 0;
    if( step > ( MAX_NAPALM_STEP - penaltyLowSkill ) )
        return 0;
    uint[] fireIds;
    AddFire( map, hexX, hexY, ( step == 0 || ( step < 2 && RND( 1, 2 ) ) ), pid, ownerId, fireIds );

    for( uint curStep = 1; curStep < step; curStep++ )
    {
        hexX = values[ 1 ];
        hexY = values[ 2 ];
        map.MoveHexByDir( hexX, hexY, 4, curStep );
        for( uint i = 0; i < 6; i++ )
        {
            for( uint j = 0; j < curStep; j++ )
            {
                map.MoveHexByDir( hexX, hexY, i, 1 );
                AddFire( map, hexX, hexY, ( curStep + 2 > step ) || ( ( curStep + 3 > step ) && RND( 1, 2 ) ) || RND( 1, 3 ), pid, ownerId, fireIds );
            }
        }
    }
    if( fireIds.length() > 0 )
        CreateTimeEvent( __FullSecond + NAPALM_FIRE_TIME, "e_DeleteFire", fireIds, true );
    values[ 3 ]++;
    return 2;
}

uint e_NapalmBall( uint[] @ values )
{
    Map@   map = GetMap( values[ 0 ] );
    uint16 hexX = values[ 1 ];
    uint16 hexY = values[ 2 ];
    uint8  step = values[ 3 ];
    uint16 pid = values[ 4 ];
    uint   ownerId = values[ 5 ];
    uint   penaltyLowSkill = 0;
    if( step > ( MAX_NAPALM_BALL_STEP - penaltyLowSkill ) )
        return 0;
    uint[] fireIds;
    AddFire( map, hexX, hexY, ( step == 0 || ( step < 2 && RND( 1, 2 ) ) ), pid, ownerId, fireIds );

    for( uint curStep = 1; curStep < step; curStep++ )
    {
        hexX = values[ 1 ];
        hexY = values[ 2 ];
        map.MoveHexByDir( hexX, hexY, 4, curStep );
        for( uint i = 0; i < 6; i++ )
        {
            for( uint j = 0; j < curStep; j++ )
            {
                map.MoveHexByDir( hexX, hexY, i, 1 );
                AddFire( map, hexX, hexY, ( curStep + 2 > step ) || ( ( curStep + 3 > step ) && RND( 1, 2 ) ) || RND( 1, 3 ), pid, ownerId, fireIds );
            }
        }
    }
    if( fireIds.length() > 0 )
        CreateTimeEvent( __FullSecond + NAPALM_FIRE_TIME, "e_DeleteFire", fireIds, true );
    values[ 3 ]++;
    return 2;
}

uint e_DeleteFire( uint[] @ values )
{
    for( uint i = 0, l = values.length(); i < l; i++ )
    {
        if( values[ i ] == 0 )
            continue;
        Item@ item = GetItem( values[ Random(i,l - 1) ] );
        if( valid( item ) )
			{
			CreateTimeEvent( __FullSecond + REAL_MS(500), "e_DeleteFire", values, true );
            DeleteItem( item );
			break;
			}
		else
		{
		if( values[ i ] == 0 )
            continue;
        Item@ item2 = GetItem( values[ i ] );
        if( valid( item2 ) )
			{
            DeleteItem( item2 );
			}
		
		}
    }
    return 0;
}

void _FireInit( Item& item, bool firstTime )
{
    if( !firstTime )
        DeleteItem( item );
    else
    {
        SETFLAG( item.Flags, ITEM_NO_BLOCK );
        SETFLAG( item.Flags, ITEM_SHOOT_THRU );
		Map@ map = GetMap(item.MapId);
		
		array<Item@> fireplaces;
		map.GetItems(item.HexX, item.HexY, fireplaces);
		
		for(uint16 i = 0; i < fireplaces.length(); i++)
		{
			if(valid(fireplaces[i]))
				if(fireplaces[i].GetProtoId() == PID_FIRE_HEX && fireplaces[i].Id != item.Id)
					DeleteItem(fireplaces[i]);
		}
		
		/*if(map.IsTurnBased() && item.GetProtoId() == PID_FIRE_HEX )
        {
            item.SetEvent( ITEM_EVENT_WALK, "_FireHexWalk" );
        }
		if(!map.IsTurnBased() && item.GetProtoId() == PID_FIRE_HEX )
		{*/
			item.SetEvent( ITEM_EVENT_WALK, "_FireHexWalk" );
			array<uint> firedata = { item.Id, map.Id };
			CreateTimeEvent(AFTER(0), "e_FireHexWalk", firedata, false);
		//}
		
    }
}

uint e_FireHexWalk(array<uint>@ values)
{
	Item@ fire = GetItem(values[0]);
	if(!valid(fire))
		return 0;
		
	Map@ map = GetMap(values[1]);
	if(!valid(map))
		return 0;

	array<Critter@> burnedCritters;
	uint16 hexX = fire.HexX, hexY = fire.HexY;
	uint8 countcrit;
	countcrit = map.GetCrittersHex(hexX, hexY, 0, FIND_LIFE_AND_KO, burnedCritters);
	int damage = FIRE_STEP_ON;
	Critter@ cr = GetCritter(fire.Val0);
	if(cr.Param[PE_PYROMANIAC] > 0)
	damage += 7 * cr.Param[PE_PYROMANIAC];
	if(cr.Param[PE_DRAGON2] > 1)
		damage += 7;
	for(uint8 i = 0; i < countcrit; i++)
		if(valid(burnedCritters[i]))
			//_FireHexWalk(fire, burnedCritters[i], true, 0);
		
		{
			if( burnedCritters[i].IsPlayer())
			{	
				if(burnedCritters[i].Param[ST_CURRENT_HP] > -10)
					burnedCritters[i].ParamBase[ST_CURRENT_HP] -= damage;
				burnedCritters[i].ParamBase[ST_BURN_LAST_ENEMY_ID]=NPC_DAMAGE;
				burnedCritters[i].AddTimeEvent("cte_Burn",GetBurnDuration(burnedCritters[i]),CTE_BURN);
				if((burnedCritters[i].ParamBase[ST_BURN_STACK]>MAX_BURN_STACK)) burnedCritters[i].ParamBase[ST_BURN_STACK]=MAX_BURN_STACK;
				else burnedCritters[i].ParamBase[ST_BURN_STACK]+=ADD_BURN_STACK;
				//burnedCritters[i].RunClientScript("_FlushScreen",int(COLOR_LRED2),0,int(50),null,null);
			}
			else
			{
				if( burnedCritters[i].Param[ MODE_INVULNERABLE ] == 0 )
				{
					if(burnedCritters[i].Param[ST_CURRENT_HP] > -10)
						burnedCritters[i].ParamBase[ST_CURRENT_HP] -= damage;
					burnedCritters[i].AddTimeEvent("cte_Burn",GetBurnDuration(burnedCritters[i]),CTE_POISON);
					burnedCritters[i].ParamBase[ST_BURN_LAST_ENEMY_ID]=NPC_DAMAGE;
					if((burnedCritters[i].ParamBase[ST_BURN_STACK]>MAX_BURN_STACK)) burnedCritters[i].ParamBase[ST_BURN_STACK]=MAX_BURN_STACK;
					else burnedCritters[i].ParamBase[ST_BURN_STACK]+=ADD_BURN_STACK;
				}
			}
		}
		
	if(map.IsTurnBased())
		return REAL_MS(TIME_FOR_TB);
	else
		return REAL_MS(TIME_FOR_RT);
}

void _FireHexWalk( Item& mine, Critter& cr, bool entered, uint8 dir )
{
	int damage = FIRE_STEP_ON;
	Critter@ cr2 = GetCritter(mine.Val0);
	if(cr2.Param[PE_PYROMANIAC] > 0)
	damage += 7 * cr2.Param[PE_PYROMANIAC];
	if(cr2.Param[PE_DRAGON2] > 1)
		damage += 7;
    if( entered )
    {
        if(cr.ParamBase[ST_BURN_STACK]!=0) return; //
		
		if( cr.IsPlayer())
		{	
			if(cr.Param[ST_CURRENT_HP] > -10)
						cr.ParamBase[ST_CURRENT_HP] -= damage;
			cr.ParamBase[ST_BURN_LAST_ENEMY_ID]=0;
			cr.AddTimeEvent("cte_Burn",GetBurnDuration(cr),CTE_BURN);
			if((cr.ParamBase[ST_BURN_STACK]>MAX_BURN_STACK)) cr.ParamBase[ST_BURN_STACK]=MAX_BURN_STACK;
			else cr.ParamBase[ST_BURN_STACK]+=ADD_BURN_STACK;
			//cr.RunClientScript("_FlushScreen",int(COLOR_LRED2),0,int(50),null,null);
        }
		else
        {
            if( cr.Param[ MODE_INVULNERABLE ] == 0 )
			{
            if(cr.Param[ST_CURRENT_HP] > -10)
						cr.ParamBase[ST_CURRENT_HP] -= damage;
			cr.AddTimeEvent("cte_Burn",GetBurnDuration(cr),CTE_POISON);
			cr.ParamBase[ST_BURN_LAST_ENEMY_ID]=mine.Val0;
			if((cr.ParamBase[ST_BURN_STACK]>MAX_BURN_STACK)) cr.ParamBase[ST_BURN_STACK]=MAX_BURN_STACK;
			else cr.ParamBase[ST_BURN_STACK]+=ADD_BURN_STACK;
			
			}
        }
    }
}

void AddFire( Map@ map, uint16 hexX, uint16 hexY, bool place, int16 pid, int ownerId, uint[]& ids )
{
    if( valid( map ) && place && ( map.IsHexPassed( hexX, hexY ) || valid( map.GetCritter( hexX, hexY ) ) ) )
    {
        Item@ item = map.AddItem( hexX, hexY, pid, 1 );
        if( valid( item ) )
        {
            item.Val0 = ownerId;
            ids.insertLast( item.Id );
            item.SetScript( "_FireInit" );
        }
    }
}

void MolotovBlast( Critter& cr, int pid, int, int )
{
    MolotovBlast( cr.GetMap(), cr.HexX, cr.HexY, uint16( pid ), cr.Id );
}

uint cte_Burn(Critter& cr, int identifier, uint& rate)
{
    if(cr.IsDead()) cr.ParamBase[ST_BURN_STACK]=0;
    int count=cr.Param[ST_BURN_STACK];
    cr.ParamBase[ST_BURN_STACK]=CLAMP(count,0,MAX_BURN_STACK);
	Critter@ attacker = GetCritter(cr.Param[ST_BURN_LAST_ENEMY_ID]);
	uint damage = BURN_DAMAGE;
	if(attacker.Param[PE_PYROMANIAC] > 0)
		damage += 3 * attacker.Param[PE_PYROMANIAC];
	if(attacker.Param[PE_DRAGON2] > 1)
		damage += 3;
    count=cr.Param[ST_BURN_STACK];
    if(count > 0)
    {
        if(cr.Param[ST_CURRENT_HP] > -10)
						cr.ParamBase[ST_CURRENT_HP] -= damage;
        cr.ParamBase[ST_BURN_STACK]-=1;
        if(cr.Param[ST_CURRENT_HP]<=-19) cr.ToDead(ANIM2_DEAD_BURN,null);
    }
    return GetBurnDuration(cr);
}

uint GetBurnDuration(Critter& cr)
{
	int duration;
	int count=cr.Param[ST_BURN_STACK];
	if(count==0) return 0;
	duration=count*MAX_BURN_DURATION;
	if(duration<=0) cr.EraseTimeEvents(CTE_BURN);
	return duration;
}