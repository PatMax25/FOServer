

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                                                                                                                                                                      

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
}

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";                                                                                                                                                        

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}   

import bool ReversableItem(Item&item)from"fix_boy";
import bool ReverseItem(Critter&cr,Item&item)from"fix_boy";
import bool TryRepairItemCall(Critter&cr,Item@item,Item@withItem)from"repair";                                                   

void r_ResetRepValues(Critter&player,Critter@npc)
{
	SetDefaultRepair(npc);
}

void r_ResetDisValues(Critter&player,Critter@npc)
{
	SetDefaultDissassemble(npc);
}

void r_SetValue(Critter&player,Critter@npc,int value)
{
	SetLvar(player,(3029),value);
}

uint r_SetValueBack(Critter&player,Critter@npc)
{
	int parameter=GetLvar(player,(3029));
	return parameter/10;
}

void r_TurnOn(Critter&player,Critter@npc)
{
	TurnOn(npc);
}

void r_TurnOff(Critter&player,Critter@npc)
{
	TurnOff(npc);
}

void r_Activate(Critter&player,Critter@npc)
{
	Activate(npc);
}

void r_Barter(Critter&player,Critter@npc)
{
	
}

void r_Deactivate(Critter&player,Critter@npc)
{
	Deactivate(npc);
}

void dlg_RepConf(Critter&player,Critter@npc,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		if(((npc.ParamBase[(92)]&(~0x3FFFFFFF))==0))
		{
			say="$repconfRepair randomly";
		}
		else if(((npc.ParamBase[(92)]&(~0x3FFFFFFF))==0x40000000))
		{
			say="$repconfRepair items with better condition with items in worse condition";
		}
		else if(((npc.ParamBase[(92)]&(~0x3FFFFFFF))==0x80000000))
		{
			say="$repconfRepair items with condition from "+((npc.ParamBase[(91)])&(0x7F))+"/"+((npc.ParamBase[(91)]>>7)&(0x7F))+" to "+((npc.ParamBase[(91)]>>14)&(0x7F))+"/"+((npc.ParamBase[(91)]>>21)&(0x7F));
			say+="by items with condition from "+((npc.ParamBase[(92)])&(0x7F))+"/"+((npc.ParamBase[(92)]>>7)&(0x7F))+" to "+((npc.ParamBase[(92)]>>14)&(0x7F))+"/"+((npc.ParamBase[(92)]>>21)&(0x7F));
		}
	}
}

void dlg_ItemDefinitionRepair(Critter&player,Critter@npc,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		say="$itemrepRepair items with condition from "+((npc.ParamBase[(91)])&(0x7F))+"/"+((npc.ParamBase[(91)]>>7)&(0x7F))+" to "+((npc.ParamBase[(91)]>>14)&(0x7F))+"/"+((npc.ParamBase[(91)]>>21)&(0x7F));
		say+="$itemresby items with condition from "+((npc.ParamBase[(92)])&(0x7F))+"/"+((npc.ParamBase[(92)]>>7)&(0x7F))+" to "+((npc.ParamBase[(92)]>>14)&(0x7F))+"/"+((npc.ParamBase[(92)]>>21)&(0x7F));
	}
}

void dlg_DisConf(Critter&player,Critter@npc,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		if(((npc.ParamBase[(93)]&(~0x3FFFFFFF))==0))
		{
			say="$disconfDissassemble: All items";
		}
		else if(((npc.ParamBase[(93)]&(~0x3FFFFFFF))==0x40000000))
		{
			say="$disconfDissassemble: Items beyond repair";
		}
		else if(((npc.ParamBase[(93)]&(~0x3FFFFFFF))==0x80000000))
		{
			say="$disconfDissassemble: Items with condition from "+((npc.ParamBase[(93)])&(0x7F))+"/"+((npc.ParamBase[(93)]>>7)&(0x7F))+" to "+((npc.ParamBase[(93)]>>14)&(0x7F))+"/"+((npc.ParamBase[(93)]>>21)&(0x7F));
		}
	}
}

void dlg_ItemDefinitionDis(Critter&player,Critter@npc,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		say="$itemdisItems with condition from "+((npc.ParamBase[(93)])&(0x7F))+"/"+((npc.ParamBase[(93)]>>7)&(0x7F))+" to "+((npc.ParamBase[(93)]>>14)&(0x7F))+"/"+((npc.ParamBase[(93)]>>21)&(0x7F));
	}
}

uint dlg_SetValue(Critter&player,Critter@npc,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		int parameter=GetLvar(player,(3029));
		if(parameter==41)
		say="$valueWrite value between 0 and 15:";
		else
		say="$valueWrite value between 0 and 100:";
	}
	else if(((@say!=null)&&say.length()>0))
	{
		int parameter=GetLvar(player,(3029));
		uint value=0;
		if(StrToInt(say,value))
		{
			
			switch(parameter)
			{
				case 41:
				if(value<0||value>120)
				return 0;
				(npc.ParamBase[(94)]=(npc.ParamBase[(94)]&(~(0x7F)))|((value&0x7F)));
				return 4;
				case 4141:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(91)]=(npc.ParamBase[(91)]&(~(0x7F<<14)))|((value&0x7F)<<14));
				return 414;
				case 4142:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(91)]=(npc.ParamBase[(91)]&(~(0x7F<<21)))|((value&0x7F)<<21));
				return 414;
				case 4143:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(91)]=(npc.ParamBase[(91)]&(~(0x7F)))|((value&0x7F)));
				return 414;
				case 4144:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(91)]=(npc.ParamBase[(91)]&(~(0x7F<<7)))|((value&0x7F)<<7));
				return 414;
				
				case 4151:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&(~(0x7F<<14)))|((value&0x7F)<<14));
				return 415;
				case 4152:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&(~(0x7F<<21)))|((value&0x7F)<<21));
				return 415;
				case 4153:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&(~(0x7F)))|((value&0x7F)));
				return 415;
				case 4154:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&(~(0x7F<<7)))|((value&0x7F)<<7));
				return 415;
				
				case 4161:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&(~(0x7F<<14)))|((value&0x7F)<<14));
				return 416;
				case 4162:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&(~(0x7F<<21)))|((value&0x7F)<<21));
				return 416;
				case 4163:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&(~(0x7F)))|((value&0x7F)));
				return 416;
				case 4164:
				if(value<0||value>100)
				return 0;
				(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&(~(0x7F<<7)))|((value&0x7F)<<7));
				return 416;
				
				default:
				Log("Error! wrong/unexpected parameter");
			}
		}
		else
		return 0;
	}
	return 0;
}

void dlg_MainMenu(Critter&player,Critter@npc,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		say="$powerpopopopower$modeMode$toolsTools";
		say+="$rangeRange: "+((npc.ParamBase[(94)])&(0x7F));
	}
}

void dlg_AttemptHack(Critter&player,Critter@npc,string@say)
{
	if(((@say!=null)&&say.length()==0))
	{
		say="$haxorThem hax.";
		bool success=true;
		if(success)
		{
			npc.ParamBase[(933)]=player.Id;
			npc.ParamBase[(103)]=npc.ParamBase[(933)];
		}
	}
}

void r_DisableDis(Critter&player,Critter@npc)
{
	(npc.ParamBase[(90)]=((npc.ParamBase[(90)])&(~((0x0004)))));
}
void r_EnableDis(Critter&player,Critter@npc)
{
	((npc.ParamBase[(90)])=(npc.ParamBase[(90)])|((0x0004)));
}
void r_DisableRep(Critter&player,Critter@npc)
{
	(npc.ParamBase[(90)]=((npc.ParamBase[(90)])&(~((0x0002)))));
}
void r_EnableRep(Critter&player,Critter@npc)
{
	((npc.ParamBase[(90)])=(npc.ParamBase[(90)])|((0x0002)));
}

void r_SetDissAdvanced(Critter&player,Critter@npc)
{
	(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&0x3FFFFFFF)|0x80000000);
}
void r_SetDissBeyond(Critter&player,Critter@npc)
{
	(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&0x3FFFFFFF)|0x40000000);
}
void r_SetDissAll(Critter&player,Critter@npc)
{
	(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&0x3FFFFFFF));
}

void r_SetRepAdvanced(Critter&player,Critter@npc)
{
	(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&0x3FFFFFFF)|0x80000000);
}
void r_SetRepPrimitive(Critter&player,Critter@npc)
{
	(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&0x3FFFFFFF)|0x40000000);
}
void r_SetRepRandom(Critter&player,Critter@npc)
{
	(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&0x3FFFFFFF));
}

bool d_DisDisabled(Critter&player,Critter@npc)
{
	return!(((npc.Param[(90)])&((0x0004)))!=0);
}
bool d_DisEnabled(Critter&player,Critter@npc)
{
	return(((npc.Param[(90)])&((0x0004)))!=0);
}
bool d_RepDisabled(Critter&player,Critter@npc)
{
	return!(((npc.Param[(90)])&((0x0002)))!=0);
}
bool d_RepEnabled(Critter&player,Critter@npc)
{
	return(((npc.Param[(90)])&((0x0002)))!=0);
}
bool d_IsOff(Critter&player,Critter@npc)
{
	return!(((npc.Param[(90)])&((0x0001)))!=0);
}
bool d_IsActive(Critter&player,Critter@npc)
{
	return(((npc.Param[(90)])&((0x0008)))!=0);
}
bool d_IsMaster(Critter&player,Critter@npc)
{
	return npc.Param[(933)]==int(player.Id);
}    

void spawnHandy(Critter&player,int p0,int p1,int p2)
{
	if(player.GetAccess()<(1))
	return;
	if(player.GetAccess()<(3))
	{
		player.Say((11),"You are not allowed to use this feature.");
		return;
	}
	Map@map=player.GetMap();
	if((@map!=null))
	{
		Critter@handy=map.AddNpc(74,player.HexX,player.HexY,3,null,null,"_HandyInit");
	}
}

void _HandyInit(Critter&handy,bool firstTime)
{
	handy.ParamBase[(103)]=handy.ParamBase[(933)];
	handy.ParamBase[(511)]=1;
	handy.ParamBase[(526)]=1;
	handy.ParamBase[(513)]=1;
	handy.ParamBase[(521)]=1;
	
	if(firstTime)
	{
		SetDefaultDissassemble(handy);
		SetDefaultRepair(handy);
		handy.ParamBase[(11)]=500000000;
		handy.ParamBase[(212)]=300;
		handy.ParamBase[(213)]=300;
	}
	
	if((((handy.Param[(90)])&((0x0001)))!=0))
	{
		TurnOn(handy);
	}
	else
	{
		TurnOff(handy);
	}
	handy.SetEvent((22),"_HandyUseSkill");
}

void TurnOn(Critter@handy)
{
	if((@handy!=null))
	{
		handy.SetAnims(0,0,0);
		handy.Animate(0,88,null,false,false);
		handy.ParamBase[(104)]=10152;
		((handy.ParamBase[(90)])=(handy.ParamBase[(90)])|((0x0001)));
		handy.ParamBase[(517)]=0;
		handy.ParamBase[(536)]=0;
		handy.ParamBase[(539)]=0;
		handy.ParamBase[(531)]=0;
		handy.ParamBase[(512)]=0;
		(handy.ParamBase[(534)]=((handy.ParamBase[(534)])&(~((0x00080000)))));
	}
}

void TurnOff(Critter@handy)
{
	if((@handy!=null))
	{
		handy.SetAnims(0,0,86);
		handy.Animate(0,82,null,false,false);
		handy.ParamBase[(104)]=0;
		(handy.ParamBase[(90)]=((handy.ParamBase[(90)])&(~((0x0001)))));
		handy.ParamBase[(517)]=1;
		handy.ParamBase[(536)]=1;
		handy.ParamBase[(539)]=1;
		handy.ParamBase[(531)]=1;
		handy.ParamBase[(512)]=1;
		((handy.ParamBase[(534)])=(handy.ParamBase[(534)])|((0x00080000)));
		
	}
}

void SetDefaultDissassemble(Critter@npc)
{
	if((@npc!=null))
	{
		(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&(~(0x7F)))|((0&0x7F)));
		(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&(~(0x7F<<7)))|((0&0x7F)<<7));
		(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&(~(0x7F<<14)))|((0&0x7F)<<14));
		(npc.ParamBase[(93)]=(npc.ParamBase[(93)]&(~(0x7F<<21)))|((0&0x7F)<<21));
	}
}

void SetDefaultRepair(Critter@npc)
{
	if((@npc!=null))
	{
		(npc.ParamBase[(91)]=(npc.ParamBase[(91)]&(~(0x7F)))|((0&0x7F)));
		(npc.ParamBase[(91)]=(npc.ParamBase[(91)]&(~(0x7F<<7)))|((50&0x7F)<<7));
		(npc.ParamBase[(91)]=(npc.ParamBase[(91)]&(~(0x7F<<14)))|((100&0x7F)<<14));
		(npc.ParamBase[(91)]=(npc.ParamBase[(91)]&(~(0x7F<<21)))|((100&0x7F)<<21));
		
		(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&(~(0x7F)))|((0&0x7F)));
		(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&(~(0x7F<<7)))|((0&0x7F)<<7));
		(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&(~(0x7F<<14)))|((49&0x7F)<<14));
		(npc.ParamBase[(92)]=(npc.ParamBase[(92)]&(~(0x7F<<21)))|((49&0x7F)<<21));
	}
} 

void _HandyIdle(Critter&handy)
{
	if(handy.Timeout[(238)]>0)
	{
		return;
	}
	
	if(TryDissassembleItem(handy))
	return;
	if(TryRepairItem(handy))
	return;
	
	Map@map=handy.GetMap();
	if((@map!=null))
	{
		array<Item@>items;
		uint count=map.GetItems(handy.HexX,handy.HexY,((handy.ParamBase[(94)])&(0x7F)),0,items);
		
		for(uint i=0;i<count;i++)
		{
			if((((items[i].Flags)&((0x08000000)))!=0))
			{
				if(!AddPickPlane(handy,0,items[i].HexX,items[i].HexY,items[i].GetProtoId(),0,false))
				break;
			}
		}
	}
}

bool TryRepairItem(Critter@handy)
{
	if(!(@handy!=null))
	return false;
	if(!(((handy.ParamBase[(90)])&((0x0002)))!=0))
	return false;
	
	uint rMod=0;
	array<Item@>invItems;
	uint count=handy.GetItems(0,invItems);
	if(((handy.ParamBase[(92)]&(~0x3FFFFFFF))==0))
	rMod=Random(0,count-1);
	for(uint i=0+rMod;i<(count+rMod);i++)
	{
		uint ind=i%count;
		if(invItems[ind].IsDeteriorable()&&!((((invItems[ind]).BrokenFlags)&((0x08)))!=0))
		{
			uint deter=(100-invItems[ind].Deterioration*100/(10000));
			uint deterMax=(100-invItems[ind].BrokenCount);
			if(((handy.ParamBase[(92)]&(~0x3FFFFFFF))==0x80000000))
			{
				if(!(((handy.ParamBase[(91)])&(0x7F))<=deter&&((handy.ParamBase[(91)]>>14)&(0x7F))>=deter&&
				((handy.ParamBase[(91)]>>7)&(0x7F))<=deterMax&&((handy.ParamBase[(91)]>>21)&(0x7F))>=deterMax)||deter==deterMax)
				continue;
			}
			
			array<Item@>resItems;
			uint count2=handy.GetItems(0,resItems);
			for(uint j=0;j<count2;j++)
			{
				if(resItems[j].GetProtoId()!=invItems[ind].GetProtoId())
				continue;
				if(resItems[j].Id==invItems[ind].Id)
				continue;
				if(((((resItems[j]).BrokenFlags)&((0x08)))!=0))
				continue;
				
				uint deter2=(100-resItems[j].Deterioration*100/(10000));
				uint deterMax2=(100-resItems[j].BrokenCount);
				if(((handy.ParamBase[(92)]&(~0x3FFFFFFF))==0))
				{
					if(TryRepairItemCall(handy,invItems[ind],resItems[j]))
					return true;
				}
				else if(((handy.ParamBase[(92)]&(~0x3FFFFFFF))==0x40000000))
				{
					if(deter>deter2)
					{
						if(deter==deterMax)
						break;
						if(TryRepairItemCall(handy,invItems[ind],resItems[j]))
						return true;
					}
					else
					{
						if(deter2==deterMax2)
						continue;
						if(TryRepairItemCall(handy,resItems[j],invItems[ind]))
						return true;
					}
				}
				else if(((handy.ParamBase[(92)]&(~0x3FFFFFFF))==0x80000000))
				{
					if(((handy.ParamBase[(92)])&(0x7F))<=deter2&&((handy.ParamBase[(92)]>>14)&(0x7F))>=deter2&&
					((handy.ParamBase[(92)]>>7)&(0x7F))<=deterMax2&&((handy.ParamBase[(92)]>>21)&(0x7F))>=deterMax2)
					{
						if(TryRepairItemCall(handy,invItems[ind],resItems[j]))
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool TryDissassembleItem(Critter@handy)
{
	if(!(@handy!=null))
	return false;
	if(!(((handy.ParamBase[(90)])&((0x0004)))!=0))
	return false;
	
	Map@map=handy.GetMap();
	if((@map!=null)&&((map.GetData((10))&((0x00000040)))!=0))
	{
		return false;
	}
	
	array<Item@>invItems;
	uint count=handy.GetItems(0,invItems);
	for(uint i=0;i<count;i++)
	{
		if(ReversableItem(invItems[i]))
		{
			if(((handy.ParamBase[(93)]&(~0x3FFFFFFF))==0))
			{
				if(ReverseItem(handy,invItems[i]))
				{
					return true;
				}
			}
			else if(((handy.ParamBase[(93)]&(~0x3FFFFFFF))==0x40000000))
			{
				if(((((invItems[i]).BrokenFlags)&((0x08)))!=0))
				{
					if(ReverseItem(handy,invItems[i]))
					{
						return true;
					}
				}
			}
			else if(((handy.ParamBase[(93)]&(~0x3FFFFFFF))==0x80000000))
			{
				if(((((invItems[i]).BrokenFlags)&((0x08)))!=0))
				{
					if(ReverseItem(handy,invItems[i]))
					{
						return true;
					}
				}
				uint deter=(100-invItems[i].Deterioration*100/(10000));
				uint deterMax=(100-invItems[i].BrokenCount);
				if(((handy.ParamBase[(93)])&(0x7F))<=deter&&((handy.ParamBase[(93)]>>14)&(0x7F))>=deter&&
				((handy.ParamBase[(93)]>>7)&(0x7F))<=deterMax&&((handy.ParamBase[(93)]>>21)&(0x7F))>=deterMax)
				{
					if(ReverseItem(handy,invItems[i]))
					{
						return true;
					}
				}
			}
		}
	}
	return false;
}

void Activate(Critter@handy)
{
	if((@handy!=null))
	{
		((handy.ParamBase[(90)])=(handy.ParamBase[(90)])|((0x0008)));
		handy.SetEvent((0),"_HandyIdle");
	}
}

void Deactivate(Critter@handy)
{
	if((@handy!=null))
	{
		(handy.ParamBase[(90)]=((handy.ParamBase[(90)])&(~((0x0008)))));
		handy.SetEvent((0),"");
	}
}

bool _HandyUseSkill(Critter&handy,Critter&whoUse,int skill)
{
	if(!(((handy.Param[(90)])&((0x0001)))!=0))
	{
		RunDialog(whoUse,handy,10152,true);
		return true;
	}
	return false;
}
