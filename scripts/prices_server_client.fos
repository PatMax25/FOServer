//
// FOnline: 2238
// Rotators
//
// prices_server_client.fos
//

// this is inlined, shared by the server and the client

#ifdef __SERVER
# include "_defines.fos"
import bool IsCompanion(Critter& follower) from "follower";
# include "economy_h.fos"

#endif

#ifdef __CLIENT
# define Item       ItemCl
# define Critter    CritterCl
#endif

//import uint BonusNumber(Item@ item) from "item_bonus";		// this doesn't work

uint BonusNumber(Item@ it)
{
	uint number=0;
	if(it.Val5!=0) return 5;
	else if(it.Val4!=0) return 4;
	else if(it.Val3!=0) return 3;
	else if(it.Val2!=0) return 2;
	else if(it.Val1!=0) return 1;
	else return 0;
}


#ifdef __CLIENT

// Fetches base price from item_prices_base array
uint GetBasePrice(uint pid)
{
    /*bool found = false;
       uint cost = 1;
       for(uint i = 0, j = item_prices_base.length(); i < j; i+=2)
       {
            if(uint(item_prices_base[i]) == pid)
            {
                    cost = uint(item_prices_base[i+1]);
                    found = true;
                    break;
            }
       }
       //if(!found)
       //	Message("ERROR: Couldn't obtain base price for an item pid: " + pid);
     */
    return GetProtoItem(pid).Cost;     // cost;
}
#endif

uint GetTraderMod(Critter& trader, Item& item)
{
    return GetTraderMod(trader, item.GetProtoId());
}

uint GetTraderMod(Critter& trader, uint16 pid)
{
    #ifdef __CLIENT
    int appsum = ItemLevel(pid) - trader_levels[TradingItemType(pid)];
    #endif
    #ifdef __SERVER
    int appsum = ItemLevel(pid) - GetTraderLevel(trader, TradingItemType(pid));
    #endif
    return 100 - 20 * ABS(appsum);
}

uint GetItemCost(Item& item, Critter& cr, Critter& trader, bool sell)
{
    if(cr.IsPlayer() && (trader.IsPlayer()))     // Player-to-player trade
        return 0;
	float cost = 0;
	uint basecost = 0;
	#ifdef __CLIENT
	basecost = item.Proto.Cost;
	#endif
	#ifdef __SERVER
	basecost = item.Cost;
	#endif
    uint16 pid = item.GetProtoId();

	
    if(pid == PID_GOLD_NUGGET)
        return basecost;
    
		#ifdef __SERVER
	if(IsCompanion(trader))
	return basecost;
	    #endif
    uint ammocost = 0;
    uint tradermod = 100;
    uint tradermodammo = 100;
    float tradmodBuy = 1550 - cr.Param[SK_BARTER]; //crisis x3 450(1000)? 900(550)?
	float tradmodSell = 100 + cr.Param[SK_BARTER]*3 + cr.Param[PE_PVE_TRADERS]*10; //crisis x3 450(950)? 900(1400)?
	if(tradmodBuy < tradmodSell)
		tradmodBuy = tradmodSell;
	if(sell)
	cost = basecost * (tradmodSell/1000); 
	else cost = basecost * (tradmodBuy/1000);
	if(item.Val1 == 1)
		basecost *=2;
	if(item.Val1 == 2)
		basecost *=3;
	if(item.Val1 == 3)
		basecost *=4;
	if(item.Val1 == 4)
		basecost *=5;
	if(item.Val1 == 5)
		basecost *=6;
	if(trader.ParamBase[ST_DESCRIPTION2]==0)
	{
	if(trader.ParamBase[ST_BANK1]>0)
	{
	if(sell) cost = 0;
	if(pid == PID_BOTTLE_CAPS)  
        cost = 1;
	}
	if(pid == PID_BOTTLE_CAPS)  
        cost = 1;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==1)
	{
	if(trader.ParamBase[ST_BANK1]>0)
	{
	if(sell) cost = 0;
	if(pid == PID_ENCLAVE_MONEY)  
        cost = 1;
	}
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 1;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==2)
	{ 
	if(trader.ParamBase[ST_BANK1]>0)
	{
	if(sell) cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 1;
	}
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 1;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==3)
	{ 
	if(trader.ParamBase[ST_BANK1]>0)
	{
	if(sell) cost = 0;
	if(pid == PID_NCR_MONEY)  
        cost = 1;
	}
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 1;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==4)
	{ 
	if(trader.ParamBase[ST_BANK1]>0)
	{
	if(sell) cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 1;
	}
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 1;	
	if(pid == PID_MA_MONEY)  
       cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==5)
	{ 
	if(trader.ParamBase[ST_BANK1]>0)
	{
	if(sell) cost = 0;
	if(pid == PID_MA_MONEY)  
        cost = 1;
	}
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 1;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==6) // banker
	{ 
	uint ec = trader.ParamBase[ST_BANK1];
	uint bc = trader.ParamBase[ST_BANK2];
	uint nc = trader.ParamBase[ST_BANK3];
	uint vc = trader.ParamBase[ST_BANK4];
	uint mc = trader.ParamBase[ST_BANK5];
	switch(pid)
	{
	case PID_BOTTLE_CAPS: cost = 1; break;
	case PID_ENCLAVE_MONEY: cost = ec; break;
	case PID_BOS_MONEY: cost = bc; break;
	case PID_NCR_MONEY: cost = nc; break;
	case PID_VC_MONEY: cost = vc; break;
	case PID_MA_MONEY: cost = mc; break;
	default: 
	if(sell)
	cost = 0;
	else cost = basecost;
	break;
	}
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==7) // banker
	{ 
	switch(pid)
	{
	case PID_BOTTLE_CAPS: cost = trader.ParamBase[ST_BANK1]; break;
	case PID_ENCLAVE_MONEY: cost = trader.ParamBase[ST_BANK2]; break;
	case PID_BOS_MONEY: cost = trader.ParamBase[ST_BANK3]; break;
	case PID_NCR_MONEY: cost = trader.ParamBase[ST_BANK4]; break;
	case PID_VC_MONEY: cost = trader.ParamBase[ST_BANK5]; break;
	case PID_MA_MONEY: cost = trader.ParamBase[ST_BANK6]; break;
	default: 
	if(sell) 
	cost = 0; 
	else cost = item.Val9; 
	
	if(cost == 0 && !sell)
	cost = basecost;
	break;
	}
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==8) // banker
	{ 
	switch(pid)
	{
	
	case PID_ENCLAVE_MONEY: if(sell) cost = 1; else cost = 50; break;
	case PID_BOS_MONEY: if(sell)cost = 1; else cost = 50;  break;
	case PID_NCR_MONEY: if(sell)cost = 1; else cost = 50;  break;
	case PID_VC_MONEY: if(sell)cost = 1; else cost = 50;  break;
	case PID_MA_MONEY: if(sell)cost = 1;  else cost = 50; break;
	case PID_VAULT_TEC_KEY: cost = 100000; break;
	default: if(sell) cost = 0; else cost = basecost; break;
	}
	}
	if(pid==PID_VAULT_TEC_KEY && trader.ParamBase[ST_DESCRIPTION2]!=7)
		cost = 100000;
	if(item.GetType() == ITEM_TYPE_AMMO && trader.ParamBase[ST_NPC_ROLE] > 203 && sell && trader.ParamBase[ST_DESCRIPTION2]!=7)
		cost = 1;
    return cost;
}

#ifdef __SERVER
uint GetItemCostPlain(Item& item, Critter& cr, Critter& trader)
{
    if(cr.IsPlayer() && (trader.IsPlayer()))     // Player-to-player trade
        return 0;
	uint16 pid = item.GetProtoId();
	
    
	if(IsCompanion(trader))
	return item.Cost;
    uint ammocost = 0;
    uint tradermod = 100;
    uint tradermodammo = 100;
    uint cost = item.Cost;
	
	if(item.Val1 == 1)
		cost *=2;
	if(item.Val1 == 2)
		cost *=3;
	if(item.Val1 == 3)
		cost *=4;
	if(item.Val1 == 4)
		cost *=5;
	if(item.Val1 == 5)
		cost *=6;

   if(trader.ParamBase[ST_DESCRIPTION2]==0)
	{
	if(pid == PID_BOTTLE_CAPS)  
        cost = 1;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==1)
	{ 
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 1;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==2)
	{ 
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 1;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==3)
	{ 
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 1;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==4)
	{ 
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 1;	
	if(pid == PID_MA_MONEY)  
       cost = 0;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==5)
	{ 
	if(pid == PID_BOTTLE_CAPS)  
        cost = 0;
	if(pid == PID_ENCLAVE_MONEY)   
        cost = 0;
	if(pid == PID_BOS_MONEY)  
        cost = 0;
	if(pid == PID_NCR_MONEY) 
        cost = 0;
	if(pid == PID_VC_MONEY)  
        cost = 0;	
	if(pid == PID_MA_MONEY)  
        cost = 1;
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==6) // banker
	{ 
	uint ec = trader.ParamBase[ST_BANK1];
	uint bc = trader.ParamBase[ST_BANK2];
	uint nc = trader.ParamBase[ST_BANK3];
	uint vc = trader.ParamBase[ST_BANK4];
	uint mc = trader.ParamBase[ST_BANK5];
	switch(pid)
	{
	case PID_BOTTLE_CAPS: cost = 1; break;
	case PID_ENCLAVE_MONEY: cost = ec; break;
	case PID_BOS_MONEY: cost = bc; break;
	case PID_NCR_MONEY: cost = nc; break;
	case PID_VC_MONEY: cost = vc; break;
	case PID_MA_MONEY: cost = mc; break;
	default: cost = item.Cost;
	break;
	}
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==7) // banker
	{ 
	switch(pid)
	{
	case PID_BOTTLE_CAPS: cost = trader.ParamBase[ST_BANK1]; break;
	case PID_ENCLAVE_MONEY: cost = trader.ParamBase[ST_BANK2]; break;
	case PID_BOS_MONEY: cost = trader.ParamBase[ST_BANK3]; break;
	case PID_NCR_MONEY: cost = trader.ParamBase[ST_BANK4]; break;
	case PID_VC_MONEY: cost = trader.ParamBase[ST_BANK5]; break;
	case PID_MA_MONEY: cost = trader.ParamBase[ST_BANK6]; break;
	default: cost = item.Val9; if(cost==0) cost = item.Cost;
	break;
	}
	}
	if(trader.ParamBase[ST_DESCRIPTION2]==8) // banker
	{ 
	switch(pid)
	{
	
	case PID_ENCLAVE_MONEY: cost = 50; break;
	case PID_BOS_MONEY: cost = 50;  break;
	case PID_NCR_MONEY: cost = 50;  break;
	case PID_VC_MONEY: cost = 50;  break;
	case PID_MA_MONEY: cost = 50; break;
	case PID_VAULT_TEC_KEY: cost = 100000; break;
	default: cost = item.Cost; break;
	}
	}
	if(pid==PID_VAULT_TEC_KEY)
		cost = 100000;
	
    return cost;
}
#endif

#ifdef __SERVER
void SendLevelThresholds(Critter& cr)
{
    cr.RunClientScript("_ItemLevelThreshold1", 0, 0, 0, "", LevelThreshold1);
    cr.RunClientScript("_ItemLevelThreshold2", 0, 0, 0, "", LevelThreshold2);
}
#endif

uint TradingItemType(Item& item)
{
    return TradingItemType(item.GetProtoId());
}

uint TradingItemType(uint pid)
{
    ProtoItem@ pi = GetProtoItem(pid);
    if(!valid(pi))
    {
        Log("Invalid pid: " + pid);
        return ITEMTYPE_MISC;
    }
    uint type = pi.Type;
    switch(type)
    {
    case ITEM_TYPE_WEAPON:
    {
        int skill = pi.Weapon_Skill_0;
        switch(skill)
        {
        case SK_SMALL_GUNS:
            return ITEMTYPE_SMALL_GUNS;
        case SK_BIG_GUNS:
            return ITEMTYPE_BIG_GUNS;
        case SK_ENERGY_WEAPONS:
            return ITEMTYPE_ENERGY;
        default:
            return ITEMTYPE_MISC;
        }
    }
    case ITEM_TYPE_AMMO:
        switch(pid)
        {
        case PID_4_7MM_CASELESS:
        case PID_7_62MM_AMMO:
        case PID_9MM_AMMO:
        case PID_9MM_BALL:
        case PID_10MM_JHP:
        case PID_10MM_AP:
        case PID_14MM_AP:
        case PID_44_MAGNUM_JHP:
        case PID_44_MAGNUM_FMJ:
        case PID_45_CALIBER_AMMO:
        //case PID_22_AMMO:
        case PID_223_FMJ:
        case PID_SHOTGUN_SHELLS:
        case PID_2MM_EC_AMMO:
        case PID_BBS:
        case PID_HN_NEEDLER_CARTRIDGE:
        case PID_HN_AP_NEEDLER_CARTRIDGE:
            return ITEMTYPE_SMALL_GUNS;

        case PID_5MM_JHP:
        case PID_5MM_AP:
        case PID_EXPLOSIVE_ROCKET:
        case PID_ROCKET_AP:
        case PID_FLAMETHROWER_FUEL:
        case PID_FLAMETHROWER_FUEL_MK_II:
            return ITEMTYPE_BIG_GUNS;

        case PID_SMALL_ENERGY_CELL:
        case PID_MICRO_FUSION_CELL:
            return ITEMTYPE_ENERGY;
        default:
            return ITEMTYPE_SMALL_GUNS;
        }
    case ITEM_TYPE_ARMOR:
        return ITEMTYPE_ARMOR;
    case ITEM_TYPE_DRUG:
        switch(pid)
        {
        case PID_ANTIDOTE:
        case PID_HEALING_POWDER:
        case PID_STIMPAK:
        case PID_SUPER_STIMPAK:
        case PID_RADAWAY:
        case PID_RAD_X:
        case PID_JET_ANTIDOTE:
            return ITEMTYPE_MEDICINE;

        case PID_MUTATED_FRUIT:
        case PID_GAMMA_GULP_BEER:
        case PID_BEER:
        case PID_BOOZE:
        case PID_NUKA_COLA:
        case PID_ROENTGEN_RUM:
        case PID_ROT_GUT:
        case PID_COOKIE:
        case PID_IGUANA_ON_A_STICK:
        case PID_MEAT_ON_A_STICK:
        case PID_CIGARETTES:
            return ITEMTYPE_MISC;

        /*case PID_JET:
           case PID_MENTATS:
           case PID_PSYCHO:
           case PID_BUFFOUT:*/
        default:
            return ITEMTYPE_DRUG;
        }
    case ITEM_TYPE_MISC:
        switch(pid)
        {
        case PID_FIRST_AID_KIT:
        case PID_FIELD_MEDIC_KIT:
        case PID_DOCTORS_BAG:
        case PID_PARAMEDICS_BAG:
        case PID_MEDICAL_SUPPLIES:
        case PID_BIO_GEL:
            return ITEMTYPE_MEDICINE;
        case PID_BIG_BOOK_OF_SCIENCE:
        case PID_DEANS_ELECTRONICS:
        case PID_FIRST_AID_BOOK:
        case PID_SCOUT_HANDBOOK:
        case PID_GUNS_AND_BULLETS:
        case PID_CATS_PAW:
        case PID_TECHNICAL_MANUAL:
        case PID_CHEMISTRY_MANUAL:
        case PID_CATS_PAW_ISSUE_5:
        case PID_BECKY_BOOK:
        case PID_BARTER_BOOK:
			return ITEMTYPE_BOOKS;
        case PID_TECH_DELINER:
        case PID_TECH_ELE_ENGINE:
        case PID_TECH_SEMI_TRIGGER:
        case PID_TECH_GUN_CONTROL:
        case PID_TECH_AUTO_TRIGGER:
        case PID_TECH_MECH_ENGINE:
        case PID_TECH_SCOPE:
        case PID_TECH_MICROCHIPS:
        case PID_TECH_CONDEN:
        case PID_TECH_TRANSFORMATOR:
        case PID_TECH_ELE_WIRES:
        case PID_TECH_PLASMA:
        case PID_ARM_CERAMIC:
        case PID_ARM_KEVLAR:
        case PID_ARM_CARBON:
		case PID_ARM_GORETEX:
        case PID_ARM_LEATHER_HIDE:
        case PID_ARM_POLYMER:
        case PID_ARM_POLYMER_ADV:
        case PID_ARM_POLYMER_LASER:
        case PID_ARM_POLYCARBONITE:
        case PID_ARM_STEEL:
			return ITEMTYPE_CRAFT;
        default:
            return ITEMTYPE_MISC;
        }
    default:
        return ITEMTYPE_MISC;
    }
    return ITEMTYPE_MISC;
}

array<int> LevelThreshold1(ITEMTYPE_MAX);
array<int> LevelThreshold2(ITEMTYPE_MAX);
// everything strictly cheaper than _level1 value will be level one
// everything strictly cheaper than _level2 value and worth at least _level1 will be level two
// everything else will be level three
#define _DefineThreshold    # (_type, _level1, _level2)LevelThreshold1[(_type)] = GetProtoItem(_level1).Cost; LevelThreshold2[(_type)] = GetProtoItem(_level2).Cost
#define _NoThresholds       # (_type) LevelThreshold1[(_type)] = 10000000
void InitItemsLevels()
{
    _DefineThreshold(ITEMTYPE_SMALL_GUNS, PID_14MM_PISTOL, PID_SNIPER_RIFLE);
    _DefineThreshold(ITEMTYPE_BIG_GUNS, PID_MINIGUN, PID_AVENGER_MINIGUN);
    _DefineThreshold(ITEMTYPE_ENERGY, PID_PLASMA_PISTOL, PID_PLASMA_PISTOL_EXT_CART);
    // _DefineThreshold(ITEMTYPE_WEAPON_UNARMED, PID_POWER_FIST, PID_MEGA_POWER_FIST);
    // _DefineThreshold(ITEMTYPE_WEAPON_MELEE, PID_SUPER_CATTLE_PROD, PID_RIPPER);
    // _DefineThreshold(ITEMTYPE_WEAPON_THROWING, PID_PLASMA_GRENADE, PID_DYNACORD);
    _DefineThreshold(ITEMTYPE_ARMOR, PID_METAL_ARMOR, PID_TESLA_ARMOR);
    _DefineThreshold(ITEMTYPE_DRUG, PID_BUFFOUT, PID_PSYCHO);
    // _DefineThreshold(ITEMTYPE_AMMO, PID_5MM_AP, PID_14MM_AP);
    _NoThresholds(ITEMTYPE_MISC);
    _DefineThreshold(ITEMTYPE_MEDICINE, PID_STIMPAK, PID_SUPER_STIMPAK);
	_NoThresholds(ITEMTYPE_BOOKS);
	_NoThresholds(ITEMTYPE_CRAFT);
    // _NoThresholds(ITEMTYPE_CONSUMABLE); // no levels
}
uint ItemLevel(Item& item)
{
    return ItemLevel(item.GetProtoId());
}

uint ItemLevel(uint pid)
{
    ProtoItem@ pi = GetProtoItem(pid);
    uint       itemtype = TradingItemType(pid);
    if(pi.Type == ITEM_TYPE_AMMO)
    {
        if(pid == PID_FLAMETHROWER_FUEL)
            return 1;
        if(pid == PID_FLAMETHROWER_FUEL_MK_II)
            return 2;

        if(pi.Cost < GetProtoItem(PID_5MM_AP).Cost)
            return 1;
        if(pi.Cost < GetProtoItem(PID_14MM_AP).Cost)
            return 2;
        return 3;
    }
    if(pi.Cost < uint(LevelThreshold1[itemtype]))
        return 1;
    if(pi.Cost < uint(LevelThreshold2[itemtype]))
        return 2;
    return 3;
}


