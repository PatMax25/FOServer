//
// FOnline: 2238
// Rotators
//
// factions_player.fos
//

#ifndef __FACTIONS_PLAYER__
#define __FACTIONS_PLAYER__

#include "_macros.fos"
#include "_maps.fos"
#include "economy_h.fos"
#include "factions_h.fos"
#include "factions_player_h.fos"
#include "mapdata_h.fos"
#include "factions_bases_h.fos"
#include "follower_h.fos"
#include "follower_common_h.fos"
#include "debug_h.fos"
#include "_colors.fos"

import void MoveCars(Map&, Map&) from "car";

#define LOCATION_PID                      # (cr)              (cr.ParamBase[ST_VAR1])
#define COST                              # (cr)                                              (cr.ParamBase[ST_VAR2])

#define FORCE_DIALOG_BASE                 (4)
#define FORCE_DIALOG_INVALID_NAME         (5)
#define FORCE_DIALOG_DONE                 (8)
#define FORCE_DIALOG_ALREADY_EXISTS       (9)
#define FORCE_DIALOG_MAXLIMIT             (10)
#define FORCE_DIALOG_EXCEPTION            (11)
#define FORCE_DIALOG_NOMONEY              (12)
#define FORCE_DIALOG_WRONG_MAP            (8)
#define FORCE_DIALOG_BUILDER_EXCEPTION    (7)

// buffer to keep the names given player chosen, entry erased when faction is created
// just before first-base creation
dictionary EnteredNames;

uint ChooseLocation(Critter& player, Critter@ npc, int value)
{
    LOCATION_PID(player) = value;

    // if player already in faction, go to final node
    if(player.Param[ST_TEAM_ID] != FACTION_NONE && player.Param[ST_TEAM_ID] != FACTION_UNKNOWN)
        return FORCE_DIALOG_BASE;
    else     // otherwise, we still need to ask for faction name
        return 0;
}
uint r_ChooseCave(Critter& player, Critter@ npc)
{
    COST(player) = CAVE_COST;
    return ChooseLocation(player, npc, LOCATION_CAVE);
}
uint r_ChooseCave2(Critter& player, Critter@ npc)
{
    COST(player) = CAVE2_COST;
    return ChooseLocation(player, npc, LOCATION_CAVE2);
}

uint r_ChooseCamp(Critter& player, Critter@ npc)
{
    COST(player) = CAMP_COST;
    return ChooseLocation(player, npc, LOCATION_CAMP);
}
uint r_ChooseTents(Critter& player, Critter@ npc)
{
    COST(player) = TENTS_COST;
    return ChooseLocation(player, npc, LOCATION_TENTS);
}
uint r_ChooseDepot(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_DEPOT);
}
uint r_ChooseShelter(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_hq_shelter);
}
uint r_ChoosePatt41(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_1);
}
uint r_ChoosePatt410(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_10);
}

uint r_ChoosePatt412(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_12);
}

uint r_ChoosePatt413(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_12);
}

uint r_ChoosePatt42(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_2);
}
uint r_ChoosePatt43(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_3);
}
uint r_ChoosePatt44(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_4);
}
uint r_ChoosePatt45(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_5);
}

uint r_ChoosePatt46(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_6);
}


uint r_ChoosePatt47(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_7);
}

uint r_ChoosePatt48(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_8);
}

uint r_ChoosePatt49(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_9);
}

uint r_ChoosePatt411(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_pat_t4_11);
}

uint r_ChooseSkytower(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_CloudTower);
}
uint r_ChooseFakevautl(Critter& player, Critter@ npc)
{
    COST(player) = DEPOT_COST;
    return ChooseLocation(player, npc, LOCATION_FakeVault);
}
uint r_ChooseScrapheap(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_SCRAPHEAP);
}
uint r_Choosepat01(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_pat01);
}
uint r_Choosepat02(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_pat02);
}
uint r_Choosepat03(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_pat03);
}
uint r_Choosepat04(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_pat04);
}
uint r_Choosepat05(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_pat05);
}
uint r_Choosepat06(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_pat06);
}
uint r_Choosepat07(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_pat07);
}
uint r_Choosepat08(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_pat08);
}
uint r_Choosepat09(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_pat09);
}
uint r_Choosebasement(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_hq_basement);
}
uint r_Choosechurch(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_hq_church);
}
uint r_Choosecabin(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_hq_cabin);
}
uint r_Chooselib(Critter& player, Critter@ npc)
{
    COST(player) = SCRAPHEAP_COST;
    return ChooseLocation(player, npc, LOCATION_hq_lib);
}


uint r_ChooseGasStation(Critter& player, Critter@ npc)
{
    COST(player) = GASSTATION_COST;
    return ChooseLocation(player, npc, LOCATION_GASSTATION);
}
uint r_ChooseBunker(Critter& player, Critter@ npc)
{
    COST(player) = BUNKER_COST;
    return ChooseLocation(player, npc, LOCATION_BUNKER);
}
uint Addpropermoney(Critter@ npc)
{
	switch(npc.Param[ST_DESCRIPTION2])
	{
	case 0: return PID_BOTTLE_CAPS;
	case 1: return PID_ENCLAVE_MONEY; 
	case 2: return PID_BOS_MONEY;
	case 3: return PID_NCR_MONEY; 
	case 4: return PID_VC_MONEY; 
	case 5: return PID_MA_MONEY;
	}
	return PID_BOTTLE_CAPS;

}
bool d_HasMoneyForCave(Critter& player, Critter@)
{
    return player.CountItem(Addpropermoney(player)) >= CAVE_COST;
}
bool d_HasMoneyForCave2(Critter& player, Critter@)
{
    return player.CountItem(Addpropermoney(player)) >= CAVE2_COST;
}
bool d_HasMoneyForTents(Critter& player, Critter@)
{
    return player.CountItem(Addpropermoney(player)) >= TENTS_COST;
}
bool d_HasMoneyForCamp(Critter& player, Critter@)
{
    return player.CountItem(Addpropermoney(player)) >= CAMP_COST;
}
bool d_HasMoneyForDepot(Critter& player, Critter@)
{
    return player.CountItem(Addpropermoney(player)) >= DEPOT_COST;
}
bool d_HasMoneyForGasStation(Critter& player, Critter@)
{
    return player.CountItem(Addpropermoney(player)) >= GASSTATION_COST;
}
bool d_HasMoneyForScrapheap(Critter& player, Critter@)
{
    return player.CountItem(Addpropermoney(player)) >= SCRAPHEAP_COST;
}
bool d_HasMoneyForBunker(Critter& player, Critter@)
{
    return player.CountItem(Addpropermoney(player)) >= BUNKER_COST;
}

uint r_Blades(Critter& player, Critter@ npc, int value)
{
    // LOCATION_PID = LOCATION_BLADES;
    return FORCE_DIALOG_EXCEPTION;
}

void RemoveMoneyForBase(Critter& player)
{
    BanksTransferFromCritter(player, COST(player), TRANSACTION_BASE, false);
}

void addmember(Critter& cr, int id, int, int)
{
    AddMember(id, cr.Id);
}

void registerfaction(Critter& cr, int num, int, int)
{
    string name = "";
    if(num == 0)
        name = "The Critical Failure Gang";
    else if(num == 1)
        name = "The Vipers";
    else
        name = "The Rippers";

    uint id;
    if(RegisterFaction(name, true, id) == REGRESULT_SUCCESS)
    {
        AddMember(id, cr.Id);
        cr.Say(SAY_NETMSG, "Faction created and joined.");
    }
    else
        cr.Say(SAY_NETMSG, "Error.");
}

/**
 * We need to cleanup entered names when player ends talking with baseseller
 * and have not finished faction creation process
 */
bool _Talk(Critter& cr, Critter& talkCr, bool attach, uint talkCount)
{
    Log("Talk");
    if(!attach)
    {
        if(EnteredNames.exists(talkCr.Name))
        {
            EnteredNames.delete(talkCr.Name);
        }
    }
    return true;
}
void _BaseSeller(Critter& cr, bool)
{
    cr.SetEvent(CRITTER_EVENT_TALK, "_Talk");
}
uint dlg_EnterNameOfFaction(Critter& player, Critter@ npc, string@ say)
{
    if(!IS_DIALOG_SAY_MODE(say))
        return 0;

    if(GetGroupIndex(player) > FACTION_NONE)
        return FORCE_DIALOG_EXCEPTION;
    // check availability
    if(!IsFactionNameValid(say))
	{
		//AddFactionName(say);
		InitFactions();
	}
		//InitFactionData();
        //return FORCE_DIALOG_INVALID_NAME;
    // TODO: we could use dictionary::values here...
    array<string@> keys;
    for(uint i = 0, j = EnteredNames.keys(keys); i < j; i++)
    {
        string name;
        if(EnteredNames.get(keys[i], name))
            if(name == say)
                return FORCE_DIALOG_ALREADY_EXISTS;
    }
    if(!IsFactionNameFree(say))
        return FORCE_DIALOG_ALREADY_EXISTS;

    EnteredNames.set(player.Name, say);

    return FORCE_DIALOG_BASE;
}

void RefreshNames(Critter& cr, int, int, int)
{
    cr.Say(SAY_NETMSG, "Refreshing faction names...");
	InitFactions();
	cr.Say(SAY_NETMSG, "Refreshed from FOTEXT.MSG");
}

uint CreateFaction(Critter& player)
{
    string name;
    if(!EnteredNames.get(player.Name, name))
        return FORCE_DIALOG_EXCEPTION;
    else
        EnteredNames.delete(player.Name);

    uint factionid = 0;
    uint result = RegisterFaction(name, true, factionid);

    if(result == REGRESULT_ALREADY_TAKEN)
    {
        Log("Faction already taken");
        return FORCE_DIALOG_ALREADY_EXISTS;
    }
    if(result == REGRESULT_WRONG_NAME)
    {
        Log("Wrong faction name entered");
        return FORCE_DIALOG_INVALID_NAME;
    }
    if(result == REGRESULT_MAXLIMIT)
    {
        Log("Maximum number of factions already registered");
        return FORCE_DIALOG_MAXLIMIT;
    }
    if(result == REGRESULT_EXCEPTION)
    {
        Log("Unknown exception occured when registering faction");
        return FORCE_DIALOG_EXCEPTION;
    }

    DLog("Adding leader");
    AddMember(factionid, player.Id);
    ChangeRank(factionid, player.Id, RANK_LEADER);
    // add news
    AddFactionNews(factionid, player.Id, 0, NEWS_LEADER);

    array<Critter@> followers;
    uint            number = player.GetFollowGroup(FIND_ALL, followers);
    array<Critter@> members;
    members.insertLast(player);

    for(uint i = 0; i < followers.length(); i++)
    {
        if(GetGroupIndex(followers[i]) == FACTION_NONE)
        {
            members.insertLast(followers[i]);
            DLog("Adding member");
            AddMember(factionid, followers[i].Id);
            // add news
            AddFactionNews(factionid, followers[i].Id, 0, NEWS_JOINED);
        }
        else
        {
            Log("Player with id " + followers[i].Id + " is already a member of another faction. He will not be able to join this one.");
        }
    }

    Log("Faction with id " + factionid + " created successfully.");
    return 0;
}
uint dlg_CreateFactionBase(Critter& player, Critter@ npc, string@ say)
{
    if(!IS_DIALOG_SAY_MODE(say))
        return 0;
    uint fid = player.Param[ST_TEAM_ID];
    if(player.CountItem(Addpropermoney(player)) < uint(COST(player)))
        return FORCE_DIALOG_NOMONEY;
    // first, check if we need to create faction as well
    if(fid == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;                  // bypass dialog flow
    }
    // get id of new faction if you had to create one
    if(fid == FACTION_NONE)
        fid = player.Param[ST_TEAM_ID];

    if(valid(GetFactionBase(fid, say)))
    {
        player.Say(SAY_DIALOG, "Hideout with given name exists, give new one");
        return 0;
    }
    uint x = 0;
    uint y = 0;
    uint currentlocation = player.GetMap().GetProtoId();

    if(currentlocation == MAP_KlamathDowntown)
    {
        x = Random(163, 676);
        y = Random(9, 604);
    }
    else if(currentlocation == MAP_Redding)
    {
        x = Random(690, 1563);
        y = Random(284, 797);
    }
    else if(currentlocation == MAP_Junktown)
    {
        x = Random(1323, 1968);
        y = Random(1179, 1940);
    }
    else if(currentlocation == MAP_NecropolisHotel)
    {
        x = Random(850, 1150);
        y = Random(550, 800);
    }
    array<Critter@> players;
    players.insertLast(player);

    uint locId = CreateLocation(LOCATION_PID(player), x, y, players);

    if(locId != 0)
        Log("Player location created with the id " + locId);

    Location@ loc = GetLocation(locId);

    FLog(LOG_WMLOCATIONS, "BASE " + loc.Id + " " + loc.GetProtoId() + " " + loc.WorldX + " " + loc.WorldY);

    loc.Color = COLOR_WM_BASE;
    loc.Update();

    array<Map@> maps;
    loc.GetMaps(maps);
    for(uint i = 0; i < maps.length(); i++)
    {
        maps[i].SetData(MAP_DATA_FACTION, fid);
        if(!maps[i].SetScript("map_playerfaction_hq@map_init"))
        {
            Log("ERR: Couldn't assign map script for player faction hq map");
            return FORCE_DIALOG_EXCEPTION;
        }
    }

    if(!AddFactionBase(CreateFactionBase(player.Param[ST_TEAM_ID], say, locId)))
        return FORCE_DIALOG_EXCEPTION;
    RemoveMoneyForBase(player);
    return FORCE_DIALOG_DONE;
}

bool d_HasRequiredFollowers(Critter& player, Critter@ npc, int num)
{
/*
    #ifdef __DEBUG__
    return true;
    #endif
    #ifndef __DEBUG__
    int             nearmembers = 0;

    array<Critter@> crits;
    uint            number = player.GetFollowGroup(FIND_LIFE | FIND_ONLY_PLAYERS, crits);
    for(uint i = 0; i < number; i++)
    {
        if(GetCrittersDistantion(player, crits[i]) < 8 && crits[i].Param[ST_TEAM_ID] == FACTION_NONE)
            nearmembers++;
    }

    return(nearmembers >= num);
    #endif
	*/
	return true;
}
bool d_HasNotRequiredFollowers(Critter& player, Critter@ npc, int num)
{
    return !d_HasRequiredFollowers(player, npc, num);
}
////////////////////
// OUTDOORSMAN
///////////////////

//
// Checks if player is in faction base area, and produces encounter when requirements are met
//
bool FindBaseEncounter(array<Critter@>& group, Item@ car, uint x, uint y, uint& encounterDescriptor, bool& waitForAnswer)
{
    encounterDescriptor = 0;
    waitForAnswer = false;

    if(!valid(group) || group.length() == 0)
    {
        Log("Invalid critters argument.");
        return false;
    }

    uint faction = CheckFactionBaseCoords(x, y);

    if(faction != 0)
        return false;

    Critter@ leader = group[0];

    leader.Say(SAY_NETMSG, "In faction base area");

    // Check chance
    uint chance = 100;

    if(uint(Random(1, 100)) > chance)
        return false;

    // CFoundedEncounter@ fe=CreateFoundedEncounter(x,y,enc,zone.Table.LocationPids,leader.Id,group.length()>1);
    // if(not valid(fe)) return;

    // leader.SayMsg(SAY_ENCOUNTER_QUESTION,TEXTMSG_GM,feAlready.OwnerGroup?STR_QUESTION_ONLY_PLAYERS:STR_QUESTION_ONLY_PLAYER,
    //	"$player"+GetSafePlayerName(feAlready.OwnerId));

    // leader.Say(SAY_ENCOUNTER_QUESTION, "Do you wish to encounter gang hideout?");
    waitForAnswer = true;

    for(uint i = 0, j = group.length(); i < j; i++)
        group[i].Say(SAY_FLASH_WINDOW, "");
    encounterDescriptor = 2500;
    return true;
}

////////////////////////
// Base building
////////////////////////

const array<int> Requirements =
{
    LOCATION_DEPOT, PID_FIREWOOD, 250, PID_PUMP_PARTS, 250, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
    LOCATION_TENTS, PID_BRAHMIN_HIDE, 30, PID_FIREWOOD, 30, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
    LOCATION_SCRAPHEAP, PID_PUMP_PARTS, 350, PID_METAL_PARTS, 50, PID_ELECTRONIC_PARTS, 10, -1,
    LOCATION_CAMP, PID_FIREWOOD, 250, PID_PUMP_PARTS, 300, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat01, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat02, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat03, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat04, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat05, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat06, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat07, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat08, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat09, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_FakeVault, PID_FIREWOOD, 99999, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 99999, PID_ELECTRONIC_PARTS, 99999, -1,
	LOCATION_CloudTower, PID_FIREWOOD, 1, PID_BOTTLE_CAPS, 1, PID_METAL_PARTS, 1, PID_ELECTRONIC_PARTS, 1, -1,
	LOCATION_pat_t4_1, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_10, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_11, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_12, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_14, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_parking, PID_BRAHMIN_HIDE, 10, PID_FIREWOOD, 30, PID_METAL_PARTS, 10, PID_METAL_PARTS2, 10, -1,
    LOCATION_storage, PID_PUMP_PARTS, 250, PID_FIREWOOD, 30, PID_METAL_PARTS, 250, PID_ELECTRONIC_PARTS, 30, -1,
    LOCATION_nuka, PID_PUMP_PARTS, 50, PID_FIREWOOD, 300, PID_ELECTRONIC_PARTS, 50, -1,
	LOCATION_hq_basement, PID_PUMP_PARTS, 50, PID_FIREWOOD, 300, PID_ELECTRONIC_PARTS, 50, -1,
	LOCATION_hq_church, PID_PUMP_PARTS, 50, PID_FIREWOOD, 800, PID_METAL_PARTS2, 50, -1,
	LOCATION_hq_cabin, PID_PUMP_PARTS, 50, PID_FIREWOOD, 800, PID_METAL_PARTS2, 50, -1,
	LOCATION_hq_lib, PID_FIREWOOD, 1000, PID_BRAHMIN_HIDE, 20, PID_PUMP_PARTS, 100, -1,
    LOCATION_farmhq, PID_FIREWOOD, 25000, PID_ALLOYS2, 10000, PID_METAL_PARTS2, 10000, PID_ARM_LEATHER_HIDE, 15, -1,
	LOCATION_rancho, PID_FIREWOOD, 25000, PID_ALLOYS2, 10000, PID_METAL_PARTS2, 10000, PID_ARM_LEATHER_HIDE, 15, -1,
	LOCATION_pat_t4_2, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_3, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_4, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_5, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_6, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_7, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_8, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_pat_t4_9, PID_FIREWOOD, 250, PID_BOTTLE_CAPS, 15000, PID_METAL_PARTS, 15, PID_ELECTRONIC_PARTS, 10, -1,
	LOCATION_hq_shelter, PID_FIREWOOD, 250, PID_METAL_PARTS2, 100, PID_METAL_PARTS, 500, PID_PUMP_PARTS, 350, -1
};

/**
 * Shows the info with amounts of resources that are gathered on the map
 * and the required amounts
 */
bool s_ProgressInfo(Critter& player, Scenery&, int skill, Item@)
{
    if(skill != -1)
        return false;
    array<int> info;
    CalcRequirements(player.GetMap(), info);
    player.RunClientScript("_ShowBaseConstructionProgress", 0, 0, 0, null, info);
    return true;
}
bool CalcRequirements(Map& map, array<int>& info)
{
    int basetype = GetRootMapData(map, MAP_DATA_SITE_BASETYPE);

    int idx = -1;
    for(int i = 0, j = Requirements.length(); i < j; i++)
    {
        if(i > 0 && Requirements[i - 1] != -1)
            continue;
        if(Requirements[i] == basetype)
        {
            idx = i;
            break;
        }
    }
    if(idx == -1)
    {
        Log("Wrong base type: " + basetype);
        return false;
    }
    bool ret = true;
    for(int i = idx + 1, j = Requirements.length(); i < j; i += 2)
    {
        if(Requirements[i] == -1)
            break;
        info.insertLast(Requirements[i]);
        array<Item@> resources;
        uint         count = 0;
        for(uint r = 0; r < map.GetItems(uint16(Requirements[i]), resources); r++)
            count += resources[r].GetCount();
        if(int(count) < Requirements[i + 1])
            ret = false;
        info.insertLast(count);
        info.insertLast(Requirements[i + 1]);
    }
    return ret;
}

void CreateBuilder(Critter& player, int base)
{
    Map@     map = player.GetMap();
    Critter@ builder = AddNpc(map, 449, player.HexX, player.HexY, Random(0, 5), 0, "", 0, 0, 0, false, 10);
    MakeFollower(builder, FOLLOWER_TYPE_MERC_HUMAN_UNARMED, "", DIALOG_all_base_builder, player, false);
    builder.FollowerVarBase[FV_ATTACK_POLICY] = ATTACKPOLICY_FLEE;
    builder.FollowerVarBase[FV_MODE] = FOLLOWMODE_FOLLOW;
    GameVar@ var = GetLocalVar(LVAR_base_buildsite, builder.Id);
    var = base;
}

uint r_SiteDepot(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_DEPOT);
    return 0;
	}
	else return 0;
}

uint r_SitePatt1(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_1);
    return 0;
	}
	else return 0;
}
uint r_SitePatt10(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_10);
    return 0;
	}
	else return 0;
}
uint r_SitePatt12(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_12);
    return 0;
	}
	else return 0;
}
uint r_SitePatt14(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_14);
    return 0;
	}
	else return 0;
}
uint r_SiteSkytower(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_CloudTower);
    return 0;
	}
	else return 0;
}
uint r_Sitefakevault(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_FakeVault);
    return 0;
	}
	else return 0;
}
uint r_SitePat01(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat01);
    return 0;
	}
	else return 0;
}
uint r_SitePat02(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat02);
    return 0;
	}
	else return 0;
}
uint r_SitePat03(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat03);
    return 0;
	}
	else return 0;
}
uint r_SitePat04(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat04);
    return 0;
	}
	else return 0;
}
uint r_SitePat05(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat05);
    return 0;
	}
	else return 0;
}
uint r_SitePat06(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat06);
    return 0;
	}
	else return 0;
}
uint r_sitePat07(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat07);
    return 0;
	}
	else return 0;
}
uint r_sitePat08(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat08);
    return 0;
	}
	else return 0;
}
uint r_sitePat09(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat09);
    return 0;
	}
	else return 0;
}
uint r_sitebasement(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_hq_basement);
    return 0;
	}
	else return 0;
}
uint r_sitechurch(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_hq_church);
    return 0;
	}
	else return 0;
}
uint r_sitecabin(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_hq_cabin);
    return 0;
	}
	else return 0;
}

uint r_sitelib(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_hq_lib);
    return 0;
	}
	else return 0;
}
uint r_SiteScrapheap(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
		if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_SCRAPHEAP);
    return 0;
		}
	else return 0;
}
uint r_SiteCamp(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
			if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_TENTS);
    return 0;
		}
	else return 0;
}
uint r_SiteOutpost(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_CAMP);
    return 0;
		}
	return 0;
}

uint r_SitePatt2(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_2);
    return 0;
		}
	return 0;
}

uint r_SitePatt3(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_3);
    return 0;
		}
	return 0;
}

uint r_SitePatt4(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_4);
    return 0;
		}
	return 0;
}

uint r_SitePatt5(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_5);
    return 0;
		}
	return 0;
}

uint r_SitePatt6(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_6);
    return 0;
		}
	return 0;
}

uint r_SitePatt7(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_7);
    return 0;
		}
	return 0;
}

uint r_SitePatt8(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_8);
    return 0;
		}
	return 0;
}

uint r_SitePatt9(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_9);
    return 0;
		}
	return 0;
}

uint r_SitePatt11(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_pat_t4_11);
    return 0;
		}
	return 0;
}

uint r_SiteShelter(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_hq_shelter);
    return 0;
		}
	return 0;
}

uint r_SiteParking(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_parking);
    return 0;
	}
	else return 0;
}

uint r_SiteStorage(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_storage);
    return 0;
	}
	else return 0;
}

uint r_SiteNuka(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_nuka);
    return 0;
	}
	else return 0;
}

uint r_SiteFarm(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_farmhq);
    return 0;
	}
	else return 0;
}

uint r_SiteRancho(Critter& player, Critter@, int cost)
{
    if(player.CountItem(Addpropermoney(player)) < uint(cost))
        return FORCE_DIALOG_NOMONEY;
    if(player.Param[ST_TEAM_ID] == FACTION_NONE)
    {
        uint res = CreateFaction(player);
        if(res != 0)
            return res;
    }
	if(GetPartyPointsUsed(player) < GetPartyPointsMax(player))
	{
    player.DeleteItem(Addpropermoney(player), cost);
    CreateBuilder(player, LOCATION_rancho);
    return 0;
	}
	else return 0;
}

uint r_CreateSite(Critter& player, Critter@ builder)
{
    if(!IsEncounterMap(player.GetMap()))
    {
        return FORCE_DIALOG_WRONG_MAP;
    }
    DisbandFollower(player, builder, true);
    DeleteNpc(builder);
    array<Critter@> group;
    uint            locId = CreateLocationForGroup(player, LOCATION_BuildingSite, player.WorldX, player.WorldY, group);
    if(locId == 0)
        return FORCE_DIALOG_BUILDER_EXCEPTION;

    Location@ loc = GetLocation(locId);

    FLog(LOG_WMLOCATIONS, "BASE2 " + loc.Id + " " + loc.GetProtoId() + " " + loc.WorldX + " " + loc.WorldY);

    loc.Color = 0x307CFF22; // Blue
    loc.Update();

    array<Map@> maps;
    loc.GetMaps(maps);
    for(uint i = 0; i < maps.length(); i++)
    {
        maps[i].SetData(MAP_DATA_FACTION, player.Param[ST_TEAM_ID]);
        GameVar@ var = GetLocalVar(LVAR_base_buildsite, builder.Id);
        maps[i].SetData(MAP_DATA_SITE_BASETYPE, var.GetValue());
        if(!maps[i].SetScript("map_playerfaction_hq@map_init"))
        {
            Log("ERR: Couldn't assign map script for player faction hq map");
            return FORCE_DIALOG_EXCEPTION;
        }
    }
    MoveCars(player.GetMap(), maps[0]);
    for(uint i = 0; i < group.length(); i++)
        group[i].TransitToMap(maps[0].Id, 0);

    int i = 1;
    while(!AddFactionBase(CreateFactionBase(player.Param[ST_TEAM_ID], "Construction site" + (i > 1 ? (" " + i) : ""), locId)))
    {
        i++;
    }

    return 0;
}
bool d_OnSite(Critter& player, Critter@)
{
    Map@ map = player.GetMap();
    return valid(map) && map.GetProtoId() == MAP_HQ_BuildingSite;
}
bool d_CanTalkWithBuilder(Critter& player, Critter@)
{
    Map@ map = player.GetMap();
    bool faction = player.Param[ST_TEAM_ID] == GetRootMapData(map, MAP_DATA_FACTION);
    bool rank = player.Param[ST_FACTION_RANK] == RANK_LEADER;
    return faction && rank;
}
bool d_ConstructionReady(Critter& player, Critter@)
{
    Map@       map = player.GetMap();
    array<int> info;
    return CalcRequirements(map, info);
}
uint dlg_FinishConstruction(Critter& player, Critter@ builder, string@ say)
{

    if(!d_ConstructionReady(player, builder))
    {
        player.Say(SAY_DIALOG, "It looks like someone stole parts of the base while we were talking.");
        return 0;
    }

    if(!IS_DIALOG_SAY_MODE(say))
        return 0;
    uint fid = player.Param[ST_TEAM_ID];
    if(valid(GetFactionBase(fid, say)))
    {
        player.Say(SAY_DIALOG, "Hideout with given name exists, give new one");
        return 0;
    }
    Map@            site = player.GetMap();
    int             basetype = GetRootMapData(site, MAP_DATA_SITE_BASETYPE);
    array<Critter@> group;
    uint            locId = CreateLocationForGroup(player, basetype, player.WorldX, player.WorldY, group);
    if(locId == 0)
    {
        Log("Unable to spawn location: " + basetype);
        return 0;
    }
    Location@ loc = GetLocation(locId);
    loc.Color = COLOR_WM_BASE;
    loc.Update();
    
    Map@      entrance = loc.GetMapByIndex(0);
    MoveCars(site, entrance);
    for(uint i = 0, j = group.length(); i < j; i++)
        group[i].TransitToMap(entrance.Id, 0);
    // RemoveFactionBase(GetFactionBase(site.GetLocation().Id));
    DeleteLocation(site.GetLocation().Id);

    array<Map@> maps;
    loc.GetMaps(maps);
    for(uint i = 0; i < maps.length(); i++)
    {
        maps[i].SetData(MAP_DATA_FACTION, fid);
        if(!maps[i].SetScript("map_playerfaction_hq@map_init"))
        {
            Log("ERR: Couldn't assign map script for player faction hq map");
            return FORCE_DIALOG_EXCEPTION;
        }
    }

    if(!AddFactionBase(CreateFactionBase(fid, say, locId)))
        return FORCE_DIALOG_EXCEPTION;

    return 0;
}
void foreworker_dialog(Critter& player, int, int, int)
{
    RunDialog(player, DIALOG_all_base_foreworker, player.HexX, player.HexY, true);
}
#endif
