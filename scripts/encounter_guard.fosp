

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                 

import Item@DogTag(Critter@cr)from"item_dogtags"; 

import Item@DogTag(Critter@holder,Critter@target)from"item_dogtags";

import Item@DogTagBlank(Critter@holder)from"item_dogtags";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";                                                                                                                                                                                                                                                                                                                                                                                                                      

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";   

import int GetGroupsStatus(Critter&c1,Critter&c2)from"reputations_modifiers";
import bool HasFactionUniform(Critter&cr,int faction,int minStatus)from"reputations_modifiers";
import bool IsSoldier(Critter@cr)from"item_dogtags";
import bool IsRanger(Critter@cr)from"item_dogtags";     

void critter_init(Critter&cr,bool firstTime)
{
	if(firstTime)
	cr.Wait(Random(2800,4500));
	cr.ParamBase[(77)]=Random(9,26);
	cr.ParamBase[(2)]=Random(9,15);
	cr.ParamBase[(72)]=cr.Param[(7)];
	cr.SetEvent((4),"_OnShowCritterEncounter");
	cr.SetEvent((0),"_OnIdleEncounter");
	cr.SetEvent((33),"_OnSmthMoveItemEncounter");
	cr.SetEvent((31),"_NpcSmthUseSkill");
	cr.ShowCritterDist1=(1);
	cr.SetEvent((5),"_OnShowCritter1Encounter");
	cr.SetEvent((9),"_OnHideCritter1Encounter");
	cr.SetEvent((32),"_OnSmthDropItemEncounter");
	cr.SetEvent((36),"_NpcPlaneFinish");
	cr.SetEvent((35),"_NpcPlaneStart");
	cr.SetEvent((24),"_NpcMoveItem");
	
	if(firstTime&&(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&(IsSoldier(cr)||IsRanger(cr)))
	{
		int dogtag_chance=Random(15,20);  
		
		Item@armor=cr.GetItem(0,(3));
		
		if((@armor!=null))
		{
			uint16 protoid=armor.GetProtoId(); 
			
			if(protoid==(348)||
			protoid==(349))
			dogtag_chance+=Random(10,15);
			
			else if(protoid==(3)||
			protoid==(232))
			dogtag_chance+=Random(5,10); 
			
			else if(protoid==(9654)||
			protoid==(239)||
			protoid==(752))
			dogtag_chance+=Random(1,6);
		}
		
		if(cr.Param[(121)]>1)
		dogtag_chance+=Random(0,cr.Param[(121)]*2);
		
		if(Random(1,100)<=int((((dogtag_chance)>(100))?(100):(((dogtag_chance)<(1))?(1):(dogtag_chance)))))
		{
			Item@dogtag=DogTag(cr);
			if((@dogtag!=null))
			{
				for(uint s=(4);s>=(1);s--)
				{
					if(s==(3))
					continue;
					
					if(!(@cr.GetItem(0,s)!=null))
					{
						if(cr.MoveItem(dogtag.Id,dogtag.GetCount(),s))
						break;
					}
				}
			}
		}
	}
}

void _Vigilant(Critter&cr,bool firstTime)
{
	if(firstTime)
	cr.Wait(Random(2800,4500));
	critter_init(cr,firstTime);
	cr.ShowCritterDist1=(4);
	cr.ParamBase[(77)]=Random(9,26);
	cr.ParamBase[(2)]=Random(9,15);
	cr.ParamBase[(72)]=cr.Param[(7)];
	cr.ShowCritterDist2=(1);
	cr.SetEvent((6),"_OnShowCritter2Encounter");
}

void _OnShowCritterEncounter(Critter&cr,Critter&target)
{
	if(cr.Cond==(3))
	return;
	
	if(!(target.IsNpc()&&!(((target.Param[(534)]&((0x00000020)))!=0))))
	{
		
		if(GetGroupsStatus(target,cr)==(2))
		{
			uint[]vals={cr.Id,target.Id};
			CreateTimeEvent(((__FullSecond)+(((4)*__TimeMultiplier))),"e_DelayedAttackPlane",vals,false);
			return;
		}
		
		int crGroup=(cr.Param[(106)]);
		if((crGroup>=2&&crGroup<=99)&&((target.Reputation[crGroup]<-2000)||(target.Reputation[crGroup]<__ReputationHated&&!HasFactionUniform(target,crGroup,(3)))))
		{
			uint[]vals={cr.Id,target.Id};
			CreateTimeEvent(((__FullSecond)+(((4)*__TimeMultiplier))),"e_DelayedAttackPlane",vals,false);
			return;
		}
		
		if((crGroup>=2&&crGroup<=99)&&target.Reputation[crGroup]<=__ReputationAntipathy&&!HasFactionUniform(target,crGroup,(2)))
		if(Random(0,3)!=0)
		CreateTimeEvent(((__FullSecond)+(((2)*__TimeMultiplier))),"e_DelayedSayBehave",cr.Id,false);
	}
} 

void _OnShowCritter1Encounter(Critter&cr,Critter&target)
{
	if(cr.Cond==(3)||cr.Timeout[(238)]>0)
	return; 
	
	if((target.IsNpc()&&!(((target.Param[(534)]&((0x00000020)))!=0))))
	return;
	if(IsCurrentEnemy(cr,target.Id))
	return;
	GameVar@var=GetUnicumVar((11200),cr.Id,target.Id);
	if(var.GetValue()==1)
	{
		AddAttackPlane(cr,0,target);
		var=2;
		return;
	}
	if(target.IsKnockout()||target.IsDead())
	return;
	if(cr.Timeout[(238)]==0)
	{
		if(IsHumanoid(cr)&&cr.Timeout[(238)]==0)
		{
			if((cr.Param[(106)])!=(target.Param[(106)]))
			cr.Say((2),"Keep your distance!");
			else
			cr.Say((2),"Halt!");
		}
		
		cr.SetDir(GetDirection(cr.HexX,cr.HexY,target.HexX,target.HexY));
	} 
	
	int[]data={target.Id,cr.Id};
	
}

void _OnShowCritter2Encounter(Critter&cr,Critter&target)
{
	if(cr.Cond==(3))
	return;
	
	if((target.IsNpc()&&!(((target.Param[(534)]&((0x00000020)))!=0))))
	return;
	if(IsCurrentEnemy(cr,target.Id))
	return;
	if(target.IsKnockout()||target.IsDead())
	return;
	int[]data={target.Id,cr.Id};
	if(Random(1,4)==4)
	cr.Say((2),"Get off me!");
	else
	cr.Say((2),"Get away from me!");
	if(cr.Timeout[(238)]==0)
	{
		cr.SetDir(GetDirection(cr.HexX,cr.HexY,target.HexX,target.HexY));      
		
	}  
	
}

uint e_PushAway(array<uint>@values)
{
	Critter@target=GetCritter(values[0]);
	Critter@cr=GetCritter(values[1]);
	if(target.Timeout[(238)]==0&&GetDistantion(cr.HexX,cr.HexY,target.HexX,target.HexY)==1)
	{
		cr.Action((10),2,null);
		if(!target.MoveToDir(GetDirection(cr.HexX,cr.HexY,target.HexX,target.HexY)))
		target.MoveRandom();
		else
		target.Wait(0);
	}
	
	return 0;
}

void _OnHideCritter1Encounter(Critter&cr,Critter&target)
{
	if(cr.Cond==(3)||cr.Timeout[(238)]>0)
	return;
	
	if((target.IsNpc()&&!(((target.Param[(534)]&((0x00000020)))!=0)))||(cr.Param[(106)])==(target.Param[(106)]))
	return;
	if(target.IsKnockout()||target.IsDead())
	return;
	if(IsHumanoid(cr)&&cr.Timeout[(238)]==0)
	{
		if((cr.Param[(106)])!=(target.Param[(106)]))
		cr.Say((2),"Don't come any closer");
		else
		cr.Say((2),"No need to get this close");
	}
	
	GameVar@var=GetUnicumVar((11200),cr.Id,target.Id);
	var=1;
	
}

void _OnIdleEncounter(Critter&cr)
{
	if(cr.Cond==(3))
	return;
	
	array<Critter@>crits;
	uint num=cr.GetCritters(false,(0x01)|(0x10),crits);
	
	for(uint i=0;i<num;i++)
	{
		if(((cr.Param[(106)])>=2&&(cr.Param[(106)])<=99)&&(crits[i].Reputation[(cr.Param[(106)])]>=__ReputationAntipathy||HasFactionUniform(crits[i],(cr.Param[(106)]),(2))))
		continue;
		
		Item@item=crits[i].GetItem(0,(1));
		if(!(@item!=null))
		continue;
		if(IsHumanoid(cr)&&(item.GetType()==(3))&&(Random(0,1)==0))
		{
			cr.Say((4),"Put down your weapon, NOW!");
			int[]data={crits[i].Id,cr.Id};
			CreateTimeEvent(((__FullSecond)+(((Random(8,12))*__TimeMultiplier))),"e_CheckWeapon",data,false);
		}
	}
}

void _OnSmthMoveItemEncounter(Critter&crit,Critter&fromCrit,Item&item,uint8 fromSlot)
{
	int critGroup=(crit.Param[(106)]);
	if(critGroup==(fromCrit.Param[(106)]))
	return;
	if(item.Accessory!=(1))
	return;
	if(item.GetType()!=(3))
	return;
	if((critGroup>=2&&critGroup<=99)&&fromCrit.Reputation[(crit.Param[(106)])]>-1000)
	return;
	if(item.CritSlot==(1))
	AddAttackPlane(crit,0,fromCrit);
}

void _NpcSmthUseSkill(Critter&npc,Critter&fromCr,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(!IsHumanoid(npc))
	return;
	if(fromCr.IsPlayer()&&(skill==(-5)||skill==(209))&&(@onCritter!=null)&&npc.GetPlanes((30),onCritter.Id,null)>0)
	{
		npc.Say((2),"Leave this stuff!");
		AddAttackPlane(npc,(50)+1,fromCr,__RunOnCombat);
	}
	else if(fromCr.IsPlayer()&&(@onItem!=null)&&skill==(-1)&&uint(GetLvar(onItem.Id,(9010)))==npc.Id&&npc.GetPlanes((38),onItem.Id,null)>0)
	{
		npc.Say((2),"That's mine!");
		AddAttackPlane(npc,(50)+1,fromCr,__RunOnCombat);
		Map@map=npc.GetMap();
		if((@map!=null))
		{
			array<Critter@>critters;
			for(uint i=0,k=map.GetCritters(0,(0x03)|(0x20),critters);i<k;i++)
			{
				if(npc.Id==critters[i].Id)
				continue;
				int crStatus=GetGroupsStatus(npc,critters[i]);
				if(crStatus==(1))
				{
					if(((critters[i].Param[(122)])==(2)?(npc.IsNpc()&&!(((npc.Param[(534)]&((0x00000020)))!=0))):((critters[i].Param[(122)])==(3)?!(npc.IsNpc()&&!(((npc.Param[(534)]&((0x00000020)))!=0))):true))&&(npc.IsNpc()&&!(((npc.Param[(534)]&((0x00000020)))!=0))))
					AddAttackPlane(critters[i],0,fromCr);
				}
			}
		}
	}
}

void _OnSmthDropItemEncounter(Critter&npc,Critter&fromCr,Item&item)
{
	if(!IsHumanoid(npc))
	return;
	if(uint(GetLvar(item.Id,(9010)))==npc.Id)
	{
		NpcPlane@plane=CreatePlane();
		
		plane.Type=(3);
		plane.Pick_HexX=item.HexX;
		plane.Pick_HexY=item.HexY;
		plane.Pick_Pid=item.GetProtoId();
		plane.Pick_UseItemId=0;
		plane.Pick_ToOpen=false;
		plane.Identifier=(38);
		plane.IdentifierExt=item.Id;
		plane.Run=true;
		npc.AddPlane(plane);
	}
} 

int _NpcPlaneStart(Critter&npc,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(!IsHumanoid(npc))
	return(0);  
	
	if(reason==(10))
	{
		ArmFavoriteWeapon(npc);
	}
	return(0);
}

int _NpcPlaneFinish(Critter&npc,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(!IsHumanoid(npc))
	return(0);
	if(reason==(32))
	{
		uint mapId;
		uint8 dir=0;
		uint16 hexX=0;
		uint16 hexY=0;
		npc.GetHomePos(mapId,hexX,hexY,dir);
		if(plane.Type==(2)&&plane.Identifier!=(36)&&plane.Walk_HexX==hexX&&plane.Walk_HexY==hexY)
		{
			Map@map=npc.GetMap();
			if((@map!=null))
			{
				Critter@target=map.GetCritter(hexX,hexY);
				if((@target!=null)&&target.IsLife())
				{
					AddWalkPlane(npc,(20),(36),target.Id,target.HexX,target.HexY,npc.Id==target.Id?npc.Dir:0xFF,false,1);
				}
			}
		}
	}
	
	return(0);
}

void _NpcMoveItem(Critter&npc,Item&item,uint8 fromSlot)
{
	if(fromSlot==(255)&&item.GetType()==(3))
	{
		uint ownerId=GetLvar(item.Id,(9010));
		if(ownerId==0||ownerId==npc.Id)
		return;
		Critter@wpnOwner=GetCritter(ownerId);
		if((@wpnOwner!=null)&&!wpnOwner.IsPlayer()&&wpnOwner.GetMapId()==npc.GetMapId()&&(npc.Param[(106)])==(wpnOwner.Param[(106)]))
		{
			AddWalkPlane(npc,(20),(40),wpnOwner.Id,wpnOwner.HexX,wpnOwner.HexY,0xFF,false,1);
		}
	}
}   

uint e_CheckDistance(array<uint>@values)
{
	Critter@player=GetCritter(values[0]);
	Critter@guard=GetCritter(values[1]);
	
	if(!(@player!=null)||!((@guard!=null))||(player.GetMapId()!=guard.GetMapId()))
	return 0;
	
	if(GetCrittersDistantion(player,guard)>guard.ShowCritterDist1)
	return 0;
	
	if(player.Param[(72)]>0)
	AddAttackPlane(guard,0,player);
	return 0;
}
uint e_CheckDistance2(array<uint>@values)
{
	Critter@player=GetCritter(values[0]);
	Critter@guard=GetCritter(values[1]);
	
	if(!(@player!=null)||!((@guard!=null))||(player.GetMapId()!=guard.GetMapId()))
	return 0;
	
	if(GetCrittersDistantion(player,guard)>guard.ShowCritterDist2)
	return 0;
	
	if(player.Param[(72)]>0)
	AddAttackPlane(guard,0,player);
	return 0;
} 

uint e_CheckWeapon(array<uint>@values)
{
	Critter@player=GetCritter(values[0]);
	Critter@guard=GetCritter(values[1]);
	
	if(!(@player!=null)||!((@guard!=null)))
	return 0;
	
	Item@item=player.GetItem(0,(1));
	if(!(@item!=null))
	return 0;
	if(item.GetType()==(3)&&(player.Param[(72)]>0))
	AddAttackPlane(guard,0,player);
	return 0;
} 

uint e_DelayedSayBehave(array<uint>@values)
{
	Critter@guard=GetCritter(values[0]);
	if((@guard!=null)&&IsHumanoid(guard))
	switch(Random(0,4))
	{
		case 0:
		guard.Say((1),"Behave yourself!");
		break;
		case 1:
		guard.Say((1),"Don't do anything stupid");
		break;
		case 2:
		guard.Say((1),"Don't try anything!");
		break;
		case 3:
		guard.Say((1),"Keep your weapons down!");
		break;
		case 4:
		default:
		guard.Say((1),"No sudden moves!");
		break;
	}
	
	if((@guard!=null)&&guard.CrType==(16))
	switch(Random(0,1))
	{
		case 0:
		guard.Say((1),"Woof!");
		break;
		case 1:
		guard.Say((1),"Arrrrouuu");
		break;
		default:
		guard.Say((1),"Wooooooooof!");
		break;
	}
	return 0;
}

uint e_DelayedAttackPlane(array<uint>@values)
{
	Critter@attacker=GetCritter(values[0]);
	Critter@cr=GetCritter(values[1]);
	
	if(!(@attacker!=null)||!(@cr!=null))
	return 0;
	
	AddAttackPlane(attacker,0,cr);
	return 0;
}
