

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;           

shared interface IPolygon
{
	IPolygon@AddVertex(uint16 x,uint16 y);
	IPolygon@AddVertices(array<uint16>&hexes);   
	
	bool IsWithin(Critter&cr);
	bool IsWithin(Item&item);  
	
	bool IsWithin(uint16 x,uint16 y);
};                                                                         

class CPolygon:IPolygon
{
	array<float>xs;
	array<float>ys;
	array<uint16>hxs;
	array<uint16>hys;
	
	CPolygon()
	{}
	
	IPolygon@AddVertex(uint16 x,uint16 y)
	{
		hxs.insertLast(x);
		hys.insertLast(y);
		float fx=3*float(x);
		float fy=(3.4641016151f)*float(y)-(float(x%2))*(1.732050807568877f);
		xs.insertLast(fx);
		ys.insertLast(fy);
		return this;
	}
	
	IPolygon@AddVertices(array<uint16>&hexes)
	{
		int idx=hxs.length();
		hxs.grow(hexes.length()/2);
		hys.grow(hexes.length()/2);
		xs.grow(hexes.length()/2);
		ys.grow(hexes.length()/2);
		
		for(uint i=0,j=hexes.length();i<j;i+=2)
		{
			hxs[idx]=hexes[i];
			hys[idx]=hexes[i+1];
			float fx=3*float(hexes[i]);
			float fy=(3.4641016151f)*float(hexes[i+1])-(float(hexes[i]%2))*(1.732050807568877f);
			xs[idx]=fx;
			ys[idx++]=fy;
		}
		return this;
	}                 
	
	bool Intersects(float x,float y,float x1,float y1,float x2,float y2)
	{
		if(y1==y2)
		return false;
		if((y>y1&&y>y2)||(y<y1&&y<y2))
		return false;
		return(x<=x1+((x1-x2)*(y1-y))/(y2-y1));
	}
	
	bool IsWithin(uint16 x,uint16 y)
	{
		uint count=0;
		float fx=3*float(x)+(0.02f);
		float fy=(3.4641016151f)*float(y)-(float(x%2))*(1.732050807568877f)+(0.02f);
		int i=0;
		for(int j=xs.length()-1;i<j;i++)
		if(Intersects(fx,fy,xs[i],ys[i],xs[i+1],ys[i+1]))
		count++;
		
		if(Intersects(fx,fy,xs[i],ys[i],xs[0],ys[0]))
		count++;
		return(count%2)==1;
	}
	
	bool IsWithin(Critter&cr)
	{
		return IsWithin(cr.HexX,cr.HexY);
	}
	
	bool IsWithin(Item&item)
	{
		return IsWithin(item.HexX,item.HexY);
	}          
	
};                                                                                                                                      

IPolygon@NewPolygon()
{
	return@CPolygon();
}

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
} 

IPolygon@LoadShapeFromEntires(Map&map,uint first,uint last)
{
	IPolygon@poly=NewPolygon();
	for(uint i=first;i<=last;i++)
	{
		array<Entire>entires;
		if(ParseEntires(map,entires,i)==0)
		{
			Log("Missing entire number "+i);
			continue;
		}
		if(entires.length()!=1)
		Log("Ambiguous entire number "+i+", taking at index 0");
		poly.AddVertex(entires[0].HexX,entires[0].HexY);
	}
	return poly;
}

