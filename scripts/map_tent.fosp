

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}                                                                                                                                     

shared interface Buffer
{
	bool IsRaw(uint len);
	
	Buffer@opCom();
	
	Buffer@opNeg();                    
	
	 Buffer@opShr(int8&value); Buffer@opShl(int8 value); Buffer@Get(int8&value); Buffer@Set(int8&value);
	 Buffer@opShr(int16&value); Buffer@opShl(int16 value); Buffer@Get(int16&value); Buffer@Set(int16&value);
	 Buffer@opShr(int32&value); Buffer@opShl(int32 value); Buffer@Get(int32&value); Buffer@Set(int32&value);
	 Buffer@opShr(int64&value); Buffer@opShl(int64 value); Buffer@Get(int64&value); Buffer@Set(int64&value);
	 Buffer@opShr(uint8&value); Buffer@opShl(uint8 value); Buffer@Get(uint8&value); Buffer@Set(uint8&value);
	 Buffer@opShr(uint16&value); Buffer@opShl(uint16 value); Buffer@Get(uint16&value); Buffer@Set(uint16&value);
	 Buffer@opShr(uint32&value); Buffer@opShl(uint32 value); Buffer@Get(uint32&value); Buffer@Set(uint32&value);
	 Buffer@opShr(uint64&value); Buffer@opShl(uint64 value); Buffer@Get(uint64&value); Buffer@Set(uint64&value);
	 Buffer@opShr(bool&value); Buffer@opShl(bool value); Buffer@Get(bool&value); Buffer@Set(bool&value);
	 Buffer@opShr(string&value); Buffer@opShl(string value); Buffer@Get(string&value); Buffer@Set(string&value);
	 Buffer@opShr(float&value); Buffer@opShl(float value); Buffer@Get(float&value); Buffer@Set(float&value);
	
	 Buffer@opShr(array<int8>&value); Buffer@opShl(array<int8>&value); Buffer@Get(array<int8>&value); Buffer@Set(array<int8>&value);
	 Buffer@opShr(array<int16>&value); Buffer@opShl(array<int16>&value); Buffer@Get(array<int16>&value); Buffer@Set(array<int16>&value);
	 Buffer@opShr(array<int32>&value); Buffer@opShl(array<int32>&value); Buffer@Get(array<int32>&value); Buffer@Set(array<int32>&value);
	 Buffer@opShr(array<int64>&value); Buffer@opShl(array<int64>&value); Buffer@Get(array<int64>&value); Buffer@Set(array<int64>&value);
	 Buffer@opShr(array<uint8>&value); Buffer@opShl(array<uint8>&value); Buffer@Get(array<uint8>&value); Buffer@Set(array<uint8>&value);
	 Buffer@opShr(array<uint16>&value); Buffer@opShl(array<uint16>&value); Buffer@Get(array<uint16>&value); Buffer@Set(array<uint16>&value);
	 Buffer@opShr(array<uint32>&value); Buffer@opShl(array<uint32>&value); Buffer@Get(array<uint32>&value); Buffer@Set(array<uint32>&value);
	 Buffer@opShr(array<uint64>&value); Buffer@opShl(array<uint64>&value); Buffer@Get(array<uint64>&value); Buffer@Set(array<uint64>&value);
	 Buffer@opShr(array<bool>&value); Buffer@opShl(array<bool>&value); Buffer@Get(array<bool>&value); Buffer@Set(array<bool>&value);
	 Buffer@opShr(array<string>&value); Buffer@opShl(array<string>&value); Buffer@Get(array<string>&value); Buffer@Set(array<string>&value);
	 Buffer@opShr(array<float>&value); Buffer@opShl(array<float>&value); Buffer@Get(array<float>&value); Buffer@Set(array<float>&value);
	
	 Buffer@opShr(array<array<int8>>&value); Buffer@opShl(array<array<int8>>&value); Buffer@Get(array<array<int8>>&value); Buffer@Set(array<array<int8>>&value);
	 Buffer@opShr(array<array<int16>>&value); Buffer@opShl(array<array<int16>>&value); Buffer@Get(array<array<int16>>&value); Buffer@Set(array<array<int16>>&value);
	 Buffer@opShr(array<array<int32>>&value); Buffer@opShl(array<array<int32>>&value); Buffer@Get(array<array<int32>>&value); Buffer@Set(array<array<int32>>&value);
	 Buffer@opShr(array<array<int64>>&value); Buffer@opShl(array<array<int64>>&value); Buffer@Get(array<array<int64>>&value); Buffer@Set(array<array<int64>>&value);
	 Buffer@opShr(array<array<uint8>>&value); Buffer@opShl(array<array<uint8>>&value); Buffer@Get(array<array<uint8>>&value); Buffer@Set(array<array<uint8>>&value);
	 Buffer@opShr(array<array<uint16>>&value); Buffer@opShl(array<array<uint16>>&value); Buffer@Get(array<array<uint16>>&value); Buffer@Set(array<array<uint16>>&value);
	 Buffer@opShr(array<array<uint32>>&value); Buffer@opShl(array<array<uint32>>&value); Buffer@Get(array<array<uint32>>&value); Buffer@Set(array<array<uint32>>&value);
	 Buffer@opShr(array<array<uint64>>&value); Buffer@opShl(array<array<uint64>>&value); Buffer@Get(array<array<uint64>>&value); Buffer@Set(array<array<uint64>>&value);
	 Buffer@opShr(array<array<bool>>&value); Buffer@opShl(array<array<bool>>&value); Buffer@Get(array<array<bool>>&value); Buffer@Set(array<array<bool>>&value);
	 Buffer@opShr(array<array<string>>&value); Buffer@opShl(array<array<string>>&value); Buffer@Get(array<array<string>>&value); Buffer@Set(array<array<string>>&value);
	 Buffer@opShr(array<array<float>>&value); Buffer@opShl(array<array<float>>&value); Buffer@Get(array<array<float>>&value); Buffer@Set(array<array<float>>&value);
	
	 Buffer@opShr(array<array<array<int8>>>&value); Buffer@opShl(array<array<array<int8>>>&value); Buffer@Get(array<array<array<int8>>>&value); Buffer@Set(array<array<array<int8>>>&value);
	 Buffer@opShr(array<array<array<int16>>>&value); Buffer@opShl(array<array<array<int16>>>&value); Buffer@Get(array<array<array<int16>>>&value); Buffer@Set(array<array<array<int16>>>&value);
	 Buffer@opShr(array<array<array<int32>>>&value); Buffer@opShl(array<array<array<int32>>>&value); Buffer@Get(array<array<array<int32>>>&value); Buffer@Set(array<array<array<int32>>>&value);
	 Buffer@opShr(array<array<array<int64>>>&value); Buffer@opShl(array<array<array<int64>>>&value); Buffer@Get(array<array<array<int64>>>&value); Buffer@Set(array<array<array<int64>>>&value);
	 Buffer@opShr(array<array<array<uint8>>>&value); Buffer@opShl(array<array<array<uint8>>>&value); Buffer@Get(array<array<array<uint8>>>&value); Buffer@Set(array<array<array<uint8>>>&value);
	 Buffer@opShr(array<array<array<uint16>>>&value); Buffer@opShl(array<array<array<uint16>>>&value); Buffer@Get(array<array<array<uint16>>>&value); Buffer@Set(array<array<array<uint16>>>&value);
	 Buffer@opShr(array<array<array<uint32>>>&value); Buffer@opShl(array<array<array<uint32>>>&value); Buffer@Get(array<array<array<uint32>>>&value); Buffer@Set(array<array<array<uint32>>>&value);
	 Buffer@opShr(array<array<array<uint64>>>&value); Buffer@opShl(array<array<array<uint64>>>&value); Buffer@Get(array<array<array<uint64>>>&value); Buffer@Set(array<array<array<uint64>>>&value);
	 Buffer@opShr(array<array<array<bool>>>&value); Buffer@opShl(array<array<array<bool>>>&value); Buffer@Get(array<array<array<bool>>>&value); Buffer@Set(array<array<array<bool>>>&value);
	 Buffer@opShr(array<array<array<string>>>&value); Buffer@opShl(array<array<array<string>>>&value); Buffer@Get(array<array<array<string>>>&value); Buffer@Set(array<array<array<string>>>&value);
	 Buffer@opShr(array<array<array<float>>>&value); Buffer@opShl(array<array<array<float>>>&value); Buffer@Get(array<array<array<float>>>&value); Buffer@Set(array<array<array<float>>>&value);
	
	 Buffer@opUShr(array<int8>&arr); Buffer@opUShrAssign(array<int8>&arr); array<int8>AsInt8();
	 Buffer@opUShr(array<int16>&arr); Buffer@opUShrAssign(array<int16>&arr); array<int16>AsInt16();
	 Buffer@opUShr(array<int32>&arr); Buffer@opUShrAssign(array<int32>&arr); array<int32>AsInt32();
	 Buffer@opUShr(array<int64>&arr); Buffer@opUShrAssign(array<int64>&arr); array<int64>AsInt64();
	 Buffer@opUShr(array<uint8>&arr); Buffer@opUShrAssign(array<uint8>&arr); array<uint8>AsUint8();
	 Buffer@opUShr(array<uint16>&arr); Buffer@opUShrAssign(array<uint16>&arr); array<uint16>AsUint16();
	 Buffer@opUShr(array<uint32>&arr); Buffer@opUShrAssign(array<uint32>&arr); array<uint32>AsUint32();
	 Buffer@opUShr(array<uint64>&arr); Buffer@opUShrAssign(array<uint64>&arr); array<uint64>AsUint64();
};  

import Buffer@NewBuffer()from"buffer";    

 import Buffer@NewBuffer(array<int8>@data)from"buffer";
 import Buffer@NewBuffer(array<int16>@data)from"buffer";
 import Buffer@NewBuffer(array<int32>@data)from"buffer";
 import Buffer@NewBuffer(array<int64>@data)from"buffer";
 import Buffer@NewBuffer(array<uint8>@data)from"buffer";
 import Buffer@NewBuffer(array<uint16>@data)from"buffer";
 import Buffer@NewBuffer(array<uint32>@data)from"buffer";
 import Buffer@NewBuffer(array<uint64>@data)from"buffer";                                 

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";                                                                                                                                                                                                                                                                                                                                                                                                                                                           

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                                                                                                                                                                                                                                                                                        

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                  

import string GetRandomFirstName(uint gender)from"npc_names";
import string GetRandomFirstName(uint gender,int&index)from"npc_names";

import string GetRandomNick(uint gender)from"npc_names";

import string GetRandomSurname()from"npc_names";

import string GetRandomFullName(uint gender)from"npc_names";
import string GetRandomFullName(uint gender,int&firstName,bool&genderNick,int&nick,int&surname)from"npc_names"; 

import string GetFirstName(uint gender,uint index)from"npc_names";
import string GetNick(uint gender,uint index,bool genderNick)from"npc_names";
import string GetSurname(uint index)from"npc_names";  

import void LogNames(bool printNames)from"npc_names";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             

shared class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(!IsAnyData(name))
		return false;
		if(!GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const bool&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const string&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const float&value)
	{
		int dummy=FloatToInt(value);
		return Set(dummy);
	}
	
	Serializator@opShl(const float&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const array<int64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<bool>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<bool>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<string>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<string>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<float>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(FloatToInt(values[i]));
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<float>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Critter&cr)
	{
		return Set(cr);
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Item&item)
	{
		return Set(item);
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@opShr(bool&value)
	{
		return Get(value);
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@opShr(string&str)
	{
		return Get(str);
	}
	
	Serializator@Get(float&value)
	{
		int dummy=0;
		Get(dummy);
		value=IntToFloat(dummy);
		return this;
	}
	
	Serializator@opShr(float&value)
	{
		return Get(value);
	}
	
	Serializator@Get(array<int64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<float>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		{
			int dummy=0;
			Get(dummy);
			values[i]=IntToFloat(dummy);
		}
		return this;
	}
	
	Serializator@opShr(array<float>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<bool>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<bool>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<string>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<string>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@opShr(Critter@&cr)
	{
		return Get(cr);
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	Serializator@opShr(Item@&item)
	{
		return Get(item);
	}
	
	array<uint8>Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};   

import bool AddToFollowerlist(Critter&master,Critter&follower)from"follower_common";  

uint e_DisableBagRefresh(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))
	{
		cr.SetBagRefreshTime((uint(-1)));
		{;};
	}
	return 0;
}

void NerfWeaponSkills(Critter&cr,uint primary,uint secondary)
{
	for(uint i=(200);i<=(205);i++)
	{
		if(i!=primary&&i!=secondary)
		{
			if(i==(201))
			cr.ParamBase[i]=-80;
			else
			cr.ParamBase[i]=-30;
		}
	}
}

shared interface IMerc
{
	IMerc@Dialog(int dialogid);
	IMerc@Script(string&script);
	IMerc@AI(int aipack);
	IMerc@Bag(int bagid);
	IMerc@Team(int teamid);
	IMerc@Level(int level);
	IMerc@PID(int pid);
	IMerc@PID(array<int>npcpids);
	IMerc@Type(int type);
	IMerc@ID(int id);
	IMerc@Cost(int cost);
	IMerc@StartCost(int cost);
	IMerc@SellPrice(int price);
	IMerc@DynamicPrice();
	
	bool IsDynamicPrice();
	int GetDialog();
	string@GetScript();
	int GetAIPack();
	int GetBagID();
	int GetBagValue();
	int GetTeamID();
	int GetLevel();
	int GetLastPID();
	array<int>GetPIDs();
	uint GetType();
	int8 GetBaseType();
	int GetCost();
	int GetSellPrice();
	uint GetID();
	string@GetName();
	
	bool Spawn(Critter&master);
}; 

class CMerc:IMerc
{
	bool dynamicprice;
	int dir;
	int dialogid;
	string script;
	int aipack;
	int8 basetype;
	int bagid;
	int teamid;
	int level;
	int respawnTime;
	array<int>npcpids;
	int npcpid;
	int cost;
	int bagvalue;
	int startcost;
	uint type;
	int sellprice;
	uint id;
	string name;
	
	Serializator serializer;
	
	CMerc()
	{
		dir=Random(0,6);
		dialogid=(9310);
		script="follower@critter_init";
		basetype=-1;
		aipack=0;
		bagid=0;
		teamid=0;
		level=1;
		respawnTime=(-2);
		cost=0;
		sellprice=0;
		id=0;
		type=0;
		dynamicprice=false;
	}
	
	bool Spawn(Critter&master)
	{
		npcpid=(npcpids[Random(0,npcpids.length()-1)]);
		
		Critter@SpawnedNpc=AddNpc(master.GetMap(),npcpid,master.HexX,master.HexY,dir,dialogid,script,aipack,bagid,teamid,false,level);
		if((@SpawnedNpc!=null))
		{
			SpawnedNpc.FollowerVarBase[(929)]=(master.Param[(106)]);
			SpawnedNpc.FollowerVarBase[(932)]=type;
			SpawnedNpc.FollowerVarBase[(930)]=id;
			basetype=SpawnedNpc.CrType;
			SpawnedNpc.FollowerVarBase[(933)]=master.Id;
			SpawnedNpc.ParamBase[(84)]=respawnTime;
			
			if(type==(3)||type==(4)||type==(2))
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			switch(type)
			{
				case(6):
				case(12):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(7):
				case(13):
				NerfWeaponSkills(SpawnedNpc,(200),0);
				break;
				case(8):
				case(11):
				NerfWeaponSkills(SpawnedNpc,(201),0);
				break;
				case(5):
				case(10):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(9):
				NerfWeaponSkills(SpawnedNpc,(202),0);
				break;
				default:
				break;
			}
			
			SpawnedNpc.ChangeCrType(SpawnedNpc.ParamBase[(112)]);
			
			CreateTimeEvent(((__FullSecond)+(((3)*60))),"e_DisableBagRefresh",SpawnedNpc.Id,true);
			ArmBestWeapon(SpawnedNpc);
			
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(306)]+=1;
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(315)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(405)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(309)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(313)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(330)]+=1;
			
			for(uint i=0;i<=6;i++)SpawnedNpc.ParamBase[i]+=Random(-1,1);   
			
			SpawnedNpc.ParamBase[(7)]+=(Random(0,20));
			SpawnedNpc.ParamBase[(7)]-=10;
			
			SpawnedNpc.ParamBase[(72)]=SpawnedNpc.Param[(7)];
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			if(!AddToFollowerlist(master,SpawnedNpc))
			Log("Failed to assign merc's id to master("+master.Id+") followerlist");
			
			this.name=GenerateNewName(SpawnedNpc);
			
			if(this.name.length()>0)
			SetLexem(SpawnedNpc,"$name",this.name);
			
			return true;
		}
		else
		{
			Log("Failed to create mercenary of PID "+npcpid+" with mercid "+id+" on map id "+master.GetMapId());
			master.Say((11),"Failed to create mercenary, report this error immediately");
		} 
		
		return false;
	}
	
	IMerc@Dialog(int dialogid)
	{
		this.dialogid=dialogid;
		return this;
	}
	
	IMerc@Script(string&script)
	{
		this.script=script;
		return this;
	}
	
	IMerc@AI(int aipack)
	{
		this.aipack=aipack;
		return this;
	}
	
	IMerc@Bag(int bagid)
	{
		this.bagid=bagid;
		
		bagvalue=0;
		array<uint>mincounts,maxcounts;
		array<int>slots;
		array<uint16>pids;
		uint num=GetBagItems(bagid,pids,mincounts,maxcounts,slots);
		uint cost=0;
		for(uint i=0;i<num;i++)
		{
			bagvalue+=BaseItemValue(pids[i],7,80,true)*(mincounts[i]+maxcounts[i])/2;
		}
		
		return this;
	}
	
	IMerc@Team(int teamid)
	{
		this.teamid=teamid;
		return this;
	}
	
	IMerc@Level(int level)
	{
		this.level=level;
		return this;
	}
	
	IMerc@PID(int npcpid)
	{
		this.npcpids.insertLast(npcpid);
		return this;
	}
	
	IMerc@PID(array<int>npcpids)
	{
		for(uint i=0;i<npcpids.length();i++)
		{
			this.npcpids.insertLast(npcpids[i]);
		}
		return this;
	}
	
	IMerc@Type(int type)
	{
		this.type=type;
		return this;
	}
	
	IMerc@ID(int id)
	{
		this.id=id;
		return this;
	}
	
	IMerc@DynamicPrice()
	{
		dynamicprice=true;
		return this;
	}
	
	bool IsDynamicPrice()
	{
		return dynamicprice;
	}
	
	IMerc@StartCost(int cost)
	{
		serializer.Clear();
		if(!serializer.Load("merc_"+id)||GetGvar((12000))==0)
		{
			this.cost=cost;
			serializer.Clear();
			serializer.Set(this.cost).Save("merc_"+id);
		}
		else
		serializer.Get(this.cost);
		
		return this;
	}
	
	IMerc@Cost(int cost)
	{
		{;};
		this.cost=cost;
		
		serializer.Clear();
		serializer.Set(this.cost).Save("merc_"+id);
		
		return this;
	}
	
	IMerc@SellPrice(int sellprice)
	{
		this.sellprice=sellprice;
		return this;
	}
	
	int GetDialog(){return dialogid;}
	string@GetScript(){return script;}
	int8 GetBaseType(){return basetype;}
	int GetAIPack(){return aipack;}
	int GetBagID(){return bagid;}
	int GetTeamID(){return teamid;}
	int GetLevel(){return level;}
	int GetLastPID(){return npcpid;}
	array<int>GetPIDs(){return npcpids;}
	int GetCost(){return cost;}
	int GetBagValue(){return bagvalue;}
	int GetSellPrice(){return sellprice;}
	uint GetID(){return id;}
	uint GetType(){return type;}
	string@GetName(){return name;}
}; 

import bool IsFollowing(Critter&critter)from"follower_common";
import bool IsOwnersFollower(Critter&owner,Critter&critter)from"follower_common";
import bool CanHaveMoreFollowers(Critter&player,uint FollowerType)from"follower_common";
import Critter@GetFollowersOwner(Critter&critter)from"follower_common";
import bool RightDistance(Critter&follower,Critter&owner)from"follower_common";
import bool HasFollowerOfBaseType(Critter&owner,uint basetype)from"follower_common";
import Critter@GetFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import bool RemoveFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import int GetNumberOfFollowingFollowersOfPlayer(Critter&player)from"follower_common";
import int GetNumberOfFollowersOfPlayer(Critter&player)from"follower_common";
import uint GetSlaveTypes(Critter&player)from"follower_common";
import void ClearFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import void AddFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import uint NumberOfFollowersOnMap(Map@map)from"follower_common";
import uint GetFollowerType(Critter&critter)from"follower_common";
import bool DisbandFollower(Critter&player,Critter&cr,bool reset)from"follower_common";
import bool MakeFollower(Critter&critter,uint type,string&script,uint dialogid,Critter&owner,bool FreeBarter)from"follower_common";
import Critter@LocateFollowerByType(IMerc@merc,Critter&owner)from"follower_common";
import Critter@LocateFollowerByID(uint id,Critter&owner)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers,bool OnlyIsSeen)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers)from"follower_common";
import int GetFollowers(Critter&player,bool all,array<Critter@>&followers)from"follower_common";
import uint CountFollowers(Critter&player,bool all)from"follower_common";
import uint CountFollowers(Critter&player,Map@map)from"follower_common";
import uint GetPartyPointsMax(Critter&player)from"follower_common";
import uint GetPartyPointsUsed(Critter&player)from"follower_common";
import bool IsMerc(Critter&follower)from"follower_common";             

import bool IsDynamicItem(Item&item)from"item_dynamic";
import bool IsDynamicItem(Item&item,uint16 pid)from"item_dynamic";

import bool ContainsDynamicItems(Location&location,uint16 pid)from"item_dynamic";
import bool ContainsDynamicItems(Map&map,uint16 pid)from"item_dynamic";

import void ShowAllDynamicItems(Location&location,uint16 pid)from"item_dynamic";
import void ShowAllDynamicItems(Map&map,uint16 pid)from"item_dynamic";
import void ShowAllDynamicItems(Location&location,uint16 pid,uint&found,uint&shown)from"item_dynamic";
import void ShowAllDynamicItems(Map&map,uint16 pid,uint&found,uint&shown)from"item_dynamic";

import bool ShowDynamicItem(Item&item)from"item_dynamic";                   

import Item@CreateMapTo(Critter&cr,Location&location,uint flags)from"item_misc";
import Item@CreateMapTo(Critter&cr,Location&location,uint flags,string&info)from"item_misc";                                                                                                      

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                                                                                                                                                 

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}             

enum Ingredients
{ 
	
	INGREDIENT_NONE=0,
	
	INGREDIENT_WATER,
	INGREDIENT_WOOD,
	INGREDIENT_RADIATED_FOOD,
	INGREDIENT_BARLEY,
	INGREDIENT_TOBACCO,
	INGREDIENT_FIBRE
};      

import bool HaveAnyIngredient(Item&item)from"prod_ingredients";
import bool HaveIngredient(Item&item,uint8 ingredient)from"prod_ingredients";
import uint16 GetIngredientReturnItem(Item&item,uint8 ingredient)from"prod_ingredients";
import string IngredientName(uint8 ingredient)from"prod_ingredients";
import uint IngredientsNames(Item&item,array<string>&names)from"prod_ingredients";                                                      

shared enum RecyclerType
{
	ENCOUNTER_RECYCLER,
	TENT_RECYCLER
};                   

import void ConnectRecycler(Item@item,uint recyclerId)from"recycler";
import void DisconnectRecycler(Item@item,uint recyclerId)from"recycler";

import void RecycleEncounter(Location@loc)from"recycler";
import void RecycleTent(Location@loc)from"recycler";

import Item@GetRecycler(int type)from"recycler";
import uint GetRecyclers(array<int>recyclersTypes,array<Item@>&recyclers)from"recycler";
import uint GetRecyclers(array<Item@>&recyclers)from"recycler";

import Item@GetRecycledItem(int recyclerType,uint16 pid)from"recycler";
import uint GetRecycledItems(int recyclerType,uint16 pid,array<Item@>&items)from"recycler";
import uint GetRecycledItems(int recyclerType,array<uint16>pids,array<bool>&pidFound,array<Item@>&items)from"recycler";                                                                                                                                                                                                                                                                                                                                                                                                              

import void MoveCars(Map&from,Map&to)from"car";        

uint[]TentVars=
{
	(3005),
	(3101),
	(3102),
	(3103),
	(3104),
	(3105),
	(3106),
	(3107),
	(3108),
	(3109)
};

uint[][][]tentTable=
{
	
	{
		
	},
	
	{
		
	},
	
	{
		
		{(211)},
		
		{(74)}
	},
	
	{
		
		{(212)},
		
		{(71)}
	},
	
	{
		
		{},
		
		{}
	},
	
	{
		
		{(214)},
		
		{(73)}
	},
	
	{
		
		{},
		
		{}
	},
	
	{
		
		{(213)},
		
		{(72)}
	},
	
	{
		
		{},
		
		{}
	},
	
	{
		
		{},
		
		{}
	}
}; 

array<uint>allTents;
array<uint>allShelters;
array<uint>allHouses;

void InitTents()
{
	for(uint t=0,tLen=tentTable.length();t<tLen;t++)
	{ 
		
		for(uint c=0,cLen=tentTable[t].length();c<cLen;c++)
		{ 
			
			for(uint p=0,pLen=tentTable[t][c].length();p<pLen;p++)
			{ 
				
				if(c==0)
				allShelters.insertLast(tentTable[t][c][p]);
				else if(c==1)
				allHouses.insertLast(tentTable[t][c][p]);
				else
				WLog("tents","Unknown category<"+c+"> of location<"+tentTable[t][c][p]+">",20);
				
				allTents.insertLast(tentTable[t][c][p]);
			}
		}
	}
	
	do{array<uint>__tmp;for(uint __a=0;__a<allTents.length();__a++){bool __p=true;for(uint __b=0;__b<__tmp.length();__b++){if(__tmp[__b]==allTents[__a]){__p=false;break;}}if(__p) __tmp.insertLast(allTents[__a]);}allTents=__tmp;}while(false);
	do{array<uint>__tmp;for(uint __a=0;__a<allShelters.length();__a++){bool __p=true;for(uint __b=0;__b<__tmp.length();__b++){if(__tmp[__b]==allShelters[__a]){__p=false;break;}}if(__p) __tmp.insertLast(allShelters[__a]);}allShelters=__tmp;}while(false);
	do{array<uint>__tmp;for(uint __a=0;__a<allHouses.length();__a++){bool __p=true;for(uint __b=0;__b<__tmp.length();__b++){if(__tmp[__b]==allHouses[__a]){__p=false;break;}}if(__p) __tmp.insertLast(allHouses[__a]);}allHouses=__tmp;}while(false);
	
	allTents.sortAsc();
	allShelters.sortAsc();
	allHouses.sortAsc();
	
	WLog("tents","Available locations: "+allTents.length()+" ("+allShelters.length()+"shelter"+(allShelters.length()!=1?"s":"")+", "+allHouses.length()+" house"+(allHouses.length()!=1?"s":""),0);
}

uint GetTentLocationPid(uint mapType,bool house)
{             
	
	if(mapType>=tentTable.length())
	{
		WLog("tents","Invalid mapType<"+mapType+">",20);
		return(0);
	}
	
	if(tentTable[mapType].length()>=2)
	{
		array<uint>list;
		if(house)
		list=tentTable[mapType][1];
		else
		list=tentTable[mapType][0];
		
		uint pid=0;
		if(list.length()>0)
		pid=list[Random(0,list.length()-1)];           
		
		return(pid);
	}
	else
	WLog("tents","Invalid category length<"+tentTable[mapType].length()+">for mapType<"+mapType+">",10);
	
	return(0);
}

void map_init(Map&map,bool firstTime)
{
	map.SetEvent((6),"_CritterIn");
	
	map.SetEvent((5),"_TentEnviroment");
	
	map.SetLoopTime(4,60000);   
	
}

void _CritterIn(Map&map,Critter&cr)
{ 
	
}

void _TentEnviroment(Map&map)
{
	array<Item@>items;
	uint itemsCount=0;
	
	itemsCount=map.GetItems((9913),items);
	for(uint i=0;i<itemsCount;i++)
	{
		if(items[i].LightIntensity>50&&
		
		(__FullSecond)>=uint(items[i].Val5+((1)*__TimeMultiplier*3600))   
		
		)
		{
			items[i].LightIntensity--;
			items[i].LightDistance=(items[i].LightIntensity/10)-1;
			if(items[i].LightIntensity>50)
			items[i].Val5=(__FullSecond);
			else
			items[i].Val5=0;
			items[i].Update();  
			
		}
	}
}  

uint GetTentVarsCount()
{
	return(TentVars.length());
}

uint GetTentVars(array<uint>&vars)
{
	uint count=0;
	
	for(uint v=0,vLen=TentVars.length();v<vLen;v++)
	{
		vars.insertLast(TentVars[v]);
		count++;
	}
	
	return(count);
}

bool GetFreeTentVar(Critter&cr,uint&var)
{
	for(uint v=0,vLen=TentVars.length();v<vLen;v++)
	{
		if(GetLvar(cr,TentVars[v])==0)
		{
			var=TentVars[v];
			return(true);
		}
	}
	
	return(false);
}

uint GetFreeTentVars(Critter&cr,array<uint>&vars)
{
	uint count=0;
	
	for(uint v=0,vLen=TentVars.length();v<vLen;v++)
	{
		if(GetLvar(cr,TentVars[v])==0)
		{
			vars.insertLast(TentVars[v]);
			count++;
		}
	}
	
	return(count);
}

uint GetTakenTentVars(Critter&cr,array<uint>&vars)
{
	return(GetTakenTentVars(cr.Id,vars));
}

uint GetTakenTentVars(uint crId,array<uint>&vars)
{
	uint count=0;
	
	for(uint v=0,vLen=TentVars.length();v<vLen;v++)
	{
		if(GetLvar(crId,TentVars[v])>0)
		{
			vars.insertLast(TentVars[v]);
			count++;
		}
	}
	
	return(count);
}

uint GetAllTents(array<Location@>&locations)
{
	uint result=0;
	
	for(uint t=0,tLen=allTents.length();t<tLen;t++)
	{
		result+=GetAllLocations(allTents[t],locations);
	}
	
	return(result);
}

uint GetAllShelters(array<Location@>&locations)
{
	uint result=0;
	
	for(uint s=0,sLen=allShelters.length();s<sLen;s++)
	{
		result+=GetAllLocations(allShelters[s],locations);
	}
	
	return(result);
}

uint GetAllHouses(array<Location@>&locations)
{
	uint result=0;
	
	for(uint h=0,hLen=allHouses.length();h<hLen;h++)
	{
		result+=GetAllLocations(allHouses[h],locations);
	}
	
	return(result);
}

uint GetTentLocations(Critter&tentOwner,array<Location@>&locations)
{
	return(GetTentLocations(tentOwner.Id,locations));
}

uint GetTentLocations(uint tentOwnerId,array<Location@>&locations)
{
	uint result=0;
	
	array<uint>vars;
	uint varsCount=GetTakenTentVars(tentOwnerId,vars);
	for(uint v=0;v<varsCount;v++)
	{
		int locId=GetLvar(tentOwnerId,vars[v]);
		if(locId>0)
		{
			Location@loc=GetLocation(locId);
			if((@loc!=null)&&IsTentOwner(loc,tentOwnerId))
			{
				locations.insertLast(loc);
				result++;
			}
		}
	}
	
	return(result);
}

Location@GetNearestTentLocation(Critter&tentOwner,uint16 wx,uint16 wy)
{
	return(GetNearestTentLocation(tentOwner.Id,wx,wy));
}

Location@GetNearestTentLocation(uint tentOwnerId,uint16 wx,uint16 wy)
{
	Location@loc;
	Location@nearest;
	uint dist=uint(-1);
	
	array<Location@>tents;
	uint tLen=GetTentLocations(tentOwnerId,tents);
	
	for(uint t=0;t<tLen;t++)
	{
		if(!(@tents[t]!=null)||tents[t].IsNotValid)
		{
			Log("Invalid tent location, looking further...");
			continue;
		}
		
		uint tmp=(sqrt(((tents[t].WorldX)-(wx))*((tents[t].WorldX)-(wx))+((tents[t].WorldY)-(wy))*((tents[t].WorldY)-(wy))));
		
		{;};
		{;};
		
		if(tmp<dist)
		{
			dist=tmp;
			@nearest=@tents[t];
		}
	}
	
	if(!(@nearest!=null))
	Log("Couldn't obtain nearest tent of critter<"+tentOwnerId+">");
	
	return(nearest);
}

bool CreateTent(Critter&leader,uint var,uint&out id,uint locationpid,bool easterEgg)
{
	array<Critter@>group;
	uint locId=CreateLocationForGroup(leader,locationpid,leader.WorldX,leader.WorldY,group);
	
	if(locId==0)
	{
		Log("Failed to create a tent base location on map with id "+leader.GetMapId()+" and PID "+locationpid);
		leader.Say((11),"Failed to create tent camp. Try on another map.");
		return false;
	}
	
	RemoveTentByVar(leader,var,true);
	SetLvar(leader,var,locId);
	
	Log("Tent base location created with the id "+locId+" and PID "+locationpid);
	
	Location@loc=GetLocation(locId);
	Map@map=loc.GetMapByIndex(0);
	
	FLog((14),"TENT "+loc.Id+" "+loc.GetProtoId()+" "+loc.WorldX+" "+loc.WorldY);
	
	if((@map!=null))
	{
		Map@encountermap=leader.GetMap();
		
		MoveCars(encountermap,map);
		
		for(uint i=0;i<group.length();i++)
		{
			group[i].TransitToMap(map.Id,0);
		}
		
		SetLLvar(loc,(3110),leader.Id);
		SetLLvar(loc,(3111),(1)); 
		
		for(uint m=0,mLen=loc.GetMapCount();m<mLen;m++)
		{
			Map@lmap=loc.GetMapByIndex(m);
			if((@lmap!=null))
			{
				map.SetScript("map_tent@map_init");
				{};
				lmap.SetData((20),leader.Id);
				
				if(locationpid==(211)&&easterEgg&&m==0)
				{
					Item@tree=map.AddItem(73,58,820,1);
					if((@tree!=null))
					{
						tree.Flags=(0x00000200)|(0x00001000)|(0x02000000);
						tree.PicMap=tree.PicInv=GetStrHash("art\\scenery\\newtree2.fofrm");
						SetLexem(tree,"$-","Tree");
						SetLexem(tree,"$~","It is just an old tree, what more do you expect of it?");
						tree.Update();
					}
				}
			}
		}
		
		loc.Color=(uint(((120)<<24)|(((46)&0xFF)<<16)|(((111)&0xFF)<<8)|((146)&0xFF)));
		loc.Update();
		
		string tentName="Yet Another Tent";
		if(!(@GetNearestTentLocation(leader,leader.WorldX,leader.WorldY)!=null))
		tentName="Home Sweet Home";
		
		Buffer@buffer=NewBuffer();
		buffer<<tentName;
		if(!SetPersonalData(loc,"tentName",buffer.AsUint8()))
		leader.Say((11),"WARN: Couldn't change tent name.");
	}
	else
	{
		leader.Say((11),"ERR: No map in location");
		Log("ERR: No map in location with ID "+locId);
	}
	
	return true;
}

void TryCreateTent(Critter&cr)
{
	uint var=0;
	if(GetFreeTentVar(cr,var)&&var>0)
	{
		TryCreateTent(cr,var);
	}
	else
	{
		array<uint>vars;
		uint vLen=GetTentVars(vars);
		cr.ShowScreen((2),vLen,"answer_TryCreateTent");
		cr.Say((18),"You have too many tents to remember positions of all of them. Pick a one which you won't need anymore.");
		for(uint v=0;v<vLen;v++)
		{
			string tentName="Tent #"+(v+1);
			Location@location=GetLocation(GetLvar(cr,vars[v]));
			if((@location!=null))
			{
				array<uint8>raw;
				if(IsPersonalData(location,"tentName")&&
				GetPersonalData(location,"tentName",raw))
				{
					string name="";
					Buffer@buffer=NewBuffer(raw);
					buffer>>name;
					if(name.length()>0)
					{
						tentName=name;
					}
				}
			}
			
			cr.Say((19+(v)),"|"+(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((150)&0xFF)<<8)|((0)&0xFF)))+" "+tentName);
		}
	}
}

void TryCreateTent(Critter&cr,uint var)
{
	if(cr.Cond==(4))
	{
		cr.Say((11),"You see dead people... it's better to don't show them where you gonna stay.");
		return;
	}
	else if(cr.Cond==(3))
	{
		
		cr.Say((11),"Creating a tent now may be a difficult task... You're not sure if your hands are still connected to your torso.");
		return;
	}
	else if(cr.Cond==(2))
	{
		cr.Say((11),"You decided to lay down for a little bit...");
		return;
	}
	
	Map@map=cr.GetMap();
	
	if(!(@map!=null))
	{
		cr.Say((11),"Invalid map.");
		return;
	}
	
	if(!CanCreateTent(map))
	{
		cr.Say((11),"You need to be on a valid map to build a camp.");
		return;
	}
	
	array<Critter@>crits;
	uint num=map.GetCritters(0,(0x03),crits);
	for(uint c=0;c<num;c++)
	{
		if(crits[c].Id==cr.Id)
		continue;
		else if(IsOwnersFollower(cr,crits[c])&&IsFollowing(crits[c]))
		continue;
		else
		{
			cr.Say((11),"There are other critters nearby, you need to be alone.");
			return;
		}
	}
	
	if(cr.Timeout[(944)]>0)
	cr.SayMsg((11),(3),(790));
	else if(cr.Timeout[(238)]>0||map.IsTurnBased())
	cr.SayMsg((11),(3),(791));
	
	uint pid=0;
	bool easterEgg=false;
	Location@location=map.GetLocation();
	if((@location!=null)&&location.GetProtoId()==(84)&&map.GetProtoId()==(123))
	{
		easterEgg=true;
		pid=(211);
	}
	else
	{
		pid=GetTentLocationPid(GetMapType(map),cr.Param[(348)]>0);
		if(pid==0)
		{
			cr.Say((11),"This is not a suitable place to build a camp, look for a better place.");
			return;
		}
	}
	
	uint id=0;
	if(!CreateTent(cr,var,id,pid,easterEgg))
	{
		cr.Say((11),"Something went wrong when building the camp.");
		return;
	}
	
	cr.Say((11),"You found a good place to build the tent camp.");
	
	cr.DeleteItem((3856),1);
}

void answer_TryCreateTent(Critter&cr,uint tentVarIdx,string&)
{
	Map@map=cr.GetMap();
	
	if(!(@map!=null))
	{
		cr.Say((11),"Invalid map.");
		return;
	}
	
	if(tentVarIdx>=GetTentVarsCount())
	{
		cr.Say((11),"INTERNAL ERROR: varIndex>=varLength : "+tentVarIdx+">="+GetTentVarsCount()+" : please report");
		return;
	}
	
	TryCreateTent(cr,TentVars[tentVarIdx]);
}

bool CanCreateTent(Map&map)
{
	Location@location=map.GetLocation();
	
	if((@location!=null)&&location.GetProtoId()==(84)&&map.GetProtoId()==(123))
	return(true);
	
	if(!IsEncounterMap(map))
	return(false);
	
	return(true);
}

bool RemoveTent(Critter&cr,Location&tent,bool recycle)
{
	for(uint v=0,vLen=TentVars.length();v<vLen;v++)
	{
		if(uint(GetLvar(cr,TentVars[v]))==tent.Id)
		{
			return(RemoveTentByVar(cr,TentVars[v],recycle));
		}
	}
	
	return(false);
}

bool RemoveTentByVar(Critter&cr,uint var,bool recycle)
{
	int tentLocId=GetLvar(cr,var);
	if(tentLocId!=0)
	{
		Location@tent=GetLocation(tentLocId);
		if((@tent!=null))
		{
			cr.UnsetKnownLoc(true,tent.Id);
			SetLvar(cr,var,0);
			if(recycle)
			RecycleTent(tent);
			DeleteLocation(tentLocId);
			
			return(true);
		}
	}
	
	return(false);
}

void RemoveAllTents(Critter&cr,bool recycle)
{
	for(uint v=0,vLen=TentVars.length();v<vLen;v++)
	{
		RemoveTentByVar(cr,TentVars[v],recycle);
	}
}       

uint GetTentVersion(Location&tent)
{
	int version=GetLLvar(tent,(3111));
	
	return(version);
}

uint GetTentVersion(Map&tent)
{
	Location@location=tent.GetLocation();
	if((@location!=null))
	return(GetTentVersion(location));
	
	return(0);
}

bool IsTentOwner(Location&tent,Critter&cr)
{
	return(IsTentOwner(tent,cr.Id));
}

bool IsTentOwner(Location&tent,uint crId)
{
	return(uint(GetLLvar(tent,(3110)))==crId);
}

bool IsTentOwner(Map&tent,Critter&cr)
{
	uint version=GetTentVersion(tent);
	
	if(version==0)
	return(uint(tent.GetData((20)))==cr.Id);
	
	else if(version==1)
	{
		Location@location=tent.GetLocation();
		if((@location!=null))
		return(IsTentOwner(location,cr));
	}
	
	else
	cr.Say((11),"ERR: invalid ver<"+version+"> please report");
	
	return(false);
}  

void _RegenItem(Item&item,bool firstTime)
{
	item.PicMap=GetStrHash("art\\items\\ground_tent.png");
	item.Flags=(0x00000010)|(0x00000008)|(0x00000200)|(0x00001000)|(0x00000800)|(0x02000000)|(0x10000000);
	for(int e=0;e<(8);e++)
	{
		item.SetEvent(e,"");
	}
	item.SetEvent((4),"_RegenItemSkill");
	SetLexem(item,"$-","Special Tent Item");
	SetLexem(item,"$~","You see Special Tent Item.");
	item.Update();
}

bool _RegenItemSkill(Item&item,Critter&player,int skill)
{
	Map@map=GetMap(item.MapId);
	if((@map!=null)&&IsTentOwner(map,player))
	{
		player.ParamBase[(90)]=item.Id;
		player.ParamBase[(99)]=1;
		if(IsTentOwner(map,player))
		RunDialog(player,(9061),item.HexX,item.HexY,false);
	}
	
	return(true);
}     

void SetCampfireLight(Item&campfire,uint8 value)
{
	campfire.LightIntensity=(((value)>(90))?(90):(((value)<(50))?(50):(value)));
	campfire.LightDistance=(campfire.LightIntensity/10)-1;
	campfire.Val5;
	campfire.Update();     
	
}

void MakeCampfireUsuable(Item&campfire)
{
	campfire.PicMap=GetStrHash("art\\items\\fireplace.frm");
	if(campfire.LightIntensity<50)
	SetCampfireLight(campfire,50);
	campfire.LightColor=99975000;
	((campfire.Flags)=(campfire.Flags)|((0x00008000)|(0x10000000)));
	campfire.Update();
}

void MakeCampfireUnusuable(Item&campfire)
{
	campfire.PicMap=GetStrHash("art\\scenery\\woodfire.frm");
	campfire.LightIntensity=0;
	campfire.LightDistance=0;
	campfire.LightColor=0;
	(campfire.Flags=((campfire.Flags)&(~((0x00008000)|(0x10000000)))));
	campfire.Update();
}

void _Campfire(Item&item,bool firstTime)
{
	
	item.SetEvent((4),"_UseSkillCampfire");
	item.SetEvent((3),"_UseItemCampfire");
	item.SetEvent((5),"_Drop");
	
	if(firstTime)
	MakeCampfireUnusuable(item);
}

bool _UseItemCampfire(Item&item,Critter&cr,Item@usedItem)
{
	if((((item.Flags)&((0x10000000)))!=0))
	return false;
	if(usedItem.GetProtoId()==(286))
	{
		if(usedItem.GetCount()<3)
		cr.SayMsg((11),(0),(3065));
		else
		{
			cr.SayMsg((11),(0),(3066));
			cr.DeleteItem((286),3);
			MakeCampfireUsuable(item);
		}
		return true;
	}
	else
	return false;
} 

bool _UseSkillCampfire(Item&item,Critter&player,int skill)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return(true); 
	
	if(skill==(-1))
	{
		player.ParamBase[(90)]=item.Id;
		player.ParamBase[(99)]=0;
		RunDialog(player,(9061),item.HexX,item.HexY,false);
	}
	
	return(true);
}

void _Drop(Item&item,Critter&cr)
{
	DeleteItem(item);
}  

Item@GetCampfire(Critter&player)
{
	return(GetItem(player.Param[(90)]));
}

uint r_ThrowSomething(Critter&player,Critter@)
{
	player.ShowScreen((0),0,"");
	player.ShowScreen((4),0,"answer_ThrowSomething");
	return(uint(-1));
}

void answer_ThrowSomething(Critter&cr,uint itemId,string&)
{
	Map@map=cr.GetMap();
	Item@item=GetItem(itemId);
	Item@campfire=GetCampfire(cr);
	if((@item!=null)&&(@campfire!=null))
	{
		uint16 pid=item.Proto.ProtoId;
		
		if(HaveIngredient(item,INGREDIENT_WOOD))
		{
			uint count=(((item.GetCount())>(uint(9-(campfire.LightIntensity/10))))?(uint(9-(campfire.LightIntensity/10))):(((item.GetCount())<(0))?(0):(item.GetCount())));
			{};
			if(count>0)
			{
				uint ret=GetIngredientReturnItem(item,INGREDIENT_WATER);
				
				cr.Say((11),"You've thrown firewood into the campfire.");
				cr.Animate(0,(27),null,true,true);
				do{if(item.GetCount()>(count)) item.SetCount(item.GetCount()-(count));else DeleteItem(item);}while(false);
				if(ret>0)
				cr.AddItem(ret,count);
				SetCampfireLight(campfire,campfire.LightIntensity+(count*10));
			}
			else
			cr.Say((11),"There's already wood for hours.");
		}
		else if(HaveIngredient(item,INGREDIENT_WATER))
		{
			uint count=(((item.GetCount())>(uint((campfire.LightIntensity/10)-5)))?(uint((campfire.LightIntensity/10)-5)):(((item.GetCount())<(0))?(0):(item.GetCount())));
			{};
			if(count>0)
			{
				uint ret=GetIngredientReturnItem(item,INGREDIENT_WATER);
				
				cr.Say((11),"You've poured water on the campfire.");
				cr.Animate(0,(27),null,true,true);
				do{if(item.GetCount()>(count)) item.SetCount(item.GetCount()-(count));else DeleteItem(item);}while(false);
				if(ret>0)
				cr.AddItem(ret,count);
				SetCampfireLight(campfire,campfire.LightIntensity-(count*10));
			}
			else
			cr.Say((11),"On second thought, you've decided to leave the campfire alone.");
		}
		else
		{
			cr.Say((11),"You've thrown something into the campfire.");
			cr.Animate(0,(27),null,true,true);
			
			if(pid==(159)||pid==(25)||
			pid==(26)||pid==(27)||
			pid==(1834)||pid==(421)||
			pid==(32)||pid==(382)||
			pid==(14)||pid==(37)||
			pid==(51)||pid==(206)||
			pid==(85))
			{
				if(pid==(14)||pid==(37))
				pid=(13);
				if(pid==(32)||pid==(382))
				pid=(159);
				if(pid==(51)||pid==(206)||pid==(85))
				pid=(25);
				
				uint clamp=Random(10,25);
				uint strength=(((item.GetCount())>(clamp))?(clamp):(((item.GetCount())<(0))?(0):(item.GetCount())));
				if(strength>0&&(@map!=null))
				{
					for(uint s=0;s<strength;s++)
					{
						uint min=((5)*__TimeMultiplier);
						uint max=((10+s)*__TimeMultiplier);
						
						if(pid==(159)||pid==(1834))
						{
							if(pid==(1834))
							min=((2)*__TimeMultiplier);
							else
							min=((1)*__TimeMultiplier);
							max=((5)*__TimeMultiplier);
						}
						
						if(cr.Param[(6)]<=2&&Random(0,100)<=10)
						min=max=((1)*__TimeMultiplier);
						
						uint[]values=
						{
							campfire.Id,
							map.Id,
							Random(campfire.HexX-1,campfire.HexX+1),
							Random(campfire.HexY-1,campfire.HexY+1),
							pid,
							cr.Id
						};
						
						CreateTimeEvent(((__FullSecond)+(Random(min,max))),"e_ThrowingExplode",values,true);
					}
				}
			}
			
			if(Random(1,100)<=23)
			{
				Item@recycler=GetRecycler(TENT_RECYCLER);
				if((@recycler!=null))
				MoveItem(item,Random(1,item.GetCount()),recycler,0);
			}
			
			DeleteItem(item);
		}
	}
}

uint e_ThrowingExplode(array<uint>@values)
{
	if((@values!=null)&&values.length()>=1)
	{
		Item@campfire=GetItem(values[0]);
		values.removeAt(0);
		CreateTimeEvent(((__FullSecond)+(1)),"throwing@e_Explode",values,false);
		if((@campfire!=null)&&(((campfire.Flags)&((0x10000000)))!=0))
		MakeCampfireUnusuable(campfire);
	}
	
	return(0);
}  

bool d_IsTentOwner(Critter&player,Critter@)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	return(false);
	
	return(IsTentOwner(map,player));
}

bool d_IsNotTentOwner(Critter&player,Critter@)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	return(false);
	
	return(!IsTentOwner(map,player));
}

bool d_KnowLocation(Critter&player,Critter@)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	return(false);
	
	return(player.IsKnownLoc(true,map.GetLocation().Id));
}

uint r_ForgetLocation(Critter&player,Critter@)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	return(0);
	
	if(player.IsKnownLoc(true,map.GetLocation().Id))
	player.UnsetKnownLoc(true,map.GetLocation().Id);
	
	return(0);
}

uint r_TentName(Critter&player,Critter@)
{
	player.ShowScreen((5),0,"answer_TentName");
	return(uint(-1));
}

void answer_TentName(Critter&player,uint,string&name)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	{
		player.Say((11),"Invalid map.");
		return;
	}
	
	if(!IsTentOwner(map,player))
	{
		player.Say((11),"It's not your tent.");
		return;
	}
	
	Location@location=map.GetLocation();
	if(!(@location!=null))
	{
		player.Say((11),"Invalid location.");
		return;
	}
	
	Buffer@buffer=NewBuffer();
	buffer<<name;
	if(SetPersonalData(location,"tentName",buffer.AsUint8()))
	player.Say((11),"Tent name changed to: "+name);
	else
	player.Say((11),"ERR: Couldn't change tent name.");
}

uint r_CreateMap(Critter&player,Critter@)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	{
		player.Say((11),"Invalid map.");
		return(uint(-1));
	}
	
	if(!IsTentOwner(map,player))
	{
		player.Say((11),"It's not your tent.");
		return(uint(-1));
	}
	
	Location@location=map.GetLocation();
	if(!(@location!=null))
	{
		player.Say((11),"Invalid location.");
		return(uint(-1));
	}
	
	string lex=player.Name+"'s tent";
	
	array<uint8>raw;
	if(IsPersonalData(location,"tentName")&&GetPersonalData(location,"tentName",raw))
	{
		string name="";
		Buffer@buffer=NewBuffer(raw);
		buffer>>name;
		if(name.length()>0)
		lex+=" ("+name+")";
	}
	
	Item@mapItem=CreateMapTo(player,location,0,lex);
	
	if((@mapItem!=null))
	{
		player.Say((11),"You've created a map to this location.");
	}
	
	return(0);
}

uint r_AbandonTent(Critter&player,Critter@)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	{
		player.Say((11),"Invalid map.");
		return(uint(-1));
	}
	
	if(!IsTentOwner(map,player))
	{
		player.Say((11),"It's not your tent.");
		return(uint(-1));
	}
	
	Location@location=map.GetLocation();
	if(!(@location!=null))
	{
		player.Say((11),"Invalid location.");
		return(uint(-1));
	}
	
	player.ShowScreen((2),1,"answer_AbandonTent");
	player.Say((18),"Are you REALLY sure you want to abandon this location? All items (including vehicles) left will be lost.");
	player.Say((19+(0)),"YES");
	
	return(uint(-1));
}

void answer_AbandonTent(Critter&player,uint,string&)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	{
		player.Say((11),"Invalid map.");
		return;
	}
	
	if(!IsTentOwner(map,player))
	{
		player.Say((11),"It's not your tent.");
		return;
	}
	
	Location@location=map.GetLocation();
	if(!(@location!=null))
	{
		player.Say((11),"Invalid location.");
		return;
	}
	
	array<Critter@>critters;
	uint count=LocationGetCritters(location,(0x0F),critters);
	for(uint c=0;c<count;c++)
	{
		critters[c].TransitToGlobal(false);
	}
	player.AddItem((3856),1);
	
	if(!RemoveTent(player,location,true))
	DeleteLocation(location.Id);
	
	return;
}

bool d_IsUpgradeAvailable(Critter&player,Critter@,int pid)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	return(false);
	
	if(!IsTentOwner(map,player))
	return(false);
	
	Location@location=map.GetLocation();
	
	if(!(@location!=null))
	return(false);
	
	return(ContainsDynamicItems(location,pid));
}

uint r_InstallUpgrade(Critter&player,Critter@,int pid)
{
	Map@map=player.GetMap();
	
	if(!(@map!=null))
	return(0);
	
	if(!IsTentOwner(map,player))
	return(0);
	
	Location@location=map.GetLocation();
	
	if(!(@location!=null))
	return(0); 
	
	if(ContainsDynamicItems(location,pid))
	{
		uint found=0,shown=0;
		ShowAllDynamicItems(location,pid,found,shown);
		
		if(found!=shown)
		player.Say((11),"WARNING: not all items has been created");
	}
	
	return(0);
}  

void myinfo_tent(Critter&player)
{
	string red="|"+(uint((0xFF<<24)|(((255)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))+" ";
	string green="|"+(uint((0xFF<<24)|(((0)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)))+" ";
	
	array<uint>vars;
	GetTakenTentVars(player,vars);
	uint varsLen=vars.length();
	
	if(varsLen>0)
	{
		player.Say((11),"Tent"+(varsLen>1?"s":"")+" position"+(varsLen>1?"s":"")+":");
		
		for(uint v=0;v<varsLen;v++)
		{
			int locId=GetLvar(player,vars[v]);
			if(locId>0)
			{
				Location@loc=GetLocation(locId);
				if((@loc!=null))
				{
					string tentName="Tent #"+(v+1);
					
					array<uint8>raw;
					if(IsPersonalData(loc,"tentName")&&
					GetPersonalData(loc,"tentName",raw))
					{
						string name="";
						Buffer@buffer=NewBuffer(raw);
						buffer>>name;
						if(name.length()>0)
						tentName=name;
					}
					player.Say((11)," "+(v+1)+") "+tentName+": "+red+loc.WorldX+green+","+red+loc.WorldY);
				}
				else
				{
					string err="Cannot find tent location<"+locId+"> for player <"+player.Id+">";
					Log(err);
					player.Say((11),err+", please report.");
				}
			}
		}
	}
}                                                                                

