

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                   

funcdef bool TRIGGER_FUNC(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values);                                                                                                                                                      

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";                                                                                                                                                                                       

array<TRIGGER_FUNC@>TriggerFuncs=
{
	@Default,
	@AntiBlock,
	@Aggravate,
	@Teleport,
	@FLCRobbery,
	@TeleportMap,
	@TeleportEntMap
};       

bool Default(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	cr.Say((11),"Default trigger.");
	cr.Say((11),"Trigger function tick #"+count+".");
	return true;
}     

void _AntiBlock(Item&tr,bool firstTime)
{
	TriggerInit(tr,(1),(0x00000800),0,1);
}

bool AntiBlock(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	if(count<15)
	{
		if(count>2)
		cr.SayMsg((11),(0),count<5?4300:4301);
		if(count>6)
		{
			cr.SendMessage((1001),(0),(0));
			SetCritterIllegalFlag(cr,(0x00000004));
		}
		return true;
	}
	else
	{
		cr.SendMessage((1001),(1),(0));
		return false;
	}
}     

void _Aggravate(Item&tr,bool firstTime)
{
	TriggerInit(tr,(2),(0x00000800),0,0);
}

bool Aggravate(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	array<Critter@>critters;
	cr.GetMap().GetCritters(0,(0x01)|(0x20),critters);
	for(int i=0,j=critters.length();i<j;i++)
	{
		if(critters[i].Param[(106)]==tr.Val2)
		{
			if(critters[i].IsNoPlanes())
			{
				AddAttackPlane(critters[i],(50),cr);
			}
		}
	}
	return false;
}      

void _Teleport(Item&tr,bool firstTime)
{
	TriggerInit(tr,(3),(0x00000800),0,0);
}

bool Teleport(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	cr.TransitToHex(uint16(tr.Val2),uint16(tr.Val3),uint8(tr.Val4));
	return false;
}

void teleport(Critter&cr,int x,int y,int dir)
{
	Map@map=cr.GetMap();
	if((@map!=null))
	{
		Item@trigger=map.AddItem(cr.HexX,cr.HexY,(825),1);
		_Teleport(trigger,true);
		trigger.Val2=x;
		trigger.Val3=y;
		trigger.Val4=dir;
		cr.Say((11),"Placing teleport trigger Id "+trigger.Id+" teleporting to ["+x+","+y+"].");
	}
	else
	{
		cr.Say((11),"You have to be in a valid map to put a teleport trigger");
	}
}      

void _FLCRobbery(Item&tr,bool firstTime)
{
	TriggerInit(tr,(4),(0x00000800),0,0);
}

bool FLCRobbery(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	
	array<Critter@>critters;
	cr.GetMap().GetCritters(0,(0x01)|(0x20),critters);
	for(int i=0,j=critters.length();i<j;i++)
	{ 
		
		if(critters[i].Param[(106)]==tr.Val2)
		{
			if(critters[i].IsNoPlanes())
			{
				AddAttackPlane(critters[i],(50),cr);
			}
		}
	} 
	
	return false;
}     

void _TeleportMap(Item&tr,bool firstTime)
{
	TriggerInit(tr,(5),(0x00000800),0,0);
}

bool TeleportMap(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	cr.TransitToMap(uint16(tr.Val1),uint16(tr.Val2),uint16(tr.Val3),uint8(tr.Val4));
	return false;
}    

void _TeleportEntMap(Item&tr,bool firstTime)
{
	TriggerInit(tr,(6),(0x00000800),0,0);
}

bool TeleportEntMap(Item&tr,Critter@cr,uint dir,uint count,array<uint>@values)
{
	cr.TransitToMap(uint16(tr.Val2),uint16(tr.Val3));
	return false;
}      

void _Trigger(Item&tr,bool firstTime)
{
	tr.SetEvent((7),"_TriggerStep");
} 

void TriggerInit(Item@tr,uint funcId,uint settings,uint delay,uint nextTick)
{
	tr.SetEvent((7),"_TriggerStep");
	tr.Val0=funcId;
	(((tr.Val1))=((tr.Val1))|(settings));
	tr.Val1=(((tr.Val1)&0xFF00FFFF)|(((delay)&0xFF)<<16));
	tr.Val1=(((tr.Val1)&0x00FFFFFF)|(((nextTick)&0xFF)<<24));
}   

bool hexHasTrigger(Map@map,uint16 x,uint16 y,int func,int settings)
{
	if(!(@map!=null))
	return false;
	
	array<Item@>triggers;
	uint triggersNum=map.GetItems(x,y,0,(825),triggers);
	for(uint i=0;i<triggersNum;i+=1)
	{
		if(((triggers[i].Val0)==func)&&((triggers[i].Val1)==settings))
		return true;
	}
	return false;
}   

void _TriggerStep(Item&tr,Critter&cr,bool entered,uint8 dir)
{
	if(entered)
	{ 
		
		if(cr.IsPlayer()&&((((tr.Val1))&((0x00000200)))!=0))
		return;
		if((((cr.Param[(534)]&((0x00000020)))!=0))&&((((tr.Val1))&((0x00000400)))!=0))
		return;
		if((cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&((((tr.Val1))&((0x00000800)))!=0))
		return;  
		
		if(!((((tr.Val1))&((0x00000100)))!=0))
		{
			Map@map=cr.GetMap();
			uint16 prevHexX=cr.HexX;
			uint16 prevHexY=cr.HexY;
			map.MoveHexByDir(prevHexX,prevHexY,(((((dir))+(3))%6)),1);
			if(hexHasTrigger(map,prevHexX,prevHexY,(tr.Val0),(tr.Val1)))
			return;
		}
		
		array<uint>values={tr.Id,cr.Id,uint(dir),0};
		CreateTimeEvent(((__FullSecond)+((((((tr.Val1)>>16)&0xFF))*__TimeMultiplier))),"e_TriggerTick",values,true);
	}
}   

uint e_TriggerTick(array<uint>@values)
{
	Item@tr=GetItem(values[(0)]);
	if(!(@tr!=null))
	return 0;
	
	Critter@cr=GetCritter(values[(1)]);
	if((@cr!=null)||((((tr.Val1))&((0x00004000)))!=0))
	{
		bool repeat=false;
		
		if(((((tr.Val1))&((0x00002000)))!=0))
		{
			repeat=TriggerFuncs[(tr.Val0)](tr,cr,values[(2)],values[(3)],values);
			values[(3)]+=1;
		}
		else if((@cr!=null))
		{
			if(hexHasTrigger(cr.GetMap(),cr.HexX,cr.HexY,(tr.Val0),(tr.Val1)))
			{
				repeat=TriggerFuncs[(tr.Val0)](tr,cr,values[(2)],values[(3)],values);
				values[(3)]+=1;
			}
		}
		
		if(((((tr.Val1))&((0x00001000)))!=0))
		{
			DeleteItem(tr);
			return 0;
		}
		
		if(repeat&&(((tr.Val1)>>16)&0xFF)==0&&values[(3)]==1&&(((tr.Val1)>>24)&0xFF)>0)
		{
			CreateTimeEvent(((__FullSecond)+((((((tr.Val1)>>24)&0xFF))*__TimeMultiplier))),"e_TriggerTick",values,true);
			return 0;
		}
		else
		{
			if(repeat&&(((tr.Val1)>>24)&0xFF)>0)
			return(((((tr.Val1)>>24)&0xFF))*__TimeMultiplier);
			else
			return 0;
		}
	}
	return 0;
}

