

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";             

uint[][]PositionDirs=
{
	{0},
	
	{1,4,3,2,1,0,5,2,3,4,5,0,1},
	{1,5,0,1,2,3,4,1,0,5,4,3,2},
	{1,4,2},
	{1,5,1},
	{2,4,5,0,0,4,5,3,3,0,0,1,2,3,3,1,2},
	{2,4,5,1,2},
	{2,4,4,0,0,4,4,3,3,0,0,2,2,3,3,2,2},
	{2,5,5,0,0,5,5,3,3,0,0,1,1,3,3,1,1},
	{2,4,5,0,0,0,0,4,5,3,3,3,3,0,0,0,0,1,2,3,3,3,3,1,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,0,5,5,5,5,5,4,4,4,4,3,3,3,3,3,5,5,5,5,5,4,4,4,4,3,3,3,3,3,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,5,0,5,5,5,5,5,4,4,4,4,3,3,3,3,3,5,5,5,5,5,4,4,4,4,3,3,3,3,3,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
};

void creepy(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return;
	
	uint count=PositionDirs[10].length()-1;
	array<uint16>coords;
	FormationCoordinates(map,coords,cr.HexX,cr.HexY-1,3,10,1,count,0);
	array<uint>values;
	values.resize(coords.length()/8+3);
	values[0]=0;
	values[1]=cr.HexX;
	values[2]=cr.HexY-1;
	
	for(uint i=0;i<coords.length();i+=8)
	{
		Critter@spawned=map.AddNpc(11,coords[i],coords[i+1],0,null,null,"");
		
		if((@spawned!=null))
		{
			values[3+i/8]=spawned.Id;
			spawned.ParamBase[(517)]=1;
			spawned.ParamBase[(534)]=spawned.ParamBase[(534)]|(0x00040000);
			spawned.ParamBase[(84)]=1;
		}
	}
	
	CreateTimeEvent((__FullSecond)+((200)*__TimeMultiplier/1000),"e_Cre",values,false);
}

uint e_Cre(array<uint>@values)
{
	Critter@cr=GetCritter(values[3]);
	if(!(@cr!=null))
	{
		for(uint i=0;i<values.length()-3;i++)
		{
			Critter@crit=GetCritter(values[3+i]);
			if((@crit!=null))
			{
				DeleteNpc(crit);
			}
		}
		return 0;
	}
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return 0;
	array<uint16>coords;
	FormationCoordinates(map,coords,values[1],values[2],3,10,1,(values.length()-3)*4,0);
	
	bool msg=false;
	bool delete=false;
	if(values[0]%(values.length()*2/3)==0)
	msg=true;
	
	for(uint i=0;i<values.length()-3;i++)
	{
		Critter@crit=GetCritter(values[3+i]);
		uint x=coords[(i*8+values[0]*4)%coords.length()];
		uint y=coords[(i*8+values[0]*4+1)%coords.length()];
		if((@crit!=null))
		{
			crit.DropPlanes();
			if(crit.IsLife())
			{
				if(msg&&i%4==0)
				crit.Say((2),"Happy Valentine!");
				AddWalkPlane(crit,0,x,y,GetDirection(crit.HexX,crit.HexY,x,y),false,0);
			}
		}
		else
		delete=true;
	}
	if(delete)
	{
		for(uint i=0;i<values.length()-3;i++)
		{
			Critter@crit=GetCritter(values[3+i]);
			if((@crit!=null))
			{
				DeleteNpc(crit);
			}
		}
	}
	
	values[0]=(1+values[0])%((values.length()-3)*2);
	
	return((300)*__TimeMultiplier/1000);
}

import void MovePositionPoint(Map&map,uint16&pointX,uint16&pointY,array<uint>&positionDirs,uint pathIndex,uint count,uint spacing)from"worldmap";
import void RotatePosition(uint toDir,array<uint>&positionsDirs)from"worldmap";

void FormationCoordinates(Map&map,array<uint16>&coordinates,uint16 startX,uint16 startY,uint8 startDir,uint formation,uint spacing,uint count,uint skipFirst)
{
	coordinates.resize(2*count);
	
	uint16[]pointX={startX,startX};
	uint16[]pointY={startY,startY};
	
	array<uint>positionDirs=PositionDirs[formation];
	int steps=positionDirs[0];
	
	uint8 freeDir=(startDir+3)%6;
	if(freeDir!=0)
	RotatePosition(freeDir,positionDirs);
	uint reversDir=freeDir+3;
	if(reversDir>5)
	reversDir-=6;
	
	uint16 hx=pointX[0],hy=pointY[0];
	MovePositionPoint(map,pointX[1],pointY[1],positionDirs,1,0,spacing);
	
	uint16 oldPosX=startX,oldPosY=startY;
	uint16 posX,posY;
	
	for(uint curCount=0;curCount<count+skipFirst;curCount++)
	{
		uint pathIndex=curCount%2;
		posX=pointX[pathIndex];
		posY=pointY[pathIndex];
		MovePositionPoint(map,pointX[pathIndex],pointY[pathIndex],positionDirs,pathIndex,curCount/2+pathIndex,spacing);
		
		map.GetHexCoord(oldPosX,oldPosY,posX,posY,0.0f,0);
		oldPosX=posX;
		oldPosY=posY;
		
		if(curCount>=skipFirst)
		{
			coordinates[(curCount-skipFirst)*2]=posX;
			coordinates[(curCount-skipFirst)*2+1]=posY;
		}
	}
}                                                                                                        

class MSquad
{
	int id;
	
	int stepy;
	bool run;
	
	uint objective;
	uint objectiveExt;
	uint behaviour;
	uint mode;
	uint formation;
	uint spacing;
	
	uint16 posX;
	uint16 posY;
	uint8 posDir;
	
	uint leader;
	array<uint>members;
	array<uint>memberRoles;  
	
	MSquad()
	{
		spacing=1;
		stepy=0;
	}
	
	void UpdateFormation()
	{
		
		Critter@leaderCr=GetCritter(leader);
		if(!(@leaderCr!=null))
		return;
		
		array<Critter@>critters;
		uint cnt=members.length();
		critters.resize(cnt);
		for(uint i=0;i<cnt;i++)
		{
			@critters[i]=GetCritter(members[i]);
		}
		
		array<uint16>coords;
		Map@map=leaderCr.GetMap();
		if(!(@map!=null))
		return;
		FormationCoordinates(map,coords,leaderCr.HexX,leaderCr.HexY,leaderCr.Dir,formation,spacing,cnt,0);
		
		for(uint i=0;i<cnt;i++)
		{
			if(critters[i].Id==leader)
			{
				Critter@swap=critters[i];
				@critters[i]=critters[0];
				@critters[0]=swap;
				uint slh=members[i];
				members[i]=members[0];
				members[0]=slh;
				break;
			}
		}
		
		for(uint i=1;i<cnt;i++)
		{
			uint min=uint(-1);
			uint minInd=0;
			uint cur=0;
			for(uint j=i;j<cnt;j++)
			{
				cur=GetDistantion(coords[i*2],coords[i*2+1],critters[j].HexX,critters[j].HexY);
				if(cur<min)
				{
					minInd=j;
					min=cur;
				}
			}
			
			Critter@swap2=critters[i];
			@critters[i]=critters[minInd];
			@critters[minInd]=swap2;
			uint slh2=members[i];
			members[i]=members[minInd];
			members[minInd]=slh2;
		} 
		
		for(uint i=0;i<cnt;i++)
		{
			critters[i].ParamBase[(517)]=1;
			critters[i].SetEvent((36),"_PlaneEnd");
			critters[i].DropPlanes();
			if(!AddWalkPlane(critters[i],0,coords[i*2],coords[i*2+1],leaderCr.Dir,GetDistantion(coords[i*2],coords[i*2+1],critters[i].HexX,critters[i].HexY)>1,0))
			stepy++;
		}
	}
	
	void MoveTo(uint16 x,uint16 y,bool run)
	{
		Critter@leaderCr=GetCritter(leader);
		if(!(@leaderCr!=null))
		return;
		uint8 dir=GetDirection(leaderCr.HexX,leaderCr.HexY,x,y);
		leaderCr.SetDir(dir);
		stepy=0;
		this.run=run;
		UpdateFormation();
		posX=x;
		posY=y;
		posDir=dir;
	}
	
	bool AddMember(Critter&critter,uint role)
	{
		for(uint i=0;i<members.length();i++)
		{
			if(members[i]==critter.Id)
			return false;
		}
		members.insertLast(critter.Id);
		return true;
	}
	
	bool MakeLeader(Critter&critter)
	{
		for(uint i=0;i<members.length();i++)
		{
			if(members[i]==critter.Id)
			{
				leader=critter.Id;
				return true;
			}
		}
		return false;
	}
	
	void memberKilled(Critter&cr,Critter@attacker)
	{
		for(uint i=0;i<members.length();i++)
		{
			if(members[i]==cr.Id)
			{
				members.removeAt(i);
				memberRoles.removeAt(i);
				if(cr.Id==leader)
				{
					leader=0;
					leaderKilled(cr,attacker);
				}
				return;
			}
		}
	}
	
	void leaderKilled(Critter&cr,Critter@attacker)
	{}
	
	int planeEnd(Critter&follower,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
	{
		if(reason!=(30))
		return(0);
		stepy++;
		if(stepy==int(members.length()))
		{
			Critter@leaderCr=GetCritter(leader);
			if(!(@leaderCr!=null))
			return(2);
			
			array<Critter@>critters;
			uint cnt=members.length();
			critters.resize(cnt);
			for(uint i=0;i<cnt;i++)
			{
				@critters[i]=GetCritter(members[i]);
				if(!(@critters[i]!=null))
				Log("kidding me"+i+" "+members[i]);
			}
			
			array<uint16>coords;
			Map@map=leaderCr.GetMap();
			if(!(@map!=null))
			return(2);
			FormationCoordinates(map,coords,posX,posY,posDir,formation,spacing,cnt,0); 
			
			for(uint i=0;i<cnt;i++)
			{
				critters[i].ParamBase[(517)]=1;
				critters[i].SetEvent((36),"_PlaneEnd");
				critters[i].DropPlanes();
				AddWalkPlane(critters[i],0,coords[i*2],coords[i*2+1],posDir,run,0);
			}
		}
		return(0);
	}
	
	void memberFinish(Critter&cr,bool deleted)
	{
		for(uint i=0;i<members.length();i++)
		{
			if(members[i]==cr.Id)
			{
				members.removeAt(i);
				memberRoles.removeAt(i);
				return;
			}
		}
	}
};

int _PlaneEnd(Critter&follower,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	return mysquad.planeEnd(follower,plane,reason,someCr,someItem);
}   

MSquad@mysquad;
void squad2(Critter&cr,int x,int y,int r)
{
	mysquad.MoveTo(x,y,r>0);
}

void squad(Critter&cr,int formation,int,int)
{
	if((@mysquad!=null))
	{
		mysquad.formation=formation;
		mysquad.UpdateFormation();
		return;
	}
	
	@mysquad=MSquad();
	mysquad.formation=formation;
	
	for(uint i=(900);i<=(924);i++)
	{
		if(cr.Followers[i]!=0)
		{
			Critter@critter=GetCritter(cr.Followers[i]);
			if(!(@critter!=null))
			{
				cr.FollowersBase[i]=0;
				continue;
			}
			else
			{
				
				mysquad.AddMember(critter,0);
				if(i==(900))
				{
					mysquad.MakeLeader(critter);
				}
			}
		}
	}
	
	mysquad.UpdateFormation();
	
	array<uint>values;
	
}
