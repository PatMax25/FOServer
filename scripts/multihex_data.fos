//
// FOnline: 2238
// Rotators
//
// multihex_data.fos
//

// To the extent possible under law, the author(s) have dedicated all copyright
// and related and neighboring rights to this script to the public domain.
// This script is distributed without any warranty.

#ifndef __MULTIHEX_DATA__
#define __MULTIHEX_DATA__



// Returns MHexData arrays
//
const array<uint>@ MHexData(uint16 protoId)
{
    switch(protoId)
    {
    case PID_GRAVESITE_V:
        return @MHexDataGravesiteV;
    case PID_GRAVESITE_H:
        return @MHexDataGravesiteH;
    case PID_VAULT_CITY_GATE:
        return @MHexDataVaultCityGate;
    case PID_CORRUGATED_GATE:
        return @MHexDataCorrugatedGate;
    case PID_ACCESS_GATE_1:
        return @MHexDataAccessGate;
    case PID_ACCESS_GATE_2:
        return @MHexDataAccessGate;
	case MARIPOSA_MAIN_DOOR:
        return @MHexDataMariposaMainDoor;
	case V13_MAIN_DOOR:
	case PID_UNSIGNED_VAULT_DOOR_RUSTY:
	case PID_UNSIGNED_VAULT_DOOR_LIGHT:
	case PID_UNSIGNED_VAULT_DOOR_RUSTY_2:
		return @MHexDataVault13MainDoor;
	case V13_MAIN_GATE:
		return @MHexDataVault13MainGate;
	case PID_CATHEDRAL_DOOR:
		return @MHexDataCathedralDoor;
	case PID_WAREHOUSE_DOOR_2:
		return @MHexDataWarehouseDoor_2;
	case PID_WAREHOUSE_DOOR:
		return @MHexDataWarehouseDoor;
	case PID_WAREHOUSE_DOOR_BIG:
		return @MHexDataWarehouseDoorBig;
	case PID_REACTOR_DOOR:
		return @MHexDataReactorDoor;
    }
    return null;
}



// All mHexes are placed relatively to the position of the multihex item x, y.
// Each mHex is defined by 3 uints. The first uint is positioning of the mHex,
// the latter two are flags of the mHexes when the item is in the default state
// (closed) and changed (opened). It's possible to switch between them with
// the functions MultihexClose() and MultihexOpen().
//
// Positioning can be defined with the macro MHEX_MOVE, which has following
// parameters: (dir1, distance1, dir2, distance2). If one step is enough to
// reach the target hex, the last 2 values should be 0. Max distance is 255.



// Vertical gravesite
//
const array<uint> MHexDataGravesiteV =
{
    MHEX_MOVE(2, 1, 0, 0), MHEX_BLOCK_NOTHING, MHEX_BLOCK_WALKING,
    MHEX_MOVE(2, 2, 0, 0), MHEX_BLOCK_NOTHING, MHEX_BLOCK_WALKING,
    MHEX_MOVE(3, 1, 0, 0), MHEX_BLOCK_NOTHING, MHEX_BLOCK_WALKING,
    MHEX_MOVE(3, 1, 2, 1), MHEX_BLOCK_NOTHING, MHEX_BLOCK_WALKING,
    MHEX_MOVE(3, 1, 2, 2), MHEX_BLOCK_NOTHING, MHEX_BLOCK_WALKING
};

// Horizontal gravesite
//
const array<uint> MHexDataGravesiteH =
{
    MHEX_MOVE(3, 1, 0, 0), MHEX_BLOCK_NOTHING, MHEX_BLOCK_WALKING,
    MHEX_MOVE(4, 1, 0, 0), MHEX_BLOCK_NOTHING, MHEX_BLOCK_WALKING,
    MHEX_MOVE(3, 1, 4, 1), MHEX_BLOCK_NOTHING, MHEX_BLOCK_WALKING,
    MHEX_MOVE(5, 1, 0, 0), MHEX_BLOCK_NOTHING, MHEX_BLOCK_WALKING
};

// Vault City Gate
//
const array<uint> MHexDataVaultCityGate =
{
    MHEX_MOVE(3, 2, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(3, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(1, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(1, 2, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

// Corrugated Gate
//
const array<uint> MHexDataCorrugatedGate =
{
    MHEX_MOVE(0, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(0, 1, 1, 1), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(4, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(4, 1, 3, 1), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(3, 1, 4, 2), MHEX_BLOCK_ALL, MHEX_BLOCK_ALL,
    MHEX_MOVE(3, 1, 4, 3), MHEX_BLOCK_NOTHING, MHEX_BLOCK_ALL,
    MHEX_MOVE(4, 4, 0, 0), MHEX_BLOCK_NOTHING, MHEX_BLOCK_ALL,
    MHEX_MOVE(0, 3, 2, 1), MHEX_BLOCK_ALL, MHEX_BLOCK_ALL,
    MHEX_MOVE(0, 4, 2, 1), MHEX_BLOCK_NOTHING, MHEX_BLOCK_ALL,
    MHEX_MOVE(0, 4, 0, 0), MHEX_BLOCK_NOTHING, MHEX_BLOCK_ALL
};

// Access Gates 1 and 2
//
const array<uint> MHexDataAccessGate =
{
    MHEX_MOVE(1, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(1, 1, 0, 1), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(3, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
    MHEX_MOVE(3, 1, 4, 1), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

// Mariposa Main Door
//
const array<uint> MHexDataMariposaMainDoor =
{
    MHEX_MOVE(2, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

// Vault 13 main door and gate
//
const array<uint> MHexDataVault13MainDoor =
{
    MHEX_MOVE(2, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
	MHEX_MOVE(2, 2, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

const array<uint> MHexDataVault13MainGate =
{
    MHEX_MOVE(0, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
	MHEX_MOVE(1, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

// Cathedral double door
//

const array<uint> MHexDataCathedralDoor =
{
    MHEX_MOVE(4, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

// Warehouse door
//

const array<uint> MHexDataWarehouseDoor_2 =
{
    MHEX_MOVE(0, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

const array<uint> MHexDataWarehouseDoor =
{
    MHEX_MOVE(5, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

const array<uint> MHexDataWarehouseDoorBig =
{
    MHEX_MOVE(1, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
	MHEX_MOVE(1, 1, 0, 1), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
	MHEX_MOVE(3, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
	MHEX_MOVE(3, 1, 4, 1), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

const array<uint> MHexDataReactorDoor =
{
    MHEX_MOVE(0, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING,
	MHEX_MOVE(5, 1, 0, 0), MHEX_BLOCK_ALL, MHEX_BLOCK_NOTHING
};

#endif // __MULTIHEX_DATA__
