

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                         

import void MakeMine(Item&mine,uint explodeOwner,uint complexity,uint hideSkill,uint bonusDamage,uint bonusRadius)from"explode";
import void MakeSpearTrap(Item&trap,uint complexity,uint hideSkill,uint spearcount)from"traps";
import void MakeGenericShotTrap(Item&trap,uint complexity,uint hideSkill,uint16 pid,uint dmgmin,uint dmgmax)from"traps";
import void MakeBearTrap(Item&trap,uint complexity,uint hideSkill,uint bonusDamage)from"traps";
import void MakeAlarmTrap(Item&trap,uint complexity,uint hideSkill,uint16 pid,uint8 min,uint8 max,uint16 bag,uint8 level,uint8 entire)from"traps";
import void ClearWalkTrap(Item&item)from"traps";                                             

uint blankHash=GetStrHash("art/items/blank.png");

uint[]emitterNSPids={10018,10019,10020};
uint[]emitterNSBrokenPids={10024,10025,10026};
uint[]emitterNSMapperPids={10007,10008,10009};
uint[]emitterWEPids={10015,10016,10017};
uint[]emitterWEBrokenPids={10021,10022,10023};
uint[]emitterWEMapperPids={10004,10005,10006}; 

uint[]ffSpawnerPids={(10002),(10003)};
uint[]ffFullPids={((9678)),((9679))};
uint[]ffHalvedPids={(10000),(10001)}; 

void _InitNSEmitter(Item&emitter,bool first)
{
	uint[]values={emitter.Id};
	CreateTimeEvent(__FullSecond+((1)*__TimeMultiplier),"e_InitNSEmitter",values,true);
} 

uint e_InitNSEmitter(array<uint>@values)
{
	Item@emitter=GetItem(values[0]);
	if(!(@emitter!=null)||emitter.MapId==0)
	return 0;
	Map@map=GetMap(emitter.MapId);
	if(!(@map!=null))
	return 0;
	for(uint i=0,j=emitterNSMapperPids.length();i<j;i++)
	{
		if(emitter.GetProtoId()==emitterNSMapperPids[i])
		{
			uint16 hexX=emitter.HexX;
			uint16 hexY=emitter.HexY;
			Item@spawner=map.AddItem(hexX,hexY,(10003),1);
			spawner.Val0=emitter.Val0;
			spawner.Val1=emitter.Val1;
			spawner.Val2=emitter.Val2&0x0000FFFF;
			spawner.Val3=emitter.Val3;
			spawner.Val4=emitter.Val4;
			DeleteItem(emitter);
			if(!(@spawner!=null))
			return 0;
			map.MoveHexByDir(hexX,hexY,5,2);
			Item@realEmitter;
			if((((spawner.Val2)&((0x04)))!=0))
			@realEmitter=map.AddItem(hexX,hexY,emitterNSBrokenPids[i],1);
			else
			@realEmitter=map.AddItem(hexX,hexY,emitterNSPids[i],1);
			if(!(@realEmitter!=null))
			return 0;
			realEmitter.Val0=spawner.Id;
			int complexity=(emitter.Val2>>16)&0x0000FFFF;
			realEmitter.Val1=((complexity>0)?complexity:(60));
			realEmitter.SetEvent((4),"_ForceFieldEmitterUse");
			return 0;
		}
	}
	DeleteItem(emitter);
	return 0;
}

void _InitWEEmitter(Item&emitter,bool first)
{
	uint[]values={emitter.Id};
	CreateTimeEvent(__FullSecond+((1)*__TimeMultiplier),"e_InitWEEmitter",values,true);
}

uint e_InitWEEmitter(array<uint>@values)
{
	Item@emitter=GetItem(values[0]);
	if(!(@emitter!=null)||emitter.MapId==0)
	return 0;
	Map@map=GetMap(emitter.MapId);
	if(!(@map!=null))
	return 0;
	for(uint i=0,j=emitterWEMapperPids.length();i<j;i++)
	{
		if(emitter.GetProtoId()==emitterWEMapperPids[i])
		{
			uint16 hexX=emitter.HexX;
			uint16 hexY=emitter.HexY;
			Item@spawner=map.AddItem(hexX,hexY,(10002),1);
			spawner.Val0=emitter.Val0;
			spawner.Val1=emitter.Val1;
			spawner.Val2=emitter.Val2;
			spawner.Val3=emitter.Val3;
			spawner.Val4=emitter.Val4;
			DeleteItem(emitter);
			if(!(@spawner!=null))
			return 0;
			map.MoveHexByDir(hexX,hexY,0,1);
			map.MoveHexByDir(hexX,hexY,1,1);
			Item@realEmitter;
			if((((spawner.Val2)&((0x04)))!=0))
			@realEmitter=map.AddItem(hexX,hexY,emitterWEBrokenPids[i],1);
			else
			@realEmitter=map.AddItem(hexX,hexY,emitterWEPids[i],1);
			if(!(@realEmitter!=null))
			return 0;
			realEmitter.Val0=spawner.Id;
			return 0;
		}
	}
	DeleteItem(emitter);
	return 0;
}    

class CForceFieldSearcher:ISearchingCallback
{
	uint FindTogglableSMOs(array<ITogglableSMO@>&list,Map&map,int globalId)
	{
		uint origLength=list.length();
		array<Item@>spawners;
		array<uint>typeCounts(ffSpawnerPids.length());
		uint spawnerCount=0;
		for(uint fi=0,fm=ffSpawnerPids.length();fi<fm;fi++)
		{
			typeCounts[fi]=map.GetItems(ffSpawnerPids[fi],spawners);
			spawnerCount+=typeCounts[fi];
		}
		uint searchedSpawnerCount=0;
		
		array<bool>spawnerValidity(spawnerCount);
		
		for(uint i=0;i<spawnerCount;i++)
		{
			if(globalId==-1||globalId==spawners[i].Val1)
			{
				spawnerValidity[i]=true;
				searchedSpawnerCount++;
			}
			else
			spawnerValidity[i]=false;
		}
		
		list.resize(origLength+searchedSpawnerCount);
		for(uint i=0,j=origLength,fi=0,k=0;i<spawnerCount;i++)
		{
			while(k>=typeCounts[fi])
			{
				k=0;
				fi++;
			}
			if(spawnerValidity[i])
			{
				@list[j]=MapForceFieldObject(spawners[i],map,ffFullPids[fi],ffHalvedPids[fi]);
				j++;
			}
			k++;
		}
		return searchedSpawnerCount;
	}
	
	uint FindForceFieldObjects(array<MapForceFieldObject@>&list,Map&map,int id)
	{
		uint origLength=list.length();
		array<Item@>spawners;
		array<uint>typeCounts(ffSpawnerPids.length());
		uint spawnerCount=0;
		for(uint fi=0,fm=ffSpawnerPids.length();fi<fm;fi++)
		{
			typeCounts[fi]=map.GetItems(ffSpawnerPids[fi],spawners);
			spawnerCount+=typeCounts[fi];
		}
		uint searchedSpawnerCount=0;
		
		array<bool>spawnerValidity(spawnerCount);
		
		for(uint i=0;i<spawnerCount;i++)
		{
			if(id==-1||id==spawners[i].Val0)
			{
				spawnerValidity[i]=true;
				searchedSpawnerCount++;
			}
			else
			spawnerValidity[i]=false;
		}
		
		list.resize(origLength+searchedSpawnerCount);
		for(uint i=0,j=origLength,fi=0,k=0;i<spawnerCount;i++)
		{
			while(k>=typeCounts[fi])
			{
				k=0;
				fi++;
			}
			if(spawnerValidity[i])
			{
				@list[j]=MapForceFieldObject(spawners[i],map,ffFullPids[fi],ffHalvedPids[fi]);
				j++;
			}
			k++;
		}
		return searchedSpawnerCount;
	}
	
	MapForceFieldObject@FindSingleForceField(Map&map,int id)
	{
		for(uint fi=0,fm=ffSpawnerPids.length();fi<fm;fi++)
		{
			array<Item@>spawners;
			uint spawnerCount=map.GetItems(ffSpawnerPids[fi],spawners);
			
			for(uint i=0;i<spawnerCount;i++)
			{
				if(id==spawners[i].Val0)
				{
					return MapForceFieldObject(spawners[i],map,ffFullPids[fi],ffHalvedPids[fi]);
				}
			}
			
		}
		return null;
	}
};

CForceFieldSearcher@ForceFieldSearcher=CForceFieldSearcher();

Item@GetEmitterOnHex(Map&map,uint16 hexX,uint16 hexY)
{
	for(uint i=0,j=emitterNSPids.length();i<j;i++)
	{
		Item@emitter=map.GetItem(hexX,hexY,emitterNSPids[i]);
		if((@emitter!=null))
		return emitter;
	}
	for(uint i=0,j=emitterWEPids.length();i<j;i++)
	{
		Item@emitter=map.GetItem(hexX,hexY,emitterWEPids[i]);
		if((@emitter!=null))
		return emitter;
	}
	return null;
}

void ExplodeEmitterOnHex(Map&map,uint16 hexX,uint16 hexY)
{
	Item@emitter=GetEmitterOnHex(map,hexX,hexY);
	if(!(@emitter!=null))
	return;
	
	Item@spawner=GetItem(emitter.Val0);
	if(!(@spawner!=null))
	return;
	
	int type=GetForceFieldTypeBySpawnerPid(spawner.GetProtoId());
	if(type==-1)
	return;
	
	MapForceFieldObject@forceField=MapForceFieldObject(spawner,map,ffFullPids[type],ffHalvedPids[type]);
	forceField.Explode(emitter);
}  

void _InitForceFieldSpawner1(Item&spawner,bool firstTime)
{
	InitForceFieldSpawner(spawner,firstTime,((9678)),(10000));
}

void _InitForceFieldSpawner2(Item&spawner,bool firstTime)
{
	InitForceFieldSpawner(spawner,firstTime,((9679)),(10001));
}

void _InitHalvedField(Item&item,bool firstTime)
{
	item.SetEvent((7),"_HalvedFieldWalk");
}

void _HalvedFieldWalk(Item&trap,Critter&cr,bool entered,uint8 dir)
{
	if(entered)
	{
		InjureCritter(cr,(Random(15,30)),(5),cr.Dir,0);
	}
}  

int GetForceFieldTypeBySpawnerPid(uint pid)
{
	for(uint i=0,j=ffSpawnerPids.length();i<j;i++)
	{
		if(ffSpawnerPids[i]==pid)
		return i;
	}
	return-1;
}

uint GetBrokenEmitterPid(uint workingPid)
{
	for(uint i=0,j=emitterNSPids.length();i<j;i++)
	{
		if(emitterNSPids[i]==workingPid)
		return emitterNSBrokenPids[i];
	}
	for(uint i=0,j=emitterWEPids.length();i<j;i++)
	{
		if(emitterWEPids[i]==workingPid)
		return emitterWEBrokenPids[i];
	}
	return uint(-1);
}

uint GetWorkingEmitterPid(uint brokenPid)
{
	for(uint i=0,j=emitterNSBrokenPids.length();i<j;i++)
	{
		if(emitterNSBrokenPids[i]==brokenPid)
		return emitterNSPids[i];
	}
	for(uint i=0,j=emitterWEBrokenPids.length();i<j;i++)
	{
		if(emitterWEBrokenPids[i]==brokenPid)
		return emitterWEPids[i];
	}
	return uint(-1);
}

void DisableForceFieldTemporarily(Map@map,Item&emitter)
{
	if(!(@map!=null))
	return;
	Item@spawner=GetItem(emitter.Val0);
	if(!(@spawner!=null))
	return;
	
	array<uint>values(3);
	int type=GetForceFieldTypeBySpawnerPid(spawner.GetProtoId());
	if(type==-1)
	return;
	
	values[0]=type;
	values[1]=map.Id;
	values[2]=spawner.Id;
	
	MapForceFieldObject@forceField=MapForceFieldObject(spawner,map,ffFullPids[type],ffHalvedPids[type]);
	
	if(forceField.IsOn())
	{
		forceField.TurnOff();
		uint eventId=CreateTimeEvent(__FullSecond+(((10))*__TimeMultiplier),"e_TurnOnAgain",values,true);
		forceField.spawner.Val4=eventId;
	}
	
}

void _InitEmitter(Item&item,bool first)
{
	item.SetEvent((4),"_ForceFieldEmitterUse");
}

bool _ForceFieldEmitterUse(Item&emitter,Critter&player,int skill)
{
	Map@map=player.GetMap();
	if(!(@map!=null))
	return false;
	Item@spawner=GetItem(emitter.Val0);
	if(!(@spawner!=null))
	return false; 
	
	int type=GetForceFieldTypeBySpawnerPid(spawner.GetProtoId());
	if(type==-1)
	return false;    
	
	MapForceFieldObject@forceField=MapForceFieldObject(spawner,map,ffFullPids[type],ffHalvedPids[type]);
	return forceField.UseDisruptSkill(player,skill,(emitter.Val1));                  
	
}

uint e_TurnOnAgain(array<uint>@values)
{
	uint fullPid=ffFullPids[values[0]];
	uint halvedPid=ffHalvedPids[values[0]];
	Map@map=GetMap(values[1]);
	if(!(@map!=null))
	return 0;
	
	Item@spawner=GetItem(values[2]);
	if(!(@spawner!=null))
	return 0;
	MapForceFieldObject@forceField=MapForceFieldObject(spawner,map,fullPid,halvedPid);
	forceField.TurnOn();
	spawner.Val4=0;
	return 0;
}      

bool d_IsForceFieldOn(Critter&player,Critter@npc,int id)
{
	Map@map=player.GetMap();
	return IsForceFieldOn(map,id);
}

bool d_IsForceFieldOn(Critter&player,Critter@npc,int id,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	return IsForceFieldOn(map,id);
}

bool d_IsForceFieldOff(Critter&player,Critter@npc,int id)
{
	Map@map=player.GetMap();
	return IsForceFieldOff(map,id);
}

bool d_IsForceFieldOff(Critter&player,Critter@npc,int id,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	return IsForceFieldOff(map,id);
}

bool d_IsForceFieldFullIntegrity(Critter&player,Critter@npc,int id)
{
	Map@map=player.GetMap();
	return IsForceFieldFullIntegrity(map,id);
}

bool d_IsForceFieldFullIntegrity(Critter&player,Critter@npc,int id,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	return IsForceFieldFullIntegrity(map,id);
}

bool d_IsForceFieldHalvedIntegrity(Critter&player,Critter@npc,int id)
{
	Map@map=player.GetMap();
	return IsForceFieldHalvedIntegrity(map,id);
}

bool d_IsForceFieldHalvedIntegrity(Critter&player,Critter@npc,int id,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	return IsForceFieldHalvedIntegrity(map,id);
}  

void r_ForceFieldToggle(Critter&player,Critter@npc,int id)
{
	Map@map=player.GetMap();
	ToggleForceField(map,id);
}

void r_ForceFieldToggle(Critter&player,Critter@npc,int id,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	ToggleForceField(map,id);
}

void r_ForceFieldOn(Critter&player,Critter@npc,int id)
{
	Map@map=player.GetMap();
	SetForceFieldOn(map,id);
}

void r_ForceFieldOn(Critter&player,Critter@npc,int id,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetForceFieldOn(map,id);
}

void r_ForceFieldOff(Critter&player,Critter@npc,int id)
{
	Map@map=player.GetMap();
	SetForceFieldOff(map,id);
}

void r_ForceFieldOff(Critter&player,Critter@npc,int id,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetForceFieldOff(map,id);
}

void r_ForceFieldFullIntegrity(Critter&player,Critter@npc,int id)
{
	Map@map=player.GetMap();
	SetForceFieldFullIntegrity(map,id);
}

void r_ForceFieldFullIntegrity(Critter&player,Critter@npc,int id,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetForceFieldFullIntegrity(map,id);
}

void r_ForceFieldHalvedIntegrity(Critter&player,Critter@npc,int id)
{
	Map@map=player.GetMap();
	SetForceFieldHalvedIntegrity(map,id);
}

void r_ForceFieldHalvedIntegrity(Critter&player,Critter@npc,int id,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetForceFieldHalvedIntegrity(map,id);
}  

void r_ForceFieldAllToggle(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	ToggleForceField(map,-1);
}

void r_ForceFieldAllToggle(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	ToggleForceField(map,-1);
}

void r_ForceFieldAllOn(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	SetForceFieldOn(map,-1);
}

void r_ForceFieldAllOn(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetForceFieldOn(map,-1);
}

void r_ForceFieldAllOff(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	SetForceFieldOff(map,-1);
}

void r_ForceFieldAllOff(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetForceFieldOff(map,-1);
}

void r_ForceFieldAllFullIntegrity(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	SetForceFieldFullIntegrity(map,-1);
}

void r_ForceFieldAllFullIntegrity(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetForceFieldFullIntegrity(map,-1);
}

void r_ForceFieldAllHalvedIntegrity(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	SetForceFieldHalvedIntegrity(map,-1);
}

void r_ForceFieldAllHalvedIntegrity(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetForceFieldHalvedIntegrity(map,-1);
}     

void InitForceFieldSpawner(Item&spawner,bool firstTime,uint fullForceFieldPid,uint halvedForceFieldPid)
{
	if(!firstTime)
	return;
	uint[]values={spawner.Id,fullForceFieldPid,halvedForceFieldPid};
	CreateTimeEvent(__FullSecond+((1)*__TimeMultiplier),"e_StartUpForceField",values,true);
}

uint e_StartUpForceField(array<uint>@values)
{
	Item@spawner=GetItem(values[0]);
	if(!(@spawner!=null)||spawner.MapId==0)
	return 0;
	uint fullForceFieldPid=values[1];
	uint halvedForceFieldPid=values[2];
	
	spawner.Val5=spawner.Val2;
	
	uint16 hexX,hexY;
	Map@map=spawner.GetMapPosition(hexX,hexY);
	if(!(@map!=null))
	return 0;
	
	MapForceFieldObject@forceField=MapForceFieldObject(spawner,map,fullForceFieldPid,halvedForceFieldPid);
	
	if(forceField.IsOn()&&forceField.IsNotDestroyed())
	{
		forceField.ForceOn();
	}
	return 0;
}

void ToggleForceField(Map@map,int id)
{
	if(!(@map!=null))
	return;
	
	array<MapForceFieldObject@>forceFields;
	for(uint i=0,j=ForceFieldSearcher.FindForceFieldObjects(forceFields,map,id);i<j;i++)
	{
		forceFields[i].Toggle();
	}
}

void SetForceFieldOn(Map@map,int id)
{
	if(!(@map!=null))
	return;
	
	array<MapForceFieldObject@>forceFields;
	for(uint i=0,j=ForceFieldSearcher.FindForceFieldObjects(forceFields,map,id);i<j;i++)
	{
		forceFields[i].TurnOn();
	}
}

void SetForceFieldOff(Map@map,int id)
{
	if(!(@map!=null))
	return;
	
	array<MapForceFieldObject@>forceFields;
	for(uint i=0,j=ForceFieldSearcher.FindForceFieldObjects(forceFields,map,id);i<j;i++)
	{
		forceFields[i].TurnOff();
	}
}

void SetForceFieldFullIntegrity(Map@map,int id)
{
	if(!(@map!=null))
	return;
	
	array<MapForceFieldObject@>forceFields;
	for(uint i=0,j=ForceFieldSearcher.FindForceFieldObjects(forceFields,map,id);i<j;i++)
	{
		forceFields[i].SetFull();
	}
}

void SetForceFieldHalvedIntegrity(Map@map,int id)
{
	if(!(@map!=null))
	return;
	
	array<MapForceFieldObject@>forceFields;
	for(uint i=0,j=ForceFieldSearcher.FindForceFieldObjects(forceFields,map,id);i<j;i++)
	{
		forceFields[i].SetHalved();
	}
} 

bool IsForceFieldOn(Map@map,int id)
{
	if(!(@map!=null)||id==-1)
	return false;
	
	MapForceFieldObject@forceField=ForceFieldSearcher.FindSingleForceField(map,id);
	if((@forceField!=null))
	return forceField.IsOn();
	
	return false;
}

bool IsForceFieldOff(Map@map,int id)
{
	if(!(@map!=null)||id==-1)
	return false;
	
	MapForceFieldObject@forceField=ForceFieldSearcher.FindSingleForceField(map,id);
	if((@forceField!=null))
	return forceField.IsOff();
	
	return false;
}

bool IsForceFieldFullIntegrity(Map@map,int id)
{
	if(!(@map!=null)||id==-1)
	return false;
	
	MapForceFieldObject@forceField=ForceFieldSearcher.FindSingleForceField(map,id);
	if((@forceField!=null))
	return forceField.IsFull();
	
	return false;
}

bool IsForceFieldHalvedIntegrity(Map@map,int id)
{
	if(!(@map!=null)||id==-1)
	return false;
	
	MapForceFieldObject@forceField=ForceFieldSearcher.FindSingleForceField(map,id);
	if((@forceField!=null))
	return forceField.IsHalved();
	
	return false;
}   

uint e_Flicker(array<uint>@values)
{
	uint fullPid=ffFullPids[values[0]];
	uint halvedPid=ffHalvedPids[values[0]];
	Map@map=GetMap(values[1]);
	if(!(@map!=null))
	return 0;
	
	Item@spawner=GetItem(values[2]);
	if(!(@spawner!=null))
	return 0;
	MapForceFieldObject@forceField=MapForceFieldObject(spawner,map,fullPid,halvedPid);
	if(values[4]<__FullSecond)
	{
		spawner.Val4=0;
		forceField.Respawn(null);
		return 0;
	}
	else
	forceField.Flicker(values[3]);
	
	return((Random(200,1000))*__TimeMultiplier/1000);
}

uint e_Respawn(array<uint>@values)
{
	uint fullPid=ffFullPids[values[0]];
	uint halvedPid=ffHalvedPids[values[0]];
	Map@map=GetMap(values[1]);
	if(!(@map!=null))
	return 0;
	
	Item@spawner=GetItem(values[2]);
	if(!(@spawner!=null))
	return 0;
	MapForceFieldObject@forceField=MapForceFieldObject(spawner,map,fullPid,halvedPid);
	spawner.Val4=0;
	if(values[3]!=0)
	{
		Item@emitter=GetItem(values[3]);
		forceField.Respawn(emitter);
	}
	else
	forceField.Respawn(null);
	return 0;
}

class MapForceFieldObject:ITogglableSMO
{
	Item@spawner;
	Map@map;
	uint fullFieldPid;
	uint halvedFieldPid;
	
	MapForceFieldObject(Item@spawner,Map@map,uint fullFieldPid,uint halvedFieldPid)
	{
		@this.spawner=spawner;
		@this.map=map;
		this.fullFieldPid=fullFieldPid;
		this.halvedFieldPid=halvedFieldPid;
	}
	
	uint GetRespawnInterval()
	{
		return spawner.Val3;
	}
	
	bool IsOn()
	{
		return(((spawner.Val2)&((0x01)))!=0);
	}
	
	bool IsOff()
	{
		return!(((spawner.Val2)&((0x01)))!=0);
	}
	
	bool IsFlickered()
	{
		return(((spawner.Val2)&((0x10)))!=0);
	}
	
	bool IsDisrupted()
	{
		return(((spawner.Val2)&((0x08)))!=0);
	}
	
	bool IsNotDisrupted()
	{
		return!(((spawner.Val2)&((0x08)))!=0);
	}
	
	bool IsDestroyed()
	{
		return(((spawner.Val2)&((0x04)))!=0);
	}
	
	bool IsNotDestroyed()
	{
		return!(((spawner.Val2)&((0x04)))!=0);
	}
	
	bool IsFull()
	{
		return!(((spawner.Val2)&((0x02)))!=0);
	}
	
	bool IsHalved()
	{
		return(((spawner.Val2)&((0x02)))!=0);
	}
	
	bool IsRepairableWhenOff()
	{
		return(((spawner.Val2)&((0x20)))!=0);
	}
	
	void IsRepairableWhenOff(bool repairable)
	{
		if(repairable)
		((spawner.Val2)=(spawner.Val2)|((0x20)));
		else
		(spawner.Val2=((spawner.Val2)&(~((0x20)))));
	}
	
	uint GetCurPid()
	{
		return(IsHalved()?halvedFieldPid:fullFieldPid);
	}
	
	void Toggle()
	{
		
		if(IsOff())
		{
			TurnOn(); 
			
		}
		else
		{
			TurnOff();  
			
		}
	}
	
	void ForceOn()
	{
		map.AddItem(spawner.HexX,spawner.HexY,GetCurPid(),1);
		SetRespawnEvent(null);
		((spawner.Val2)=(spawner.Val2)|((0x01)));
		DamageCritter();
	}
	
	void TurnOn()
	{
		if(IsOff())
		{
			Undisrupt();
			if(IsNotDestroyed())
			ForceOn();
		}
	}
	
	void TurnOff()
	{
		if(IsOn())
		{
			Undisrupt();
			if(IsNotDestroyed())
			{
				SetRespawnEvent(null);
				Item@forceFieldItem=map.GetItem(spawner.HexX,spawner.HexY,GetCurPid());
				if((@forceFieldItem!=null))
				DeleteItem(forceFieldItem);
			}
			(spawner.Val2=((spawner.Val2)&(~((0x01)))));     
			
		}
	}
	
	bool UseDisruptSkill(Critter&player,int skill,int complexity)
	{
		if(skill!=(212)&&skill!=(213))
		return false;
		if(IsDestroyed())
		{
			player.Say((11),"The emitter is beyond repair.");
			return true;
		}
		if((IsOn()&&IsFull())||(IsOff()&&IsRepairableWhenOff()))
		{
			bool success=true;
			int base;
			if(skill==(213))
			{
				if(player.Timeout[(232)]>0)
				{
					player.SayMsg((11),(3),(3401));
					return true;
				}
				base=player.Param[(213)];
				player.TimeoutBase[(232)]=((__FullSecond)+((((30)*__TimeMultiplier)+player.Param[(395)])));
			}
			else if(skill==(212))
			{
				if(player.Timeout[(233)]>0)
				{
					player.SayMsg((11),(3),(3401));
					return true;
				}
				base=player.Param[(212)];
				player.TimeoutBase[(233)]=((__FullSecond)+((((30)*__TimeMultiplier)+player.Param[(395)])));
			}
			base-=complexity;
			(((base)>(95))?(95):(((base)<(0))?(0):(base)));
			success=(Random(1,100)<=base); 
			
			if(IsOff())
			{
				if(success)
				{
					TurnOn();
					player.Say((11),"You managed to turn on the forcefield.");
				}
				else
				player.Say((11),"You failed to turn on the forcefield.");
			}
			else if(IsDisrupted())
			{
				if(success)
				{
					Undisrupt();
					SetRespawnEvent(null);
					player.Say((11),"You managed to repair the forcefield.");
				}
				else
				player.Say((11),"You failed to repair the forcefield.");
			}
			else
			{
				if(success)
				{
					Disrupt();
					player.Say((11),"You managed to disrupt the forcefield.");
				}
				else
				player.Say((11),"You failed to disrupt the forcefield.");
			}
		}
		else
		return false;
		
		return true;
	}
	
	void Disrupt()
	{
		if(IsNotDisrupted())
		{
			if(spawner.Val4!=0)
			{
				EraseTimeEvent(spawner.Val4);
				spawner.Val4=0;
			}
			
			array<uint>values(5);
			int type=GetForceFieldTypeBySpawnerPid(spawner.GetProtoId());
			if(type==-1)
			return;
			
			values[0]=type;
			values[1]=map.Id;
			values[2]=spawner.Id;
			
			Item@forceFieldItem=map.GetItem(spawner.HexX,spawner.HexY,fullFieldPid);
			if(!(@forceFieldItem!=null))
			return;
			values[3]=forceFieldItem.Id;
			uint respawnInterval=GetRespawnInterval();
			values[4]=__FullSecond+(((respawnInterval==0)?(120):respawnInterval)*__TimeMultiplier);
			Flicker(values[3]);
			spawner.Val4=CreateTimeEvent(__FullSecond+((Random(200,1000))*__TimeMultiplier/1000),"e_Flicker",values,true);
			((spawner.Val2)=(spawner.Val2)|((0x08)));
		}
	}
	
	void Undisrupt()
	{
		if(IsDisrupted())
		{
			if(spawner.Val4!=0)
			{
				EraseTimeEvent(spawner.Val4);
				spawner.Val4=0;
			}
			
			if(IsFlickered())
			{
				Item@forceFieldItem=map.GetItem(spawner.HexX,spawner.HexY,fullFieldPid);
				forceFieldItem.PicMap=0;
				(forceFieldItem.Flags=((forceFieldItem.Flags)&(~((0x00000004)))));
				((forceFieldItem.Flags)=(forceFieldItem.Flags)|((0x00008000)));
				forceFieldItem.Update();
				(spawner.Val2=((spawner.Val2)&(~((0x10)))));
				DamageCritter();
			}
			(spawner.Val2=((spawner.Val2)&(~((0x08)))));
		}
	}
	
	void Flicker(uint id)
	{
		Item@forceFieldItem=GetItem(id);
		if(!(@forceFieldItem!=null))
		return;
		if(IsFlickered())
		{
			forceFieldItem.PicMap=0;
			(forceFieldItem.Flags=((forceFieldItem.Flags)&(~((0x00000004)))));
			((forceFieldItem.Flags)=(forceFieldItem.Flags)|((0x00008000)));
			forceFieldItem.Update();
			(spawner.Val2=((spawner.Val2)&(~((0x10)))));
			DamageCritter();
		}
		else
		{
			forceFieldItem.PicMap=blankHash;
			((forceFieldItem.Flags)=(forceFieldItem.Flags)|((0x00000004)));
			(forceFieldItem.Flags=((forceFieldItem.Flags)&(~((0x00008000)))));
			forceFieldItem.Update();
			((spawner.Val2)=(spawner.Val2)|((0x10)));
		}
	}
	
	void DamageCritter()
	{
		Critter@cr=map.GetCritter(spawner.HexX,spawner.HexY);
		if((@cr!=null)&&cr.IsLife())
		{
			InjureCritter(cr,(Random(15,30)),(5),0,0);
			if(cr.IsLife())
			cr.MoveRandom();
		}
	}
	
	void Explode(Item&emitter)
	{
		if(IsNotDestroyed())
		{
			Undisrupt();
			Item@forceFieldItem=map.GetItem(spawner.HexX,spawner.HexY,GetCurPid());
			if((@forceFieldItem!=null))
			DeleteItem(forceFieldItem);
			
			SetRespawnEvent(emitter);
			((spawner.Val2)=(spawner.Val2)|((0x04)));
			
			emitter.ChangeProto(GetBrokenEmitterPid(emitter.GetProtoId()));
			emitter.Update();
		}
	}
	
	void SetRespawnEvent(Item@emitter)
	{
		if(spawner.Val4!=0)
		{
			EraseTimeEvent(spawner.Val4);
			spawner.Val4=0;
		}
		
		uint respawnInterval=GetRespawnInterval();
		if(respawnInterval!=0)
		{
			array<uint>values(4);
			int type=GetForceFieldTypeBySpawnerPid(spawner.GetProtoId());
			if(type==-1)
			return;
			values[0]=type;
			values[1]=map.Id;
			values[2]=spawner.Id;
			values[3]=(((@emitter!=null))?emitter.Id:0);
			spawner.Val4=CreateTimeEvent(__FullSecond+((respawnInterval)*__TimeMultiplier),"e_Respawn",values,true);
		}
	}
	
	void Respawn(Item@emitter)
	{
		Undisrupt();
		if(IsDestroyed()&&!(((spawner.Val5)&((0x04)))!=0))
		{
			if(spawner.Val4!=0)
			{
				EraseTimeEvent(spawner.Val4);
				spawner.Val4=0;
			}
			
			if(IsOn())
			ForceOn();
			
			if((@emitter!=null))
			{
				emitter.ChangeProto(GetWorkingEmitterPid(emitter.GetProtoId()));
				emitter.Update();
			}
		}
		if((IsOn()&&!(((spawner.Val5)&((0x01)))!=0))||(IsOff()&&(((spawner.Val5)&((0x01)))!=0)))
		{
			Toggle();
		}
		if(IsFull()&&(((spawner.Val5)&((0x02)))!=0))
		{
			SetHalved();
		}
		else if(IsHalved()&&!(((spawner.Val5)&((0x02)))!=0))
		{
			SetFull();
		}
		spawner.Val2=spawner.Val5;
		
		if(spawner.Val4!=0)
		{
			EraseTimeEvent(spawner.Val4);
			spawner.Val4=0;
		}
	}
	
	void SetFull()
	{
		if(IsHalved())
		{
			Undisrupt();
			if(IsNotDestroyed())
			{
				SetRespawnEvent(null);
				
				if(IsOn())
				{
					Item@forceFieldItem=map.GetItem(spawner.HexX,spawner.HexY,halvedFieldPid);
					if((@forceFieldItem!=null))
					DeleteItem(forceFieldItem);
					map.AddItem(spawner.HexX,spawner.HexY,fullFieldPid,1);
					DamageCritter();
				}
			}
			
			(spawner.Val2=((spawner.Val2)&(~((0x02)))));
		}
	}
	
	void SetHalved()
	{
		if(IsFull())
		{
			Undisrupt();
			if(IsNotDestroyed())
			{
				SetRespawnEvent(null);
				
				if(IsOn())
				{
					Item@forceFieldItem=map.GetItem(spawner.HexX,spawner.HexY,fullFieldPid);
					if((@forceFieldItem!=null))
					DeleteItem(forceFieldItem);
					map.AddItem(spawner.HexX,spawner.HexY,halvedFieldPid,1);
				}
			}
			
			((spawner.Val2)=(spawner.Val2)|((0x02)));
		}
	}
};             

class CSteamSearcher:ISearchingCallback
{
	uint FindTogglableSMOs(array<ITogglableSMO@>&list,Map&map,int globalId)
	{
		uint origLength=list.length();
		array<Item@>spawners;
		uint spawnerCount=map.GetItems((10014),spawners);
		
		uint searchedSpawnerCount=0;
		array<bool>spawnerValidity(spawnerCount);
		
		for(uint i=0;i<spawnerCount;i++)
		{
			if(globalId==-1||globalId==spawners[i].Val1)
			{
				spawnerValidity[i]=true;
				searchedSpawnerCount++;
			}
			else
			spawnerValidity[i]=false;
		}
		
		list.resize(origLength+searchedSpawnerCount);
		
		for(uint i=0,j=origLength;i<spawnerCount;i++)
		{
			if(spawnerValidity[i])
			{
				@list[j]=MapSteamObject(spawners[i],map,((615)));
				j++;
			}
		}
		return searchedSpawnerCount;
	}
	
	uint FindSteamObjects(array<MapSteamObject@>&list,Map&map,int id)
	{
		uint origLength=list.length();
		array<Item@>spawners;
		uint spawnerCount=map.GetItems((10014),spawners);
		
		uint searchedSpawnerCount=0;
		array<bool>spawnerValidity(spawnerCount);
		
		for(uint i=0;i<spawnerCount;i++)
		{
			if(id==-1||id==spawners[i].Val0)
			{
				spawnerValidity[i]=true;
				searchedSpawnerCount++;
			}
			else
			spawnerValidity[i]=false;
		}
		
		list.resize(origLength+searchedSpawnerCount);
		
		for(uint i=0,j=origLength;i<spawnerCount;i++)
		{
			if(spawnerValidity[i])
			{
				@list[j]=MapSteamObject(spawners[i],map,((615)));
				j++;
			}
		}
		return searchedSpawnerCount;
	}
};

CSteamSearcher@SteamSearcher=CSteamSearcher();  

void _InitSteamSpawner(Item&spawner,bool firstTime)
{
	if(!firstTime)
	return;
	uint[]values={spawner.Id};
	CreateTimeEvent(__FullSecond+((1)*__TimeMultiplier),"e_StartSteam",values,true);
}   

bool s_SteamValve(Critter&player,Scenery&terminal,int skill,Item@item,int steamId)
{
	if(player.IsPlayer()&&skill==-1&&!(@item!=null))
	{
		Map@map=player.GetMap();
		array<MapSteamObject@>steamItems;
		for(uint i=0,j=SteamSearcher.FindSteamObjects(steamItems,map,steamId);i<j;i++)
		steamItems[i].Toggle();
	}
	return false;
}

bool s_SteamValve(Critter&player,Scenery&terminal,int skill,Item@item,int steamId,int mapPid)
{
	if(player.IsPlayer()&&skill==-1&&!(@item!=null))
	{
		Location@loc=GetLocationOf(player);
		Map@map;
		if((@loc!=null))
		@map=loc.GetMap(mapPid);
		array<MapSteamObject@>steamItems;
		for(uint i=0,j=SteamSearcher.FindSteamObjects(steamItems,map,steamId);i<j;i++)
		steamItems[i].Toggle();
	}
	return false;
}   

uint e_StartSteam(array<uint>@values)
{
	Item@spawner=GetItem(values[0]);
	if(!(@spawner!=null)||spawner.MapId==0)
	return 0;
	
	uint16 hexX,hexY;
	Map@map=spawner.GetMapPosition(hexX,hexY);
	if(!(@map!=null))
	return 0;
	
	MapSteamObject@steamItem=MapSteamObject(spawner,map,((615)));
	
	if(steamItem.IsOn())
	{
		steamItem.ForceOn();
	}
	return 0;
}

uint e_SpawnSteamItem(array<uint>@values)
{
	MapSteamObject@steamItem;
	
	Item@spawner=GetItem(values[0]);
	Map@map=GetMap(values[1]);
	if(!(@spawner!=null)||!(@map!=null))
	return 0;
	Item@steam;
	if(values[2]!=0)
	{
		Item@steam=GetItem(values[2]);
		@steamItem=MapSteamObject(spawner,map,((615)),steam);
	}
	else
	@steamItem=MapSteamObject(spawner,map,((615)));
	
	values[2]=steamItem.MoveSteam();
	
	return((steamItem.GetMovementInterval())*__TimeMultiplier);
}  

class MapSteamObject:ITogglableSMO
{
	Item@spawner;
	Map@map;
	uint steamPid;
	Item@steam;
	bool steamInitialized;
	
	MapSteamObject(Item@spawner,Map@map,uint steamPid,Item@steam)
	{
		@this.spawner=spawner;
		@this.map=map;
		this.steamPid=steamPid;
		@this.steam=steam;
		steamInitialized=true;
	}
	
	MapSteamObject(Item@spawner,Map@map,uint steamPid)
	{
		@this.spawner=spawner;
		@this.map=map;
		this.steamPid=steamPid;
		
		steamInitialized=false;
	}
	
	void LazyInitSteam()
	{
		if(IsOn())
		{
			array<Item@>steamItems;
			uint steamCount=map.GetItems(steamPid,steamItems); 
			
			for(uint i=0;i<steamCount;i++)
			{
				if(spawner.Id==uint(steamItems[i].Val0))
				{
					@steam=steamItems[i];
					break;
				}
			}
		}
		
		steamInitialized=true;
	}
	
	void Toggle()
	{
		if(!steamInitialized)
		LazyInitSteam();
		if(IsOn())
		{
			TurnOff();
		}
		else
		{
			TurnOn();
		}
	}
	
	bool IsOn()
	{
		return(((spawner.Val3)&((0x01)))!=0);
	}
	
	bool IsOff()
	{
		return!(((spawner.Val3)&((0x01)))!=0);
	}
	
	void ForceOn()
	{
		int radiusOfMovement=GetMovementRadius();
		int movementInterval=GetMovementInterval();
		@steam=map.AddItem(spawner.HexX,spawner.HexY,((615)),1);
		
		if(movementInterval>=1&&radiusOfMovement>=1)
		{
			uint[]values={spawner.Id,map.Id,0};
			if((@steam!=null))
			{
				values[2]=steam.Id;
				steam.Val0=spawner.Id;
			}
			spawner.Val4=CreateTimeEvent(0,"e_SpawnSteamItem",values,true);
		}
		((spawner.Val3)=(spawner.Val3)|((0x01)));
	}
	
	void TurnOn()
	{
		
		if(IsOff())
		{
			ForceOn();
		}
	}
	
	void TurnOff()
	{
		if(!steamInitialized)
		LazyInitSteam();
		if(IsOn())
		{
			if(spawner.Val4!=0)
			{
				EraseTimeEvent(spawner.Val4);
				spawner.Val4=0;
			}
			if((@steam!=null))
			DeleteItem(steam);
			
			(spawner.Val3=((spawner.Val3)&(~((0x01)))));
		}
	}
	
	void SetMovementRadius(uint radius)
	{
		spawner.Val2=(spawner.Val2&0x0000FFFF)|((radius<<16)&0xFFFF0000);
	}
	
	uint GetMovementRadius()
	{
		return(spawner.Val2>>16)&0x0000FFFF;
	}
	
	void SetMovementInterval(uint interval)
	{
		spawner.Val2=(spawner.Val2&0xFFFF0000)|(interval&0x0000FFFF);
	}
	
	uint GetMovementInterval()
	{
		return spawner.Val2&0x0000FFFF;
	}
	
	uint MoveSteam()
	{
		if(!steamInitialized)
		LazyInitSteam();
		int radiusOfMovement=GetMovementRadius();
		int movementInterval=GetMovementInterval();
		
		uint16 x=spawner.HexX;
		uint16 y=spawner.HexY;
		uint dist=Random(0,radiusOfMovement);
		if(dist!=0)
		map.GetHexCoord(spawner.HexX,spawner.HexY,x,y,Random(1,360),dist);
		
		if((@steam!=null))
		{
			MoveItem(steam,1,map,x,y);
			return steam.Id;
		}
		else
		{
			@steam=map.AddItem(x,y,((615)),1);
			if((@steam!=null))
			steam.Val0=spawner.Id;
			return steam.Id;
		}
		
	}
};                 

uint[]floorControllerPids={(10012),(10013)};
uint[]floorPlatePids={(10010),(10011)};

import void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId)from"combat";

class CFloorSearcher:ISearchingCallback
{
	uint FindTogglableSMOs(array<ITogglableSMO@>&list,Map&map,int globalId)
	{
		uint origLength=list.length();
		array<Item@>controllers;
		array<uint>typeCounts(floorControllerPids.length());
		uint controllerCount=0;
		for(uint fi=0,fm=floorControllerPids.length;fi<fm;fi++)
		{
			typeCounts[fi]=map.GetItems(floorControllerPids[fi],controllers);
			controllerCount+=typeCounts[fi];
		}
		uint searchedControllerCount=0;
		
		array<bool>controllerValidity(controllerCount);
		
		for(uint i=0;i<controllerCount;i++)
		{
			if(globalId==-1||globalId==controllers[i].Val1)
			{
				controllerValidity[i]=true;
				searchedControllerCount++;
			}
			else
			controllerValidity[i]=false;
		}
		
		list.resize(origLength+searchedControllerCount);
		for(uint i=0,j=origLength,fi=0,k=0;i<controllerCount;i++)
		{
			while(k>=typeCounts[fi])
			{
				k=0;
				fi++;
			}
			if(controllerValidity[i])
			{
				if(floorControllerPids[fi]==(0))
				@list[j]=MapElectroFloorObject(controllers[i],map);
				else if(floorControllerPids[fi]==(1))
				@list[j]=MapElectroFloorObject(controllers[i],map);
				else
				@list[j]=null;
				j++;
			}
			k++;
		}
		return searchedControllerCount;
	}
	
	uint FindFloorObjects(array<MapFloorObject@>&list,Map&map,int type)
	{
		uint origLength=list.length();
		uint floorControllerPid=floorControllerPids[type];
		
		array<Item@>floorControllers;
		uint floorCount=map.GetItems(floorControllerPid,floorControllers);
		
		list.resize(origLength+floorCount);
		
		if(type==(0))
		for(uint i=0,j=origLength;i<floorCount;i++)
		{
			@list[j]=MapElectroFloorObject(floorControllers[i],map);
			j++;
		}
		else if(type==(1))
		for(uint i=0,j=origLength;i<floorCount;i++)
		{
			@list[j]=MapMineFieldFloorObject(floorControllers[i],map);
			j++;
		}
		return floorCount;
	}
	
	MapFloorObject@FindSingleFloor(Map&map,int id,int type)
	{
		uint floorControllerPid=floorControllerPids[type];
		
		array<Item@>floorControllers;
		uint floorCount=map.GetItems(floorControllerPid,floorControllers);
		
		for(uint i=0;i<floorCount;i++)
		{
			if(id==floorControllers[i].Val0)
			{
				if(type==(0))
				return MapElectroFloorObject(floorControllers[i],map);
				else if(type==(1))
				return MapMineFieldFloorObject(floorControllers[i],map);
			}
		}
		return null;
	}
};

CFloorSearcher@FloorSearcher=CFloorSearcher();        

bool d_IsElectroFloorOn(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	return IsFloorOn(map,controllerId,(0));
}

bool d_IsElectroFloor2On(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	return IsFloorOn(map,controllerId,(0));
}

bool d_IsElectroFloorOff(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	return IsFloorOff(map,controllerId,(0));
}

bool d_IsElectroFloorOff(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	return IsFloorOff(map,controllerId,(0));
}  

void r_ElectroFloorToggle(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	ToggleFloor(map,controllerId,(0));
}

void r_ElectroFloorToggle(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	ToggleFloor(map,controllerId,(0));
}

void r_ElectroFloorOn(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	SetFloorOn(map,controllerId,(0));
}

void r_ElectroFloorOn(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetFloorOn(map,controllerId,(0));
}

void r_ElectroFloorOff(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	SetFloorOff(map,controllerId,(0));
}

void r_ElectroFloorOff(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetFloorOff(map,controllerId,(0));
}   

void r_ElectroFloorAllToggle(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	ToggleFloor(map,-1,(0));
}

void r_ElectroFloorAllToggle(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	ToggleFloor(map,-1,(0));
}

void r_ElectroFloorAllOn(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	SetFloorOn(map,-1,(0));
}

void r_ElectroFloorAllOn(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetFloorOn(map,-1,(0));
}

void r_ElectroFloorAllOff(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	SetFloorOff(map,-1,(0));
}

void r_ElectroFloorAllOff(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetFloorOff(map,-1,(0));
}         

bool d_IsMineFieldFloorOn(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	return IsFloorOn(map,controllerId,(1));
}

bool d_IsMineFieldFloor2On(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	return IsFloorOn(map,controllerId,(1));
}

bool d_IsMineFieldFloorOff(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	return IsFloorOff(map,controllerId,(1));
}

bool d_IsMineFieldFloorOff(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	return IsFloorOff(map,controllerId,(1));
}  

void r_MineFieldFloorToggle(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	ToggleFloor(map,controllerId,(1));
}

void r_MineFieldFloorToggle(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	ToggleFloor(map,controllerId,(1));
}

void r_MineFieldFloorOn(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	SetFloorOn(map,controllerId,(1));
}

void r_MineFieldFloorOn(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetFloorOn(map,controllerId,(1));
}

void r_MineFieldFloorOff(Critter&player,Critter@npc,int controllerId)
{
	Map@map=player.GetMap();
	SetFloorOff(map,controllerId,(1));
}

void r_MineFieldFloorOff(Critter&player,Critter@npc,int controllerId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetFloorOff(map,controllerId,(1));
}  

void r_MineFieldFloorAllToggle(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	ToggleFloor(map,-1,(1));
}

void r_MineFieldFloorAllToggle(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	ToggleFloor(map,-1,(1));
}

void r_MineFieldFloorAllOn(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	SetFloorOn(map,-1,(1));
}

void r_MineFieldFloorAllOn(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetFloorOn(map,-1,(1));
}

void r_MineFieldFloorAllOff(Critter&player,Critter@npc)
{
	Map@map=player.GetMap();
	SetFloorOff(map,-1,(1));
}

void r_MineFieldFloorAllOff(Critter&player,Critter@npc,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetFloorOff(map,-1,(1));
}    

void SetFloorOn(Map@map,int controllerId,uint floorType)
{
	if(!(@map!=null))
	return;
	
	if(controllerId!=-1)
	{
		MapFloorObject@floor=FloorSearcher.FindSingleFloor(map,controllerId,floorType);
		if((@floor!=null))
		floor.TurnOn();
		return;
	}
	
	array<MapFloorObject@>floors;
	for(uint i=0,j=FloorSearcher.FindFloorObjects(floors,map,floorType);i<j;i++)
	{
		floors[i].TurnOn();
	}
}

void SetFloorOff(Map@map,int controllerId,uint floorType)
{
	if(!(@map!=null))
	return;
	
	if(controllerId!=-1)
	{
		MapFloorObject@floor=FloorSearcher.FindSingleFloor(map,controllerId,floorType);
		if((@floor!=null))
		floor.TurnOff();
		return;
	}
	
	array<MapFloorObject@>floors;
	for(uint i=0,j=FloorSearcher.FindFloorObjects(floors,map,floorType);i<j;i++)
	{
		floors[i].TurnOff();
	}
}

void ToggleFloor(Map@map,int controllerId,uint floorType)
{
	if(!(@map!=null))
	return;
	
	if(controllerId!=-1)
	{
		MapFloorObject@floor=FloorSearcher.FindSingleFloor(map,controllerId,floorType);
		if((@floor!=null))
		floor.Toggle();
		return;
	}
	
	array<MapFloorObject@>floors;
	for(uint i=0,j=FloorSearcher.FindFloorObjects(floors,map,floorType);i<j;i++)
	{
		floors[i].Toggle();
	}
}  

bool IsFloorOn(Map@map,int floorControllerId,uint floorType)
{
	if(!(@map!=null)||floorControllerId==-1)
	return false;
	
	MapFloorObject@floor=FloorSearcher.FindSingleFloor(map,floorControllerId,floorType);
	if((@floor!=null))
	return floor.IsOn();
	
	return false;
}

bool IsFloorOff(Map@map,int floorControllerId,uint floorType)
{
	if(!(@map!=null)||floorControllerId==-1)
	return false;
	
	MapFloorObject@floor=FloorSearcher.FindSingleFloor(map,floorControllerId,floorType);
	if((@floor!=null))
	return floor.IsOff();
	
	return false;
}     

void _InitElectroFloorController(Item&controller,bool firstTime)
{
	if(!firstTime)
	return;
	uint[]values={controller.Id,(0)};
	
	if(controller.Val2&0xFFFF0000==0)
	controller.Val2=controller.Val2|0x00010000;
	if(controller.Val2&0x0000FFFF==0)
	controller.Val2=controller.Val2|0x00000001;
	
	CreateTimeEvent(__FullSecond+((1)*__TimeMultiplier),"e_StartFloor",values,true);
}

void _InitMineFieldFloorController(Item&controller,bool firstTime)
{
	if(!firstTime)
	return;
	uint[]values={controller.Id,(1)};
	CreateTimeEvent(__FullSecond+((1)*__TimeMultiplier),"e_StartFloor",values,true);
}  

uint e_StartFloor(array<uint>@values)
{
	Item@controller=GetItem(values[0]);
	if(!(@controller!=null)||controller.MapId==0)
	return 0;
	
	uint16 hexX,hexY;
	Map@map=controller.GetMapPosition(hexX,hexY);
	if(!(@map!=null))
	return 0;
	
	uint type=values[1];
	
	MapFloorObject@floor;
	if(type==(0))
	@floor=MapElectroFloorObject(controller,map);
	else if(type==(1))
	@floor=MapMineFieldFloorObject(controller,map);
	else
	return 0;
	
	if(floor.IsOn())
	{
		floor.ForceOn();
	}
	return 0;
}

uint e_StartMineFieldFloor(array<uint>@values)
{
	Item@controller=GetItem(values[0]);
	if(!(@controller!=null)||controller.MapId==0)
	return 0;
	
	uint16 hexX,hexY;
	Map@map=controller.GetMapPosition(hexX,hexY);
	if(!(@map!=null))
	return 0;
	
	MapFloorObject@floor=MapMineFieldFloorObject(controller,map);
	
	if(floor.IsOn())
	{
		floor.ForceOn();
	}
	return 0;
} 

uint e_ShockFloor(array<uint>@values)
{
	Map@map=GetMap(values[0]);
	Item@controller=GetItem(values[1]);
	if(!(@map!=null)||!(@controller!=null))
	return 0;
	uint len=values.length();
	array<Item@>floorPlates(len-2);
	for(uint i=2;i<len;i++)
	{
		@floorPlates[i-2]=GetItem(values[i]);
	}
	MapElectroFloorObject@electroFloor=MapElectroFloorObject(controller,map,floorPlates);
	
	electroFloor.Zap();
	return((electroFloor.GetShockInterval())*__TimeMultiplier);
}  

class MapFloorObject:ITogglableSMO
{
	Item@controller;
	array<Item@>floorPlates;
	bool floorInitialized;
	Map@map;
	
	MapFloorObject(Item@controller,Map@map)
	{
		@this.controller=controller;
		this.floorPlates=floorPlates;
		@this.map=map;
		floorInitialized=false;
	}
	
	MapFloorObject(Item@controller,Map@map,array<Item@>floorPlates)
	{
		@this.controller=controller;
		@this.map=map;
		this.floorPlates=floorPlates;
		floorInitialized=true;
	}
	
	void LazyInitFloor(uint platePid)
	{
		array<Item@>plates;
		uint plateCount=map.GetItems(platePid,plates);
		
		uint controlledPlatesCount=0;
		
		for(uint i=0;i<plateCount;i++)
		{
			if(controller.Val0==plates[i].Val0)
			controlledPlatesCount++;
		}
		
		floorPlates.resize(controlledPlatesCount);
		
		for(uint i=0,j=0;i<plateCount;i++)
		{
			if(controller.Val0==plates[i].Val0)
			{
				@floorPlates[j]=plates[i];
				j++;
			}
		}
	}
	
	void ForceOn(){}
	bool IsOn(){return false;}
	void TurnOn(){}
	bool IsOff(){return false;}
	void TurnOff(){}
	
	void Toggle()
	{
		if(IsOn())
		TurnOff();
		else
		TurnOn();
	}
};

class MapMineFieldFloorObject:MapFloorObject
{
	MapMineFieldFloorObject(Item@controller,Map@map)
	{
		super(controller,map);
	}
	
	MapMineFieldFloorObject(Item@controller,Map@map,array<Item@>floorPlates)
	{
		super(controller,map,floorPlates);
	}
	
	void TurnOn()
	{
		if(IsOff())
		{
			ForceOn();
		}
	}
	
	void ForceOn()
	{
		if(!floorInitialized)
		LazyInitFloor((10011));
		((controller.Val4)=(controller.Val4)|((0x01)));
		uint complexity=GetComplexity();
		uint hideSkill=GetHideSkill();
		uint bonusDamage=GetBonusDamage();
		uint bonusRadius=GetBonusRadius();
		for(uint i=0;i<floorPlates.length();i++)
		{
			Item@mine=map.AddItem(floorPlates[i].HexX,floorPlates[i].HexY,(545),1);
			if((@mine!=null))
			{
				MakeMine(mine,0,complexity,hideSkill,bonusDamage,bonusRadius);
				floorPlates[i].Val1=mine.Id;
			}
		}
	}
	
	uint GetComplexity()
	{
		return(controller.Val3>>16)&0x0000FFFF;
	}
	
	void SetComplexity(uint complexity)
	{
		controller.Val3=(controller.Val3&0x0000FFFF)|((complexity<<16)&0xFFFF0000);
	}
	
	uint GetHideSkill()
	{
		return controller.Val3&0x0000FFFF;
	}
	
	void SetHideSkill(uint hideSkill)
	{
		controller.Val3=(controller.Val3&0xFFFF0000)|(hideSkill&0x0000FFFF);
	}
	
	uint GetBonusDamage()
	{
		return(controller.Val2>>16)&0x0000FFFF;
	}
	
	void SetBonusDamage(uint damage)
	{
		controller.Val2=(controller.Val2&0x0000FFFF)|((damage<<16)&0xFFFF0000);
	}
	
	uint GetBonusRadius()
	{
		return controller.Val2&0x0000FFFF;
	}
	
	void SetBonusRadius(uint radius)
	{
		controller.Val2=(controller.Val2&0xFFFF0000)|(radius&0x0000FFFF);
	}
	
	void TurnOff()
	{
		if(IsOn())
		{
			if(!floorInitialized)
			LazyInitFloor((10011));
			(controller.Val4=((controller.Val4)&(~((0x01)))));
			for(uint i=0;i<floorPlates.length();i++)
			{
				Item@mine=GetItem(floorPlates[i].Val1);
				if((@mine!=null))
				DeleteItem(mine);
			}
		}
	}
	
	bool IsOn()
	{
		return(((controller.Val4)&((0x01)))!=0);
	}
	
	bool IsOff()
	{
		return!(((controller.Val4)&((0x01)))!=0);
	}
};

class MapElectroFloorObject:MapFloorObject
{
	
	MapElectroFloorObject(Item@controller,Map@map)
	{
		super(controller,map);
	}
	
	MapElectroFloorObject(Item@controller,Map@map,array<Item@>floorPlates)
	{
		super(controller,map,floorPlates);
	}
	
	void Zap()
	{
		if(!floorInitialized)
		LazyInitFloor((10010));
		
		for(uint i=0;i<floorPlates.length();i++)
		{
			Critter@critter=map.GetCritter(floorPlates[i].HexX,floorPlates[i].HexY);
			if((@critter!=null))
			{
				InjureCritter(critter,GetDamage(),(5),0,0);
			}
		}
	}
	
	void TurnOn()
	{
		if(IsOff())
		{
			ForceOn();
		}
		
	}
	
	void ForceOn()
	{
		Zap();
		((controller.Val3)=(controller.Val3)|((0x01)));
		array<uint>values(floorPlates.length()+2);
		values[0]=map.Id;
		values[1]=controller.Id;
		for(uint i=0;i<floorPlates.length();i++)
		values[i+2]=floorPlates[i].Id;
		
		controller.Val4=CreateTimeEvent(__FullSecond+((GetShockInterval())*__TimeMultiplier),"e_ShockFloor",values,true);
	}
	
	void SetDamage(uint damage)
	{
		if(damage==0)
		damage=1;
		
		controller.Val2=(controller.Val2&0x0000FFFF)|((damage<<16)&0xFFFF0000);
	}
	
	uint GetDamage()
	{
		return(controller.Val2>>16)&0x0000FFFF;
	}
	
	void SetShockInterval(uint interval)
	{
		if(interval==0)
		interval=1;
		controller.Val2=(controller.Val2&0xFFFF0000)|(interval&0x0000FFFF);
	}
	
	uint GetShockInterval()
	{
		return controller.Val2&0x0000FFFF;
	}
	
	void TurnOff()
	{
		if(IsOn())
		{
			(controller.Val3=((controller.Val3)&(~((0x01)))));
			if(controller.Val4!=0)
			{
				EraseTimeEvent(controller.Val4);
				controller.Val4=0;
			}
		}
	}
	
	bool IsOn()
	{
		return(((controller.Val3)&((0x01)))!=0);
	}
	
	bool IsOff()
	{
		return!(((controller.Val3)&((0x01)))!=0);
	}
}; 

void InitializeSMOs()
{
	AddCallback(SteamSearcher);
	AddCallback(FloorSearcher);
	AddCallback(ForceFieldSearcher);
}

interface ITogglableSMO
{
	void Toggle();
	void TurnOn();
	void TurnOff();
};

interface ISearchingCallback
{
	uint FindTogglableSMOs(array<ITogglableSMO@>&list,Map&map,int globalId);
};

array<ISearchingCallback@>SearchCallbacks;

void AddCallback(ISearchingCallback@newCallback)
{
	if((@newCallback!=null))
	SearchCallbacks.insertLast(newCallback);
}

uint FindSMOs(array<ITogglableSMO@>&smos,Map&map,int globalId)
{
	uint smoCount=0;
	for(uint i=0,j=SearchCallbacks.length();i<j;i++)
	{
		smoCount+=SearchCallbacks[i].FindTogglableSMOs(smos,map,globalId);
	}
	return smoCount;
} 

void r_SMOToggle(Critter&player,Critter@npc,int globalId)
{
	Map@map=player.GetMap();
	ToggleSMO(map,globalId);
}

void r_SMOToggle(Critter&player,Critter@npc,int globalId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	ToggleSMO(map,globalId);
}

void r_SMOOn(Critter&player,Critter@npc,int globalId)
{
	Map@map=player.GetMap();
	SetSMOOn(map,globalId);
}

void r_SMOOn(Critter&player,Critter@npc,int globalId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetSMOOn(map,globalId);
}

void r_SMOOff(Critter&player,Critter@npc,int globalId)
{
	Map@map=player.GetMap();
	SetSMOOff(map,globalId);
}

void r_SMOOff(Critter&player,Critter@npc,int globalId,int mapPid)
{
	Location@loc=GetLocationOf(player);
	Map@map;
	if((@loc!=null))
	@map=loc.GetMap(mapPid);
	SetSMOOff(map,globalId);
}   

void ToggleSMO(Map@map,int globalId)
{
	if(!(@map!=null))
	return;
	
	array<ITogglableSMO@>smos;
	for(uint i=0,j=FindSMOs(smos,map,globalId);i<j;i++)
	{
		smos[i].Toggle();
	}
}

void SetSMOOn(Map@map,int globalId)
{
	if(!(@map!=null))
	return;
	
	array<ITogglableSMO@>smos;
	for(uint i=0,j=FindSMOs(smos,map,globalId);i<j;i++)
	{
		smos[i].TurnOn();
	}
}

void SetSMOOff(Map@map,int globalId)
{
	if(!(@map!=null))
	return;
	
	array<ITogglableSMO@>smos;
	for(uint i=0,j=FindSMOs(smos,map,globalId);i<j;i++)
	{
		smos[i].TurnOff();
	}
}
