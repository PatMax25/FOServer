

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                   

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}                              

shared class CombatRes
{
	array<uint>Res;
	Critter@Crit;
	int Left;
	int Right;
	
	CombatRes()
	{
		Res.resize(1);
		Res[0]=1;
		Left=(-1);
		Right=(-1);
	}
};

void AddEff(Critter@crit,array<uint>&eff,array<CombatRes>&combatResults)
{
	int ptr=0; 
	
	if(combatResults.length()==0)
	{
		combatResults.resize(1);
		@combatResults[0].Crit=crit;
	}
	
	while(combatResults[ptr].Crit.Id!=crit.Id)
	{
		if(crit.Id<combatResults[ptr].Crit.Id)
		{
			if(combatResults[ptr].Left!=(-1))
			ptr=combatResults[ptr].Left;
			else
			{
				uint last=combatResults.length();
				combatResults.resize(last+1);
				combatResults[ptr].Left=last;
				ptr=last;
				@combatResults[last].Crit=crit;
			}
		}
		else
		{
			if(combatResults[ptr].Right!=(-1))
			ptr=combatResults[ptr].Right;
			else
			{
				uint last=combatResults.length();
				combatResults.resize(last+1);
				combatResults[ptr].Right=last;
				ptr=last;
				@combatResults[last].Crit=crit;
			}
		}
	} 
	
	uint len=eff.length();
	combatResults[ptr].Res.resize(combatResults[ptr].Res[0]+len);
	for(uint i=0;i<len;i++)
	combatResults[ptr].Res[i+combatResults[ptr].Res[0]]=eff[i];
	
	combatResults[ptr].Res[0]+=len;
}

void runTree(array<CombatRes>&combatResults,int ptr)
{
	if(ptr==0)
	if(combatResults.length()==0)
	return;    
	
	combatResults[ptr].Crit.SendCombatResult(combatResults[ptr].Res);    
	
	if(combatResults[ptr].Left!=(-1))
	runTree(combatResults,combatResults[ptr].Left);
	if(combatResults[ptr].Right!=(-1))
	runTree(combatResults,combatResults[ptr].Right);
}          

const int[]CriticalTable={   
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000,
	
	3,0x00000000,2,0,0x00000000,5001,5004,4,0x00000000,6,0,0x00000000,5001,5004,5,0x00000002,2,-2,0x00000002,5001,5004,5,0x00000002,2,0,0x00000000,5004,5003,6,0x00000001,2,-2,0x00000000,5005,5002,6,0x00000801,6,0,0x00000000,5019,5007,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,0,0x00000000,5010,5011,4,0x00000002,0,0,0x00000000,5012,5000,5,0x00004000,0,-2,0x00000000,5012,5000,5,0x00004010,-1,0,0x00000000,5013,5000,
	3,0x00000000,0,3,0x00000000,5008,5000,3,0x00004000,0,0,0x00004000,5009,5000,4,0x00004000,0,1,0x00000000,5014,5000,4,0x00000002,0,0,0x00000000,5015,5000,5,0x00004000,0,-2,0x00000000,5015,5000,5,0x00004020,-1,0,0x00000000,5013,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5017,5000,4,0x00000000,5,0,0x00000002,5019,5000,4,0x00000002,6,0,0x00000000,5019,5000,5,0x00000002,2,0,0x00000000,5020,5000,6,0x00000000,2,0,0x00000000,5021,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000008,5,0,0x00000000,5025,5026,5,0x0000000A,5,-2,0x00000000,5026,5000,
	3,0x00000000,2,5,0x00000000,5023,5000,3,0x00000000,5,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5023,5024,4,0x00000002,2,0,0x00000000,5025,5000,5,0x00000004,5,0,0x00000000,5025,5026,5,0x00000006,5,-2,0x00000000,5026,5000,
	4,0x00000000,-1,0,0x00000000,5001,5000,5,0x00000000,-1,0,0x00000000,5001,5004,5,0x00000000,6,0,0x00000000,5001,5031,6,0x00000002,6,0,0x00000000,5028,5030,6,0x00000040,6,0,0x00000000,5031,5019,7,0x00000041,6,0,0x00000000,5031,5007,
	3,0x00000000,2,0,0x00000000,5033,5000,4,0x00000000,2,0,0x00000000,5034,5035,5,0x00000002,2,0,0x00000000,5035,5036,5,0x00000002,6,0,0x00000000,5036,5000,6,0x00000001,6,-2,0x00000000,5035,5036,6,0x00000081,6,0,0x00000000,5037,5000,
	2,0x00000000,-1,0,0x00000000,5016,5000,3,0x00000000,-1,0,0x00000000,5018,5000,4,0x00000000,5,0,0x00000002,5018,5000,4,0x00000002,-1,0,0x00000000,5020,5000,5,0x00000000,2,0,0x00000000,5020,5000,6,0x00000080,2,0,0x00000000,5021,5000
};         

const uint[]CriticalFailureTable={
	0x00000000,0x00008000,0x00008000,0x00080002,0x00200000,
	0x00000000,0x00008000,0x00004000,0x00100000,0x00010000,
	0x00000000,0x00020000,0x00004000,0x00100000,0x00002000,
	0x00008000,0x00028000,0x0000C000,0x00100000,0x00009000,
	0x00040000,0x00004000,0x00084000,0x00100000,0x00001000,
	0x00008000,0x00040000,0x00002000,0x00100000,0x00009002,
	0x00000000,0x00008000,0x00100000,0x00002000,0x00009400};           

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging

void AI_TrySayCombatText(Critter&npc,int textType)
{
	AI_TrySayCombatText(npc,textType,false);
}

void AI_TrySayCombatText(Critter&npc,int textType,bool force)
{
	if(!npc.IsLife())
	return;
	uint ai=npc.Param[(105)];
	if(!force&&AIData_[(((ai)<(286)?(ai):0)*22+16)]<Random(1,230))
	return;
	
	uint start=0,end=0;
	if(textType>=(0)&&textType<=(3))
	{
		start=AIGeneralMsg_[AIData_[(((ai)<(286)?(ai):0)*22+17)]*8+textType*2];
		end=AIGeneralMsg_[AIData_[(((ai)<(286)?(ai):0)*22+17)]*8+textType*2+1];
	}
	else if(textType>=(10)&&textType<=(17))
	{
		textType-=10;
		start=AIBodyMsg_[AIData_[(((ai)<(286)?(ai):0)*22+18)]*16+textType*2];
		end=AIBodyMsg_[AIData_[(((ai)<(286)?(ai):0)*22+18)]*16+textType*2+1];
	}
	else
	return;
	if(start<=end)
	npc.SayMsg((2),(5),Random(start,end)*10);
}

const int[]AIData_=
{
	
	10,15,3,1,1,(1),(3),(0),(1),(0),(4),(1),(2),(0),10,5,0,45,27,0,0,0,
	90,20,5,30,1,(0),(1),(0),(0),(0),(2),(2),0,(0),30,3,25,6,7,0,0,0,
	10,12,15,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),3,20,20,6,7,0,0,0,
	40,15,15,35,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,15,80,6,7,0,0,0,
	20,15,14,50,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,4,75,6,7,0,0,0,
	100,1,0,0,0,(0),(0),(6),(0),(0),(0),0,0,(0),10,10,0,45,27,0,0,0,
	10,15,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),25,1000000,0,45,27,0,0,0,
	45,15,0,0,0,(0),(0),(1),(0),(0),(0),(2),0,(0),1000000,40,0,45,27,0,0,0,
	60,15,0,0,0,(0),(0),(1),(0),(0),(0),(2),0,(0),10000,10,0,45,27,0,0,0,
	40,17,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),1000000,30,0,45,27,0,0,0,
	70,20,0,10,1,(0),(4),(3),(0),(0),(0),(1),(2),(0),20,15,0,45,27,0,0,0,
	20,10,30,20,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,35,11,10,0,0,0,
	80,20,4,20,1,(4),(4),(4),(3),(0),(0),(1),(2),(5),5,5,30,3,2,0,0,0,
	80,10,10,40,1,(0),(2),(0),(0),(0),(0),(1),(2),(4),1000,15,15,2,2,0,0,0,
	30,10,12,34,1,(0),(4),(0),(0),(0),(0),(1),(2),(3),10000,30,10,0,0,0,0,0,
	0,8,20,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,35,45,27,0,0,0,
	65,10,10,25,1,(4),(2),(4),(1),(0),(2),(1),(2),(4),10,8,23,2,2,0,0,0,
	33,8,8,30,1,(2),(4),(0),(0),(0),(0),(1),(2),(5),5000,20,25,1,1,0,0,0,
	90,15,1,25,1,(0),(0),(0),(0),(0),(0),(2),0,(0),40,8,16,5,2,0,0,0,
	20,10,10,28,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),3,1500,30,1,1,0,0,0,
	
	70,12,8,24,1,(0),(4),(0),(0),(0),(0),(1),(2),(4),80,30,20,0,0,0,0,0,
	80,18,0,0,0,(0),(0),(1),(0),(0),(0),(2),0,(0),600,200,0,45,27,0,0,0,
	95,19,1,15,1,(4),(4),(4),(0),(0),(2),0,0,(5),10,3,25,5,2,0,0,0,
	100,25,0,0,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,3,18,4,4,0,0,0,
	60,12,10,30,1,(0),(4),(0),(3),(0),(0),(1),(2),(5),75,20,25,2,2,0,0,0,
	95,7,0,0,1,(0),(4),(0),(3),(1),(1),(1),(2),(6),5,100,20,45,27,0,0,0,
	50,10,0,0,0,(0),(0),(1),(5),(0),(0),(1),(2),(0),20,20,0,45,27,(284),(81),(103),
	95,10,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),20,20,0,45,27,0,0,0,
	50,10,0,10,0,(0),(4),(1),(0),(0),(1),(1),(2),(6),20,20,10,44,4,0,0,0,
	60,10,5,30,1,(0),(4),(3),(0),(0),(1),(1),(2),(6),20,20,0,45,27,0,0,0,
	50,10,10,30,1,(0),(2),(0),(0),(0),(0),(2),0,(0),20,20,15,9,6,0,0,0,
	100,13,0,0,1,(0),(4),(0),(0),(0),(0),(2),0,(0),20,20,20,9,6,0,0,0,
	90,10,0,0,1,(2),(4),(0),(0),(0),(2),(2),0,(6),10,10,25,9,6,0,0,0,
	20,10,30,30,1,(0),(0),(0),(0),(0),(0),(2),0,(0),20,20,25,0,0,0,0,0,
	40,10,10,20,1,(0),(4),(0),(0),(0),(0),(1),(2),(6),20,20,0,45,27,0,0,0,
	50,10,10,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20,20,10,8,0,0,0,
	80,10,10,20,1,(1),(4),(4),(0),(0),(3),(1),(2),(0),20,4,25,10,8,0,0,0,
	40,10,10,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20,10,10,8,0,0,0,
	80,15,8,10,1,(1),(4),(2),(5),(0),(1),(1),(2),(6),33,2,15,4,4,0,0,0,
	20,10,0,25,0,(0),(0),(0),(5),(0),(0),(1),(2),(0),20,2,0,45,27,(284),(81),(103),
	
	80,10,3,10,1,(0),(0),(0),(0),(0),(0),0,0,(6),2,200000,10,43,26,0,0,0,
	20,8,20,10,1,(0),(4),(0),(0),(0),(0),(1),(2),(0),20,20,20,1,1,0,0,0,
	2,5,30,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20,18,2,2,0,0,0,
	35,5,15,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20000,15,1,1,0,0,0,
	35,10,15,40,1,(0),(2),(0),(0),(0),(0),(1),(2),(4),20,15,15,2,2,0,0,0,
	35,7,15,40,1,(0),(0),(0),(1),(0),(0),(1),(2),(4),20,15,15,0,0,0,0,0,
	0,3,15,40,1,(2),(2),(2),(1),(0),(2),(1),(2),(3),20,15,15,0,0,0,0,0,
	95,15,1,20,1,(0),(4),(0),(0),(1),(0),(1),(2),(0),20,15,15,31,16,0,0,0,
	87,10,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),20,15,0,45,27,0,0,0,
	35,5,15,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20000,15,0,0,0,0,0,
	75,12,0,10,0,(4),(3),(3),(4),(0),(4),(1),(2),(0),20,200,0,45,27,(81),0,0,
	95,15,7,10,1,(0),(4),(0),(0),(0),(0),(1),(2),(0),20,1,15,10,8,0,0,0,
	45,12,10,10,1,(4),(3),(3),(4),(0),(4),(1),(2),(0),20,200,0,11,10,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(4),(2),(4),(3),(4),(2),(1),(2),(4),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(3),(0),(4),(3),(3),(5),(1),(2),(4),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),10,5,25,2,2,(81),0,0,
	1,12,10,10,1,(4),(4),(4),(3),(0),(4),(1),(2),(4),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(4),(4),(0),(1),(5),(2),(1),(2),(2),10,5,25,38,23,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(2),10,10,25,38,23,(81),0,0,
	
	45,12,10,10,1,(4),(0),(0),(3),(3),(5),(1),(2),(2),10,10,25,38,23,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(3),(0),(5),(1),(2),(1),20,200,25,38,23,(81),0,0,
	45,12,10,10,1,(4),(4),(4),(1),(0),(5),(1),(2),(2),10,10,25,38,23,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(1),(5),(2),(1),(2),(6),10,5,15,42,25,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(3),(4),(2),(1),(2),(5),10,10,15,42,25,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,15,42,25,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(3),20,200,15,42,25,(81),0,0,
	30,12,10,10,1,(4),(0),(0),(3),(0),(2),(3),0,(5),5,10,20,42,25,(81),0,0,
	45,12,10,10,1,(2),(3),(4),(3),(5),(2),(1),(2),(6),10,5,15,39,24,(81),0,0,
	45,12,10,10,1,(4),(3),(4),(3),(4),(2),(1),(2),(5),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(4),(0),(4),(3),(3),(4),(1),(2),(4),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(2),(4),(4),(2),(0),(5),(1),(2),(4),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(4),(3),(4),(3),(0),(2),(1),(2),(5),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(1),(4),(5),(4),(5),(1),(1),(2),(6),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(2),(4),(5),(3),(4),(2),(1),(2),(5),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(4),(0),(5),(3),(3),(4),(1),(2),(5),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(5),10,10,35,33,17,(81),0,0,
	75,12,10,10,1,(4),(1),(5),(3),(0),(1),(1),(2),(5),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,25,37,21,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(4),20,200,25,37,21,(81),0,0,
	
	45,12,10,10,1,(2),(0),(4),(2),(3),(4),(1),(2),(3),10,2,25,37,21,(81),0,0,
	45,12,10,10,1,(2),(2),(4),(2),(0),(4),(1),(2),(2),10,2,25,37,21,(81),0,0,
	50,12,10,10,1,(2),(2),(4),(2),(0),(4),(1),(2),(4),10,2,25,37,21,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(0),(5),(1),(1),(2),(6),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(0),(4),(1),(1),(2),(5),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(0),(0),(3),(0),(3),(4),(1),(2),(5),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(0),(2),(3),(0),(0),(2),(1),(2),(3),20,200,10,46,27,(81),0,0,
	80,12,0,10,1,(0),(0),(3),(0),(0),(4),0,0,(5),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(5),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(4),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(0),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(3),(5),(1),(1),(2),(6),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(3),(4),(1),(1),(2),(5),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(2),(0),(1),(1),(2),(5),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(3),(0),(1),(1),(2),(5),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,20,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(5),20,200,20,1,1,(81),0,0,
	
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,20,1,1,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,20,1,1,(81),0,0,
	45,12,25,10,1,(5),(2),(0),(2),(0),(2),(1),(2),(4),20,200,20,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(5),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(3),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(3),(0),(4),(2),(0),(4),(1),(2),(4),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(5),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(1),(3),(0),(0),(1),0,0,(4),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(1),(3),(0),(0),(5),(2),(1),(2),(6),10,10,15,35,19,0,0,0,
	45,12,10,10,1,(2),(3),(0),(0),(4),(2),(1),(2),(5),10,10,15,35,19,(81),0,0,
	45,12,10,10,1,(3),(0),(4),(0),(3),(4),(1),(2),(5),10,5,15,35,19,(81),0,0,
	45,12,10,10,1,(1),(2),(3),(0),(0),(3),(1),(2),(1),10,10,15,35,19,(81),0,0,
	50,12,10,10,1,(1),(4),(3),(0),(0),(3),0,0,(0),10,10,15,35,19,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(5),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(4),20,200,0,45,27,(81),0,0,
	
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(0),(0),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	1,3,15,80,0,(4),(2),(3),(4),(0),(4),(1),(2),(1),20,200,0,45,27,(81),0,0,
	100,12,3,10,1,(4),(3),(4),(1),(0),(2),(1),(2),(0),5,4,35,32,2,(81),0,0,
	100,12,1,0,1,(4),(3),(3),(4),(0),(4),0,0,(0),2,20,0,2,2,(81),0,0,
	90,20,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),3000,30000,25,2,2,0,0,0,
	90,20,1,10,1,(4),(4),(4),(3),(0),(2),0,0,(5),5,4,25,5,2,0,0,0,
	90,20,1,10,1,(4),(4),(0),(0),(0),(0),0,0,(0),3000,5,30,14,22,0,0,0,
	90,20,1,10,1,(4),(4),(4),(0),(0),(2),0,0,(0),3000,5,25,31,16,0,0,0,
	100,20,1,10,1,(0),(0),(1),(0),(0),(0),0,0,(0),300,300,0,45,27,0,0,0,
	90,20,1,10,1,(0),(2),(3),(0),(0),(0),0,0,(0),3000,30000,0,45,27,0,0,0,
	90,20,1,10,0,(0),(0),(1),(0),(0),(0),0,0,(0),3000,30000,0,45,27,0,0,0,
	90,20,1,10,0,(0),(4),(3),(0),(0),(1),0,0,(6),5,30000,0,45,27,0,0,0,
	90,10,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),25,25,25,5,2,0,0,0,
	90,20,1,10,1,(4),(4),(4),(0),(0),(5),0,0,(0),3,3,25,13,11,0,0,0,
	90,20,1,10,1,(4),(3),(4),(0),(0),(2),0,0,(0),3,3,25,12,11,0,0,0,
	90,20,1,10,1,(0),(2),(0),(0),(0),(0),0,0,(0),3,3,0,45,27,0,0,0,
	10,10,10,10,1,(0),(4),(0),(0),(1),(1),0,0,(6),10,5000,30,17,12,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(5),(0),0,0,(0),10,5000,30,18,12,0,0,0,
	
	10,10,10,10,1,(0),(4),(0),(0),(1),(0),0,0,(3),10,5000,15,1,1,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,50,26,15,0,0,0,
	10,10,0,0,1,(4),(4),(0),(0),(1),(2),0,0,(6),5,5,15,45,27,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,6,7,0,0,0,
	10,10,10,10,0,(0),(0),(4),(0),(1),(0),0,0,(0),10,5000,15,45,27,0,0,0,
	10,10,0,0,1,(0),(3),(0),(0),(1),(0),(2),0,(6),10,5000,30,41,6,0,0,0,
	10,10,0,0,0,(0),(4),(1),(0),(1),(0),0,0,(6),4,5000,30,40,27,0,0,0,
	10,10,10,10,1,(1),(4),(0),(0),(1),(0),0,0,(5),10,5000,15,2,2,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,11,10,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,45,27,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,25,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,24,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,20,14,0,0,0,
	10,10,35,10,1,(0),(4),(0),(0),(1),(0),0,0,(5),10,5000,15,22,12,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,19,14,0,0,0,
	10,10,10,10,1,(0),(2),(0),(0),(1),(0),(2),(3),(5),10,2,15,21,14,0,0,0,
	10,12,10,0,1,(4),(4),(4),(3),(1),(5),(2),0,(5),10,2,25,22,12,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	10,10,10,10,1,(3),(2),(0),(0),(1),(0),0,0,(5),5,10,15,2,14,0,0,0,
	10,10,10,10,1,(1),(4),(4),(4),(1),(1),(2),0,(6),20,6,15,8,9,(87),0,0,
	100,50,1,50,1,(1),(4),(0),(2),(1),(0),0,0,(6),10,5000,30,8,9,0,0,0,
	10,10,10,10,0,(0),(0),(3),(0),(4),(1),0,0,(6),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(4),(3),(0),(5),(1),0,0,(6),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(4),(3),(0),(0),(4),0,0,(4),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(3),(0),(0),(1),0,0,(5),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(3),(0),0,0,(0),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	100,15,0,0,1,(0),(4),(0),(0),(1),(3),(2),(3),(6),1,5000,25,9,6,0,0,0,
	10,10,10,10,1,(2),(4),(4),(3),(1),(2),0,0,(5),2,3,25,5,2,(40),0,0,
	10,10,10,10,1,(0),(4),(0),(0),(0),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	100,15,0,0,1,(0),(2),(0),(0),(1),(0),0,0,(6),10,5000,25,44,4,0,0,0,
	10,10,10,80,0,(0),(0),(1),(0),(1),(0),0,0,(1),10,5000,15,45,27,0,0,0,
	10,10,100,90,1,(0),(0),(0),(0),(0),(0),0,0,(1),10,5000,15,0,0,0,0,0,
	
	10,10,10,10,1,(0),(0),(0),(0),(1),(3),0,0,(6),10,5000,15,0,0,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),10,5000,15,2,2,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),10,5000,15,2,2,0,0,0,
	100,20,0,0,1,(1),(4),(0),(0),(1),(2),0,0,(6),10,2,25,4,4,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(1),10,5000,15,6,7,0,0,0,
	100,20,0,0,1,(1),(3),(0),(4),(1),(2),(2),0,(6),10,2,25,6,7,0,0,0,
	10,10,10,10,0,(0),(0),(1),(0),(0),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,15,3,1,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10,5,0,45,27,0,0,0,
	80,22,0,1,1,(0),(0),(0),(0),(0),(0),0,0,(0),30,3,25,50,31,0,0,0,
	10,12,12,35,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),3,6,20,51,32,0,0,0,
	5,15,12,30,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,5,0,45,27,0,0,0,
	20,15,5,1,1,(0),(0),(0),(0),(0),(0),(3),0,(0),20,4,25,0,0,0,0,0,
	1,10,15,80,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,100,20,55,36,0,0,0,
	10,15,10,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),25,8,20,47,28,0,0,0,
	40,20,1,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10,4,25,48,29,0,0,0,
	60,12,4,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,10,0,45,27,0,0,0,
	40,12,10,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,30,20,81,62,0,0,0,
	60,12,3,15,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),25,15,20,82,63,0,0,0,
	70,15,8,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,25,109,90,0,0,0,
	80,6,1,2,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,3,108,89,0,0,0,
	
	80,10,4,5,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,0,45,27,0,0,0,
	90,10,1,8,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,0,45,27,0,0,0,
	70,10,6,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10000,30,25,49,30,0,0,0,
	75,10,10,20,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),15,25,23,57,38,0,0,0,
	33,10,8,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),50,20,25,58,39,0,0,0,
	55,12,8,20,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),40,30,10,59,40,0,0,0,
	60,15,4,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),30,15,30,60,41,0,0,0,
	80,12,6,14,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),80,30,20,112,93,0,0,0,
	70,18,8,17,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),60,20,25,112,93,0,0,0,
	78,10,3,30,1,(0),(0),(0),(0),(0),(0),0,0,(0),20,10,20,62,43,0,0,0,
	20,9,12,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,18,63,44,0,0,0,
	60,12,16,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),75,20,25,64,45,0,0,0,
	40,14,12,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10,15,20,65,46,0,0,0,
	95,12,10,5,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,8,30,66,47,0,0,0,
	80,10,5,15,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10000,30,15,67,48,0,0,0,
	75,10,15,18,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,68,49,0,0,0,
	90,12,2,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),12,8,30,69,50,0,0,0,
	40,8,20,45,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),80,18,15,70,51,0,0,0,
	50,10,5,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),40,12,25,71,52,0,0,0,
	65,14,5,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,10,72,53,0,0,0,
	
	80,12,10,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),18,8,20,73,54,0,0,0,
	60,12,20,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,74,55,0,0,0,
	94,10,2,15,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,30,75,56,0,0,0,
	80,14,1,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,76,57,0,0,0,
	80,12,2,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),8,4,30,77,58,0,0,0,
	80,12,25,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),9,1,25,78,59,0,0,0,
	50,10,20,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10,10,25,79,60,0,0,0,
	20,7,18,50,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,80,61,0,0,0,
	40,10,12,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,100,15,81,62,0,0,0,
	60,12,5,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,1000,10,53,34,0,0,0,
	60,12,10,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),4,4,100,124,105,0,0,0,
	60,12,5,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,1000,30,53,34,0,0,0,
	60,12,5,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,1000,30,53,34,0,0,0,
	40,14,5,10,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),10,4,25,82,63,0,0,0,
	50,14,5,25,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10,4,30,54,35,0,0,0,
	90,14,1,30,1,(0),(0),(0),(0),(0),(0),0,0,(0),10,4,30,84,65,0,0,0,
	90,20,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),6,2,20,85,66,0,0,0,
	30,10,20,5,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,30,86,67,0,0,0,
	30,10,8,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,87,68,0,0,0,
	60,10,16,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),75,20,20,88,69,0,0,0,
	
	50,7,13,35,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),200,50,15,89,70,0,0,0,
	70,6,1,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,0,45,27,0,0,0,
	50,10,8,45,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000,30,18,90,71,0,0,0,
	70,15,3,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,91,72,0,0,0,
	70,10,1,20,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),10000,30,20,92,73,0,0,0,
	85,10,8,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,35,93,74,0,0,0,
	80,10,5,25,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,35,94,75,0,0,0,
	70,10,1,15,1,(0),(0),(0),(0),(0),(0),0,0,(0),4,30,20,95,76,0,0,0,
	55,12,20,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),16,30,20,96,77,0,0,0,
	50,12,1,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),40,20,20,97,78,0,0,0,
	30,12,12,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),200,20,15,98,79,0,0,0,
	70,10,1,15,1,(0),(0),(0),(0),(0),(0),(2),0,(0),20,10,25,99,80,0,0,0,
	80,10,1,10,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10,6,8,100,81,0,0,0,
	70,14,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),14,6,12,52,33,0,0,0,
	10,7,12,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,102,83,0,0,0,
	20,8,15,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,35,121,102,0,0,0,
	70,10,1,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,110,91,0,0,0,
	100,14,1,1,1,(0),(0),(0),(0),(0),(0),0,0,(0),4,3,20,105,86,0,0,0,
	70,10,10,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,8,15,104,85,0,0,0,
	73,10,15,20,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,0,45,27,0,0,0,
	
	77,10,1,30,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,0,45,27,0,0,0,
	70,12,10,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,5,104,85,0,0,0,
	60,10,15,25,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,20,107,88,0,0,0,
	30,10,12,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,25,20,61,42,0,0,0,
	20,8,8,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,103,84,0,0,0,
	90,8,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,25,106,87,0,0,0,
	75,12,10,25,1,(0),(0),(0),(0),(0),(0),(2),(1),(0),10000,30,20,111,92,0,0,0,
	20,8,1,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),12,12,15,101,82,0,0,0,
	20,8,1,30,1,(0),(0),(0),(0),(0),(0),(3),0,(0),12,12,30,113,94,0,0,0,
	50,12,20,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),2,2,35,114,95,0,0,0,
	90,15,1,15,1,(0),(0),(0),(0),(0),(0),(2),0,(0),4,3,35,115,96,0,0,0,
	10,12,20,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),44,22,25,116,97,0,0,0,
	45,8,15,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,22,117,98,0,0,0,
	80,30,10,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),8,5,30,118,99,0,0,0,
	45,6,18,35,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,18,25,119,100,0,0,0,
	70,8,8,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),50,12,25,120,101,0,0,0,
	100,30,15,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),6,4,15,56,37,0,0,0,
	100,8,0,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),4,10,25,122,103,0,0,0,
	0,8,14,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),400000,100000,20,123,104,0,0,0,
	100,20,1,1,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),40,2,0,45,27,0,0,0,
	
	80,4,0,1,1,(0),(0),(0),(0),(0),(0),0,0,(0),25,10,0,45,27,0,0,0,
	1,18,200,100,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),25,10,0,45,27,0,0,0,
	95,15,1,20,1,(0),(0),(3),(0),(1),(0),(1),(2),(0),20,15,15,31,16,0,0,0,
	95,15,1,20,1,(0),(0),(4),(0),(1),(0),(1),(2),(0),20,15,15,31,16,0,0,0,
	45,12,10,10,1,(2),(4),(5),(3),(4),(2),(1),(2),(0),10,5,35,5,2,(81),0,0,
	45,12,10,10,1,(2),(4),(4),(3),(4),(2),(1),(2),(0),10,5,35,5,2,(81),0,0
};

const uint[]AIGeneralMsg_=
{
	
	2000,2019,2020,2039,2040,2059,2060,2079,
	2100,2119,2120,2139,2140,2159,2160,2172,
	2200,2219,2220,2239,2240,2259,2260,2272,
	2400,2405,2420,2427,2440,2449,2460,2465,
	2300,2319,2320,2339,2340,2359,2360,2372,
	2500,2505,2520,2525,2540,2552,2560,2565,
	2600,2606,2620,2629,2640,2651,2660,2669,
	2700,2705,2720,2727,2740,2749,2760,2765,
	2900,2905,2920,2925,2940,2950,2960,2964,
	3000,3005,3020,3025,3040,3049,3060,3065,
	3100,3119,3120,3139,3140,3159,3160,3179,
	3200,3205,3220,3226,3240,3246,3260,3265,
	12000,12006,12020,12038,12040,12049,12060,12065,
	12100,12105,12120,12125,12140,12149,12160,12165,
	12200,12205,12220,12228,12240,12249,12260,12266,
	26000,26005,26020,26025,26040,26050,26060,26060,
	26100,26105,26120,26126,26140,26149,26160,26166,
	32100,32105,32120,32128,32140,32149,32160,32165,
	32200,32205,32220,32228,32240,32249,32260,32265,
	32300,32305,32320,32325,32340,32348,32360,32365,
	
	32400,32405,32420,32428,32440,32448,32460,32465,
	32500,32505,32520,32526,32540,32549,32560,32565,
	32600,32604,32620,32626,32640,32649,32660,32665,
	32800,32805,32820,32828,32840,32847,32860,32865,
	33000,33005,33020,33028,33040,33045,33060,33064,
	33100,33105,33120,33128,33140,33149,33160,33165,
	36100,36105,36120,36124,36140,36148,36160,36165,
	36200,36205,36220,36223,36240,36249,36260,36265,
	36300,36305,36320,36323,36340,36348,36360,36365,
	36400,36405,36420,36423,36440,36449,36460,36465,
	36500,36500,36520,36523,36540,36548,36560,36565,
	36700,36705,36720,36727,36740,36749,36760,36765,
	36800,36819,36820,36839,36840,36859,36860,36879,
	40100,40119,40120,40139,40140,40159,40160,40179,
	44100,44102,44120,44100,44140,44100,44160,44100,
	44500,44507,44520,44528,44540,44549,44560,44566,
	44900,44909,44920,44939,44940,44959,44960,44979,
	41300,41319,41320,41339,41340,41359,41360,41379,
	42100,42117,42120,42133,42140,42159,42160,42177,
	40900,40912,40920,40929,40940,40959,40960,40979,
	
	10000,10000,10020,10038,10040,10058,10060,10060,
	10100,10100,10120,10139,10140,10159,10160,10160,
	41700,41719,41720,41739,41740,41759,41760,41779,
	18100,18107,18120,18127,18140,18154,18160,18177,
	14000,14009,14020,14029,14040,14049,14060,14069,
	50100,50100,50120,50120,50140,50140,50160,50160,
	60000,60000,60020,60020,60040,60041,60060,60060,
	61900,61905,61920,61911,61940,61921,61960,61900,
	62100,62105,62120,62111,62140,62121,62160,62100,
	61000,61005,61020,61011,61040,61021,61060,61000,
	61800,61805,61820,61811,61840,61821,61860,61800,
	62000,62005,62020,62011,62040,62021,62060,62000,
	62200,62205,62220,62211,62240,62221,62260,62200,
	65000,65005,65020,65011,65040,65021,65060,65000,
	65200,65205,65220,65211,65240,65221,65260,65200,
	61700,61705,61720,61711,61740,61721,61760,61700,
	68300,68300,68320,68300,68340,68300,68360,68300,
	61100,61105,61120,61111,61140,61121,61160,61100,
	61200,61205,61220,61211,61240,61224,61260,61200,
	61300,61305,61320,61311,61340,61321,61360,61300,
	
	61400,61405,61420,61411,61440,61421,61460,61400,
	61500,61505,61520,61511,61540,61521,61560,61500,
	63000,63005,63020,63011,63040,63022,63060,63000,
	63100,63105,63120,63111,63140,63121,63160,63100,
	63200,63205,63220,63211,63240,63221,63260,63200,
	63300,63305,63320,63311,63340,63321,63360,63300,
	63400,63405,63420,63411,63440,63421,63460,63400,
	63500,63505,63520,63511,63540,63521,63560,63500,
	63600,63605,63620,63611,63640,63621,63660,63600,
	63700,63705,63720,63711,63740,63721,63760,63700,
	63800,63805,63820,63811,63840,63821,63860,63800,
	63900,63905,63920,63911,63940,63921,63960,63900,
	64000,64005,64020,64011,64040,64021,64060,64000,
	64100,64105,64120,64111,64140,64121,64160,64100,
	64200,64205,64220,64211,64240,64221,64260,64200,
	64300,64305,64320,64311,64340,64321,64360,64300,
	64400,64405,64420,64411,64440,64421,64460,64400,
	64500,64505,64520,64511,64540,64521,64560,64500,
	64600,64605,64620,64611,64640,64621,64660,64600,
	64700,64705,64720,64711,64740,64721,64760,64700,
	
	64800,64805,64820,64811,64840,64821,64860,64800,
	64900,64905,64920,64911,64940,64921,64960,64900,
	65100,65105,65120,65111,65140,65121,65160,65100,
	68700,68705,68720,68711,68740,68721,68760,68700,
	65300,65305,65320,65311,65340,65321,65360,65300,
	65400,65405,65420,65411,65440,65421,65460,65400,
	65500,65505,65520,65511,65540,65521,65560,65500,
	65600,65605,65620,65611,65640,65621,65660,65600,
	65700,65705,65720,65711,65740,65721,65760,65700,
	65800,65805,65820,65811,65840,65821,65860,65800,
	65900,65905,65920,65911,65940,65921,65960,65900,
	66000,66005,66020,66011,66040,66021,66060,66000,
	66100,66105,66120,66111,66140,66121,66160,66100,
	66200,66205,66220,66211,66240,66221,66260,66200,
	66300,66305,66320,66311,66340,66321,66360,66300,
	66400,66405,66420,66411,66440,66421,66460,66400,
	66500,66505,66520,66511,66540,66521,66560,66500,
	66600,66605,66620,66611,66640,66621,66660,66600,
	66700,66705,66720,66711,66740,66721,66760,66700,
	66800,66805,66820,66811,66840,66821,66860,66800,
	
	66900,66905,66920,66911,66940,66921,66960,66900,
	67000,67005,67020,67011,67040,67021,67060,67000,
	62300,62305,62320,62311,62340,62321,62360,62300,
	62400,62405,62420,62411,62440,62421,62460,62400,
	68000,68005,68020,68011,68040,68021,68060,68000,
	62600,62605,62620,62611,62640,62621,62660,62600,
	62700,62705,62720,62711,62740,62721,62760,62700,
	68100,68105,68120,68111,68140,68121,68160,68100,
	68200,68205,68220,68211,68240,68221,68260,68200,
	61600,61605,61620,61611,61640,61621,61660,61600,
	62500,62505,62520,62511,62540,62521,62560,62500,
	62800,62805,62820,62811,62840,62821,62860,62800,
	62900,62905,62920,62911,62940,62921,62960,62900,
	67100,67105,67120,67111,67140,67121,67160,67100,
	67200,67205,67220,67211,67240,67221,67260,67200,
	67300,67305,67320,67311,67340,67321,67360,67300,
	67400,67405,67420,67411,67440,67421,67460,67400,
	67500,67505,67520,67511,67540,67521,67560,67500,
	67600,67605,67620,67611,67640,67621,67660,67600,
	67700,67705,67720,67711,67740,67721,67760,67700,
	
	67800,67805,67820,67811,67840,67821,67860,67800,
	67900,67905,67920,67911,67940,67921,67960,67900,
	68400,68402,68420,68405,68440,68408,68460,68400,
	68500,68500,68520,68502,68540,68505,68560,68500,
	68600,68605,68620,68611,68640,68621,68660,68600
};

const uint[]AIBodyMsg_=
{
	
	1000,1009,1010,1019,1020,1029,1030,1059,1060,1069,1070,1079,1080,1089,1090,1099,
	1100,1109,1110,1119,1120,1129,1130,1159,1160,1169,1170,1179,1180,1189,1190,1199,
	1200,1209,1210,1219,1220,1229,1230,1259,1260,1269,1270,1279,1280,1289,1290,1299,
	0,0,10,0,20,0,30,0,60,0,70,0,80,0,90,0,
	1300,1309,1310,1319,1320,1329,1330,1359,1360,1369,1370,1379,1380,1389,1390,1399,
	0,0,10,0,20,0,30,0,60,0,70,0,80,0,90,0,
	1400,1402,1410,1412,1420,1422,1430,1439,1460,1462,1470,1472,1480,1482,1490,1492,
	1500,1509,1510,1519,1520,1529,1530,1559,1560,1569,1570,1579,1580,1589,1590,1599,
	1600,1609,1610,1619,1620,1629,1630,1639,1660,1669,1670,1679,1680,1689,1690,1699,
	1700,1709,1710,1712,1720,1722,1730,1735,1760,1763,1770,1773,1780,1783,1790,1796,
	1800,1804,1810,1813,1820,1823,1830,1837,1860,1862,1870,1872,1880,1882,1890,1898,
	12300,12303,12310,12312,12320,12322,12330,12335,12360,12363,12370,12373,12380,12382,12390,12396,
	32000,32002,32010,32012,32020,32022,32030,32036,32060,32062,32070,32072,32080,32082,32090,32095,
	32700,32702,32710,32712,32720,32722,32730,32736,32760,32762,32770,32772,32780,32782,32790,32795,
	33200,33202,33210,33212,33220,33222,33230,33236,33260,33262,33270,33272,33280,33282,33290,33295,
	36000,36002,36010,36012,36020,36022,36030,36035,36060,36062,36070,36072,36080,36082,36090,36095,
	36600,36602,36610,36612,36620,36622,36630,36645,36660,36662,36670,36672,36680,36682,36690,36695,
	40000,40009,40010,40019,40020,40029,40030,40059,40060,40069,40070,40079,40080,40089,40090,40099,
	44000,44000,44010,44010,44020,44020,44030,44030,44060,44060,44070,44070,44080,44080,44090,44090,
	44400,44408,44410,44413,44420,44423,44430,44439,44460,44463,44470,44473,44480,44483,44490,44492,
	
	44800,44804,44810,44814,44820,44824,44830,44849,44860,44864,44870,44874,44880,44884,44890,44894,
	41200,41209,41210,41219,41220,41229,41230,41259,41260,41269,41270,41279,41280,41289,41290,41299,
	12400,12409,12410,12419,12420,12429,12430,12459,12460,12469,12470,12479,12480,12489,12490,12499,
	42000,42009,42010,42017,42020,42027,42030,42058,42060,42068,42070,42078,42080,42089,42090,42099,
	40800,40807,40810,40818,40820,40828,40830,40859,40860,40867,40870,40877,40880,40886,40890,40899,
	41600,41609,41610,41619,41620,41629,41630,41659,41660,41669,41670,41679,41680,41689,41690,41699,
	18000,18002,18010,18011,18020,18021,18030,18035,18060,18061,18070,18071,18080,18082,18090,18092,
	50000,50000,50010,50010,50020,50020,50030,50030,50060,50060,50070,50070,50080,50080,50090,50090,
	61928,61930,61938,61933,61948,61936,61958,61943,61988,61946,61998,61949,62008,61952,62018,61957,
	62128,62130,62138,62133,62148,62136,62158,62136,62188,62139,62198,62142,62208,62145,62218,62150,
	61028,61030,61038,61033,61048,61036,61058,61040,61088,61043,61098,61046,61108,61049,61118,61054,
	61828,61830,61838,61833,61848,61836,61858,61843,61888,61846,61898,61849,61908,61852,61918,61857,
	62028,62030,62038,62033,62048,62036,62058,62043,62088,62046,62098,62049,62108,62052,62118,62057,
	62228,62230,62238,62233,62248,62236,62258,62243,62288,62246,62298,62249,62308,62252,62318,62257,
	65028,65030,65038,65033,65048,65036,65058,65046,65088,65049,65098,65052,65108,65055,65118,65060,
	65228,65230,65238,65233,65248,65236,65258,65246,65288,65249,65298,65252,65308,65255,65318,65260,
	61728,61730,61738,61733,61748,61736,61758,61736,61788,61739,61798,61742,61808,61745,61818,61750,
	68302,68301,68312,68301,68322,68301,68332,68302,68362,68302,68372,68302,68382,68302,68392,68302,
	61128,61130,61138,61133,61148,61136,61158,61140,61188,61143,61198,61146,61208,61149,61218,61154,
	61231,61233,61241,61236,61251,61239,61261,61242,61291,61245,61301,61248,61311,61251,61321,61256,
	
	61328,61330,61338,61333,61348,61337,61358,61343,61388,61346,61398,61349,61408,61352,61418,61357,
	61428,61430,61438,61433,61448,61436,61458,61442,61488,61445,61498,61448,61508,61451,61518,61456,
	61528,61530,61538,61533,61548,61536,61558,61543,61588,61546,61598,61549,61608,61552,61618,61557,
	63028,63030,63038,63033,63048,63036,63058,63046,63088,63049,63098,63052,63108,63055,63118,63060,
	63128,63130,63138,63133,63148,63136,63158,63146,63188,63149,63198,63152,63208,63155,63218,63160,
	63228,63230,63238,63233,63248,63236,63258,63246,63288,63249,63298,63252,63308,63255,63318,63260,
	63328,63330,63338,63333,63348,63336,63358,63346,63388,63349,63398,63352,63408,63355,63418,63360,
	63428,63430,63438,63433,63448,63436,63458,63446,63488,63449,63498,63452,63508,63455,63518,63460,
	63528,63530,63538,63533,63548,63536,63558,63546,63588,63549,63598,63552,63608,63555,63618,63560,
	63628,63630,63638,63633,63648,63636,63658,63646,63688,63649,63698,63652,63708,63655,63718,63660,
	63728,63730,63738,63733,63748,63736,63758,63746,63788,63749,63798,63752,63808,63755,63818,63760,
	63828,63830,63838,63833,63848,63836,63858,63836,63888,63839,63898,63842,63908,63845,63918,63850,
	63928,63930,63938,63933,63948,63936,63958,63946,63988,63949,63998,63952,64008,63955,64018,63960,
	64028,64030,64038,64033,64048,64036,64058,64046,64088,64049,64098,64052,64108,64055,64118,64060,
	64128,64130,64138,64133,64148,64136,64158,64146,64188,64149,64198,64152,64208,64155,64218,64160,
	64228,64230,64238,64233,64248,64236,64258,64246,64288,64249,64298,64252,64308,64255,64318,64260,
	64328,64330,64338,64333,64348,64336,64358,64346,64388,64349,64398,64352,64408,64355,64418,64360,
	64428,64430,64438,64433,64448,64436,64458,64446,64488,64449,64498,64452,64508,64455,64518,64460,
	64528,64530,64538,64533,64548,64536,64558,64546,64588,64549,64598,64552,64608,64555,64618,64560,
	64628,64630,64638,64633,64648,64636,64658,64646,64688,64649,64698,64652,64708,64655,64718,64660,
	
	64728,64730,64738,64733,64748,64736,64758,64746,64788,64749,64798,64752,64808,64755,64818,64760,
	64828,64830,64838,64833,64848,64836,64858,64846,64888,64849,64898,64852,64908,64855,64918,64860,
	64928,64930,64938,64933,64948,64936,64958,64946,64988,64949,64998,64952,65008,64955,65018,64960,
	65128,65130,65138,65133,65148,65136,65158,65146,65188,65149,65198,65152,65208,65155,65218,65160,
	68728,68730,68738,68733,68748,68736,68758,68746,68788,68749,68798,68752,68808,68755,68818,68760,
	65328,65330,65338,65333,65348,65336,65358,65346,65388,65349,65398,65352,65408,65355,65418,65360,
	65428,65430,65438,65433,65448,65436,65458,65446,65488,65449,65498,65452,65508,65455,65518,65460,
	65528,65530,65538,65533,65548,65536,65558,65546,65588,65549,65598,65552,65608,65555,65618,65560,
	65628,65630,65638,65633,65648,65636,65658,65646,65688,65649,65698,65652,65708,65655,65718,65660,
	65728,65730,65738,65733,65748,65736,65758,65746,65788,65749,65798,65752,65808,65755,65818,65760,
	65828,65830,65838,65833,65848,65836,65858,65846,65888,65849,65898,65852,65908,65855,65918,65860,
	65928,65930,65938,65933,65948,65936,65958,65946,65988,65949,65998,65952,66008,65955,66018,65960,
	66028,66030,66038,66033,66048,66036,66058,66046,66088,66049,66098,66052,66108,66055,66118,66060,
	66128,66130,66138,66133,66148,66136,66158,66146,66188,66149,66198,66152,66208,66155,66218,66160,
	66228,66230,66238,66233,66248,66236,66258,66246,66288,66249,66298,66252,66308,66255,66318,66260,
	66328,66330,66338,66333,66348,66336,66358,66346,66388,66349,66398,66352,66408,66355,66418,66360,
	66428,66430,66438,66433,66448,66436,66458,66446,66488,66449,66498,66452,66508,66455,66518,66460,
	66528,66530,66538,66533,66548,66536,66558,66546,66588,66549,66598,66552,66608,66555,66618,66560,
	66628,66630,66638,66633,66648,66636,66658,66646,66688,66649,66698,66652,66708,66655,66718,66660,
	66728,66730,66738,66733,66748,66736,66758,66746,66788,66749,66798,66752,66808,66755,66818,66760,
	
	66828,66830,66838,66833,66848,66836,66858,66846,66888,66849,66898,66852,66908,66855,66918,66860,
	66928,66930,66938,66933,66948,66936,66958,66946,66988,66949,66998,66952,67008,66955,67018,66960,
	67028,67030,67038,67033,67048,67036,67058,67046,67088,67049,67098,67052,67108,67055,67118,67060,
	62328,62330,62338,62333,62348,62336,62358,62342,62388,62345,62398,62348,62408,62351,62418,62356,
	62428,62430,62438,62433,62448,62436,62458,62441,62488,62444,62498,62447,62508,62450,62518,62455,
	68028,68030,68038,68033,68048,68036,68058,68046,68088,68049,68098,68052,68108,68055,68118,68060,
	62628,62630,62638,62633,62648,62636,62658,62636,62688,62639,62698,62642,62708,62645,62718,62650,
	62728,62730,62738,62730,62748,62730,62758,62735,62788,62735,62798,62735,62808,62735,62818,62737,
	68128,68130,68138,68133,68148,68136,68158,68146,68188,68149,68198,68152,68208,68155,68218,68157,
	68228,68230,68238,68233,68248,68236,68258,68246,68288,68249,68298,68252,68308,68255,68318,68260,
	61628,61630,61638,61633,61648,61636,61658,61644,61688,61647,61698,61650,61708,61653,61718,61658,
	62528,62530,62538,62533,62548,62536,62558,62542,62588,62545,62598,62548,62608,62551,62618,62556,
	62828,62830,62838,62833,62848,62836,62858,62844,62888,62847,62898,62850,62908,62853,62918,62858,
	62928,62930,62938,62933,62948,62936,62958,62946,62988,62949,62998,62952,63008,62955,63018,62960,
	67128,67130,67138,67133,67148,67136,67158,67146,67188,67149,67198,67152,67208,67155,67218,67160,
	67228,67230,67238,67233,67248,67236,67258,67246,67288,67249,67298,67252,67308,67255,67318,67260,
	67328,67330,67338,67333,67348,67336,67358,67346,67388,67349,67398,67352,67408,67355,67418,67360,
	67428,67430,67438,67433,67448,67436,67458,67446,67488,67449,67498,67452,67508,67455,67518,67460,
	67528,67530,67538,67533,67548,67536,67558,67546,67588,67549,67598,67552,67608,67555,67618,67560,
	67628,67630,67638,67633,67648,67636,67658,67646,67688,67649,67698,67652,67708,67655,67718,67660,
	
	67728,67730,67738,67733,67748,67736,67758,67746,67788,67749,67798,67752,67808,67755,67818,67760,
	67828,67830,67838,67833,67848,67836,67858,67846,67888,67849,67898,67852,67908,67855,67918,67860,
	67928,67930,67938,67933,67948,67936,67958,67946,67988,67949,67998,67952,68008,67955,68018,67960,
	68411,68412,68421,68414,68431,68416,68441,68420,68471,68422,68481,68424,68491,68426,68501,68426,
	68508,68511,68518,68513,68528,68515,68538,68518,68568,68520,68578,68522,68588,68524,68598,68526,
	68628,68630,68638,68633,68648,68636,68658,68646,68688,68649,68698,68652,68708,68655,68718,68660
};                                                                                                                                                                                                                                                                                                                                                                                                                     

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                                                                

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}

import uint GetRealItemsWeight(Critter&critter)from"mutual";                 

import Item@BloodCreate(Critter&creature,int bloodSize)from"blood";
import Item@BloodCreateByDamage(Critter&creature,int damage,int dmgType)from"blood

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";          

import void InitEconomy()from"economy";
import void SendLevelThresholds(Critter&)from"economy"; 

import bool BankAccountExists(uint bankid,uint account)from"economy";
import bool BankAccountRemoveMoney(uint bankid,uint account,uint amount)from"economy";
import bool BankHasAccess(uint bankid,uint account,uint playerid)from"economy";
import int BankGetAccountBalance(uint bankid,uint account)from"economy";
import int BankGetAccountID(uint bankid,uint playerid)from"economy";
import uint BankAddAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankCreateAccount(uint bankid,uint playerid)from"economy";
import uint BankDepositMoney(uint bankid,uint playerid,uint account,int amount)from"economy";
import uint BankGetAccessCount(uint bankid,uint account)from"economy";
import uint BankGetAccountOwner(uint bankid,uint account)from"economy";
import uint BankGetAccountType(uint bankid,uint account)from"economy";
import uint BankGetCreditRating(uint bankid,uint account)from"economy";
import uint BankGetLoan(uint bankid,uint account)from"economy";
import uint BankRemoveAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankSetAccountType(uint bankid,uint account,uint accounttype)from"economy";
import uint BankSetCreditRating(uint bankid,uint account,uint rating)from"economy";
import uint BankSetLoan(uint bankid,uint account,uint loan)from"economy";
import uint BankTakeLoan(uint bankid,uint account,uint amount)from"economy";
import uint BankTransferMoney(uint bankid,uint fromaccount,uint toaccount,uint amount)from"economy";
import uint BankWithdrawMoney(uint bankid,uint playerid,uint account,int amount)from"economy"; 

import bool BanksTransferFromCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import bool BanksTransferToCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import uint BanksGetTotalMoney()from"economy";
import void BanksAddMoney(uint amount)from"economy";
import void BanksRemoveMoney(uint amount)from"economy"; 

import bool BankAddMoney(uint bankid,uint amount)from"economy";
import bool BankRemoveMoney(uint bankid,uint amount)from"economy";
import bool BankSetMoney(uint bankid,uint amount)from"economy";
import uint BankGetLoanInterest(uint bankid)from"economy";
import uint BankGetNumberOfAccounts(uint bankid)from"economy";
import float BankGetSaveInterest(uint bankid)from"economy";
import uint BankGetTotalMoney(uint bankid)from"economy";
import uint BankGetTotalBalance(uint bankid)from"economy";
import float BankGetReserveRatio(uint bankid)from"economy";
import uint BankSetLoanInterest(uint bankid,uint interest)from"economy";
import uint BankSetSaveInterest(uint bankid,float interest)from"economy";
import bool BankTransferFromCritter(uint bankId,Critter&critter,uint amount,uint type,bool virtual)from"economy";

import void SaveBankData()from"economy";   

import int GetItemSellModifier(Critter&player,Critter&trader)from"economy";
import int GetItemBuyModifier(Critter&player,Critter&trader)from"economy";
import uint GetItemCost(Item&item,Critter&cr,Critter&trader,bool sell)from"economy";
import uint GetItemCostPlain(Item&item,Critter&cr,Critter&trader)from"economy";

import array<int>GetTraderLevels(Critter@npc)from"economy";
import uint GetTraderLevel(Critter@npc,uint type)from"economy";

import uint ItemLevel(Item&item)from"economy";
import uint ItemLevel(uint pid)from"economy";
import uint TraderCapacity(Critter@npc)from"economy";
import uint TraderCapacity(Critter@npc,uint type,uint level)from"economy";
import uint TraderMoneyCapacity(Critter@npc)from"economy";
import uint TradingItemType(Item&item)from"economy";
import uint TradingItemType(uint pid)from"economy";                                                                                                          

const string@FD_Bank_Result2String(uint res)
{
	if(res==(1))
	return"FD_BANK_RESULT_SUCCESS";
	else if(res==(2))
	return"FD_BANK_RESULT_UNKNOWN";
	else if(res==(3))
	return"FD_BANK_RESULT_TOO_MANY_ACCOUNTS";
	else if(res==(4))
	return"FD_BANK_RESULT_ALREADY_HAS_ACCOUNT";
	else if(res==(5))
	return"FD_BANK_RESULT_NOT_ENOUGH_MONEY";
	else if(res==(6))
	return"FD_BANK_RESULT_BANK_FULL";
	else if(res==(7))
	return"FD_BANK_RESULT_BANK_EMPTY";
	else if(res==(8))
	return"FD_BANK_RESULT_DATA_ERROR";
	else if(res==(9))
	return"FD_BANK_RESULT_INVALID_PLAYER";
	else if(res==(10))
	return"FD_BANK_RESULT_NO_ACCOUNT";
	else
	return"FD_Result: Unknown error code";
}

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}      

import bool IsBigFaction(uint faction)from"factions";
import bool IsTheSameFaction(uint player1Id,uint player2Id)from"factions";
import void _Resign(uint playerId)from"factions"; 

import int RegisterFaction(uint id,const string@name,bool playerDriven)from"factions";
import int RegisterFaction(const string@name,bool playerDriven,uint&out id)from"factions";

import bool RemoveFaction(uint faction)from"factions"; 

import bool GetFactionNameStr(uint faction,string&out name)from"factions";
import bool GetFactionId(const string@name,uint&out id)from"factions"; 

import bool IsFactionNameFree(const string&)from"factions";
import bool IsFactionNameValid(const string&)from"factions";

import bool IsGang(uint faction)from"factions";

import uint16 GetFactionRadioChannel(uint faction)from"factions";
import void SetFactionRadioChannel(uint faction,uint16 channel)from"factions"; 

import int AddPlayer(uint faction,uint id)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)from"factions"; 

import int RemovePlayer(uint faction,uint id)from"factions"; 

import int GetFaction(uint faction,uint id)from"factions";
import int GetStatus(uint faction,uint id)from"factions";
import int GetRank(uint faction,uint id)from"factions";
import bool IsMember(uint faction,Critter&cr)from"factions";
import bool IsMemberOffline(uint faction,uint id)from"factions";
import bool StoredInDB(uint faction,uint id)from"factions";
import uint GetRecordsCount(uint faction)from"factions";
import uint GetMembersCount(uint faction)from"factions";
import uint GetMembers(uint faction,array<uint>&ids)from"factions";
import uint GetLeaderId(uint faction)from"factions";
import void SetLeaderId(uint faction,uint id)from"factions";
import uint GetClaimId(uint faction)from"factions";
import void SetClaimId(uint faction,uint id)from"factions";
import uint GetLeaderTime(uint faction)from"factions";
import void SetLeaderTime(uint faction,uint time)from"factions";
import uint GetClaimTime(uint faction)from"factions";
import void SetClaimTime(uint faction,uint time)from"factions";
import uint GetFactionLocationId(uint faction)from"factions";
import bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)from"factions";

import void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)from"factions";

import uint GetFactionScore(uint faction)from"factions";
import void ModifyFactionScore(uint faction,int amount)from"factions";
import void UpdateLastUsed(uint faction)from"factions";
import uint GetFactionsCount()from"factions"; 

import int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)from"factions";
import int GetNextId(uint faction,uint currId,bool members,uint&out nextId)from"factions";
import int GetFirstId(uint faction,bool members,uint&out id)from"factions"; 

import int ModifyRank(uint faction,uint id,uint newRank)from"factions";
import int ModifyStatus(uint faction,uint id,uint newStatus)from"factions";
import int ModifyFaction(uint faction,uint id,uint newFaction)from"factions"; 

import int InvitePlayer(uint faction,uint playerId)from"factions";
import int ConfirmInvitation(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId,bool applyModifiers)from"factions";
import int ChangeRank(uint faction,uint playerId,uint newRank)from"factions";
import int ExpelMember(uint faction,uint playerId)from"factions";
import int ExpelMember(uint faction,uint playerId,bool applyModifiers)from"factions";

import uint GetPlayerFaction(uint playerId)from"factions";
import uint GetPlayerRank(uint playerId)from"factions"; 

import void AddFactionNews(uint faction,uint master,uint slave,uint type)from"factions";
import bool GetFactionNews(uint faction,uint index,uint&out master,uint&out slave,uint&out type,uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)from"factions";
import uint GetFactionNewsCount(uint faction)from"factions"; 

import uint CheckFactionBaseCoords(uint x,uint y)from"factions";

import bool SaveFactionData(uint faction)from"factions";
import bool FactionExists(uint faction)from"factions"; 

import uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)from"factions";   

import void InitFactions()from"factions";
import void UpdateFactionsInfo(Critter&cr)from"factions";
import IFaction@GetFaction(int)from"factions";
import IFaction@GetFaction(const string&)from"factions";
import IFaction@GetFactionByIdx(int idx)from"factions";
import void UpdateGroupVars(Critter&player)from"factions";     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);
	void settag(int index,int tag,int r,int g,int b);
	int get_tag(int index);
	int get_b(int index);
	int get_r(int index);
	int get_g(int index);  
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
};  

shared interface IFactionBase
{
	
	uint get_Id()const;
	
	uint get_FactionId()const;
	
	const string&get_Name()const;
	
	uint get_LocationId()const; 
	
	void Show(Critter&cr)const;
	
	void Hide(Critter&cr)const; 
	
	bool IsRankAllowed(int rank)const;
	
	void AllowRank(int rank,bool allow);
	
	bool IsStatusAllowed(int status)const;
	
	void AllowStatus(int status,bool allow); 
	
	void Remove();
};  

import IFactionBase@GetFactionBase(uint faction_id,const string&faction_name)from"factions_bases";
import IFactionBase@GetFactionBase(uint id)from"factions_bases";
import IFactionBase@GetFactionBaseByLocId(uint id)from"factions_bases";
import uint GetFactionBases(uint faction_id,array<IFactionBase@>@)from"factions_bases";
import bool AddFactionBase(IFactionBase&)from"factions_bases";
import void AddFactionBase(uint)from"factions_bases";
import IFactionBase@CreateFactionBase(uint faction_id,const string&name,uint location_id)from"factions_bases";
import void RemoveFactionBase(uint,const string&)from"factions_bases";
import void RemoveFactionBase(IFactionBase&)from"factions_bases";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                                                                                                                                                                                                                                                        

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                  

import string GetRandomFirstName(uint gender)from"npc_names";
import string GetRandomFirstName(uint gender,int&index)from"npc_names";

import string GetRandomNick(uint gender)from"npc_names";

import string GetRandomSurname()from"npc_names";

import string GetRandomFullName(uint gender)from"npc_names";
import string GetRandomFullName(uint gender,int&firstName,bool&genderNick,int&nick,int&surname)from"npc_names"; 

import string GetFirstName(uint gender,uint index)from"npc_names";
import string GetNick(uint gender,uint index,bool genderNick)from"npc_names";
import string GetSurname(uint index)from"npc_names";  

import void LogNames(bool printNames)from"npc_names

shared class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(!IsAnyData(name))
		return false;
		if(!GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const bool&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const string&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const float&value)
	{
		int dummy=FloatToInt(value);
		return Set(dummy);
	}
	
	Serializator@opShl(const float&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const array<int64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<bool>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<bool>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<string>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<string>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<float>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(FloatToInt(values[i]));
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<float>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Critter&cr)
	{
		return Set(cr);
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Item&item)
	{
		return Set(item);
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@opShr(bool&value)
	{
		return Get(value);
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@opShr(string&str)
	{
		return Get(str);
	}
	
	Serializator@Get(float&value)
	{
		int dummy=0;
		Get(dummy);
		value=IntToFloat(dummy);
		return this;
	}
	
	Serializator@opShr(float&value)
	{
		return Get(value);
	}
	
	Serializator@Get(array<int64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<float>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		{
			int dummy=0;
			Get(dummy);
			values[i]=IntToFloat(dummy);
		}
		return this;
	}
	
	Serializator@opShr(array<float>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<bool>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<bool>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<string>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<string>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@opShr(Critter@&cr)
	{
		return Get(cr);
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	Serializator@opShr(Item@&item)
	{
		return Get(item);
	}
	
	array<uint8>Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};   

import bool AddToFollowerlist(Critter&master,Critter&follower)from"follower_common";  

uint e_DisableBagRefresh(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))
	{
		cr.SetBagRefreshTime((uint(-1)));
		{;};
	}
	return 0;
}

void NerfWeaponSkills(Critter&cr,uint primary,uint secondary)
{
	for(uint i=(200);i<=(205);i++)
	{
		if(i!=primary&&i!=secondary)
		{
			if(i==(201))
			cr.ParamBase[i]=-80;
			else
			cr.ParamBase[i]=-30;
		}
	}
}

shared interface IMerc
{
	IMerc@Dialog(int dialogid);
	IMerc@Script(string&script);
	IMerc@AI(int aipack);
	IMerc@Bag(int bagid);
	IMerc@Team(int teamid);
	IMerc@Level(int level);
	IMerc@PID(int pid);
	IMerc@PID(array<int>npcpids);
	IMerc@Type(int type);
	IMerc@ID(int id);
	IMerc@Cost(int cost);
	IMerc@StartCost(int cost);
	IMerc@SellPrice(int price);
	IMerc@DynamicPrice();
	
	bool IsDynamicPrice();
	int GetDialog();
	string@GetScript();
	int GetAIPack();
	int GetBagID();
	int GetBagValue();
	int GetTeamID();
	int GetLevel();
	int GetLastPID();
	array<int>GetPIDs();
	uint GetType();
	int8 GetBaseType();
	int GetCost();
	int GetSellPrice();
	uint GetID();
	string@GetName();
	
	bool Spawn(Critter&master);
}; 

class CMerc:IMerc
{
	bool dynamicprice;
	int dir;
	int dialogid;
	string script;
	int aipack;
	int8 basetype;
	int bagid;
	int teamid;
	int level;
	int respawnTime;
	array<int>npcpids;
	int npcpid;
	int cost;
	int bagvalue;
	int startcost;
	uint type;
	int sellprice;
	uint id;
	string name;
	
	Serializator serializer;
	
	CMerc()
	{
		dir=Random(0,6);
		dialogid=(9310);
		script="follower@critter_init";
		basetype=-1;
		aipack=0;
		bagid=0;
		teamid=0;
		level=1;
		respawnTime=(-2);
		cost=0;
		sellprice=0;
		id=0;
		type=0;
		dynamicprice=false;
	}
	
	bool Spawn(Critter&master)
	{
		npcpid=(npcpids[Random(0,npcpids.length()-1)]);
		
		Critter@SpawnedNpc=AddNpc(master.GetMap(),npcpid,master.HexX,master.HexY,dir,dialogid,script,aipack,bagid,teamid,false,level);
		if((@SpawnedNpc!=null))
		{
			SpawnedNpc.FollowerVarBase[(929)]=(master.Param[(106)]);
			SpawnedNpc.FollowerVarBase[(932)]=type;
			SpawnedNpc.FollowerVarBase[(930)]=id;
			basetype=SpawnedNpc.CrType;
			SpawnedNpc.FollowerVarBase[(933)]=master.Id;
			SpawnedNpc.ParamBase[(84)]=respawnTime;
			
			if(type==(3)||type==(4)||type==(2))
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			switch(type)
			{
				case(6):
				case(12):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(7):
				case(13):
				NerfWeaponSkills(SpawnedNpc,(200),0);
				break;
				case(8):
				case(11):
				NerfWeaponSkills(SpawnedNpc,(201),0);
				break;
				case(5):
				case(10):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(9):
				NerfWeaponSkills(SpawnedNpc,(202),0);
				break;
				default:
				break;
			}
			
			SpawnedNpc.ChangeCrType(SpawnedNpc.ParamBase[(112)]);
			
			CreateTimeEvent(((__FullSecond)+(((3)*60))),"e_DisableBagRefresh",SpawnedNpc.Id,true);
			ArmBestWeapon(SpawnedNpc);
			
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(306)]+=1;
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(315)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(405)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(309)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(313)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(330)]+=1;
			
			for(uint i=0;i<=6;i++)SpawnedNpc.ParamBase[i]+=Random(-1,1);   
			
			SpawnedNpc.ParamBase[(7)]+=(Random(0,20));
			SpawnedNpc.ParamBase[(7)]-=10;
			
			SpawnedNpc.ParamBase[(72)]=SpawnedNpc.Param[(7)];
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			if(!AddToFollowerlist(master,SpawnedNpc))
			Log("Failed to assign merc's id to master("+master.Id+") followerlist");
			
			this.name=GenerateNewName(SpawnedNpc);
			
			if(this.name.length()>0)
			SetLexem(SpawnedNpc,"$name",this.name);
			
			return true;
		}
		else
		{
			Log("Failed to create mercenary of PID "+npcpid+" with mercid "+id+" on map id "+master.GetMapId());
			master.Say((11),"Failed to create mercenary, report this error immediately");
		} 
		
		return false;
	}
	
	IMerc@Dialog(int dialogid)
	{
		this.dialogid=dialogid;
		return this;
	}
	
	IMerc@Script(string&script)
	{
		this.script=script;
		return this;
	}
	
	IMerc@AI(int aipack)
	{
		this.aipack=aipack;
		return this;
	}
	
	IMerc@Bag(int bagid)
	{
		this.bagid=bagid;
		
		bagvalue=0;
		array<uint>mincounts,maxcounts;
		array<int>slots;
		array<uint16>pids;
		uint num=GetBagItems(bagid,pids,mincounts,maxcounts,slots);
		uint cost=0;
		for(uint i=0;i<num;i++)
		{
			bagvalue+=BaseItemValue(pids[i],7,80,true)*(mincounts[i]+maxcounts[i])/2;
		}
		
		return this;
	}
	
	IMerc@Team(int teamid)
	{
		this.teamid=teamid;
		return this;
	}
	
	IMerc@Level(int level)
	{
		this.level=level;
		return this;
	}
	
	IMerc@PID(int npcpid)
	{
		this.npcpids.insertLast(npcpid);
		return this;
	}
	
	IMerc@PID(array<int>npcpids)
	{
		for(uint i=0;i<npcpids.length();i++)
		{
			this.npcpids.insertLast(npcpids[i]);
		}
		return this;
	}
	
	IMerc@Type(int type)
	{
		this.type=type;
		return this;
	}
	
	IMerc@ID(int id)
	{
		this.id=id;
		return this;
	}
	
	IMerc@DynamicPrice()
	{
		dynamicprice=true;
		return this;
	}
	
	bool IsDynamicPrice()
	{
		return dynamicprice;
	}
	
	IMerc@StartCost(int cost)
	{
		serializer.Clear();
		if(!serializer.Load("merc_"+id)||GetGvar((12000))==0)
		{
			this.cost=cost;
			serializer.Clear();
			serializer.Set(this.cost).Save("merc_"+id);
		}
		else
		serializer.Get(this.cost);
		
		return this;
	}
	
	IMerc@Cost(int cost)
	{
		{;};
		this.cost=cost;
		
		serializer.Clear();
		serializer.Set(this.cost).Save("merc_"+id);
		
		return this;
	}
	
	IMerc@SellPrice(int sellprice)
	{
		this.sellprice=sellprice;
		return this;
	}
	
	int GetDialog(){return dialogid;}
	string@GetScript(){return script;}
	int8 GetBaseType(){return basetype;}
	int GetAIPack(){return aipack;}
	int GetBagID(){return bagid;}
	int GetTeamID(){return teamid;}
	int GetLevel(){return level;}
	int GetLastPID(){return npcpid;}
	array<int>GetPIDs(){return npcpids;}
	int GetCost(){return cost;}
	int GetBagValue(){return bagvalue;}
	int GetSellPrice(){return sellprice;}
	uint GetID(){return id;}
	uint GetType(){return type;}
	string@GetName(){return name;}
}; 

import bool IsFollowing(Critter&critter)from"follower_common";
import bool IsOwnersFollower(Critter&owner,Critter&critter)from"follower_common";
import bool CanHaveMoreFollowers(Critter&player,uint FollowerType)from"follower_common";
import Critter@GetFollowersOwner(Critter&critter)from"follower_common";
import bool RightDistance(Critter&follower,Critter&owner)from"follower_common";
import bool HasFollowerOfBaseType(Critter&owner,uint basetype)from"follower_common";
import Critter@GetFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import bool RemoveFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import int GetNumberOfFollowingFollowersOfPlayer(Critter&player)from"follower_common";
import int GetNumberOfFollowersOfPlayer(Critter&player)from"follower_common";
import uint GetSlaveTypes(Critter&player)from"follower_common";
import void ClearFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import void AddFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import uint NumberOfFollowersOnMap(Map@map)from"follower_common";
import uint GetFollowerType(Critter&critter)from"follower_common";
import bool DisbandFollower(Critter&player,Critter&cr,bool reset)from"follower_common";
import bool MakeFollower(Critter&critter,uint type,string&script,uint dialogid,Critter&owner,bool FreeBarter)from"follower_common";
import Critter@LocateFollowerByType(IMerc@merc,Critter&owner)from"follower_common";
import Critter@LocateFollowerByID(uint id,Critter&owner)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers,bool OnlyIsSeen)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers)from"follower_common";
import int GetFollowers(Critter&player,bool all,array<Critter@>&followers)from"follower_common";
import uint CountFollowers(Critter&player,bool all)from"follower_common";
import uint CountFollowers(Critter&player,Map@map)from"follower_common";
import uint GetPartyPointsMax(Critter&player)from"follower_common";
import uint GetPartyPointsUsed(Critter&player)from"follower_common";
import bool IsMerc(Critter&follower)from"follower_common";                                                                                                         

import void InitTents()from"map_tent";

import uint GetTentVars(array<uint>&vars)from"map_tent";
import uint GetTentVarsCount()from"map_tent";
import bool GetFreeTentVar(Critter&cr,uint&var)from"map_tent";
import uint GetFreeTentVars(Critter&cr,array<uint>&vars)from"map_tent";
import uint GetTakenTentVars(Critter&cr,array<uint>&vars)from"map_tent";
import uint GetTakenTentVars(uint crId,array<uint>&vars)from"map_tent";

import uint GetAllTents(array<Location@>&locations)from"map_tent";
import uint GetAllShelters(array<Location@>&locations)from"map_tent";
import uint GetAllHouses(array<Location@>&locations)from"map_tent";

import uint GetTentLocations(Critter&tentOwner,array<Location@>&locations)from"map_tent";
import uint GetTentLocations(uint tentOwnerId,array<Location@>&locations)from"map_tent";

import Location@GetNearestTentLocation(Critter&tentOwner,uint16 wx,uint16 wy)from"map_tent";
import Location@GetNearestTentLocation(uint tentOwnerId,uint16 wx,uint16 wy)from"map_tent";

import bool CanCreateTent(Map&map)from"map_tent";
import void TryCreateTent(Critter&cr)from"map_tent";

import bool RemoveTent(Critter&cr,Location&tent,bool recycle)from"map_tent";
import bool RemoveTentByVar(Critter&cr,uint var,bool recycle)from"map_tent";
import void RemoveAllTents(Critter&cr,bool recycle)from"map_tent";

import bool IsTentOwner(Map&tent,Critter&cr)from"map_tent";

import void myinfo_tent(Critter&cr)from"map_tent

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      

shared interface IPolygon
{
	IPolygon@AddVertex(uint16 x,uint16 y);
	IPolygon@AddVertices(array<uint16>&hexes);   
	
	bool IsWithin(Critter&cr);
	bool IsWithin(Item&item);  
	
	bool IsWithin(uint16 x,uint16 y);
};  

import IPolygon@NewPolygon()from"polygon"; 

import IPolygon@LoadShapeFromEntires(Map&map,uint first,uint last)from"polygon";          

import ITown@GetTownByIndex(uint index)from"towns";
import ITown@GetTown(uint id)from"towns";
import uint GetTownCount()from"towns";
import uint GetTowns(array<ITown@>@towns)from"towns";  

import bool AddMilitia(Map@map)from"town";
import void InitMilitia()from"town";
import bool IsTCTown(Map@map)from"town";
import uint RetrieveTownId(Map@map)from"town";
import uint RetrieveTownId(Critter&critter)from"town";
import ITown@RetrieveTown(Critter&critter)from"town";
import bool ValidTown(ITown@town)from"town";
import void GainControl(Critter&player)from"town";
import uint GetNearMembers(Critter&player)from"town";
import bool IsPolicy(Critter&player,uint policy)from"town";
import bool IsControllingTown(Critter&player)from"town";
import bool AlertMilitia(Critter&cr)from"town";
import int SelectBag(uint crpid)from"town";
import void SpawnInitMilitia(Map@map)from"town";
import int CountMilitia(Map@map)from"town";
import void ClearInfluenceBuffer(Critter&cr)from"town";  

class PresenceStruct
{
	uint factionId;
	uint count;
	PresenceStruct(uint factionId)
	{
		this.factionId=factionId;
		this.count=1;
	}
};

shared interface ITown
{
	ITown@SetMapID(uint id);
	ITown@SetTownID(uint id);
	ITown@SetBaseRewardValue(uint value);
	ITown@SetInfluenceMemberRequirement(uint number);
	ITown@SetNearbyMemberRequirement(uint number);
	ITown@SetTotalMemberRequirement(uint number);
	ITown@SetLimboContainer(Item@container);
	ITown@SetRewardContainer(Item@container);
	ITown@SetTownLeader(Critter@leader);
	ITown@SetSpeechModifier(int modifier);
	ITown@SetHour(uint hour);
	ITown@SetCaptureArea(IPolygon@capturearea);
	ITown@SetMilitiaEnabled();
	ITown@SetRewardStartCaps(uint caps);
	ITown@SetVersion(uint version);
	
	uint GetVersion();
	
	uint GetTownID();
	string GetTownName();
	bool LoadData();
	bool SaveData();
	bool IsMilitiaEnabled();
	bool IsFriendlyFaction(uint factionid);
	bool IsFriend(Critter&cr);
	bool IsValidCaptor(Critter&cr);
	bool IsWithinCaptureArea(Critter&cr);
	void AreaCheck();
	bool AddFriendlyFaction(uint factionid);
	bool RemoveFriendlyFaction(uint factionid);
	array<uint>GetFriendlyFactions();
	float GetControllingInfluence();
	uint GetMilitiaMax();
	uint GetControllingFaction();
	uint GetNumberOfKilledNPCs();
	uint GetControlCycles();
	uint GetStatus();
	void SetStatus(uint status);
	void SetScore();
	void SetPreviousFaction(uint previous);
	uint GetlastSecond();
	void SetlastSecond(uint sec);
	uint GetAreaCount();
	uint GetCountdown();
	void SetCountdownStatus(bool enabled);
	bool GetCountdownStatus();
	void SendCountdownTime(Critter&player);
	uint GetMemberNearbyRequirement();
	uint GetMemberTotalRequirement();
	Item@GetLimboContainer();
	Item@GetRewardContainer();
	uint GetTownLeaderId();
	uint GetMapID();
	int GetSpeechModifier();
	bool GainControl(Critter&player);
	void IncreaseNPCDeath(uint num);
	void ModifyInfluence(uint factionId,float value);
	void SetInfluence(uint factionId,float value);
	void ResetStats();
	void ResetControl();
	void RevertControl();
	void ClearRewardContainer();
	void ClearLimboContainer();
	void ClearContainers();
	void Update(uint hour,uint minute);
	void UpdateCountdown();
	void UpdateTick();
	void TownCheck();
	
	bool IsLaw(uint law);
	void SetLaw(uint law,bool enabled);
	
	void AddMoney(int money);
	int GetMoney(); 
	
	float GetInfluence(uint faction);
	
	Location@GetLocation();
};                                                                                                                                                                                                                                                                                                                                                                           

import bool IsNight()from"world_common";
import bool IsDay()from"world_common";
import bool IsMorning()from"world_common";
import bool IsAfternoon()from"world_common";
import bool IsEvening()from"world_common";
import bool IsHospital(Map@map)from"world_common";
import bool IsCave(Map@map)from"world_common";
import bool IsMine(Map@map)from"world_common";
import bool IsJail(Map@map)from"world_common";
import bool IsBase(Map@map)from"world_common";
import bool IsTent(Map@map)from"world_common";
import bool IsWarzone(Map@map)from"world_common";  

import bool IsArenaCombatant(Critter&cr)from"arena";
import Map@GetRoomPosition(uint PlayerId,uint16&out hx,uint16&out hy)from"rooms";
import IMerc@GetMerc(uint id)from"mercs";
import void DropItems(Critter&cr)from"replication";       

bool IsCompanion(Critter&follower)
{
	return(GetFollowerType(follower)==(1));
}

bool IsAnimal(Critter&follower)
{
	return(GetFollowerType(follower)==(4)||GetFollowerType(follower)==(3));
}

uint cte_UpdateLoyality(Critter&follower,int identifier,uint&rate)
{
	
	if(IsAnimal(follower))
	return 0;
	
	UpdateLoyality(follower);
	
	if((((follower.Param[(534)]&((0x00000020)))!=0)&&follower.Param[(104)]==(9314))&&GetLoyality(follower)<(20)&&Random(0,2)==0)
	{
		Critter@master=GetMaster(follower);
		if(!(@master!=null))
		return(((7)*__TimeMultiplier*86400));
		Map@map=master.GetMap();
		
		if((@map!=null)&&map.Id!=0&&master.GetMapId()==follower.GetMapId()&&!IsTown(map))
		{
			{;};
			DisbandFollower(master,follower,true);
			follower.AddEnemyInStack(master.Id);
			AttackCritter(follower,master);
			master.Say((11),"One of your slaves have become disloyal and has rebelled!");
			switch(Random(0,3))
			{
				case 0:
				follower.Say((3),"I've had enough with you!");
				case 1:
				follower.Say((3),"Death before dishonor!");
				case 2:
				follower.Say((3),"I should have done this a long time ago!");
				case 3:
				follower.Say((3),"Die you fucker!!!");
			}
		}
	}
	
	return(((7)*__TimeMultiplier*86400));
}

bool HasMasterSpeakerPerk(Critter&follower){return(((follower.FollowerVar[(941)])&((0x1)))!=0);}

void UpdateLoyality(Critter&follower)
{
	ModifyLoyality(follower,HasMasterSpeakerPerk(follower)?(Random(-5,-15)/2):Random(-5,-15));
	{};
}

void r_FollowMode(Critter&player,Critter@follower,int value)
{
	SetMode(player,follower,value);
} 

void r_AttackPolicy(Critter&player,Critter@follower,int value)
{
	follower.FollowerVarBase[(926)]=value;
	follower.FollowerVarBase[(929)]=GetGroupIndex(player);  
	
	array<Critter@>crits;
	uint num=player.GetCritters(false,(0x03),crits);
	for(uint i=0;i<num;i++)
	_ShowCritter(follower,crits[i]);
}

void r_ArmBestWeapon(Critter&player,Critter@follower)
{
	ArmBestWeapon(follower);
}

void r_PutDownWeapon(Critter&player,Critter@follower)
{
	PutAwayItems(follower);
}

void r_DropAllItems(Critter&player,Critter@follower)
{
	DropAllItems(follower);
}

void r_PickUpUnder(Critter&player,Critter@follower)
{
	PickAllItemsOnHex(follower);
}

void r_IncreaseLoyality(Critter&player,Critter@follower,int Min,int Max)
{
	ModifyLoyality(follower,Min,Max);
} 

void r_Rotate(Critter&player,Critter@follower,int value)
{
	uint dir=follower.Dir;
	
	(dir>=5)?dir=0:dir++;
	
	follower.SetHomePos(follower.HexX,follower.HexY,dir);
	follower.SetDir(dir);
} 

void r_Distance(Critter&player,Critter@follower,int value)
{
	follower.FollowerVarBase[(928)]=value;
	
} 

void r_ClaimFollower(Critter&player,Critter@follower,int value)
{
	follower.FollowerVarBase[(933)]=player.Id;
	follower.FollowerVarBase[(927)]=0;
	
} 

uint r_TellWeaponSkill(Critter&player,Critter@follower)
{
	switch(GetBestWeaponSkill(follower))
	{
		case(200):
		return 13;
		case(201):
		return 14;
		case(202):
		return 15;
		case(203):
		return 11;
		case(205):
		return 16;
		default:
		return 0;
	}
	return 0;
}

uint GetLoyality(Critter&follower){return follower.FollowerVar[(937)];}

void ModifyLoyality(Critter&cr,int value)
{
	cr.FollowerVarBase[(937)]=(((GetLoyality(cr)+value)>(100))?(100):(((GetLoyality(cr)+value)<(0))?(0):(GetLoyality(cr)+value)));
	{};
}

void ModifyLoyality(Critter&cr,int IncMin,int IncMax)
{
	ModifyLoyality(cr,Random(IncMin,IncMax));
} 

string GetMercLoyalityText(uint loyality)
{
	if(loyality==100)
	return"I'll admit it, @sex@|sir||ma’am|. You're good. Maybe one of the best.@@Best damn assignment I ever had, @sex@|sir||ma’am|. Hand to God.";
	else if(loyality>90)
	return"I'll admit it, @sex@|sir||ma’am|. You're good. Maybe one of the best.@@Best damn assignment I ever had, @sex@|sir||ma’am|. Hand to God.";
	else if(loyality>80)
	return"I'd feel better if I was taking the lead. You gotta be careful out here, @sex@|sir||ma’am|.@@Master, be careful out here.";
	else if(loyality>70)
	return"Yes @sex@|sir||ma’am|?@@New orders, @sex@|sir||ma’am|?@@What's the plan, @sex@|sir||ma’am|?@@What's up, @sex@|sir||ma’am|?";
	else if(loyality>60)
	return"Yes @sex@|sir||ma’am|?@@New orders, @sex@|sir||ma’am|?@@What's the plan, @sex@|sir||ma’am|?@@What's up, @sex@|sir||ma’am|?";
	else if(loyality>50)
	return"Guess you ain't so bad after all. @sex@|sir||ma’am|.@@Maybe I was wrong about you, @sex@|sir||ma’am|.";
	else if(loyality>40)
	return"I can't believe I got this babysitting job.@@I'm here to protect your stupid ass, not talk to it.@@You want a conversation? Rent a hooker.";
	else if(loyality>30)
	return"I can't believe I got this babysitting job.@@I'm here to protect your stupid ass, not talk to it.@@You want a conversation? Rent a hooker.";
	else if(loyality>20)
	return"Awww, am I too violent for you, cupcake?@@@sex@|Fightin' men might not be your thing, pal.||Fightin' men might not be your thing, missy.|@@Mouth breathing piece of... what?";
	else if(loyality>10)
	return"Awww, am I too violent for you, cupcake?@@@sex@|Fightin' men might not be your thing, pal.||Fightin' men might not be your thing, missy.|@@Mouth breathing piece of... what?";
	else if(loyality>0)
	return"You're a coward, and you'll die like one.@@Faster you die, faster I'm outta here. Let's get your stupid ass killed.";
	else if(loyality==0)
	return"You're a coward, and you'll die like one.@@Faster you die, faster I'm outta here. Let's get your stupid ass killed.";
	else
	return"GetMercLoyalityText error";
}

string GetCompanionLoyalityText(uint loyality)
{
	if(loyality==100)
	return"Don't worry @sex@|pal||sweetie|, ain't nobody touching you so long as I'm around.@@You know, you remind me of a @sex@|guy||lady| I used to travel with a couple years back. Uh, not sure you want to know what happened to @sex@|him||her|, though. Awful mess.@@You know, hanging out with you makes me wonder why I used to putz around this stinkhole by myself.@@I'm a little embarrassed to admit this, but you're the best friend I've had in years.";
	else if(loyality>90)
	return"Don't worry @sex@|pal||sweetie|, ain't nobody touching you so long as I'm around.@@You know, you remind me of a @sex@|guy||lady| I used to travel with a couple years back. Uh, not sure you want to know what happened to @sex@|him||her|, though. Awful mess.@@You know, hanging out with you makes me wonder why I used to putz around this stinkhole by myself.@@I'm a little embarrassed to admit this, but you're the best friend I've had in years.";
	else if(loyality>80)
	return"Don't worry @sex@|pal||sweetie|, ain't nobody touching you so long as I'm around.@@You know, you remind me of a @sex@|guy||lady| I used to travel with a couple years back. Uh, not sure you want to know what happened to @sex@|him||her|, though. Awful mess.@@You know, hanging out with you makes me wonder why I used to putz around this stinkhole by myself.@@I'm a little embarrassed to admit this, but you're the best friend I've had in years.";
	else if(loyality>70)
	return"What's eating you, compadre?@@What's eating you, amigo?@@What's on your mind, chief?@@Maybe we can travel where I want to go for a while. No? Alright, fine. Just saying.@@Another beautiful wasteland day, ain't it?";
	else if(loyality>60)
	return"What's eating you, compadre?@@What's eating you, amigo?@@What's on your mind, chief?@@Maybe we can travel where I want to go for a while. No? Alright, fine. Just saying.@@Another beautiful wasteland day, ain't it?";
	else if(loyality>50)
	return"Hey, you ain't half bad. Maybe this travelling together's gonna work out @sex@|buddy||missy|.@@You watch my back, maybe we've got a chance out here.@@Sorry about what I said before. Guess I've been travelling too long to warm up to new folks.@@I gotta ask, why is everyone and everything trying to kill you?";
	else if(loyality>40)
	return"Hey, you ain't half bad. Maybe this travelling together's gonna work out @sex@|buddy||missy|.@@You watch my back, maybe we've got a chance out here.@@Sorry about what I said before. Guess I've been travelling too long to warm up to new folks.@@I gotta ask, why is everyone and everything trying to kill you?";
	else if(loyality>30)
	return"Why don't we just try quiet time for a while?@@@sex@|Not interested, pal.||Not interested, sweetie.|@@This'd be really awkward if I gave a shit about your feelings.@@I'm travelling with you because I have to. Nothing more.";
	else if(loyality>20)
	return"Why don't we just try quiet time for a while?@@@sex@|Not interested, pal.||Not interested, sweetie.|@@This'd be really awkward if I gave a shit about your feelings.@@I'm travelling with you because I have to. Nothing more.";
	else if(loyality>10)
	return"Why don't we just try quiet time for a while?@@@sex@|Not interested, pal.||Not interested, sweetie.|@@This'd be really awkward if I gave a shit about your feelings.@@I'm travelling with you because I have to. Nothing more.";
	else if(loyality>0)
	return"You look at me like that again, I'm gonna beat you so bad your sister'll wish she never gave birth to ya.@@What the fuck are you looking at?";
	else if(loyality==0)
	return"You look at me like that again, I'm gonna beat you so bad your sister'll wish she never gave birth to ya.@@What the fuck are you looking at?";
	else
	return"GetCompanionLoyalityText error";
}

string GetSlaveLoyalityText(uint loyality)
{
	if(loyality==100)
	return"Master, I don't know how I ever survived without you.@@Don't ever leave me, Master.";
	else if(loyality>90)
	return"I'll die before I let them touch you, Master.@@Master, be careful out here.";
	else if(loyality>80)
	return"I'll die before I let them touch you, Master.@@Master, be careful out here.";
	else if(loyality>70)
	return"I'll die before I let them touch you, Master.@@Master, be careful out here.";
	else if(loyality>60)
	return"How can I be of service, Master?@@What is it you require, Master?@@Yes, Master?";
	else if(loyality>50)
	return"How can I be of service, Master?@@What is it you require, Master?@@Yes, Master?";
	else if(loyality>40)
	return"I miss my family. Do you think they miss me?@@You're not ever letting me go, are you?";
	else if(loyality>30)
	return"I miss my family. Do you think they miss me?@@You're not ever letting me go, are you?";
	else if(loyality>20)
	return"You slaving piece of shit.@@You'll let your guard down soon enough.";
	else if(loyality>10)
	return"You slaving piece of shit.@@You'll let your guard down soon enough.";
	else if(loyality>0)
	return"You can't watch me forever.@@[Spits on the ground]@@You want something, you scumbag?";
	else if(loyality==0)
	return"You can't watch me forever.@@[Spits on the ground]@@You want something, you scumbag?";
	else
	return"GetSlaveLoyalityTex error";
}

string GetLoyalityText(Critter&npc)
{
	uint loyality=npc.FollowerVar[(937)];
	uint type=npc.FollowerVar[(932)];
	if(IsMerc(npc))
	return GetMercLoyalityText(loyality);
	else if(type==(1))
	return GetCompanionLoyalityText(loyality);
	else if(type==(2))
	return GetSlaveLoyalityText(loyality);
	return"GetLoyalityText error";
}  

void dlg_ShowMercPayCost(Critter&player,Critter@follower,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	
	IMerc@merc=GetMerc(follower.FollowerVar[(930)]);
	
	text+="$payment"+GetMercLoyalityCost(merc.GetCost());
}

void dlg_ShowLoyality(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	
	text+="$loyality"+GetLoyalityText(npc);
}

void dlg_ShowStats(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))return;
	
	text+="$stats"+"ST: "+npc.Param[(0)]+" PE: "+npc.Param[(1)]+" EN: "+npc.Param[(2)]+" CH: "+npc.Param[(3)]+" IN: "+npc.Param[(4)]+" AG: "+npc.Param[(5)]+" LK: "+npc.Param[(6)]+"\nLevel: "+npc.Param[(77)]+"\nExperience: "+npc.Param[(76)]+"\nSkill: ";
	
	switch(GetBestWeaponSkill(npc))
	{
		case(200):{text+="Small Guns ("+npc.Param[(200)]+"%)";break;}
		case(201):{text+="Big Guns ("+npc.Param[(201)]+"%)";break;}
		case(202):{text+="Energy Weapons ("+npc.Param[(202)]+"%)";break;}
		case(203):{text+="Close Combat ("+npc.Param[(203)]+"%)";break;}
		case(205):{text+="Throwing ("+npc.Param[(205)]+"%)";break;}
		default:break;
	}
} 

uint dlg_ChooseBase(Critter&cr,Critter@follower,string@say)
{
	array<IFactionBase@>bases;
	uint factionId=cr.FollowerVar[(929)];
	uint baseNum=GetFactionBases(factionId,bases);
	
	if(((@say!=null)&&say.length()==0))
	{
		string baseStr;
		for(uint i=0;i<bases.length();i++)
		baseStr+=bases[i].Name+"\n";
		
		say+="$bases"+baseStr;
	}
	
	if(!((@say!=null)&&say.length()>0))
	return 0;
	
	uint baseId;
	uint baseIndex;
	if(baseNum==0)
	{
		cr.Say((12),"No bases found.");
		return 0;
	}
	
	for(uint i=0;i<bases.length();i++)
	if(bases[i].Name==say)
	{
		baseIndex=i;
		baseId=bases[i].Id;
	}
	
	if(baseId==0)
	if(baseNum==0)
	{
		cr.Say((12),"Base name doesn't exist.");
		return 0;
	}
	else
	{
		follower.FollowerVarBase[(942)]=baseId;
		cr.Say((12),"Respawn base successfully set to '"+bases[baseIndex].Name+"' .");
		return 0;
	}
	return 0;
}

uint dlg_GiveFollower(Critter&player,Critter@npc,string@say)
{
	if(!((@say!=null)&&say.length()>0))
	return 0;
	
	Critter@target=GetPlayer(say);
	if(!(@target!=null))
	{
		player.Say((12),"Invalid player.");
		return 0;
	}
	
	if(!(@npc!=null))
	{
		player.Say((12),"Error. Report this and try again");
		return 0;
	}
	
	if(player.Id==target.Id)
	{
		player.Say((12),"But that's you!");
		return 0;
	}
	
	if(player.GetMapId()!=target.GetMapId())
	{
		player.Say((12),"Player is not present on this map.");
		return 0;
	}
	
	if((((target.Flags)&((0x00080000)))!=0))
	{
		player.Say((12),"Player is not in game.");
		return 0;
	}
	
	if(IsArenaCombatant(target))
	{
		player.Say((12),"Player is inside arena.");
		return 0;
	}
	
	if(!CanHaveMoreFollowers(target,npc.FollowerVar[(932)]))
	{
		player.Say((12),"The player can't lead this follower.");
		return 0;
	}
	if((IsBase(player.GetMap())||IsTent(player.GetMap())))
	{
		DisbandFollower(player,npc,false);
		MakeFollower(npc,npc.FollowerVar[(932)],GetScriptName(npc.GetScriptId()),npc.Param[(104)],target,true);
		if((((npc.Param[(534)]&((0x00000020)))!=0)&&npc.Param[(104)]==(9314)))
		return(14);
		else if((((npc.Param[(534)]&((0x00000020)))!=0)&&npc.Param[(104)]==(9312)))
		return(8);
		else return 100;
	}
	else
	{
		player.Say((12),"Do it in Base or Tent.");
		return 0;
	}
}

bool d_IsLoyalityMax(Critter&player,Critter@follower)
{
	return(follower.FollowerVar[(937)]==100);
}

bool d_IsNotLoyalityMax(Critter&player,Critter@follower)
{
	return(follower.FollowerVar[(937)]!=100);
}

bool d_IsOwner(Critter&player,Critter@follower,int val)
{
	return(player.Id==uint(follower.FollowerVar[(933)]));
}

bool d_IsClaimable(Critter&player,Critter@follower,int val)
{
	return(follower.FollowerVar[(927)]==1);
}

bool d_IsGuarding(Critter&player,Critter@follower,int val)
{
	return(follower.FollowerVar[(925)]==(2));
}

bool d_IsFollowing(Critter&player,Critter@follower,int val)
{
	return IsFollowing(follower);
}

int d_SpawnMap(Critter&player,Critter@follower,int val)
{
	return follower.FollowerVar[(931)];
}

bool d_IsNotMode(Critter&player,Critter@follower,int val)
{
	return(follower.FollowerVar[(925)]!=val);
}

bool d_CanMine(Critter&player,Critter@follower)
{
	return(IsMine(player.GetMap())&&(player.GetMap().GetLocation().GetProtoId()!=(30)));
}

bool d_CanStay(Critter&player,Critter@follower)
{
	Map@map=player.GetMap();
	return(IsTent(map)||IsBase(map));
}

bool d_HasFollowerOfBaseType(Critter&player,Critter@npc,int val)
{
	return HasFollowerOfBaseType(player,val);
}

void r_RemoveFollowerOfBaseType(Critter&player,Critter@npc,int val)
{
	RemoveFollowerByBaseType(player,val);
}

bool d_HasBrahmin(Critter&player,Critter@npc,int val)
{
	return HasFollowerOfBaseType(player,(15));
}

bool d_HasNoBrahmin(Critter&player,Critter@npc,int val)
{
	return!HasFollowerOfBaseType(player,(15));
} 

bool d_CanLeadMoreFollowers(Critter&player,Critter@npc)
{
	return true;
} 

bool d_CanHaveMoreFollowers(Critter&player,Critter@npc,int FollowerType)
{
	return CanHaveMoreFollowers(player,uint(FollowerType));
}

void r_RemoveBrahmin(Critter&player,Critter@npc,int val)
{
	RemoveFollowerByBaseType(player,(15));
}

bool d_IsSpawnPlaceAvailable(Critter&player,Critter@npc,int place)
{
	uint16 hx,hy;
	if(place==(1))
	return((@GetNearestTentLocation(npc.FollowerVar[(933)],player.WorldX,player.WorldY)!=null));
	else if(place==(2))
	return(@GetRoomPosition(npc.FollowerVar[(933)],hx,hy)!=null);
	else if(place==(3))
	{
		array<IFactionBase@>bases;
		uint baseNum=GetFactionBases(npc.FollowerVar[(929)],bases);
		return(baseNum>0);
	}
	return false;
}

void r_RemoveArmor(Critter&player,Critter@follower)
{
	Item@item=follower.GetItem(0,(3));
	if(!(@item!=null))
	return;
	follower.MoveItem(item.Id,item.GetCount(),(0));
	follower.SetFavoriteItem((3),0);
}

void r_SetArmor(Critter&player,Critter@follower,int pid)
{
	r_RemoveArmor(player,follower);
	Item@item=follower.GetItem(pid,-1);
	follower.MoveItem(item.Id,item.GetCount(),(3));
	follower.SetFavoriteItem((3),item.GetProtoId());
}

void r_RemoveHelmet(Critter&player,Critter@follower)
{
	Item@item=follower.GetItem(0,(4));
	if(!(@item!=null))
	return;
	follower.MoveItem(item.Id,item.GetCount(),(0));
}

void r_SetHelmet(Critter&player,Critter@follower,int pid)
{
	r_RemoveHelmet(player,follower);
	Item@item=follower.GetItem(pid,-1);
	follower.MoveItem(item.Id,item.GetCount(),(4));
}

void r_SetSpawnPlace(Critter&player,Critter@follower,int place)
{
	follower.FollowerVarBase[(936)]=place;
}

void r_SetFaction(Critter&player,Critter@follower)
{
	follower.FollowerVarBase[(929)]=GetGroupIndex(player);
}

bool d_CanPayMerc(Critter&player,Critter@follower)
{
	IMerc@merc=GetMerc(follower.FollowerVar[(930)]);
	if(!(@merc!=null))
	return false;
	
	return(GetMercLoyalityCost(merc.GetCost())<=player.CountItem((41)));
}

void r_PayMerc(Critter&player,Critter@follower)
{
	IMerc@merc=GetMerc(follower.FollowerVar[(930)]);
	if(!(@merc!=null))
	{
		Log("Error finding merc proto "+follower.FollowerVar[(930)]+". Can't pay merc "+follower.Id);
		return;
	}
	
	if(!BanksTransferFromCritter(player,GetMercLoyalityCost(merc.GetCost()),(4),false))
	{
		Log("Couldn't remove money from player "+player.Id+" to banks.");
		return;
	}
	
	ModifyLoyality(follower,10,10);
} 

uint GetMercLoyalityCost(uint basecost)
{
	return basecost/4;
} 

void SetMode(Critter&master,Critter&follower,uint mode)
{
	follower.FollowerVarBase[(925)]=mode;
	follower.SetEvent((0),"_Idle");
	follower.ParamBase[(517)]=0;
	
	if(mode==(3))
	{
		follower.ParamBase[(212)]=40;
		follower.SetEvent((0),"prospect_miner@_Idle");
		return;
	}  
	
	if(mode==(0))
	follower.ParamBase[(518)]=1;
	else
	follower.ParamBase[(518)]=0;
	
	if(mode==(2))
	follower.SetHomePos(follower.HexX,follower.HexY,follower.Dir);
} 

void SetEvents(Critter&critter)
{
	critter.SetEvent((28),"_SomeoneAttacked");
	critter.SetEvent((15),"_Attack");
	critter.SetEvent((16),"_Attacked");
	critter.SetEvent((0),"_Idle");
	critter.SetEvent((4),"_ShowCritter");
	critter.SetEvent((2),"_Dead");
	critter.SetEvent((37),"_PlaneRun");
	critter.SetEvent((36),"_PlaneEnd");
}

void FollowerBaseInit(Critter&follower,bool firstTime)
{
	SetEvents(follower); 
	
	if(firstTime)
	{
		follower.FollowerVarBase[(926)]=(0);
		follower.FollowerVarBase[(925)]=(0);
		follower.FollowerVarBase[(928)]=(1);
		follower.FollowerVarBase[(931)]=follower.GetMapId();
		follower.FollowerVarBase[(937)]=100;
		follower.ParamBase[(518)]=1;
		follower.AddTimeEvent("cte_UpdateLoyality",(((7)*__TimeMultiplier*86400)),(6));
	}
	
	Critter@master=GetCritter(follower.FollowerVar[(933)]);
	if((@master!=null))
	follower.FollowerVarBase[(929)]=GetGroupIndex(master);
	
	follower.ParamBase[(512)]=0;
	follower.ParamBase[(523)]=0;
	(follower.ParamBase[(534)]=(follower.Param[(534)]|((0x00000200)))^((0x00000200)));
	follower.ParamBase[(513)]=1;
	(follower.ParamBase[(534)]=follower.Param[(534)]|((0x00000020)));
	follower.ParamBase[(521)]=1; 
	
	follower.ParamBase[(84)]=(-2);
	
	SetGroupInfo(follower,(1),1,(1));
	
	if(follower.FollowerVar[(925)]==(3))
	{
		follower.ParamBase[(212)]=40;
		follower.SetEvent((0),"prospect_miner@_Idle");
	}
	
	if(follower.FollowerVar[(932)]==(1))
	{
		follower.ParamBase[(84)]=(((10)*60));
		follower.ParamBase[(518)]=1;
	}
}

void critter_init(Critter&follower,bool firstTime)
{
	FollowerBaseInit(follower,firstTime);
}

int _PlaneRun(Critter&follower,NpcPlane&plane,int reason,uint&result0,uint&result1,uint&result2)
{
	if(plane.Type==(1)&&reason==(51))
	{
		uint percentage=100-follower.FollowerVar[(937)];
		if(percentage==100)
		{
			if(!Flee(follower))
			return(0);
			return(2);
		}
		int thresholdhp=(follower.Param[(7)]*percentage)/100;
		if(follower.Param[(72)]>=thresholdhp)
		{
			{};
			return(0);
		}
		else
		{
			if(!Flee(follower))
			return(0);
			return(2);
		}
	}
	return(0);
}

int _PlaneEnd(Critter&follower,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(plane.Identifier==(29))
	{
		follower.TransitToGlobal(false);
		((follower.FollowerVarBase[(941)])=(follower.FollowerVarBase[(941)])|((0x2)));
		return(2);
	}
	else if(plane.Type==(2)&&plane.Identifier==(37))
	{
		Critter@master=GetCritter(follower.FollowerVar[(933)]);
		if((@master!=null)&&IsOnSameMap(master,follower)&&(GetCrittersDistantion(master,follower)>GetDistance(follower)))
		{
			GoToMaster(master,follower);
			return(2);
		}
	}
	return(0);
}

void _Slave(Critter&cr,bool firstTime)
{
	FollowerBaseInit(cr,firstTime);
	(cr.ParamBase[(534)]=cr.Param[(534)]|((0x00004000)));
	cr.FollowerVarBase[(932)]=(2);
} 

void _Dead(Critter&cr,Critter@killer)
{
	if(cr.FollowerVar[(932)]==(1)&&IsDungeon(cr.GetMap()))                            
	
	DropItems(cr);
	
	if(cr.FollowerVar[(932)]!=(1))
	cr.ParamBase[(518)]=0;
}

void _ShowCritter(Critter&follower,Critter&critter)
{
	if(IsOnBufferMap(follower))
	return;
	
	int attack=follower.FollowerVar[(926)];
	int faction=follower.FollowerVar[(929)];
	
	Map@map=follower.GetMap(); 
	
	if(IsFriend(follower,critter))
	return;
	
	if(attack==(0))
	return;
	
	else if(attack==(6)&&!IsTown(map)&&GetGroupIndex(critter)==0)
	{
		Flee(follower);
		return;
	}
	
	else if(attack==(7))
	{
		if((@map!=null))
		{
			if(IsTent(map)&&(map.GetData((20))==follower.FollowerVar[(933)]))
			{
				
				if(critter.IsPlayer())
				if(critter.IsKnownLoc(true,map.GetLocation().Id))
				return;
				
				AttackCritter(follower,critter,__DeadHitPoints);
			}
			else if(IsBase(map)&&(map.GetData((0))==faction))
			{
				AttackCritter(follower,critter,__DeadHitPoints);
			}
		}
	} 
	
	else if(attack==(2))
	{  
		
		AttackCritter(follower,critter,__DeadHitPoints);
	}
	else if(attack==(1))
	{
		if(!critter.IsPlayer())
		return;
		
		AttackCritter(follower,critter,__DeadHitPoints);
	}
	else if(attack==(3))
	{
		
		AttackCritter(follower,critter,__DeadHitPoints);
	}
	else if(attack==(4))
	{
		if(!critter.IsPlayer())
		{
			if(!(((critter.Param[(534)]&((0x00000020)))!=0)))
			return;
			int status=GetStatus(faction,critter.FollowerVar[(933)]);
			
			if(status==(3))
			AttackCritter(follower,critter,__DeadHitPoints);
			return;
		}
		
		int status=GetStatus(faction,critter.Id);
		
		if(status==(3))
		AttackCritter(follower,critter,__DeadHitPoints);
	}
	else if(attack==(5))
	{
		if(!critter.IsPlayer())
		{
			if(!(((critter.Param[(534)]&((0x00000020)))!=0)))
			return;
			int status=GetStatus(faction,critter.FollowerVar[(933)]);
			
			if((uint(faction)!=GetGroupIndex(critter))&&(status!=(4))&&(status!=(1)))
			AttackCritter(follower,critter,__DeadHitPoints);
			return;
		}
		
		int status=GetStatus(faction,critter.Id);
		
		if((uint(faction)!=GetGroupIndex(critter))&&(status!=(4))&&(status!=(1)))
		AttackCritter(follower,critter,__DeadHitPoints);
	}
}

Critter@GetMaster(Critter&follower)
{
	return GetCritter(follower.FollowerVar[(933)]);
}

bool IsAwayFromMaster(Critter&master,Critter&follower)
{
	if(!(@master!=null)||!(@follower!=null))
	return true;
	return(GetCrittersDistantion(master,follower)>GetDistance(follower));
}

bool IsAwayFromMaster(Critter&follower)
{
	return IsAwayFromMaster(GetMaster(follower),follower);
}

void GoToMaster(Critter&master,Critter&follower)
{
	if(!(@master!=null)||!(@follower!=null))
	return;
	
	uint distance=GetDistance(follower);
	bool run=false;
	if(GetCrittersDistantion(master,follower)>(distance+3))
	run=true;
	
	uint16 hx=master.HexX-1+2*Random(0,1);
	uint16 hy=master.HexY-1+2*Random(0,1);
	Map@map=master.GetMap();
	if(!(@map!=null))
	return;
	if(!FindNearestFreeHex(map,hx,hy,hx,hy))
	return;
	
	int cut=GetDistantion(follower.HexX,follower.HexY,hx,hy)-1;
	if(cut<0)
	cut=0;
	
	AddWalkPlane(follower,0,(37),0,hx,hy,master.Dir,run,cut);
	follower.SetHomePos(hx,hy,master.Dir);
}

void _Idle(Critter&follower)
{
	if(Random(0,(5000/(75)))==0)
	ReloadWeapon(follower);
	
	Critter@master=GetMaster(follower);
	if(!(@master!=null))
	{
		follower.Wait((15000));
		return;
	}
	
	Map@map=follower.GetMap();
	if((@map!=null)&&map.GetLocation().IsEncounter()&&!IsOnSameMap(master,follower))
	{
		Flee(follower,false);
	} 
	
	if(follower.FollowerVar[(925)]!=(0))
	{
		follower.Wait((250));
		return;
	}
	
	if(IsOnSameMap(master,follower)&&IsAwayFromMaster(master,follower))
	{
		GoToMaster(master,follower);
		return;
	}
	
	follower.Wait((75));
}

bool _Attacked(Critter&follower,Critter&attacker)
{
	
	if(IsFriend(follower,attacker))
	{
		if(IsMaster(follower,attacker)&&(((follower.Param[(534)]&((0x00000020)))!=0)&&follower.Param[(104)]==(9314)))
		{
			{;};
			ModifyLoyality(follower,0,1);
		}
		return true;
	}
	
	if(follower.FollowerVar[(926)]==(6))
	{
		Flee(follower);
		return false;
	}
	
	return false;
}

bool _Attack(Critter&follower,Critter&target)
{
	if(follower.FollowerVar[(926)]==(6))
	{
		Flee(follower);
		return true;
	}
	
	if(IsTown(follower.GetMap())&&!IsFlaggedAsIllegal(target))
	{
		Critter@owner=GetCritter(follower.FollowerVar[(933)]);
		if(!(@owner!=null))
		return false;
		
		array<Critter@>guards;
		uint n=follower.GetMap().GetCritters(0,(0x0F)|(0x20),guards);
		for(uint i=0;i<n;i++)
		{
			if(((guards[i].Param[(534)]&((0x00000008)))!=0)&&owner.IsSeenBy(guards[i]))
			AttackCritter(guards[i],owner);
		}
	}
	
	return false;
}

void _SomeoneAttacked(Critter&follower,Critter&fromCrit,Critter&target)
{
	if(IsNonAggressive(follower)||follower.FollowerVar[(926)]==(6))
	{
		follower.ErasePlane((1),true);
		
		if(follower.FollowerVar[(926)]==(6))
		Flee(follower);
		return;
	} 
	
	if(IsSquadMember(follower,fromCrit)&&!(IsFriend(follower,target)))
	{
		AttackCritter(follower,target,__DeadHitPoints);
	} 
	
	if(IsSquadMember(follower,target)&&!IsFriend(follower,fromCrit))
	{
		AttackCritter(follower,fromCrit,__DeadHitPoints);
	}
} 

uint GetDistance(Critter&follower)
{
	uint dist=follower.FollowerVar[(928)];
	
	if(dist==(0))
	return 3;
	else if(dist==(1))
	return 7;
	else if(dist==(2))
	return 15;
	else
	return(0);
}

bool IsMaster(Critter&follower,Critter&critter)
{
	if(!critter.IsPlayer())
	return false;
	
	return(critter.Id==uint(follower.FollowerVar[(933)]));
}

bool IsOnBufferMap(Critter&follower)
{
	return(follower.GetMap().GetProtoId()==228);
}

bool IsOnSameMap(Critter&critter1,Critter&critter2)
{
	return(critter1.GetMapId()==critter2.GetMapId());
}

bool IsOnWorldmap(Critter&critter)
{
	return(critter.GetMapId()==0);
} 

bool IsFriend(Critter&follower,Critter&critter)
{
	
	if(follower.FollowerVar[(933)]==0)
	return true;
	
	uint myMasterFaction=GetPlayerFaction(follower.FollowerVar[(933)]);
	if(critter.IsPlayer())
	{
		if(IsMaster(follower,critter))
		return true;
		if(myMasterFaction>1)
		{
			if(int(myMasterFaction)==(critter.Param[(106)]))
			return true;
			uint status=GetStatus(myMasterFaction,critter.Id);
			if(status==(1)||status==(4))
			return true;
		}
	}
	else
	{
		if(follower.FollowerVar[(933)]==critter.FollowerVar[(933)])
		return true;
		if(myMasterFaction>1)
		{
			if(int(myMasterFaction)==(critter.Param[(106)]))
			return true;
			
			if(critter.FollowerVar[(933)]>0)
			{
				uint hisMasterFaction=GetPlayerFaction(critter.FollowerVar[(933)]);
				if(hisMasterFaction>1)
				{
					if(myMasterFaction==hisMasterFaction)
					return true;
					uint status=GetStatus(myMasterFaction,critter.FollowerVar[(933)]);
					if(status==(1)||status==(4))
					return true;
				}
			}
		}
	}
	return false;
} 

bool IsSquadMember(Critter&follower,Critter&critter)
{
	return(IsMaster(follower,critter)||critter.FollowerVar[(933)]==follower.FollowerVar[(933)]);
}

bool IsNonAggressive(Critter&follower)
{
	return(follower.CrType==(15));
}   

import void AffectPoison(Critter&cr,int value)from"poison";
import void AffectRadiation(Critter&cr,int value)from"radiation";
import void PlaySound(Critter&cr,string&soundName)from"media";
import void PostDamage(Critter&cr)from"main";
import void QuakeScreen(Map&map)from"effects";
import void WearItem(Critter&cr,Item&item,int wearCount)from"repair";
import void _weapon_perk(Item&item,bool firstTime)from"item_level";
import void _armor_perk(Item&item,bool firstTime)from"item_level";
import void VerboseActionCombat(Critter&cr,string&text)from"utils";

import void MolotovBlast(Map&map,uint16 hexX,uint16 hexY,uint16 firePid,uint ownerId)from"fire_hexes";

class AttackStruct
{
	Critter@Attacker=null;
	Item@RealWeapon=null;
	uint16 Hx=0;
	uint16 Hy=0;
	uint8 Aim=(9);
	bool AimHead=false;
	bool IsBurst=false;
	bool BloodyMess=false;
	bool CombatMessage=false;
	bool IsUnarmed=false;
	int WeaponPerk=-1;
	uint8 WeaponSubtype=0;
	int DmgMin=0;
	int DmgMax=0;
	int DmgType=0;
	int BonusDmg=0;
	int DmgMul=2;
	int DRMod=0;
	int DMMod=1;
	int DDMod=1;
	uint TargetId=0;
	bool TargetHit=false;
	bool ShowHitAnimForce=false;
	ProtoItem@Ammo=null;
	bool SilentDeathEffect=false;
	bool InYourFaceEffect=false;
	uint16 ammoPid;
	uint16 weaponPid;
	int8 weaponMode;
	
	void set_Aim(uint8 aim)
	{
		Aim=aim;
		AimHead=aim==(1)||aim==(7);
	}
	
	uint8 get_Aim()
	{
		return Aim;
	} 
	
}

int SelectArmorBonus(Item@armor,int Int_Val_ArmorBonus)
{
	return 0;
}  

void CombatAttack(Critter&cr,Critter&target,ProtoItem&weapon,uint8 weaponMode,ProtoItem@ammo)
{
	
	if(((cr.GetMap().GetData((10))&((0x00001600)))!=0))
	{
		cr.Say((11),"Can't Attack here.");
		return;
	}
	uint8 use=((weaponMode)&0xF);    
	
	uint8 aim=(((weaponMode)>>4)&0xF);
	
	if(aim!=(0)&&aim!=(9))
	PlaySound(cr,"ICSXXXX1.ACM");
	
	Item@realWeapon=cr.GetItem(0,(1));
	Map@map=cr.GetMap();
	int wpnMaxDist=((use)==0?weapon.Weapon_MaxDist_0:((use)==1?weapon.Weapon_MaxDist_1:((use)==2?weapon.Weapon_MaxDist_2:0)));
	int skillNum=((use)==0?weapon.Weapon_Skill_0:((use)==1?weapon.Weapon_Skill_1:((use)==2?weapon.Weapon_Skill_2:0)));
	if(skillNum==(205))
	{
		wpnMaxDist=5+cr.Param[(0)];
		wpnMaxDist+=6*(cr.Param[(336)]);
		if(cr.Param[(336)]>0&&cr.Param[(315)]>0)
		wpnMaxDist+=5;
	}
	int skillVal=cr.Param[skillNum];
	
	if((@realWeapon!=null)&&(realWeapon.Proto.ProtoId==(388)))skillVal=(((cr.Param[(200)])>(cr.Param[(207)]))?(cr.Param[(200)]):(cr.Param[(207)])); 
	
	uint8 weaponSubtype=(skillNum==(200)||skillNum==(201)||skillNum==(202))?(4):((skillNum==(205))?(3):(skillNum==(203))?(2):(1));
	bool isRanged=(weaponSubtype==(3)||weaponSubtype==(4));
	bool isUnarmed=weapon.Weapon_IsUnarmed;
	bool isHthAttack=(weaponSubtype==(2)||weaponSubtype==(1));
	uint16 ammoRound=((use)==0?weapon.Weapon_Round_0:((use)==1?weapon.Weapon_Round_1:((use)==2?weapon.Weapon_Round_2:0)));
	bool wpnIsRemoved=((use)==0?weapon.Weapon_Remove_0:((use)==1?weapon.Weapon_Remove_1:((use)==2?weapon.Weapon_Remove_2:false)));
	uint16 hx=cr.HexX;
	uint16 hy=cr.HexY;
	uint16 tx=target.HexX;
	uint16 ty=target.HexY;
	uint16 weapPid=weapon.ProtoId;
	uint16 ammoPid=0;
	if((@ammo!=null))
	ammoPid=ammo.ProtoId;
	bool isBurst=(ammoRound>1);
	
	if((@realWeapon!=null)&&realWeapon.Val3==(104)&&ammoRound>1)ammoRound+=1;
	if((@realWeapon!=null)&&realWeapon.Val4==(104)&&ammoRound>1)ammoRound+=1;
	if((@realWeapon!=null)&&realWeapon.Val5==(104)&&ammoRound>1)ammoRound+=1;
	if((@realWeapon!=null)&&realWeapon.Val6==(104)&&ammoRound>1)ammoRound+=1;
	if((@realWeapon!=null)&&realWeapon.Val7==(104)&&ammoRound>1)ammoRound+=1;
	if((@realWeapon!=null)&&realWeapon.Val8==(104)&&ammoRound>1)ammoRound+=1;
	if((@realWeapon!=null)&&realWeapon.Val2==(104)&&ammoRound>1)ammoRound+=1;
	
	if(cr.Param[(305)]>1&&cr.Param[(428)]>0&&ammoRound>1)
	ammoRound+=1;
	if(isBurst)
	aim=(9);
	int dmgType=((use)==0?weapon.Weapon_DmgType_0:((use)==1?weapon.Weapon_DmgType_1:((use)==2?weapon.Weapon_DmgType_2:0)));
	if(cr.Param[(402)]>1&&dmgType==(4))
	dmgType=(3);
	int normaldmg=0;
	if(dmgType==(1))
	normaldmg=5;
	bool isGrenade=weaponSubtype==(3)&&(dmgType!=(1)||dmgType!=(2));
	bool isFlamethrower=(weapPid==(11))||(weapPid==(400))||(weapPid==(427)||(weapPid==(25569)))||(weapPid==(1284))||(weapPid==(1277));
	if((weapPid==(25582)||weapPid==(25452))&&cr.Param[(402)]>1)
	isFlamethrower=true;
	bool isRocket=(ammoPid==(14))||(ammoPid==(621))||(ammoPid==(37))||(ammoPid==(25568))||(ammoPid==(25584))||(ammoPid==(1271))||(ammoPid==(1270));
	if(cr.Param[(359)]>0&&!isRocket)
	{
		cr.Say((11),"Can't use it");
		return;
	}
	if(cr.Param[(359)]>0&&(ammoPid==(1271))||(ammoPid==(1270)))
	{
		cr.Say((11),"this ammo, killing me");
		cr.ParamBase[(72)]-=Random(50,100);
		if(cr.ParamBase[(72)]<0)
		cr.ToDead((117),cr);
	}
	bool isExplodeRocket=(ammoPid==(14))||(ammoPid==(621));
	bool isShotgun=weapon.Weapon_Caliber==11;
	bool isBozar=weapPid==(350)||(weapPid==(25566))||(weapPid==(1231));
	bool isLSW=(weapPid==(355))||(weapPid==(1279));
	
	bool isAlien=(weapPid==(1277))||(weapPid==(1278))||(weapPid==(1279))||(weapPid==(1280))||(weapPid==(1281))||(weapPid==(1282))||(weapPid==(1283))||(weapPid==(1284));
	
	if(isAlien&&cr.Param[(357)]==0)
	{
		cr.Say((11),"Can't use it");
		return;
	}
	if(!isAlien&&cr.Param[(357)]>0)
	{
		cr.Say((11),"Can't use it");
		return;
	}
	
	if(ammoPid==(576))dmgType=(6);
	if(ammoPid==(850))dmgType=(3);
	
	if(ammoPid==(1270))dmgType=(4);
	if(ammoPid==(1271))dmgType=(3);
	
	bool eyeDamage=cr.Damage[(502)]!=0;
	int weaponPerk=weapon.Weapon_Perk;
	bool crIsPlayer=cr.IsPlayer();
	bool isHit=false;
	bool isCritical=false;
	bool hitRandomly=false;
	uint critfailFlags=0;
	Critter@realTarget;
	bool isSneak=false;
	bool useNormal=false;
	bool useHex=false;
	Critter@normalTarget;
	
	int CriticalChance=0;
	
	array<CombatRes>results;
	
	int acmod=0; 
	
	if(!map.IsTurnBased()&&map.IsTurnBasedAvailability())
	map.BeginTurnBased(cr);
	
	int checkassasin=Random(0,100);
	if(cr.Param[(408)]!=0&&checkassasin<10)
	{
		if(cr.Param[(510)]!=0)
		{
			if(!cr.IsPlayer()||(cr.IsPlayer()&&cr.GetAccess()==(0)))
			cr.ParamBase[(510)]=0;
			isSneak=true;
		}
	}
	else if(cr.Param[(408)]!=0&&checkassasin>10)
	{cr.Say((11),"Still Sneaking");isSneak=true;}
	else
	{
		if(cr.Param[(510)]!=0)
		{
			if(!cr.IsPlayer()||(cr.IsPlayer()&&cr.GetAccess()==(0)))
			cr.ParamBase[(510)]=0;
			isSneak=true;
		}
	}
	
	if(!target.IsPlayer()||(target.IsPlayer()&&target.GetAccess()==(0)))
	target.ParamBase[(510)]=0;
	
	cr.SetDir(GetDirection(hx,hy,tx,ty)); 
	
	if(cr.Param[(557)]!=0&&!isBurst&&(@weapon!=null)&&((use)==0?weapon.Weapon_Aim_0:((use)==1?weapon.Weapon_Aim_1:((use)==2?weapon.Weapon_Aim_2:false)))&&!(((use)==0?weapon.Weapon_Skill_0:((use)==1?weapon.Weapon_Skill_1:((use)==2?weapon.Weapon_Skill_2:0)))==(203)))
	{
		uint roll=Random(1,100);
		if(roll>95)
		aim=(7);
		else if(roll>85)
		aim=(1);
		else if(roll>70)
		aim=(((float(Random(1,10000))/100.0f)<=50)?(2):(3));
		else if(roll>55)
		aim=(8);
		else if(roll>35)
		aim=(((float(Random(1,10000))/100.0f)<=50)?(6):(5));
		else
		aim=(9);
	} 
	
	if(aim==(7)&&(@cr!=null)&&(cr.Dir+3)%6!=target.Dir)
	aim=(1);
	else if(aim==(7)&&(@target!=null))
	{
		Item@helmet=target.GetItem(0,(4));
		if((@helmet!=null)&&helmet.Proto.Armor_Perk==(3))
		aim=(1);
	} 
	
	if(cr.Param[(238)]<int(__TimeoutBattle))
	cr.TimeoutBase[(238)]=((__FullSecond)+(__TimeoutBattle));
	if(target.Param[(238)]<int(__TimeoutBattle))
	target.TimeoutBase[(238)]=((__FullSecond)+(__TimeoutBattle)); 
	
	if(crIsPlayer)
	{
		if(weaponSubtype==(4))
		AddScore(cr,(10),1);
		
		else if(skillNum==(203)||skillNum==(205))
		AddScore(cr,(11),1);
		else if(skillNum==(203))
		AddScore(cr,(12),1);
	} 
	
	if(!crIsPlayer)
	AI_TrySayCombatText(cr,(2)); 
	
	target.EventAttacked(cr);    
	
	AttackStruct attack;
	@attack.Attacker=cr;
	@attack.RealWeapon=realWeapon;
	attack.Hx=hx;
	attack.Hy=hy;
	attack.set_Aim(aim);
	attack.IsBurst=isBurst;
	attack.BloodyMess=cr.Param[(558)]!=0;
	attack.CombatMessage=true;
	attack.IsUnarmed=(weaponSubtype==(1));
	attack.WeaponPerk=(isUnarmed&&weapon.Weapon_UnarmedArmorPiercing)?(3):weaponPerk;
	attack.WeaponSubtype=weaponSubtype;
	attack.DmgMin=((use)==0?weapon.Weapon_DmgMin_0:((use)==1?weapon.Weapon_DmgMin_1:((use)==2?weapon.Weapon_DmgMin_2:0)));
	attack.DmgMax=((use)==0?weapon.Weapon_DmgMax_0:((use)==1?weapon.Weapon_DmgMax_1:((use)==2?weapon.Weapon_DmgMax_2:0)));
	attack.DmgType=dmgType;
	attack.BonusDmg=0;
	int bonusrange=0;
	if((@realWeapon!=null)&&realWeapon.Val3==(4))bonusrange+=4;
	if((@realWeapon!=null)&&realWeapon.Val4==(4))bonusrange+=4;
	if((@realWeapon!=null)&&realWeapon.Val5==(4))bonusrange+=4;
	if((@realWeapon!=null)&&realWeapon.Val6==(4))bonusrange+=4;
	if((@realWeapon!=null)&&realWeapon.Val7==(4))bonusrange+=4;
	if((@realWeapon!=null)&&realWeapon.Val8==(4))bonusrange+=4; 
	
	if((@realWeapon!=null))
	{
		wpnMaxDist+=bonusrange;
	}
	wpnMaxDist+=cr.Param[(352)];
	
	if((@realWeapon!=null)&&realWeapon.Val3==(102))wpnMaxDist*=2;
	if((@realWeapon!=null)&&realWeapon.Val4==(102))wpnMaxDist*=2;
	if((@realWeapon!=null)&&realWeapon.Val5==(102))wpnMaxDist*=2;
	if((@realWeapon!=null)&&realWeapon.Val6==(102))wpnMaxDist*=2;
	if((@realWeapon!=null)&&realWeapon.Val7==(102))wpnMaxDist*=2;
	if((@realWeapon!=null)&&realWeapon.Val8==(102))wpnMaxDist*=2;
	if((@realWeapon!=null)&&realWeapon.Val2==(102))wpnMaxDist*=2;
	
	if(cr.Param[(336)]>0&&cr.Param[(315)]>0&&!attack.IsUnarmed)
	wpnMaxDist+=5;
	
	if(wpnMaxDist<2&&isBurst)
	{
		if(target.IsPlayer())
		{
			if(cr.IsPlayer())
			{
				uint16 year=0,month=0,day=0,dayofweek=0,hour=0,minute=0,second=0;
				GetGameTime(__FullSecond,year,month,day,dayofweek,hour,minute,second);
				file f;
				f.open("logs/hexbot.txt","w");
				f.writeString(day+"."+month+" "+cr.Name+" more likely using hexbot on: "+target.Name);
				f.close();
			}
		}
		
	}
	
	attack.weaponMode=weaponMode;
	attack.weaponPid=weapon.ProtoId;    
	
	int baseToHit=skillVal;
	if(eyeDamage)
	baseToHit-=25;
	
	if(cr.Param[(553)]!=0)
	baseToHit+=((((weapon.Flags)&((0x00000080)))!=0)?-100:20);
	int handlingStrength=cr.Param[(0)];
	int reqStrength=weapon.Weapon_MinStrength;
	if(cr.Param[(407)]!=0)
	handlingStrength+=2;
	if(cr.Param[(395)]==1)
	handlingStrength+=1;
	if(handlingStrength<reqStrength)
	baseToHit-=(reqStrength-handlingStrength)*20;
	
	if(cr.Param[(395)]==1)
	baseToHit+=1; 
	
	@attack.Ammo=ammo;
	uint8 crDir=cr.Dir;
	uint8 tDir=target.Dir;
	
	if(isSneak&&cr.Param[(326)]!=0&&(crDir==tDir||((crDir+1)%6)==tDir||((crDir+5)%6)==tDir)&&
	!isGrenade&&
	(weaponSubtype!=(4)||realWeapon.Proto.Weapon_Anim1==(8)||(realWeapon.Proto.ProtoId==(22)||realWeapon.Proto.ProtoId==(241)||realWeapon.Proto.ProtoId==(300)||realWeapon.Proto.ProtoId==(122)||realWeapon.Proto.ProtoId==(8)||realWeapon.Proto.ProtoId==(18)||realWeapon.Proto.ProtoId==(404)||realWeapon.Proto.ProtoId==(313)||realWeapon.Proto.ProtoId==(398)||realWeapon.Proto.ProtoId==(388)||realWeapon.Proto.ProtoId==(394)||realWeapon.Proto.ProtoId==(619)||realWeapon.Proto.ProtoId==(16)||realWeapon.Proto.ProtoId==(402)||realWeapon.Proto.ProtoId==(390)||realWeapon.Proto.ProtoId==(24)||realWeapon.Proto.ProtoId==(406)||realWeapon.Proto.ProtoId==(396)||realWeapon.Proto.ProtoId==(120)||realWeapon.Proto.ProtoId==(352)||realWeapon.Proto.ProtoId==(391)))
	)
	attack.SilentDeathEffect=true; 
	
	if(isHthAttack)
	{
		attack.DmgMin+=cr.Param[(10)]*0.75;
		attack.DmgMax+=cr.Param[(10)]*0.75;
	}
	uint bonusbrd=0;
	if((@realWeapon!=null)&&realWeapon.Val3==(1))bonusbrd+=3;
	if((@realWeapon!=null)&&realWeapon.Val4==(1))bonusbrd+=3;
	if((@realWeapon!=null)&&realWeapon.Val5==(1))bonusbrd+=3;
	if((@realWeapon!=null)&&realWeapon.Val6==(1))bonusbrd+=3;
	if((@realWeapon!=null)&&realWeapon.Val7==(1))bonusbrd+=3;
	if((@realWeapon!=null)&&realWeapon.Val8==(1))bonusbrd+=3;
	if(target.Param[(786)]>0&&cr.Param[(187)]!=0)
	bonusbrd+=5*target.Param[(786)];
	
	if(weaponSubtype==(4)&&!isShotgun)
	attack.BonusDmg+=cr.Param[(305)]*2+cr.Param[(428)]*3+cr.Param[(395)]+cr.Param[(786)]+bonusbrd; 
	
	attack.DmgMul=2; 
	
	if((@ammo!=null))
	{
		attack.DRMod=ammo.Ammo_DrMod;
		attack.DMMod=ammo.Ammo_DmgMult;
		attack.DDMod=ammo.Ammo_DmgDiv;
		if(attack.DMMod==0)
		attack.DMMod=1;
		if(attack.DDMod==0)
		attack.DDMod=1;
	} 
	
	attack.TargetId=target.Id;
	int bonusaccu=0;
	if((@realWeapon!=null)&&realWeapon.Val3==(12))bonusaccu+=20;
	if((@realWeapon!=null)&&realWeapon.Val4==(12))bonusaccu+=20;
	if((@realWeapon!=null)&&realWeapon.Val5==(12))bonusaccu+=20;
	if((@realWeapon!=null)&&realWeapon.Val6==(12))bonusaccu+=20;
	if((@realWeapon!=null)&&realWeapon.Val7==(12))bonusaccu+=20;
	if((@realWeapon!=null)&&realWeapon.Val8==(12))bonusaccu+=20;
	if(target.IsPlayer()&&!attack.Attacker.IsPlayer())
	bonusaccu-=2*target.Param[(447)];
	
	int toHit=baseToHit+bonusaccu;
	toHit-=isHthAttack?(GetHitAim(aim)/2):GetHitAim(aim); 
	
	int distmod1=2;
	int distmod2=0;
	bool havelongrange=false;
	
	if((@realWeapon!=null)&&realWeapon.Val3==(12))havelongrange=true;
	if((@realWeapon!=null)&&realWeapon.Val4==(12))havelongrange=true;
	if((@realWeapon!=null)&&realWeapon.Val5==(12))havelongrange=true;
	if((@realWeapon!=null)&&realWeapon.Val6==(12))havelongrange=true;
	if((@realWeapon!=null)&&realWeapon.Val7==(12))havelongrange=true;
	if((@realWeapon!=null)&&realWeapon.Val8==(12))havelongrange=true;
	if(havelongrange)
	distmod1=4;
	
	if(cr.Param[(395)]==1)
	distmod1+=1;
	if(cr.Param[(395)]==1)
	distmod2+=1;
	
	int perception=cr.Param[(1)];
	int dist=GetDistantion(hx,hy,target.HexX,target.HexY);
	int acc=dist;
	int accloss=(crIsPlayer?(perception-2)*distmod1:(perception*distmod1));
	int sharpshooter=2*cr.Param[(315)]+2*cr.Param[(337)]+2*cr.Param[(340)]; 
	
	if(!isHthAttack)
	{
		if(dist<distmod2)
		acc+=distmod2;
		else
		acc-=accloss;
		if(-2*perception>acc)
		acc=-2*perception;
		acc-=sharpshooter;
		if(acc>0&&eyeDamage)
		acc*=3;
		acc*=-4-cr.Param[(395)];
		toHit+=acc;
		int blockers=map.GetCrittersPath(hx,hy,tx,ty,0.0f,dist,(0x01),null);
		if(!target.IsKnockout())
		blockers--;
		toHit-=10*blockers+cr.Param[(395)];
	}
	acmod=target.GetAC(attack.AimHead);
	if((@ammo!=null))
	acmod+=ammo.Ammo_AcMod;
	
	acmod-=attack.Attacker.Param[(1)]*5;
	if(acmod>0)
	toHit-=acmod;
	if(target.IsKnockout())
	toHit+=40+cr.Param[(395)];
	if(target.GetMultihex()>0)
	toHit+=15+cr.Param[(395)];
	int noHex=0;
	int IYF=0;
	Item@targetWeapon=target.GetItem(0,(1));
	bool checkface=(!(@targetWeapon!=null)&&dist==1)||
	((@targetWeapon!=null)&&targetWeapon.GetType()==(3)&&
	(targetWeapon.Proto.Weapon_Skill_0==(203))&&
	((0)==0?targetWeapon.Proto.Weapon_MaxDist_0:((0)==1?targetWeapon.Proto.Weapon_MaxDist_1:((0)==2?targetWeapon.Proto.Weapon_MaxDist_2:0)))>=uint(dist));
	if(target.Param[(444)]>0&&checkface&&dist==1)
	IYF=50;
	
	toHit=(((toHit)>(95+cr.Param[(395)]+normaldmg-noHex-IYF))?(95+cr.Param[(395)]+normaldmg-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit))); 
	
	bool in_your_face_valid=false;
	if(target.Param[(444)]>0&&checkface&&dist<3&&target.IsPlayer())
	{
		Item@targetWeapon=target.GetItem(0,(1));
		in_your_face_valid=(!(@targetWeapon!=null)&&dist==1)||
		((@targetWeapon!=null)&&targetWeapon.GetType()==(3)&&
		(targetWeapon.Proto.Weapon_Skill_0==(203))&&
		((0)==0?targetWeapon.Proto.Weapon_MaxDist_0:((0)==1?targetWeapon.Proto.Weapon_MaxDist_1:((0)==2?targetWeapon.Proto.Weapon_MaxDist_2:0)))>=uint(dist));
		
		if(in_your_face_valid)
		toHit=(((toHit)>(50+cr.Param[(395)]-noHex))?(toHit):(50+cr.Param[(395)]-noHex));
	} 
	
	int margin=toHit-Random(1,100);
	
	if(margin<0)
	{
		attack.InYourFaceEffect=in_your_face_valid;
		
		if(cr.Param[(527)]==0)
		{
			isCritical=((((-margin)/10)+(((@realWeapon!=null)&&realWeapon.IsDeteriorable()&&!((cr.Param[(534)]&((0x00000200)))!=0))?((20*realWeapon.Deterioration)/(10000)):0))>=Random(1,100));
			
			if(!isCritical)
			isCritical=(Random(0,1)==0&&
			(cr.Param[(559)]!=0||target.Param[(559)]!=0));
			if(isCritical)
			{
				int roll=Random(1,100)-5*(cr.Param[(6)]-5);
				if(roll<=20)
				roll=0+cr.Param[(395)];
				else if(roll<=50)
				roll=1+cr.Param[(395)];
				else if(roll<=75)
				roll=2+cr.Param[(395)];
				else if(roll<=95)
				roll=3+cr.Param[(395)];
				else
				roll=4;
				
				critfailFlags=CriticalFailureTable[5*weapon.Weapon_CriticalFailture+roll];
				if(critfailFlags==0)
				isCritical=false;
				hitRandomly=(((critfailFlags)&((0x00100000)))!=0);
			}
		}
	}
	else
	{
		isHit=true; 
		
		if(attack.SilentDeathEffect)
		isCritical=true;
		else
		{
			int bonuscrit=0;
			if((@realWeapon!=null)&&realWeapon.Val3==(47))bonuscrit+=8;
			if((@realWeapon!=null)&&realWeapon.Val4==(47))bonuscrit+=8;
			if((@realWeapon!=null)&&realWeapon.Val5==(47))bonuscrit+=8;
			if((@realWeapon!=null)&&realWeapon.Val6==(47))bonuscrit+=8;
			if((@realWeapon!=null)&&realWeapon.Val7==(47))bonuscrit+=8;
			if((@realWeapon!=null)&&realWeapon.Val8==(47))bonuscrit+=8;
			int critsyg=4;
			if(cr.Param[(322)]>0&&cr.Param[(445)]>0&&cr.Param[(425)]>0&&cr.Param[(427)]>0)
			critsyg=5;
			
			int chance=cr.Param[(14)]+(GetHitAim(aim)*(20+critsyg*cr.Param[(6)]))/100+bonuscrit;
			if(chance>100)
			chance=100;
			if(target.Param[(0)]>19)
			chance-=25;
			if(chance>100)
			chance=100;
			
			Item@usedArmor=target.GetItem(0,(3));
			Item@usedHelmet=target.GetItem(0,(4));
			
			int addchance=0;
			if(attack.AimHead&&(@usedHelmet!=null))
			addchance=usedHelmet.Proto.Armor_CMCritChance;
			if(!attack.AimHead&&(@usedArmor!=null))
			addchance=usedArmor.Proto.Armor_CMCritChance;
			if(attack.AimHead&&cr.Param[(425)]!=0&&(@usedHelmet!=null))
			addchance/=10;
			if(!attack.AimHead&&cr.Param[(445)]!=0&&(@usedArmor!=null))
			addchance/=5;
			if(target.Param[(441)]>0)
			chance=chance/2;
			chance+=addchance;
			
			if((@usedArmor!=null)&&usedArmor.Val3==(37)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=20;
			if((@usedArmor!=null)&&usedArmor.Val4==(37)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=20;
			if((@usedArmor!=null)&&usedArmor.Val5==(37)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=20;
			if((@usedArmor!=null)&&usedArmor.Val6==(37)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=20;
			if((@usedArmor!=null)&&usedArmor.Val7==(37)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=20;
			if((@usedArmor!=null)&&usedArmor.Val8==(37)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=20;
			if(target.Param[(423)]>0&&target.Param[(422)]>0&&target.Param[(405)]>0&&target.Param[(403)]>0)
			chance-=30;
			
			if((@usedArmor!=null)&&usedArmor.Val3==(109)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=30;
			if((@usedArmor!=null)&&usedArmor.Val4==(109)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=30;
			if((@usedArmor!=null)&&usedArmor.Val5==(109)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=30;
			if((@usedArmor!=null)&&usedArmor.Val6==(109)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=30;
			if((@usedArmor!=null)&&usedArmor.Val7==(109)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=30;
			if((@usedArmor!=null)&&usedArmor.Val8==(109)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=30;
			if((@usedArmor!=null)&&usedArmor.Val2==(109)&&(@usedArmor!=null)&&cr.Param[(353)]==0)chance-=30;
			
			if(attack.DmgType==(2))
			chance+=5; 
			
			if(!target.IsPlayer())
			chance+=cr.Param[(354)];
			
			if(target.Param[(784)]>0&&cr.Param[(187)]!=0)
			chance=10*target.Param[(784)];
			if(cr.Param[(431)]>1)
			chance=0;
			isCritical=(Random(0,100)<=chance);
			CriticalChance=chance;
			if(cr.Param[(358)]>0&&attack.WeaponSubtype==(2)||attack.WeaponSubtype==(1))
			isCritical=true;
		}  
		
		if(!isCritical&&isUnarmed)
		isCritical=Random(0,100)<=weapon.Weapon_UnarmedCriticalBonus;
	}
	
	if(hitRandomly)
	{
		Critter@randomTarget=ChooseRandomTarget(map,cr,target,wpnMaxDist);
		if((@randomTarget!=null))
		{
			@realTarget=randomTarget;
			tx=realTarget.HexX;
			ty=realTarget.HexY;
			attack.set_Aim((9));
			realTarget.ParamBase[(510)]=0;
			NotifyOops(cr,target,realTarget,results);
		}
	}
	else
	@realTarget=target; 
	
	cr.Action((6),(((!isHit&&isCritical&&!hitRandomly)?1:0)<<8)|(aim<<4)|use,realWeapon); 
	
	bool changedTarget=(hitRandomly&&(@realTarget!=null));
	
	LogAttack(map,cr,target,weapon,ammo,aim,isBurst,ammoRound,((@realWeapon!=null)?realWeapon.AmmoCount:ammoRound),isHit,isCritical,critfailFlags); 
	
	if(!isHit&&isCritical&&(!hitRandomly||@realTarget==null))
	{
		CriticalFailure(cr,weapon,use,ammo,critfailFlags,results);
		return;
	} 
	
	bool criticalHit=isHit&&isCritical;
	
	if(isHthAttack)
	{
		if(isHit)
		{
			ApplyDamage(attack,realTarget,1,criticalHit,true,results,0);
		}
		else
		{
			if(changedTarget)
			ApplyDamage(attack,realTarget,1,false,false,results,0);
			else
			NotifyMiss(cr,results);
		}
	}
	else if((weaponSubtype==(4))&&!isBurst&&!isRocket&&!isFlamethrower)
	{
		if(isHit||changedTarget)
		{
			ApplyDamage(attack,realTarget,1,criticalHit,!changedTarget,results,0);
		}
		else
		{
			array<Critter@>critsLine;
			attack.set_Aim((9));
			map.GetCrittersPath(hx,hy,tx,ty,0.0f,wpnMaxDist,(0x03),critsLine);
			int bl=0;
			bool anyHit=false;
			for(int i=0,j=critsLine.length();(i<j)&&!anyHit;i++)
			{
				if(critsLine[i].Id==realTarget.Id)
				{
					bl++;
					continue;
				} 
				
				dist=GetDistantion(hx,hy,critsLine[i].HexX,critsLine[i].HexY);
				acc=dist;
				toHit=baseToHit;
				if(dist<distmod2)
				acc+=distmod2;
				else
				acc-=accloss;
				if(-2*perception>acc)
				acc=-2*perception;
				acc-=sharpshooter;
				if(acc>0&&eyeDamage)
				acc*=3;
				acc*=-4;
				toHit+=acc;
				acmod=critsLine[i].GetAC(false);
				acmod-=attack.Attacker.Param[(1)]*5;
				if((@ammo!=null))
				acmod+=ammo.Ammo_AcMod;
				if(acmod>0)
				toHit-=acmod;
				toHit-=10*bl;
				if(critsLine[i].IsKnockout())
				toHit+=40+cr.Param[(395)];
				else
				bl++;
				if(critsLine[i].GetMultihex()>0)
				toHit+=15+cr.Param[(395)];
				if(target.Param[(444)]>0&&checkface&&dist==1&&target.IsPlayer())
				IYF=50;
				toHit=(((toHit)>(95+cr.Param[(395)]+normaldmg-noHex-IYF))?(95+cr.Param[(395)]+normaldmg-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
				toHit/=3;
				if(Random(1,100)<=toHit)
				{
					NotifyOops(cr,target,critsLine[i],results);
					@normalTarget=critsLine[i];
					useNormal=true;
					ApplyDamage(attack,normalTarget,1,false,false,results,0);
					anyHit=true;
				}
			}
			if(!anyHit)
			NotifyMiss(cr,results);
		}
	}
	else if(isFlamethrower)
	{
		
		if(changedTarget)
		{
			dist=GetDistantion(hx,hy,tx,ty);
			acc=dist;
			toHit=baseToHit;
			if(dist<distmod2)
			acc+=distmod2;
			else
			acc-=accloss;
			if(-2*perception>acc)
			acc=-2*perception+cr.Param[(395)];
			acc-=sharpshooter;
			if(acc>0&&eyeDamage)
			acc*=3;
			acc*=-4;
			toHit+=acc;
			acmod=realTarget.GetAC(false);
			acmod-=attack.Attacker.Param[(1)]*5;
			if((@ammo!=null))
			acmod+=ammo.Ammo_AcMod;
			if(acmod>0)
			toHit-=acmod;
			if(realTarget.IsKnockout())
			toHit+=40+cr.Param[(395)];
			if(realTarget.GetMultihex()>0)
			toHit+=15+cr.Param[(395)];
			int blockers=map.GetCrittersPath(hx,hy,tx,ty,0.0f,dist,(0x01),null);
			if(!realTarget.IsKnockout())
			blockers--;
			toHit-=10*blockers+cr.Param[(395)];
			if(target.Param[(444)]>0&&checkface&&dist==1&&target.IsPlayer())
			IYF=50;
			toHit=(((toHit)>(95+cr.Param[(395)]+normaldmg-noHex-IYF))?(95+cr.Param[(395)]+normaldmg-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
		} 
		
		if(criticalHit)
		toHit+=20+cr.Param[(395)]; 
		
		array<Critter@>critsHit(0);
		array<uint>critsHitBullets(0);
		int len_=0;
		
		if(Random(1,100)<=toHit)
		{
			critsHit.resize(1);
			@critsHit[0]=realTarget;
			critsHitBullets.resize(1);
			critsHitBullets[0]+=1;
			len_++;
		}
		
		array<Critter@>lineCentral;
		map.GetCrittersPath(hx,hy,tx,ty,0.0f,wpnMaxDist,(0x03),lineCentral);
		int bl;
		
		bool threeLines=true;
		
		for(int lineCount=0,lineMax=(threeLines?1:3);lineCount<lineMax;lineCount++)
		{
			
			bl=0;
			for(int i=0,j=lineCentral.length();i<j;i++)
			{
				
				toHit=baseToHit-10*bl;
				dist=GetDistantion(hx,hy,lineCentral[i].HexX,lineCentral[i].HexY);
				acc=dist;
				if(dist<distmod2)
				acc+=distmod2;
				else
				acc-=accloss;
				if(-2*perception>acc)
				acc=-2*perception+cr.Param[(395)];
				acc-=sharpshooter;
				if(acc>0&&eyeDamage)
				acc*=3+cr.Param[(395)];
				acc*=-4+cr.Param[(395)];
				toHit+=acc;
				acmod=lineCentral[i].GetAC(false);
				acmod-=attack.Attacker.Param[(1)]*5;
				if((@ammo!=null))
				acmod+=ammo.Ammo_AcMod;
				if(acmod>0)
				toHit-=acmod;
				if(lineCentral[i].IsKnockout())
				toHit+=40+cr.Param[(395)];
				else
				bl++;
				if(lineCentral[i].GetMultihex()>0)
				toHit+=15+cr.Param[(395)];
				if(target.Param[(444)]>0&&checkface&&dist==1&&target.IsPlayer())
				IYF=50;
				toHit=(((toHit)>(95+cr.Param[(395)]+normaldmg-noHex-IYF))?(95+cr.Param[(395)]+normaldmg-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
				if(Random(1,100)<=toHit)
				{
					int crIndex=FindCritterInArray(critsHit,lineCentral[i]);
					if(crIndex==-1)
					{
						critsHit.resize(len_+1);
						@critsHit[len_]=lineCentral[i];
						critsHitBullets.resize(len_+1);
						crIndex=len_;
						len_++;
					}
					critsHitBullets[crIndex]+=1;
				}
			}
			
		}
		
		if(threeLines)
		{
			uint8 leftDir=GetOffsetDir(hx,hy,tx,ty,89.0f);
			uint16 sx=hx;
			uint16 sy=hy;
			uint16 ex=tx;
			uint16 ey=ty;
			
			map.MoveHexByDir(sx,sy,leftDir,1);
			map.MoveHexByDir(ex,ey,leftDir,1);
			
			array<Critter@>lineLeft;
			map.GetCrittersPath(sx,sy,ex,ey,0.0f,wpnMaxDist-1,(0x03),lineLeft);
			int leftStart=0;
			int leftLen=lineLeft.length();
			while((leftStart<leftLen)&&(GetDistantion(hx,hy,lineLeft[leftStart].HexX,lineLeft[leftStart].HexY))<3)
			leftStart++;
			
			for(int i=leftStart,j=leftLen;i<j;i++)
			{
				
				dist=GetDistantion(hx,hy,lineLeft[i].HexX,lineLeft[i].HexY);
				bl=map.GetCrittersPath(hx,hy,lineLeft[i].HexX,lineLeft[i].HexY,0.0f,dist,(0x01),null)-1;
				toHit=baseToHit-10*bl;
				acc=dist;
				if(dist<distmod2)
				acc+=distmod2;
				else
				acc-=accloss;
				if(-2*perception>acc)
				acc=-2*perception+cr.Param[(395)];
				acc-=sharpshooter;
				if(acc>0&&eyeDamage)
				acc*=3+cr.Param[(395)];
				acc*=-4+cr.Param[(395)];
				toHit+=acc+cr.Param[(395)];
				acmod=lineLeft[i].GetAC(false);
				acmod-=attack.Attacker.Param[(1)]*5;
				if((@ammo!=null))
				acmod+=ammo.Ammo_AcMod;
				if(acmod>0)
				toHit-=acmod;
				if(lineLeft[i].IsKnockout())
				toHit+=40+cr.Param[(395)];
				if(lineLeft[i].GetMultihex()>0)
				toHit+=15+cr.Param[(395)];
				if(target.Param[(444)]>0&&checkface&&dist==1&&target.IsPlayer())
				IYF=50;
				toHit=(((toHit)>(95+cr.Param[(395)]+normaldmg-noHex-IYF))?(95+cr.Param[(395)]+normaldmg-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
				if(Random(1,100)<=toHit)
				{
					int crIndex=FindCritterInArray(critsHit,lineLeft[i]);
					if(crIndex==-1)
					{
						critsHit.resize(len_+1);
						@critsHit[len_]=lineLeft[i];
						critsHitBullets.resize(len_+1);
						crIndex=len_;
						len_++;
					}
					critsHitBullets[crIndex]+=1;
				}
			}
			
			uint8 rightDir=GetOffsetDir(hx,hy,tx,ty,-89.0f);
			sx=hx;
			sy=hy;
			ex=tx;
			ey=ty;
			
			map.MoveHexByDir(sx,sy,rightDir,1);
			map.MoveHexByDir(ex,ey,rightDir,1);
			
			array<Critter@>lineRight;
			map.GetCrittersPath(sx,sy,ex,ey,0.0f,wpnMaxDist-1,(0x03),lineRight);
			int rightStart=0;
			int rightLen=lineRight.length();
			while((rightStart<rightLen)&&(GetDistantion(hx,hy,lineRight[rightStart].HexX,lineRight[rightStart].HexY))<3)
			rightStart++;
			for(int i=rightStart,j=rightLen;i<j;i++)
			{
				
				dist=GetDistantion(hx,hy,lineRight[i].HexX,lineRight[i].HexY);
				bl=map.GetCrittersPath(hx,hy,lineRight[i].HexX,lineRight[i].HexY,0.0f,dist,(0x01),null)-1;
				toHit=baseToHit-10*bl;
				acc=dist;
				if(dist<distmod2)
				acc+=distmod2;
				else
				acc-=accloss;
				if(-2*perception>acc)
				acc=-2*perception;
				acc-=sharpshooter;
				if(acc>0&&eyeDamage)
				acc*=3+cr.Param[(395)];
				acc*=-4+cr.Param[(395)];
				toHit+=acc;
				acmod=lineRight[i].GetAC(false);
				acmod-=attack.Attacker.Param[(1)]*5;
				if((@ammo!=null))
				acmod+=ammo.Ammo_AcMod;
				if(acmod>0)
				toHit-=acmod;
				if(lineRight[i].IsKnockout())
				toHit+=40+cr.Param[(395)];
				if(lineRight[i].GetMultihex()>0)
				toHit+=15+cr.Param[(395)];
				if(target.Param[(444)]>0&&checkface&&dist==1&&target.IsPlayer())
				IYF=50;
				toHit=(((toHit)>(95+cr.Param[(395)]+normaldmg-noHex-IYF))?(95+cr.Param[(395)]+normaldmg-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
				if(Random(1,100)<=toHit)
				{
					int crIndex=FindCritterInArray(critsHit,lineRight[i]);
					if(crIndex==-1)
					{
						critsHit.resize(len_+1);
						@critsHit[len_]=lineRight[i];
						critsHitBullets.resize(len_+1);
						crIndex=len_;
						len_++;
					}
					critsHitBullets[crIndex]+=1;
				}
			}
		}
		
		for(int i=0,j=len_;i<j;i++)
		{
			ApplyDamage(attack,critsHit[i],1,(realTarget.Id==critsHit[i].Id)&&criticalHit,(!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&!changedTarget)||((cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&critsHit[i].Id==target.Id),results,CriticalChance);
		}
		
		if(!changedTarget&&!attack.TargetHit)
		NotifyMiss(cr,results);
	}
	else if(((weaponSubtype==(4))&&isBurst)||(isFlamethrower&&isBurst))
	{
		
		if(changedTarget)
		{
			dist=GetDistantion(hx,hy,tx,ty);
			acc=dist;
			toHit=baseToHit;
			if(dist<distmod2)
			acc+=distmod2;
			else
			acc-=accloss;
			if(-2*perception>acc)
			acc=-2*perception+cr.Param[(395)];
			acc-=sharpshooter;
			if(acc>0&&eyeDamage)
			acc*=3+cr.Param[(395)];
			acc*=-4+cr.Param[(395)];
			toHit+=acc;
			acmod=realTarget.GetAC(false);
			acmod-=attack.Attacker.Param[(1)]*5;
			if((@ammo!=null))
			acmod+=ammo.Ammo_AcMod;
			if(acmod>0)
			toHit-=acmod;
			if(realTarget.IsKnockout())
			toHit+=40+cr.Param[(395)];
			if(realTarget.GetMultihex()>0)
			toHit+=15+cr.Param[(395)];
			int blockers=map.GetCrittersPath(hx,hy,tx,ty,0.0f,dist,(0x01),null);
			if(!realTarget.IsKnockout())
			blockers--;
			toHit-=10*blockers+cr.Param[(395)];
			if(target.Param[(444)]>0&&checkface&&dist==1)
			IYF=50;
			toHit=(((toHit)>(95+cr.Param[(395)]+normaldmg-noHex-IYF))?(95+cr.Param[(395)]+normaldmg-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
		} 
		
		if(criticalHit)
		toHit+=20; 
		
		uint rounds=ammoRound;
		if((@realWeapon!=null)&&realWeapon.AmmoCount<rounds)
		rounds=realWeapon.AmmoCount;
		if((@realWeapon!=null)&&isFlamethrower&&realWeapon.AmmoCount>=rounds)
		rounds=1;
		if((@realWeapon!=null)&&isFlamethrower&&realWeapon.AmmoCount<rounds)
		{
			cr.Say((11),"not enough ammo.");
			return;
		}
		array<Critter@>critsHit(0);
		array<uint>critsHitBullets(0);
		
		int len_=0;
		int volleyRounds=((((rounds/6))>(1))?((rounds/6)):(1));
		
		int curRounds=0;
		for(int i=0;i<volleyRounds;i++)
		{
			if(Random(1,100)<=toHit)
			curRounds++;
		}
		
		if(curRounds!=0)
		{
			critsHit.resize(1);
			critsHitBullets.resize(1);
			@critsHit[0]=realTarget;
			critsHitBullets[0]=curRounds;
			len_++;
		}
		volleyRounds-=curRounds;
		
		array<Critter@>lineCentral;
		map.GetCrittersPath(hx,hy,tx,ty,0.0f,wpnMaxDist,(0x03),lineCentral); 
		
		if(lineCentral.length()==0)
		{    
			
		}
		
		int bl=0;
		curRounds=0;
		for(int i=0,j=lineCentral.length();(i<j)&&(volleyRounds>0);i++)
		{
			if(lineCentral[i].Id==realTarget.Id)
			{
				bl++;
				continue;
			}
			
			toHit=baseToHit-10*bl;
			dist=GetDistantion(hx,hy,lineCentral[i].HexX,lineCentral[i].HexY);
			acc=dist;
			if(dist<distmod2)
			acc+=distmod2+cr.Param[(395)];
			else
			acc-=accloss;
			if(-2*perception>acc)
			acc=-2*perception+cr.Param[(395)];
			acc-=sharpshooter;
			if(acc>0&&eyeDamage)
			acc*=3+cr.Param[(395)];
			acc*=-4+cr.Param[(395)];
			toHit+=acc;
			acmod=lineCentral[i].GetAC(false);
			acmod-=attack.Attacker.Param[(1)]*5;
			if((@ammo!=null))
			acmod+=ammo.Ammo_AcMod;
			if(acmod>0)
			toHit-=acmod;
			toHit=(((toHit)>(95+normaldmg+cr.Param[(395)]))?(95+normaldmg+cr.Param[(395)]):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
			if(lineCentral[i].IsKnockout())
			toHit+=40+cr.Param[(395)];
			else
			bl++;
			if(lineCentral[i].GetMultihex()>0)
			toHit+=15+cr.Param[(395)];
			
			curRounds=0;
			for(int k=0;k<volleyRounds;++k)
			{
				if(Random(1,100)<=toHit)
				curRounds++;
			}
			volleyRounds-=curRounds;
			
			if(curRounds>0)
			{
				int crIndex=FindCritterInArray(critsHit,lineCentral[i]);
				if(crIndex==-1)
				{
					critsHit.resize(len_+1);
					@critsHit[len_]=lineCentral[i];
					critsHitBullets.resize(len_+1);
					critsHitBullets[len_]=0;
					crIndex=len_;
					len_++;
				}
				critsHitBullets[crIndex]+=curRounds;
			}
		} 
		
		bool threeLines=(GetDistantion(hx,hy,lineCentral[0].HexX,lineCentral[0].HexY)>1)&&(!isShotgun)&&(!isBozar)&&(!isLSW); 
		
		for(int lineCount=0,lineMax=(threeLines?1:3);lineCount<lineMax;lineCount++)
		{
			
			if(lineCount==0)
			{
				volleyRounds=rounds-(((rounds+1)/3)+(rounds/3));
				volleyRounds-=(((rounds/6)>(1))?(rounds/6):(1));
			}
			else
			{
				if(lineCount==1)
				volleyRounds=(rounds+1)/3;
				else
				volleyRounds=rounds/3;
			}
			
			if(volleyRounds==0)
			continue; 
			
			bl=0;
			for(int i=0,j=lineCentral.length();(i<j)&&(volleyRounds>0);i++)
			{
				
				toHit=baseToHit-10*bl;
				dist=GetDistantion(hx,hy,lineCentral[i].HexX,lineCentral[i].HexY);
				acc=dist;
				if(dist<distmod2)
				acc+=distmod2;
				else
				acc-=accloss;
				if(-2*perception>acc)
				acc=-2*perception;
				acc-=sharpshooter;
				if(acc>0&&eyeDamage)
				acc*=3;
				acc*=-4;
				toHit+=acc;
				acmod=lineCentral[i].GetAC(false);
				acmod-=attack.Attacker.Param[(1)]*5;
				if((@ammo!=null))
				acmod+=ammo.Ammo_AcMod;
				if(acmod>0)
				toHit-=acmod;
				if(lineCentral[i].IsKnockout())
				toHit+=40;
				if(lineCentral[i].GetMultihex()>0)
				toHit+=15;
				if(target.Param[(444)]>0&&checkface&&dist==1&&target.IsPlayer())
				IYF=50;
				toHit=(((toHit)>(95+normaldmg+cr.Param[(395)]-noHex-IYF))?(95+normaldmg+cr.Param[(395)]-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
				bl++;
				
				curRounds=0;
				for(int k=0;k<volleyRounds;++k)
				{
					if(Random(1,100)<=toHit)
					curRounds++;
				}
				volleyRounds-=curRounds;
				
				if(curRounds>0)
				{
					int crIndex=FindCritterInArray(critsHit,lineCentral[i]);
					if(crIndex==-1)
					{
						critsHit.resize(len_+1);
						@critsHit[len_]=lineCentral[i];
						critsHitBullets.resize(len_+1);
						critsHitBullets[len_]=0;
						crIndex=len_;
						len_++;
					}
					critsHitBullets[crIndex]+=curRounds;
				}
			}
			
		}
		int shotline=1;
		if(threeLines)
		{
			
			volleyRounds=(rounds+1)/3;
			if(volleyRounds>0)
			{ 
				
				uint8 leftDir=GetOffsetDir(hx,hy,tx,ty,89.0f);
				uint16 sx=hx;
				uint16 sy=hy;
				uint16 ex=tx;
				uint16 ey=ty;
				
				map.MoveHexByDir(sx,sy,leftDir,shotline);
				map.MoveHexByDir(ex,ey,leftDir,shotline);
				
				array<Critter@>lineLeft;
				map.GetCrittersPath(sx,sy,ex,ey,0.0f,wpnMaxDist-shotline,(0x03),lineLeft);
				int leftStart=0;
				int leftLen=lineLeft.length();
				while((leftStart<leftLen)&&(GetDistantion(hx,hy,lineLeft[leftStart].HexX,lineLeft[leftStart].HexY))<3)
				leftStart++;
				
				for(int i=leftStart,j=leftLen;(i<j)&&(volleyRounds>0);i++)
				{
					
					dist=GetDistantion(hx,hy,lineLeft[i].HexX,lineLeft[i].HexY);
					bl=map.GetCrittersPath(hx,hy,lineLeft[i].HexX,lineLeft[i].HexY,0.0f,dist,(0x01),null)-1;
					toHit=baseToHit-10*bl;
					acc=dist;
					if(dist<distmod2)
					acc+=distmod2;
					else
					acc-=accloss;
					if(-2*perception>acc)
					acc=-2*perception+cr.Param[(395)];
					acc-=sharpshooter+cr.Param[(395)];
					if(acc>0&&eyeDamage)
					acc*=3+cr.Param[(395)];
					acc*=-4+cr.Param[(395)];
					toHit+=acc+cr.Param[(395)];
					acmod=lineLeft[i].GetAC(false);
					acmod-=attack.Attacker.Param[(1)]*5;
					if((@ammo!=null))
					acmod+=ammo.Ammo_AcMod;
					if(acmod>0)
					toHit-=acmod+cr.Param[(395)];
					if(lineLeft[i].IsKnockout())
					toHit+=40+cr.Param[(395)];
					if(lineLeft[i].GetMultihex()>0)
					toHit+=15+cr.Param[(395)];
					if(target.Param[(444)]>0&&checkface&&dist==1&&target.IsPlayer())
					IYF=50;
					toHit=(((toHit)>(95+normaldmg+cr.Param[(395)]-noHex-IYF))?(95+normaldmg+cr.Param[(395)]-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
					
					curRounds=0;
					for(int k=0;k<volleyRounds;++k)
					{
						if(Random(1,100)<=toHit)
						curRounds++;
					}
					volleyRounds-=curRounds;
					
					if(curRounds>0)
					{
						int crIndex=FindCritterInArray(critsHit,lineLeft[i]);
						if(crIndex==-1)
						{
							critsHit.resize(len_+shotline);
							@critsHit[len_]=lineLeft[i];
							critsHitBullets.resize(len_+shotline);
							critsHitBullets[len_]=0;
							crIndex=len_;
							len_++;
						}
						critsHitBullets[crIndex]+=curRounds;
					}
				}
			}  
			
			volleyRounds=(rounds)/3;
			
			if(volleyRounds>0)
			{
				uint8 rightDir=GetOffsetDir(hx,hy,tx,ty,-89.0f);
				
				uint16 sx=hx;
				uint16 sy=hy;
				uint16 ex=tx;
				uint16 ey=ty;
				
				map.MoveHexByDir(sx,sy,rightDir,shotline);
				map.MoveHexByDir(ex,ey,rightDir,shotline);
				
				array<Critter@>lineRight;
				map.GetCrittersPath(sx,sy,ex,ey,0.0f,wpnMaxDist-shotline,(0x03),lineRight);
				int rightStart=0;
				int rightLen=lineRight.length();
				while((rightStart<rightLen)&&(GetDistantion(hx,hy,lineRight[rightStart].HexX,lineRight[rightStart].HexY))<3)
				rightStart++;
				for(int i=rightStart,j=rightLen;(i<j)&&(volleyRounds>0);i++)
				{
					
					dist=GetDistantion(hx,hy,lineRight[i].HexX,lineRight[i].HexY);
					bl=map.GetCrittersPath(hx,hy,lineRight[i].HexX,lineRight[i].HexY,0.0f,dist,(0x01),null)-1;
					toHit=baseToHit-10*bl;
					acc=dist;
					if(dist<distmod2)
					acc+=distmod2+cr.Param[(395)];
					else
					acc-=accloss;
					if(-2*perception>acc)
					acc=-2*perception+cr.Param[(395)];
					acc-=sharpshooter;
					if(acc>0&&eyeDamage)
					acc*=3+cr.Param[(395)];
					acc*=-4+cr.Param[(395)];
					toHit+=acc+cr.Param[(395)];
					acmod=lineRight[i].GetAC(false);
					acmod-=attack.Attacker.Param[(1)]*5;
					if((@ammo!=null))
					acmod+=ammo.Ammo_AcMod;
					if(acmod>0)
					toHit-=acmod;
					if(lineRight[i].IsKnockout())
					toHit+=40+cr.Param[(395)];
					if(lineRight[i].GetMultihex()>0)
					toHit+=15+cr.Param[(395)];
					if(target.Param[(444)]>0&&checkface&&dist==1&&target.IsPlayer())
					IYF=50;
					toHit=(((toHit)>(95+cr.Param[(395)]+normaldmg-noHex-IYF))?(95+cr.Param[(395)]+normaldmg-noHex-IYF):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
					
					curRounds=0;
					for(int k=0;k<volleyRounds;++k)
					{
						if(Random(1,100)<=toHit)
						curRounds++;
					}
					volleyRounds-=curRounds;
					
					if(curRounds>0)
					{
						int crIndex=FindCritterInArray(critsHit,lineRight[i]);
						if(crIndex==-1)
						{
							critsHit.resize(len_+shotline);
							@critsHit[len_]=lineRight[i];
							critsHitBullets.resize(len_+shotline);
							critsHitBullets[len_]=0;
							crIndex=len_;
							len_++;
						}
						critsHitBullets[crIndex]+=curRounds;
					}
				}
			}
		}
		
		for(int i=0,j=len_;i<j;i++)
		{
			ApplyDamage(attack,critsHit[i],critsHitBullets[i],(realTarget.Id==critsHit[i].Id)&&criticalHit,(!(cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&!changedTarget)||((cr.IsNpc()&&!(((cr.Param[(534)]&((0x00000020)))!=0)))&&critsHit[i].Id==target.Id),results,CriticalChance);
		}
		
		if(!changedTarget&&!attack.TargetHit)
		NotifyMiss(cr,results);
	} 
	
	else if(isRocket||(weaponSubtype==(3)))
	{
		bool exploding=isRocket||isGrenade;
		
		if(isHit||changedTarget)
		{
			if(exploding)
			CommenceExplosion(attack,map,tx,ty,realTarget,weapPid,criticalHit,realTarget.Id,isRocket,results,isExplodeRocket);
			else
			ApplyDamage(attack,realTarget,1,criticalHit,!changedTarget,results,0);
		}
		else
		{
			
			attack.set_Aim((9));
			
			if(weaponSubtype==(3))
			sharpshooter=0;
			uint16 bx=0;
			uint16 by=0;
			uint16 pbx=0;
			uint16 pby=0;
			array<Critter@>critsLine;
			map.GetCrittersPath(hx,hy,tx,ty,0.0f,wpnMaxDist,(0x03),critsLine,pbx,pby,bx,by);
			
			int bl=0;
			bool anyHit=false;
			for(int i=0,j=critsLine.length();(i<j)&&!anyHit;i++)
			{
				if(critsLine[i].Id==realTarget.Id)
				{
					bl++;
					continue;
				} 
				
				dist=GetDistantion(hx,hy,critsLine[i].HexX,critsLine[i].HexY);
				acc=dist;
				toHit=baseToHit;
				if(dist<distmod2)
				acc+=distmod2;
				else
				acc-=accloss;
				if(-2*perception>acc)
				acc=-2*perception+cr.Param[(395)];
				acc-=sharpshooter;
				if(acc>0&&eyeDamage)
				acc*=3+cr.Param[(395)];
				acc*=-4+cr.Param[(395)];
				toHit+=acc;
				acmod=critsLine[i].GetAC(false);
				acmod-=attack.Attacker.Param[(1)]*5;
				if((@ammo!=null))
				acmod+=ammo.Ammo_AcMod;
				if(acmod>0)
				toHit-=acmod;
				toHit-=10*bl;
				if(critsLine[i].IsKnockout())
				toHit+=40+cr.Param[(395)];
				else
				bl++;
				if(critsLine[i].GetMultihex()>0)
				toHit+=15+cr.Param[(395)];
				toHit=(((toHit)>(95+cr.Param[(395)]+normaldmg-noHex))?(95+cr.Param[(395)]+normaldmg-noHex):(((toHit)<(5+cr.Param[(395)]))?(5+cr.Param[(395)]):(toHit)));
				toHit/=3;
				if(Random(1,100)<=toHit)
				{
					tx=critsLine[i].HexX;
					ty=critsLine[i].HexY;
					@normalTarget=critsLine[i];
					anyHit=true;
				}
			}
			
			if(anyHit)
			{
				NotifyOops(cr,target,normalTarget,results);
				useNormal=true;
				
				if(exploding)
				CommenceExplosion(attack,map,tx,ty,normalTarget,weapPid,false,realTarget.Id,isRocket,results,isExplodeRocket);
				else
				ApplyDamage(attack,normalTarget,1,false,false,results,0);
			}
			else
			{
				useHex=true;
				NotifyMiss(cr,results);
				if(isGrenade)
				{
					tx=realTarget.HexX;
					ty=realTarget.HexY;
					int newdist=GetDistantion(hx,hy,tx,ty)+1;
					map.MoveHexByDir(tx,ty,Random(0,5),Random(1,newdist/2));
					newdist=GetDistantion(hx,hy,tx,ty);
					map.GetCrittersPath(hx,hy,tx,ty,0.0f,newdist,(0x01),null,tx,ty,bx,by);
				}
				else
				{
					if(isRocket)
					{
						tx=bx;
						ty=by;
						int newdist=GetDistantion(hx,hy,tx,ty)+1;
						map.MoveHexByDir(tx,ty,Random(0,5),Random(1,newdist/2));
						newdist=GetDistantion(hx,hy,tx,ty);
						map.GetCrittersPath(hx,hy,tx,ty,0.0f,newdist,(0x01),null,tx,ty,bx,by);
					}
					else
					{
						tx=pbx;
						ty=pby;
					}
				}
				
				if(exploding)
				CommenceExplosion(attack,map,tx,ty,null,weapPid,false,realTarget.Id,isRocket,results,isExplodeRocket);
			}
		}
	}  
	
	runTree(results,0);   
	
	if(((use)==0?weapon.Weapon_Effect_0:((use)==1?weapon.Weapon_Effect_1:((use)==2?weapon.Weapon_Effect_2:0)))!=0)
	{
		if(useHex)
		map.RunFlyEffect(((use)==0?weapon.Weapon_Effect_0:((use)==1?weapon.Weapon_Effect_1:((use)==2?weapon.Weapon_Effect_2:0))),cr,null,hx,hy,tx,ty);
		else
		map.RunFlyEffect(((use)==0?weapon.Weapon_Effect_0:((use)==1?weapon.Weapon_Effect_1:((use)==2?weapon.Weapon_Effect_2:0))),cr,(useNormal?normalTarget:realTarget),hx,hy,tx,ty);
	}
	
	if(ammoRound>0&&(@realWeapon!=null)&&cr.Param[(522)]==0&&dmgType!=(3)&&cr.Param[(359)]==0)
	{
		if(realWeapon.AmmoCount<=ammoRound)
		realWeapon.AmmoCount=0;
		else
		realWeapon.AmmoCount-=ammoRound;
		realWeapon.Update();
	}
	
	if(ammoRound>0&&(@realWeapon!=null)&&cr.Param[(522)]==0&&dmgType==(3)&&cr.Param[(359)]==0)
	{
		if(!isBurst)
		{
			if(realWeapon.AmmoCount<=ammoRound)
			realWeapon.AmmoCount=0;
			else
			realWeapon.AmmoCount-=ammoRound;
			realWeapon.Update();
		}
		else
		{
			int ammo_charge=0;
			switch(weapPid)
			{
				case(1277):ammo_charge=15;break;
				case(25582):ammo_charge=15;break;
				case(25452):ammo_charge=10;break;
			}
			if(realWeapon.AmmoCount<=ammo_charge)
			realWeapon.AmmoCount=0;
			else
			realWeapon.AmmoCount-=ammo_charge;
		}
	}
	
	if((@realWeapon!=null))
	{
		if(realWeapon.IsDeteriorable()&&!((cr.Param[(534)]&((0x00000200)))!=0))
		WearItem(cr,realWeapon,((((cr.Param[realWeapon.Proto.Weapon_Skill_0]-cr.Param[(1)]*10)/10)>(100000))?(100000):((((cr.Param[realWeapon.Proto.Weapon_Skill_0]-cr.Param[(1)]*10)/10)<(1))?(1):((cr.Param[realWeapon.Proto.Weapon_Skill_0]-cr.Param[(1)]*10)/10)))); 
		
		if(wpnIsRemoved&&cr.Param[(522)]==0)
		{
			bool placeOnHex=(skillNum==(205)&&!isGrenade);
			if(realWeapon.IsStackable())
			{
				
				if(placeOnHex)
				map.AddItem(tx,ty,weapPid,1); 
				
				if(realWeapon.GetCount()>1)
				realWeapon.SetCount(realWeapon.GetCount()-1);
				else
				DeleteItem(realWeapon);
			}
			else
			{
				MoveItem(realWeapon,0,map,tx,ty);
			}
		}
	} 
	
	if(!attack.TargetHit)
	{
		if(!target.IsPlayer())
		AI_TrySayCombatText(target,(3));
		target.Action((13),0,null);
	}
}    

void ApplyDamage(AttackStruct&attack,Critter&target,int rounds,bool isCritical,bool intentionally,array<CombatRes>&results,int CriticalChance)
{
	Item@usedArmor=(target.GetItem(0,(attack.AimHead)?(4):(3)));
	
	int dmgMul=attack.DmgMul;
	int bt=target.Param[(67)];
	int IsTownRole=target.Param[(89)];
	int eff=0;
	int msgEff=0;
	int dmgmulti=100;
	int weaponPerk=attack.WeaponPerk;
	Critter@attacker=attack.Attacker;
	bool validAttacker=(@attacker!=null);
	Map@map=target.GetMap();
	bool isBloodyMess=attack.BloodyMess;
	bool isCombatText=attack.CombatMessage;
	Item@realWeapon=attack.RealWeapon;
	int aim=attack.Aim;
	int extraMessage=0;
	int extraMessageSelf=0;
	bool isShotgun=((@attack.Ammo!=null)&&(attack.Ammo.Ammo_Caliber==11));
	
	uint16 ammoPid=attack.ammoPid;
	if((@attack.Ammo!=null))ammoPid=attack.Ammo.ProtoId;
	
	bool isBanhammer=((@realWeapon!=null)?realWeapon.Proto.ProtoId==(617):false);
	bool isHolySpear=((@realWeapon!=null)?realWeapon.Proto.ProtoId==(618):false); 
	
	bool targetIsPlayer=target.IsPlayer();
	bool attackerIsPlayer=((@attacker!=null)?attacker.IsPlayer():false);
	bool attackerIsPaszczur=((@attacker!=null)?attacker.GetProtoId()==(525):false);
	uint16 weapPid=attack.weaponPid;
	
	bool isSwingThrustWeapon=((@realWeapon!=null)?(weapPid==517||weapPid==160||weapPid==236||weapPid==530||weapPid==9676||weapPid==4||weapPid==116||weapPid==383||weapPid==6||weapPid==399||weapPid==115||weapPid==319||weapPid==622||weapPid==522||weapPid==600||weapPid==610||weapPid==289||weapPid==25599):false);
	bool isThrustThrowWeapon=((@realWeapon!=null)?(weapPid==9916||weapPid==618||weapPid==320||weapPid==280||weapPid==7||weapPid==25583):false);
	bool slow=false;
	bool knockdowneff=false;
	bool APdrain=false;
	bool weapondropeff=false;
	bool deatheff=false;
	bool bypasseff=false;
	bool koeff=false;
	bool weapondestroyeff=false;
	uint criple=0;
	string criteff="";  
	
	array<int>_dmgMul;
	_dmgMul.resize(rounds);
	for(int i=0;i<rounds;i++)
	{
		_dmgMul[i]=dmgMul;
	}     
	
	uint8 use=((attack.weaponMode)&0xF);
	bool isSwing=false;
	bool isThrust=false;      
	
	if(isThrustThrowWeapon)
	{
		if(use==(0))
		{
			isSwing=false;
			isThrust=true;
		}
	}
	
	if(isSwingThrustWeapon)
	{
		if(use==(0))
		{
			isSwing=true;
			isThrust=false;
		}
		
		if(use==(1))
		{
			isSwing=false;
			isThrust=true;
		}
	}
	
	if(target.IsDead()||!(@map!=null))
	return;
	
	if(validAttacker&&intentionally&&target.Id!=attack.TargetId)
	target.EventAttacked(attacker); 
	
	if(target.Id==attack.TargetId)
	attack.TargetHit=true; 
	
	if(targetIsPlayer&&(attackerIsPlayer||((@attacker!=null)&&(((attacker.Param[(534)]&((0x00000020)))!=0))))&&validAttacker&&attacker.GetAccess()==(0)&&
	(((map.GetData((10))&((0x00000020)))!=0)||attacker.Param[(514)]!=0||target.Param[(514)]!=0)&&attack.Ammo.ProtoId!=(25586))
	{
		if(validAttacker)
		attacker.Say((11),"No PvP.");
		target.Say((11),"No PvP.");
		return;
	}
	
	if(target.Param[(510)]!=0&&target.IsPlayer()&&(target.GetAccess()==(0)))
	target.ParamBase[(510)]=0;
	
	if(target.Param[(238)]<int(__TimeoutBattle))
	target.TimeoutBase[(238)]=((__FullSecond)+(__TimeoutBattle));
	int extraroll=0;
	if(ammoPid==(1270)){target.ParamBase[(197)]+=Random(10,50-target.Param[(4)]);VerboseActionCombat(target,"Slowed");}
	if(target.Param[(527)]!=0)
	isCritical=false;
	else
	if(isCritical||rounds>1)
	{
		int aim_=aim;
		if(aim_==(0))
		aim_=(9);
		aim_--; 
		
		float roll=Random(0,50);  
		
		if(attack.DmgType==(4))
		roll+=5;  
		
		roll+=attacker.Param[(6)];
		if((@usedArmor!=null))
		{
			uint spray=0;
			Item@armorek=target.GetItem(0,(3));
			if((@armorek!=null))
			spray=armorek.Proto.Armor_CMCritPower;
			
			if(attacker.Param[(427)]>0)
			spray=spray*0.2;
			
			roll+=spray;
			if((@armorek!=null)&&armorek.Val3==(38)&&attacker.Param[(353)]==0)roll-=20;
			if((@armorek!=null)&&armorek.Val4==(38)&&attacker.Param[(353)]==0)roll-=20;
			if((@armorek!=null)&&armorek.Val5==(38)&&attacker.Param[(353)]==0)roll-=20;
			if((@armorek!=null)&&armorek.Val6==(38)&&attacker.Param[(353)]==0)roll-=20;
			if((@armorek!=null)&&armorek.Val7==(38)&&attacker.Param[(353)]==0)roll-=20;
			if((@armorek!=null)&&armorek.Val8==(38)&&attacker.Param[(353)]==0)roll-=20;
			
			if((@armorek!=null)&&armorek.Val3==(109)&&attacker.Param[(353)]==0)roll-=60;
			if((@armorek!=null)&&armorek.Val4==(109)&&attacker.Param[(353)]==0)roll-=60;
			if((@armorek!=null)&&armorek.Val5==(109)&&attacker.Param[(353)]==0)roll-=60;
			if((@armorek!=null)&&armorek.Val6==(109)&&attacker.Param[(353)]==0)roll-=60;
			if((@armorek!=null)&&armorek.Val7==(109)&&attacker.Param[(353)]==0)roll-=60;
			if((@armorek!=null)&&armorek.Val8==(109)&&attacker.Param[(353)]==0)roll-=60;
			if((@armorek!=null)&&armorek.Val2==(109)&&attacker.Param[(353)]==0)roll-=60;
			
		}
		
		if(validAttacker)
		{
			
			if(attacker.Param[(322)]>0)
			if(attack.WeaponSubtype==(4)||attack.WeaponSubtype==(3))
			extraroll+=25;
			extraroll+=10*attacker.Param[(1153)];
			roll+=10*attacker.Param[(1154)];
			for(int i=0;i<9;i++)
			{
				if(attacker.Param[(393)]>0&&attacker.Param[(1172)+i]==27)extraroll+=20;
				if(attacker.Param[(393)]>0&&attacker.Param[(1172)+i]==28)extraroll-=20;
			}
			for(int i=0;i<9;i++)
			{
				if(attacker.Param[(393)]>0&&attacker.Param[(1172)+i]==29)roll+=10;
				if(attacker.Param[(393)]>0&&attacker.Param[(1172)+i]==30)roll-=10;
			}
			if(target.Param[(0)]>19)
			extraroll-=25;
			if(target.Param[(1)]>19)
			extraroll+=25;
			if(attacker.Param[(556)]>0)
			extraroll-=20;
			if(attacker.Param[(358)]>0)
			if(attack.WeaponSubtype==(2)||attack.WeaponSubtype==(1))
			extraroll+=attacker.Param[(0)];
			if(attacker.Param[(446)]>0)
			if(attack.WeaponSubtype==(2)||attack.WeaponSubtype==(1))
			extraroll+=33;
			if(attack.SilentDeathEffect)
			extraroll+=10;
			if(attacker.Param[(347)]>0)roll+=attacker.Param[(6)];
			if(attacker.Param[(353)]>0)
			roll+=attacker.Param[(14)]+target.Param[(14)];
			uint16 rangefov=20+3*attacker.Param[(1)]+6*attacker.Param[(315)]+11*attacker.Param[(337)]+11*attacker.Param[(340)];
			if(attacker.Param[(353)]>0)
			rangefov+=attacker.Param[(14)];
			rangefov/=10;
			if(attacker.Param[(353)]>0)
			roll+=rangefov;
			if(attacker.Param[(309)]>0&&attacker.Param[(424)]>0&&attacker.Param[(391)]>0)
			roll+=10;
			if(attacker.Param[(310)]>1)
			roll+=40;
			if(attacker.Param[(300)]>0)
			extraroll+=5;
			if(attacker.Param[(310)]>0)
			extraroll+=5*attacker.Param[(310)];
			if(target.Param[(432)]>1)
			extraroll-=10;
			
			if(attacker.Param[(557)]>0)
			extraroll-=35;
			if((@realWeapon!=null)&&realWeapon.Val3==(5))roll+=10;
			if((@realWeapon!=null)&&realWeapon.Val4==(5))roll+=10;
			if((@realWeapon!=null)&&realWeapon.Val5==(5))roll+=10;
			if((@realWeapon!=null)&&realWeapon.Val6==(5))roll+=10;
			if((@realWeapon!=null)&&realWeapon.Val7==(5))roll+=10;
			if((@realWeapon!=null)&&realWeapon.Val8==(5))roll+=10;
			
			if((@realWeapon!=null)&&realWeapon.Val3==(103))roll+=attacker.Param[(14)]+target.Param[(14)];
			if((@realWeapon!=null)&&realWeapon.Val4==(103))roll+=attacker.Param[(14)]+target.Param[(14)];
			if((@realWeapon!=null)&&realWeapon.Val5==(103))roll+=attacker.Param[(14)]+target.Param[(14)];
			if((@realWeapon!=null)&&realWeapon.Val6==(103))roll+=attacker.Param[(14)]+target.Param[(14)];
			if((@realWeapon!=null)&&realWeapon.Val7==(103))roll+=attacker.Param[(14)]+target.Param[(14)];
			if((@realWeapon!=null)&&realWeapon.Val8==(103))roll+=attacker.Param[(14)]+target.Param[(14)];
			if((@realWeapon!=null)&&realWeapon.Val2==(103))roll+=attacker.Param[(14)]+target.Param[(14)]; 
			
		}
		int bonehead=0;
		if(target.Param[(563)]!=0&&(aim==(1)||aim==(7)))
		extraroll-=25;
		if(target.Param[(352)]!=0&&(aim!=(1)||aim!=(7)))
		extraroll-=20;
		if(attacker.Param[(395)]>0)
		extraroll+=1;
		if(target.Param[(423)]>0)
		extraroll-=25;
		if(target.Param[(423)]>0&&target.Param[(422)]>0&&target.Param[(405)]>0&&target.Param[(403)]>0)
		extraroll-=30;
		int distmodcrit=0;
		bool havelongrange=false;
		
		if((@realWeapon!=null)&&realWeapon.Val3==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val4==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val5==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val6==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val7==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val8==(12))havelongrange=true;
		if(attacker.Param[(418)]>0&&aim!=(0)&&aim!=(4)&&aim!=(9))
		{
			distmodcrit=1;
			if(havelongrange)
			distmodcrit=2;
			int dys=0;
			dys=GetDistantion(attacker.HexX,attacker.HexY,target.HexX,target.HexY);
			roll+=dys*distmodcrit;
			
		} 
		
		if(extraroll!=0)
		{
			roll=roll/100;
			roll*=100+extraroll;
			
		}    
		
		int crit_roll=0;
		if(roll<=25)
		crit_roll=0+attacker.Param[(395)];
		else if(roll<=60)
		crit_roll=1;
		else if(roll<=100)
		crit_roll=2;
		else if(roll<=125)
		crit_roll=3;
		else if(roll<=170)
		crit_roll=4;
		else if(roll>170)
		crit_roll=5;
		if(attacker.Param[(323)]>1)
		if(attack.WeaponSubtype==(2)||attack.WeaponSubtype==(1))
		crit_roll++;
		if(attacker.Param[(358)]>0&&attack.WeaponSubtype==(2)||attack.WeaponSubtype==(1))
		crit_roll++;
		if(crit_roll<0)
		crit_roll=0;
		if(crit_roll>5)
		crit_roll=5;
		
		if((@realWeapon!=null)&&realWeapon.Val3==((15))){target.ParamBase[(197)]+=Random(1,8);VerboseActionCombat(target,"Slowed");}
		if((@realWeapon!=null)&&realWeapon.Val4==((15))){target.ParamBase[(197)]+=Random(1,8);VerboseActionCombat(target,"Slowed");}
		if((@realWeapon!=null)&&realWeapon.Val5==((15))){target.ParamBase[(197)]+=Random(1,8);VerboseActionCombat(target,"Slowed");}
		if((@realWeapon!=null)&&realWeapon.Val6==((15))){target.ParamBase[(197)]+=Random(1,8);VerboseActionCombat(target,"Slowed");}
		if((@realWeapon!=null)&&realWeapon.Val7==((15))){target.ParamBase[(197)]+=Random(1,8);VerboseActionCombat(target,"Slowed");}
		if((@realWeapon!=null)&&realWeapon.Val8==((15))){target.ParamBase[(197)]+=Random(1,8);VerboseActionCombat(target,"Slowed");}
		
		if(isCritical)
		{
			eff=0;
			int stat=0;
			int statMod=0;
			string criteff="";
			
			uint cMessage=0;
			uint cFailureMessage=0;
			
			bool upgraded_crits=attacker.Param[(321)]>1&&Random(1,20)==1;
			uint maxslow=1;
			
			if(upgraded_crits)
			maxslow=2;
			
			switch(aim)
			{
				case(7):
				switch(crit_roll)
				{
					case 0:
					dmgmulti+=Random(85,100);
					break;
					case 1:
					if(Random(1,5)==1)
					slow=true;
					dmgmulti+=Random(135,150);
					break;
					case 2:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(155,170);
					break;
					case 3:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(155,210);
					break;
					case 4:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					if(Random(1,5)==1)
					criple=5;
					dmgmulti+=Random(220,235);
					break;
					case 5:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					if(Random(1,5)==1)
					criple=5;
					if(Random(1,5)==1)
					koeff=true;
					dmgmulti+=Random(235,250);
					break;
				}
				break;
				case(1):
				switch(crit_roll)
				{
					case 0:
					dmgmulti+=Random(60,75);
					break;
					case 1:
					if(Random(1,5)==1)
					slow=true;
					dmgmulti+=Random(110,125);
					break;
					case 2:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(145,160);
					break;
					case 3:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(175,190);
					break;
					case 4:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					if(Random(1,5)==1)
					bypasseff=true;
					dmgmulti+=Random(210,225);
					break;
					case 5:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					if(Random(1,5)==1)
					bypasseff=true;
					if(Random(1,5)==1)
					koeff=true;
					dmgmulti+=Random(220,235);
					break;
				}
				break;
				case(8):
				switch(crit_roll)
				{
					case 0:
					dmgmulti+=Random(35,50);
					break;
					case 1:
					if(Random(1,5)==1)
					slow=true;
					dmgmulti+=Random(85,100);
					break;
					case 2:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(135,150);
					break;
					case 3:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(160,175);
					break;
					case 4:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					if(Random(1,5)==1)
					deatheff=true;
					dmgmulti+=Random(185,200);
					break;
					case 5:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					if(Random(1,5)==1)
					deatheff=true;
					if(Random(1,5)==1)
					koeff=true;
					dmgmulti+=Random(195,210);
					break;
				}
				break;
				case(6):
				case(5):
				switch(crit_roll)
				{
					case 0:
					if(Random(1,5)==1)
					dmgmulti+=Random(15,30);
					break;
					case 1:
					if(Random(1,5)==1)
					slow=true;
					dmgmulti+=Random(45,60);
					break;
					case 2:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(60,75);
					break;
					case 3:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(65,80);
					break;
					case 4:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					if(Random(1,5)==1)
					criple=aim==(6)?3:4;
					dmgmulti+=Random(95,110);
					break;
					case 5:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					if(Random(1,5)==1)
					criple=aim==(6)?3:4;
					if(Random(1,5)==1)
					koeff=true;
					dmgmulti+=Random(115,130);
					break;
				}
				break;
				case(2):
				case(3):
				switch(crit_roll)
				{
					case 0:
					dmgmulti+=Random(10,25);
					break;
					case 1:
					if(Random(1,5)==1)
					slow=true;
					dmgmulti+=Random(30,45);
					break;
					case 2:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					APdrain=true;
					dmgmulti+=Random(85,100);
					break;
					case 3:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					APdrain=true;
					if(Random(1,5)==1)
					weapondropeff=true;
					dmgmulti+=Random(100,115);
					break;
					case 4:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					APdrain=true;
					if(Random(1,5)==1)
					weapondropeff=true;
					criple=aim==(2)?1:2;
					dmgmulti+=Random(120,135);
					break;
					case 5:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					APdrain=true;
					if(Random(1,5)==1)
					weapondropeff=true;
					if(Random(1,5)==1)
					criple=aim==(2)?1:2;
					if(Random(1,5)==1)
					weapondestroyeff=true;
					dmgmulti+=Random(135,150);
					break;
				}
				break;
				default:
				switch(crit_roll)
				{
					case 0:
					dmgmulti+=Random(0,15);
					break;
					case 1:
					dmgmulti+=Random(20,35);
					break;
					case 2:
					if(Random(1,5)==1)
					slow=true;
					dmgmulti+=Random(35,50);
					break;
					case 3:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(50,65);
					break;
					case 4:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					APdrain=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					dmgmulti+=Random(75,90);
					break;
					case 5:
					if(Random(1,5)==1)
					slow=true;
					if(Random(1,5)==1)
					APdrain=true;
					if(Random(1,5)==1)
					knockdowneff=true;
					if(Random(1,5)==1)
					deatheff=true;
					dmgmulti+=Random(95,110);
					break;
				}
				break;
			}
			if(attack.WeaponSubtype!=(2)||attack.WeaponSubtype!=(1))
			{
				if((@realWeapon!=null)&&realWeapon.Val3==(66))dmgmulti+=Random(5,40);
				if((@realWeapon!=null)&&realWeapon.Val4==(66))dmgmulti+=Random(5,40);
				if((@realWeapon!=null)&&realWeapon.Val5==(66))dmgmulti+=Random(5,40);
				if((@realWeapon!=null)&&realWeapon.Val6==(66))dmgmulti+=Random(5,40);
				if((@realWeapon!=null)&&realWeapon.Val7==(66))dmgmulti+=Random(5,40);
				if((@realWeapon!=null)&&realWeapon.Val8==(66))dmgmulti+=Random(5,40);
			}
			else
			{
				if((@realWeapon!=null)&&realWeapon.Val3==(65))dmgmulti+=Random(10,60);
				if((@realWeapon!=null)&&realWeapon.Val4==(65))dmgmulti+=Random(10,60);
				if((@realWeapon!=null)&&realWeapon.Val5==(65))dmgmulti+=Random(10,60);
				if((@realWeapon!=null)&&realWeapon.Val6==(65))dmgmulti+=Random(10,60);
				if((@realWeapon!=null)&&realWeapon.Val7==(65))dmgmulti+=Random(10,60);
				if((@realWeapon!=null)&&realWeapon.Val8==(65))dmgmulti+=Random(10,60);
			}
			
			if(slow)
			{
				target.ParamBase[(197)]+=40*maxslow-target.Param[(4)]*2;
				criteff+="Slowed";
			}
			int chipshot=0;
			if((@realWeapon!=null)&&realWeapon.Val3==(18))chipshot+=20;
			if((@realWeapon!=null)&&realWeapon.Val4==(18))chipshot+=20;
			if((@realWeapon!=null)&&realWeapon.Val5==(18))chipshot+=20;
			if((@realWeapon!=null)&&realWeapon.Val6==(18))chipshot+=20;
			if((@realWeapon!=null)&&realWeapon.Val7==(18))chipshot+=20;
			if((@realWeapon!=null)&&realWeapon.Val8==(18))chipshot+=20;
			extraMessage=cMessage;
			int phoenix=0;
			
			int agro=0;
			
			bool haveenhknockout=false;
			if((@realWeapon!=null)&&realWeapon.Val2==(100))haveenhknockout=true;
			if(haveenhknockout)
			{
				koeff=true;
				if(criteff!="")
				criteff+=" and Knockout";
				else criteff+="Knockout";
			}
			bool haveknock=false;
			if((@realWeapon!=null)&&realWeapon.Val3==(11))haveknock=true;
			if((@realWeapon!=null)&&realWeapon.Val4==(11))haveknock=true;
			if((@realWeapon!=null)&&realWeapon.Val5==(11))haveknock=true;
			if((@realWeapon!=null)&&realWeapon.Val6==(11))haveknock=true;
			if((@realWeapon!=null)&&realWeapon.Val7==(11))haveknock=true;
			if((@realWeapon!=null)&&realWeapon.Val8==(11))haveknock=true;
			if(haveknock&&target.Param[(405)]==0)
			{
				knockdowneff=true;
				if(criteff!="")
				criteff+=" and Knockback";
				else criteff+="Knockback";
			}
			if(haveknock&&target.Param[(405)]!=0&&Random(1,100)<=target.Param[(0)]*5+15-agro+phoenix-25*attacker.Param[(353)]-100*target.Param[(395)]-chipshot)
			{
				knockdowneff=true;
				if(criteff!="")
				criteff+=" and Knockback";
				else criteff+="Knockback";
			}
			
			if(target.Param[(531)]!=0)
			knockdowneff=false;
			else
			if(knockdowneff&&target.Param[(405)]!=0&&Random(1,100)<=target.Param[(0)]*5+15-agro+phoenix-25*attacker.Param[(353)]-100*target.Param[(395)]-chipshot)
			knockdowneff=false;
			if(koeff&&target.Param[(405)]!=0&&Random(1,100)<=(target.Param[(2)]*7-agro+phoenix-25*attacker.Param[(353)]-100*target.Param[(395)]-chipshot))
			koeff=false;
			if(koeff&&target.Param[(405)]==0&&Random(1,100)<=target.Param[(2)]-agro+phoenix-25*attacker.Param[(353)]-100*target.Param[(395)]-chipshot)
			koeff=false;
			if(Random(1,100)<target.Param[(0)]*5-agro+phoenix-25*attacker.Param[(353)]-100*target.Param[(395)])
			{
				if(criple==1)
				criple=0;
				if(criple==2)
				criple=0;
			}
			
			if(Random(1,100)<target.Param[(6)]*5-agro+phoenix-25*attacker.Param[(353)]-100*target.Param[(395)])
			{
				if(criple==3)
				criple=0;
				if(criple==3)
				criple=0;
			}
			
			if(target.Param[(422)]!=0)
			{
				if(criple!=5)
				criple=0;
			}
			
			if(target.Param[(524)]!=0)
			{
				criple=0;
			}
			
			if(weapondropeff&&target.Param[(523)]!=0||(target.Param[(422)]>0))
			{
				weapondropeff=false;
			}
			else if(weapondropeff&&Random(1,100)<=target.Param[(0)]*5-agro+phoenix-25*attacker.Param[(353)]-20*target.Param[(395)])
			{
				weapondropeff=false;
			}
			if(validAttacker&&attackerIsPlayer)
			AddScore(attacker,(17),1);
		}
	}
	
	bool haveenhknockout=false;
	if((@realWeapon!=null)&&realWeapon.Val3==(100))haveenhknockout=true;
	if((@realWeapon!=null)&&realWeapon.Val4==(100))haveenhknockout=true;
	if((@realWeapon!=null)&&realWeapon.Val5==(100))haveenhknockout=true;
	if((@realWeapon!=null)&&realWeapon.Val6==(100))haveenhknockout=true;
	if((@realWeapon!=null)&&realWeapon.Val7==(100))haveenhknockout=true;
	if((@realWeapon!=null)&&realWeapon.Val8==(100))haveenhknockout=true;
	
	if(validAttacker&&(haveenhknockout))
	{
		
		if(Random(1,20)<=(attacker.Param[(0)])-8)
		{
			koeff=true;
			if(criteff!="")
			criteff+=" and Knockout";
			else criteff+="Knockout";
		}
	}
	bool haveknock=false;
	if((@realWeapon!=null)&&realWeapon.Val3==(11))haveknock=true;
	if((@realWeapon!=null)&&realWeapon.Val4==(11))haveknock=true;
	if((@realWeapon!=null)&&realWeapon.Val5==(11))haveknock=true;
	if((@realWeapon!=null)&&realWeapon.Val6==(11))haveknock=true;
	if((@realWeapon!=null)&&realWeapon.Val7==(11))haveknock=true;
	if((@realWeapon!=null)&&realWeapon.Val8==(11))haveknock=true;
	
	if(validAttacker&&(haveknock))
	{
		
		if(Random(1,20)<=(attacker.Param[(0)])-8)
		{
			knockdowneff=true;
			if(criteff!="")
			criteff+=" and Knockback";
			else criteff+="Knockback";
		}
	} 
	
	Item@armorek=target.GetItem(0,(3)); 
	
	if(validAttacker&&attacker.Param[(556)]>0)
	if(attack.WeaponSubtype==(2)||attack.WeaponSubtype==(1))
	{
		int heavyHandedStrengthMalus=0;
		
		if((@realWeapon!=null)&&realWeapon.Val3==(62))heavyHandedStrengthMalus+=5;
		if((@realWeapon!=null)&&realWeapon.Val4==(62))heavyHandedStrengthMalus+=5;
		if((@realWeapon!=null)&&realWeapon.Val5==(62))heavyHandedStrengthMalus+=5;
		if((@realWeapon!=null)&&realWeapon.Val6==(62))heavyHandedStrengthMalus+=5;
		if((@realWeapon!=null)&&realWeapon.Val7==(62))heavyHandedStrengthMalus+=5;
		if((@realWeapon!=null)&&realWeapon.Val8==(62))heavyHandedStrengthMalus+=5;
		
		if((@armorek!=null)&&armorek.Val3==(41))heavyHandedStrengthMalus+=-10;
		if((@armorek!=null)&&armorek.Val4==(41))heavyHandedStrengthMalus+=-10;
		if((@armorek!=null)&&armorek.Val5==(41))heavyHandedStrengthMalus+=-10;
		if((@armorek!=null)&&armorek.Val6==(41))heavyHandedStrengthMalus+=-10;
		if((@armorek!=null)&&armorek.Val7==(41))heavyHandedStrengthMalus+=-10;
		if((@armorek!=null)&&armorek.Val8==(41))heavyHandedStrengthMalus+=-10; 
		
		uint hthsyg=0;
		if(attacker.Param[(385)]>0&&attacker.Param[(444)]>0&&attacker.Param[(443)]>0)
		heavyHandedStrengthMalus+=5; 
		
		if(Random(1,40)<=(get_ST(attacker)+heavyHandedStrengthMalus+attacker.Param[(395)]))
		{
			knockdowneff=true;
			if(criteff!="")
			criteff+=" and Knockback";
			else criteff+="Knockback";
			
		}
		else if(Random(1,30)<=(get_ST(attacker)+heavyHandedStrengthMalus+attacker.Param[(395)]))
		{
			APdrain=true;
			target.ParamBase[(75)]-=100;
			attacker.ParamBase[(75)]+=100;
			if(criteff!="")
			criteff+=" and AP Drain";
			else criteff+="AP Drain";
			
		}
		else if(Random(1,20)<=(get_ST(attacker)+heavyHandedStrengthMalus+attacker.Param[(395)]))
		{
			target.ParamBase[(197)]+=3;
			if(criteff!="")
			criteff+=" and Slowed";
			else criteff+="Slowed";
			
		}
	}     
	
	int dmgType=attack.DmgType;
	int totalDmg=0;
	int flat_damage=attack.Attacker.Param[(4)];
	if((@attack!=null))
	{
		if(ammoPid==(576))dmgType=(6);
		if(ammoPid==(850)&&target.Param[(409)]==0)
		{
			dmgType=(3);
		}
		if(ammoPid==(1270))dmgType=(4);
		if(ammoPid==(1271))dmgType=(3);
		if(attacker.Param[(402)]>1&&dmgType==(4)&&attacker.Param[(411)]>0)
		dmgType=(3);
		
	}     
	
	if(isSwing)
	{        
		
	}
	
	if(isThrust)
	{
		attack.DMMod=4;
		attack.DDMod=5;
		attack.DRMod=-40;   
		
	}
	
	bool ammo_upgrade=false;
	if((@realWeapon!=null)&&realWeapon.Val3==((7))){attack.DMMod=attack.DMMod*8+attack.DDMod;attack.DDMod=attack.DDMod*=8;}
	if((@realWeapon!=null)&&realWeapon.Val4==((7))){attack.DMMod=attack.DMMod*8+attack.DDMod;attack.DDMod=attack.DDMod*=8;}
	if((@realWeapon!=null)&&realWeapon.Val5==((7))){attack.DMMod=attack.DMMod*8+attack.DDMod;attack.DDMod=attack.DDMod*=8;}
	if((@realWeapon!=null)&&realWeapon.Val6==((7))){attack.DMMod=attack.DMMod*8+attack.DDMod;attack.DDMod=attack.DDMod*=8;}
	if((@realWeapon!=null)&&realWeapon.Val7==((7))){attack.DMMod=attack.DMMod*8+attack.DDMod;attack.DDMod=attack.DDMod*=8;}
	if((@realWeapon!=null)&&realWeapon.Val8==((7))){attack.DMMod=attack.DMMod*8+attack.DDMod;attack.DDMod=attack.DDMod*=8;}  
	
	if((@realWeapon!=null)&&realWeapon.Val3==((10))&&(dmgType==(1)||dmgType==(3)||dmgType==(7))){attack.DRMod-=5;}
	if((@realWeapon!=null)&&realWeapon.Val4==((10))&&(dmgType==(1)||dmgType==(3)||dmgType==(7))){attack.DRMod-=5;}
	if((@realWeapon!=null)&&realWeapon.Val5==((10))&&(dmgType==(1)||dmgType==(3)||dmgType==(7))){attack.DRMod-=5;}
	if((@realWeapon!=null)&&realWeapon.Val6==((10))&&(dmgType==(1)||dmgType==(3)||dmgType==(7))){attack.DRMod-=5;}
	if((@realWeapon!=null)&&realWeapon.Val7==((10))&&(dmgType==(1)||dmgType==(3)||dmgType==(7))){attack.DRMod-=5;}
	if((@realWeapon!=null)&&realWeapon.Val8==((10))&&(dmgType==(1)||dmgType==(3)||dmgType==(7))){attack.DRMod-=5;}
	
	if(attacker.Param[(315)]>0&&aim!=(4)&&aim!=(9)){attack.DRMod-=Random(1,10);}
	int targetDR=0;
	int targetDT=0;
	if(!attack.AimHead)
	{
		switch(dmgType)
		{
			case(1):targetDR=target.Param[(23)];targetDT=target.Param[(16)];break;
			case(2):targetDR=target.Param[(24)];targetDT=target.Param[(17)];break;
			case(3):targetDR=target.Param[(25)];targetDT=target.Param[(18)];break;
			case(4):targetDR=target.Param[(26)];targetDT=target.Param[(19)];break;
			case(7):targetDR=target.Param[(29)];targetDT=target.Param[(22)];break;
			case(5):targetDR=target.Param[(27)];targetDT=target.Param[(20)];break;
			case(6):targetDR=target.Param[(28)];targetDT=target.Param[(21)];break;
		}
	}
	else
	{
		switch(dmgType)
		{
			case(1):targetDR=target.Param[(1127)];targetDT=target.Param[(16)];break;
			case(2):targetDR=target.Param[(1128)];targetDT=target.Param[(17)];break;
			case(3):targetDR=target.Param[(1129)];targetDT=target.Param[(18)];break;
			case(4):targetDR=target.Param[(1130)];targetDT=target.Param[(19)];break;
			case(7):targetDT=target.Param[(22)];break;
			case(5):targetDR=target.Param[(1131)];targetDT=target.Param[(20)];break;
			case(6):targetDR=target.Param[(1132)];targetDT=target.Param[(21)];break;
		}
	}
	
	int partialBypassChance=GetPartialBypassChance(target,attack.AimHead);
	int partialBypassedRounds=0;  
	
	int partialBypassDR=targetDR/4;
	int partialBypassDT=targetDT/4;
	bool havepenetrate=false;
	if((@realWeapon!=null)&&realWeapon.Val3==(13))havepenetrate=true;
	if((@realWeapon!=null)&&realWeapon.Val4==(13))havepenetrate=true;
	if((@realWeapon!=null)&&realWeapon.Val5==(13))havepenetrate=true;
	if((@realWeapon!=null)&&realWeapon.Val6==(13))havepenetrate=true;
	if((@realWeapon!=null)&&realWeapon.Val7==(13))havepenetrate=true;
	if((@realWeapon!=null)&&realWeapon.Val8==(13))havepenetrate=true;
	if(bypasseff&&dmgType!=(6))
	{
		targetDT=0;
		targetDR/=2;
		if(criteff!="")
		criteff+=" and Bypass";
		else criteff+="Bypass";
	}
	else if(havepenetrate)
	targetDT/=5;
	else if(((@attack.Ammo!=null)?(attack.Ammo.Ammo_DTDiv>0):false))
	targetDT/=attack.Ammo.Ammo_DTDiv;
	else if(isThrust)
	targetDT/=2;  
	
	if(validAttacker&&attacker.Param[(554)]!=0)
	{
		if(dmgType==(2)||dmgType==(5)||dmgType==(4))
		{
			targetDR+=15;
			partialBypassDR+=15;
		}
		else
		{
			targetDR+=30;
			partialBypassDR+=30;
		}
	}
	targetDR+=attack.DRMod;
	partialBypassDR+=attack.DRMod;   
	
	partialBypassDR=(((partialBypassDR)<(targetDR))?(partialBypassDR):(targetDR));
	targetDR=(((targetDR)>(100))?(100):(((targetDR)<(0))?(0):(targetDR)));
	partialBypassDR=(((partialBypassDR)>(100))?(100):(((partialBypassDR)<(0))?(0):(partialBypassDR)));
	partialBypassDT=(((partialBypassDT)<(targetDT))?(partialBypassDT):(targetDT));
	
	int bonusmindmg=0;
	if((@realWeapon!=null)&&realWeapon.Val3==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val4==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val5==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val6==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val7==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val8==(2))bonusmindmg+=24;
	int bonusmaxdmg=0;
	if((@realWeapon!=null)&&realWeapon.Val3==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val4==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val5==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val6==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val7==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val8==(3))bonusmaxdmg+=19;
	
	if((@realWeapon!=null)&&realWeapon.Val3==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val4==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val5==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val6==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val7==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val8==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val2==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	
	int dmgMin=attack.DmgMin+attack.BonusDmg+attack.DmgMin*bonusmindmg/100;
	;
	int dmgMax=attack.DmgMax+attack.BonusDmg+attack.DmgMax*bonusmaxdmg/100;
	;
	int rawDmg; 
	
	int dmgDiv=2*attack.DDMod;  
	
	for(int i=0;i<rounds;i++)
	{
		
		rawDmg=Random(dmgMin,dmgMax);  
		
		if(attack.Attacker.Param[(6)]>19)
		{
			int critmol=1;
			if(isCritical)
			critmol=2;
			rawDmg*=0.25;
			flat_damage+=rawDmg*critmol; 
			
			rawDmg*=4;
			rawDmg*=0.75; 
			
		}
		_dmgMul[i]*=attack.DMMod;
		rawDmg*=_dmgMul[i];
		
		rawDmg/=dmgDiv;
		if(!bypasseff&&partialBypassChance>0&&Random(1,100)<=partialBypassChance)
		{
			rawDmg-=partialBypassDT;
			rawDmg-=(rawDmg*partialBypassDR)/100;
			partialBypassedRounds++;
		}
		else
		{
			rawDmg-=targetDT;
			rawDmg-=(rawDmg*targetDR)/100;
		}
		if(rawDmg>0)
		totalDmg+=rawDmg;
	}      
	
	if(validAttacker)
	{
		Item@targetarmor=target.GetItem(0,(3));
		bool make_flat=true;
		bool isFlamethrower=(weapPid==(11))||(weapPid==(400))||(weapPid==(427)||(weapPid==(25569)))||(weapPid==(1284))||(weapPid==(1277));
		int damage_reduction=0;
		
		if((@targetarmor!=null)&&targetarmor.Val3==(48))make_flat=false;
		if((@targetarmor!=null)&&targetarmor.Val4==(48))make_flat=false;
		if((@targetarmor!=null)&&targetarmor.Val5==(48))make_flat=false;
		if((@targetarmor!=null)&&targetarmor.Val6==(48))make_flat=false;
		if((@targetarmor!=null)&&targetarmor.Val7==(48))make_flat=false;
		if((@targetarmor!=null)&&targetarmor.Val8==(48))make_flat=false;
		if(attack.Attacker.Param[(398)]!=0&&!(bt==(16)||bt==(10)))
		flat_damage+=15;
		if(attack.Attacker.Param[(562)]!=0&&attack.Attacker.Param[(251)]>0)flat_damage+=10;
		if(attack.Attacker.Param[(402)]!=0&&dmgType==(3)&&target.Param[(409)]==0&&isFlamethrower)
		dmgmulti+=(attack.Attacker.Param[(402)]*30);
		if(attack.Attacker.Param[(402)]!=0&&dmgType==(3)&&target.Param[(409)]==0&&!isFlamethrower)
		dmgmulti+=(attack.Attacker.Param[(402)]*15);
		if(attack.Attacker.Param[(402)]>1&&(weapPid==(25582)||weapPid==(25452)))
		dmgmulti+=300;
		if(attack.Attacker.Param[(434)]>1&&dmgType==(3)&&target.Param[(409)]==0&&isFlamethrower)
		dmgmulti+=25;
		if(attack.Attacker.Param[(434)]>1&&dmgType==(3)&&target.Param[(409)]==0&&!isFlamethrower)
		dmgmulti+=10;
		if(attack.Attacker.Param[(557)]!=0)
		flat_damage+=5;
		if(attack.Attacker.Param[(556)]!=0&&attack.IsUnarmed)
		flat_damage+=2;
		if((@realWeapon!=null)&&realWeapon.Val3==(9))flat_damage+=7;
		if((@realWeapon!=null)&&realWeapon.Val4==(9))flat_damage+=7;
		if((@realWeapon!=null)&&realWeapon.Val5==(9))flat_damage+=7;
		if((@realWeapon!=null)&&realWeapon.Val6==(9))flat_damage+=7;
		if((@realWeapon!=null)&&realWeapon.Val7==(9))flat_damage+=7;
		if((@realWeapon!=null)&&realWeapon.Val8==(9))flat_damage+=7; 
		
		if((attack.Attacker.Param[(553)]!=0&&((@realWeapon!=null)&&!(((realWeapon.Flags)&((0x00000080)))!=0))&&!realWeapon.IsStackable())||attack.Attacker.Param[(553)]!=0&&attack.Attacker.Param[(345)]!=0)
		dmgmulti+=15;
		if(attack.Attacker.Param[(555)]!=0)
		dmgmulti+=15;
		if(attack.Attacker.Param[(404)]!=0&&Random(1,100)<=attack.Attacker.Param[(5)])
		dmgmulti+=100;
		if(attack.Attacker.Param[(408)]!=0&&attack.Attacker.Param[(510)]==0)
		damage_reduction+=250;
		if(attack.Attacker.Param[(328)]>1)
		dmgmulti+=10;
		if(attack.Attacker.Param[(395)]!=0)
		flat_damage+=1;
		int targetBt=target.Param[(67)];
		if(!target.IsPlayer())
		{
			switch(targetBt)
			{
				case(0):
				case(1):
				case(2):
				dmgmulti+=attack.Attacker.Param[(449)];break;
				case(3):
				case(4):
				dmgmulti+=attack.Attacker.Param[(451)];break;
				case(10):
				dmgmulti+=attack.Attacker.Param[(442)];break;
				default:
				dmgmulti+=attack.Attacker.Param[(439)];break;
			}
		}
		if(!target.IsPlayer())
		flat_damage+=attack.Attacker.Param[(460)]*2;
		
		if(target.IsPlayer()&&!attack.Attacker.IsPlayer())
		damage_reduction+=target.Param[(457)]*10;
		if(!target.IsPlayer()&&target.Param[(187)]!=0)
		{
			damage_reduction+=attack.Attacker.Param[(785)]*150;
			dmgmulti+=30*attack.Attacker.Param[(782)];
		}
		
		if(attack.Attacker.Param[(187)]!=0)
		{
			dmgmulti+=(target.Param[(783)]*15);
			if(make_flat)
			totalDmg+=30*target.Param[(781)];
		} 
		
		if(target.IsPlayer())
		{
			if(IsCompanion(attack.Attacker))
			damage_reduction+=750;
			if(IsMerc(attack.Attacker))
			damage_reduction+=250;
			if((((attack.Attacker.Param[(534)]&((0x00000020)))!=0)&&attack.Attacker.Param[(104)]==(9314)))
			damage_reduction+=500;
		}
		if(!target.IsPlayer())
		{
			Critter@master=GetCritter(attack.Attacker.Param[(933)]);
			if((@master!=null))
			{
				if(IsCompanion(attack.Attacker))
				dmgmulti+=master.Param[(356)]*3;
				if(IsMerc(attack.Attacker))
				dmgmulti+=master.Param[(356)]*3;
				if((((attack.Attacker.Param[(534)]&((0x00000020)))!=0)&&attack.Attacker.Param[(104)]==(9314)))
				dmgmulti+=master.Param[(356)]*3;
			}
		}
		if(attack.Attacker.Param[(450)]>0)
		damage_reduction+=500;
		if(target.Param[(345)]>0)
		damage_reduction+=150;
		if(target.Param[(329)]>2)
		damage_reduction+=50;
		if(target.Param[(2)]>19)
		damage_reduction+=50;
		if(target.IsPlayer()&&!attack.Attacker.IsPlayer())
		damage_reduction+=target.Param[(3)]*10; 
		
		if(!target.IsPlayer()&&attack.Attacker.IsPlayer())
		dmgmulti+=attack.Attacker.Param[(3)]; 
		
		damage_reduction+=target.Param[(2)];
		if((@targetarmor!=null)&&targetarmor.Val3==(64))damage_reduction+=20;
		if((@targetarmor!=null)&&targetarmor.Val4==(64))damage_reduction+=20;
		if((@targetarmor!=null)&&targetarmor.Val5==(64))damage_reduction+=20;
		if((@targetarmor!=null)&&targetarmor.Val6==(64))damage_reduction+=20;
		if((@targetarmor!=null)&&targetarmor.Val7==(64))damage_reduction+=20;
		if((@targetarmor!=null)&&targetarmor.Val8==(64))damage_reduction+=20;   
		
		totalDmg=(totalDmg*dmgmulti)/100; 
		
		totalDmg=(totalDmg*(1000-damage_reduction))/1000;  
		
		if(attack.Attacker.Param[(407)]>0)
		flat_damage*=1.25;
		if(attack.Attacker.Param[(359)]>0)
		flat_damage*=2;
		if(attack.Attacker.Param[(359)]>0)flat_damage+=attack.Attacker.Param[(0)];
		if(flat_damage>0)
		{
			if(!make_flat)
			totalDmg+=flat_damage*0.25;
			else totalDmg+=flat_damage;
			
		}
		
		if(target.Param[(4)]>19&&dmgType==(5))
		totalDmg=0;
	}                  
	
	if(weapondropeff)
	{
		Item@realWeaponTarget=target.GetItem(0,(1));
		if((@realWeaponTarget!=null))
		{
			if(realWeaponTarget.IsStackable())
			{
				Item@dropped=map.AddItem(target.HexX,target.HexY,realWeaponTarget.GetProtoId(),1);
				if(realWeaponTarget.GetCount()>1)
				realWeaponTarget.SetCount(realWeaponTarget.GetCount()-1);
				else
				DeleteItem(realWeaponTarget);
				VerboseActionCombat(target,"Weapon Drop");
				if(!target.IsPlayer())
				{
					NpcPlane@plane=CreatePlane();
					array<NpcPlane@>crPlanes(0);
					
					if(target.GetPlanes(crPlanes)>0)
					plane.Priority=crPlanes[0].Priority+1;
					else
					plane.Priority=70;
					
					plane.Type=(3);
					plane.Pick_HexX=dropped.HexX;
					plane.Pick_HexY=dropped.HexY;
					plane.Pick_Pid=dropped.GetProtoId();
					plane.Pick_UseItemId=0;
					plane.Pick_ToOpen=false;
					plane.Identifier=(38);
					plane.IdentifierExt=dropped.Id;
					plane.Run=true;
					target.AddPlane(plane);
					SetLvar(dropped.Id,(9010),target.Id);
				}
			}
			else
			{
				MoveItem(realWeaponTarget,0,map,target.HexX,target.HexY);
				if(!target.IsPlayer())
				{
					NpcPlane@plane=CreatePlane();
					array<NpcPlane@>crPlanes(0);
					
					if(target.GetPlanes(crPlanes)>0)
					plane.Priority=crPlanes[0].Priority+1;
					else
					plane.Priority=70;
					
					plane.Type=(3);
					plane.Pick_HexX=realWeaponTarget.HexX;
					plane.Pick_HexY=realWeaponTarget.HexY;
					plane.Pick_Pid=realWeaponTarget.GetProtoId();
					plane.Pick_UseItemId=0;
					plane.Pick_ToOpen=false;
					plane.Identifier=(38);
					plane.IdentifierExt=realWeaponTarget.Id;
					plane.Run=true;
					target.AddPlane(plane);
					SetLvar(realWeaponTarget.Id,(9010),target.Id);
				}
			}
		}
	}  
	
	bool isOffGame=false;
	bool isKo=false;
	bool knockDown=false;
	bool knockOut=false;
	bool isDead=false;
	bool loseTurn=false;
	bool isBelow=false;
	int knockDmg=totalDmg;
	
	if(target.Param[(527)]!=0)
	eff=0;
	else
	{
		eff=eff&(~target.Param[(542)]);
		msgEff=msgEff&(~target.Param[(542)]);
	}
	
	if(knockdowneff)
	{
		
		isKo=true;
		knockDown=true;
		if(criteff!="")
		criteff+=" and Knockback";
		else criteff+="Knockback";
	}
	
	else
	if((dmgType==(7))&&(totalDmg>9)&&(@realWeapon!=null)&&realWeapon.Proto.ProtoId!=(1834))
	{
		if(target.Param[(405)]!=0)
		{   
			
			if((target.Param[(0)]-2)*10+target.Param[(395)]>Random(1,100))
			{
				isKo=false;
			}
			else
			{
				isKo=true;
			}
		}
		else
		{
			isKo=true;
		}
	}
	else
	if(isShotgun&&rounds>1)
	{
		
		{
			if(target.Param[(405)]!=0)
			{   
				
				if((target.Param[(0)]-2)*10+target.Param[(395)]>Random(1,100))
				{
					isKo=false;
				}
				else
				{
					if(GetDistantion(attack.Attacker.HexX,attack.Attacker.HexY,target.HexX,target.HexY)<=10&&Random(1,10)<=int(rounds))
					isKo=true;
				}
			}
			else
			{
				if(GetDistantion(attack.Attacker.HexX,attack.Attacker.HexY,target.HexX,target.HexY)<=10&&Random(1,10)<=int(rounds))
				isKo=true;
			}
		}
	}
	else
	if(isBanhammer||isHolySpear)
	{
		isOffGame=true;
		isKo=true;
	}
	bool upgraded_crits=attacker.Param[(321)]>1&&Random(1,20)==1;
	
	if(criple==3)
	{
		target.ParamBase[(506)]=1;
		if(upgraded_crits)target.ParamBase[(505)]=1;
		if(criteff!="")
		criteff+=" and Cripple";
		else criteff+="Cripple";
	}
	
	if(criple==4)
	{
		target.ParamBase[(505)]=1;
		if(upgraded_crits)target.ParamBase[(506)]=1;
		if(criteff!="")
		criteff+=" and Cripple";
		else criteff+="Cripple";
	}
	
	if(criple==1)
	{
		target.ParamBase[(504)]=1;
		if(upgraded_crits)target.ParamBase[(503)]=1;
		if(criteff!="")
		criteff+=" and Cripple";
		else criteff+="Cripple";
	}
	
	if(criple==2)
	{
		target.ParamBase[(503)]=1;
		if(upgraded_crits)target.ParamBase[(504)]=1;
		if(criteff!="")
		criteff+=" and Cripple";
		else criteff+="Cripple";
	}
	
	if(criple==5)
	{
		target.ParamBase[(502)]=1;
		if(upgraded_crits)target.TimeoutBase[(231)]=((__FullSecond)+(((45)*__TimeMultiplier)));
		if(criteff!="")
		criteff+=" and Blinded";
		else criteff+="Blinded";
	}         
	
	if(koeff)
	{
		
		isKo=true;
		knockOut=true;
		loseTurn=false;
		if(criteff!="")
		criteff+=" and Knockout";
		else criteff+="Knockout";
	} 
	
	if(deatheff)
	{
		totalDmg=totalDmg+100;
		if(criteff!="")
		criteff+=" and Death";
		else criteff+="Death";
	}
	if(APdrain)
	{
		target.ParamBase[(75)]-=Random(2,4)*100;
		if(criteff!="")
		criteff+=" and AP Drain";
		else criteff+="AP Drain";
	}
	if(weapondestroyeff)
	{
		if(realWeapon.IsStackable())
		{
			if(realWeapon.GetCount()>1)
			realWeapon.SetCount(realWeapon.GetCount()-1);
		}
		else
		{
			Item@realWeaponTarget=target.GetItem(0,(1));
			int wearProcent=Random(100,2500);
			if((@realWeaponTarget!=null))
			{
				realWeaponTarget.Deterioration+=wearProcent;
				realWeaponTarget.BrokenCount+=wearProcent/100;
				realWeaponTarget.Update();
			}
		}
		if(criteff!="")
		criteff+=" and Weapon Destroy";
		else criteff+="Weapon Destroy";
	}
	
	if(criteff!="")
	{
		
		VerboseActionCombat(target,criteff);
	}
	if(totalDmg>0)
	{
		if(target.Param[(527)]==0)
		{   
			
			if(attack.DmgType==(2)||attack.DmgType==(4)||attack.DmgType==(5)||attack.DmgType==(6))
			{
				Item@targetsArmor=target.GetItem(0,(3));
				if((@targetsArmor!=null)&&targetsArmor.GetProtoId()==(240))
				{
					int recharge=totalDmg/4;
					if(recharge>0&&targetsArmor.Charge<targetsArmor.Proto.Misc_ChargeMax&&attackerIsPlayer)
					{
						targetsArmor.Charge+=recharge;
						if(targetsArmor.Charge>targetsArmor.Proto.Misc_ChargeMax)
						targetsArmor.Charge=targetsArmor.Proto.Misc_ChargeMax;
						targetsArmor.Update();
						target.Say((11),"Charging armor with "+recharge+" charges.");
						target.Say((11),"Charges: "+targetsArmor.Charge+"/"+targetsArmor.Proto.Misc_ChargeMax+".");
					}
				}
			} 
			
			uint16[]MetalArmor=
			{
				(380)
			};
			Item@armorku=target.GetItem(0,(3));
			Item@armorkuk=attacker.GetItem(0,(3));                                      
			
			target.ParamBase[(72)]-=totalDmg;
			if(target.Param[(72)]<1)
			{
				int deadHitPoints=target.Param[(461)]>0?__DeadHitPoints:__DeadHitPoints/2;
				if(target.Param[(72)]>deadHitPoints&&IsHumanoid(target)&&target.Param[(531)]==0)
				{
					isKo=true;
					isBelow=true;
				}
				else
				isDead=true;
			}
		}
		
		if(attack.IsUnarmed&&validAttacker&&attackerIsPlayer)
		AddScore(attacker,(20),totalDmg);
	}
	
	bool attackFront=true;
	uint dir=GetDirection(attack.Hx,attack.Hy,target.HexX,target.HexY);
	if((dir==target.Dir||((dir+1)%6)==target.Dir||((dir+5)%6)==target.Dir))
	attackFront=false;     
	
	int armorDr=0;
	if(!attack.AimHead)
	{
		switch(dmgType)
		{
			case(1):targetDR=target.Param[(23)];targetDT=target.Param[(16)];break;
			case(2):targetDR=target.Param[(24)];targetDT=target.Param[(17)];break;
			case(3):targetDR=target.Param[(25)];targetDT=target.Param[(18)];break;
			case(4):targetDR=target.Param[(26)];targetDT=target.Param[(19)];break;
			case(7):targetDR=target.Param[(29)];targetDT=target.Param[(22)];break;
			case(5):targetDR=target.Param[(27)];targetDT=target.Param[(20)];break;
			case(6):targetDR=target.Param[(28)];targetDT=target.Param[(21)];break;
		}
	}
	else
	{
		switch(dmgType)
		{
			case(1):targetDR=target.Param[(1127)];targetDT=target.Param[(16)];break;
			case(2):targetDR=target.Param[(1128)];targetDT=target.Param[(17)];break;
			case(3):targetDR=target.Param[(1129)];targetDT=target.Param[(18)];break;
			case(4):targetDR=target.Param[(1130)];targetDT=target.Param[(19)];break;
			case(7):targetDT=target.Param[(22)];break;
			case(5):targetDR=target.Param[(1131)];targetDT=target.Param[(20)];break;
			case(6):targetDR=target.Param[(1132)];targetDT=target.Param[(21)];break;
		}
	}
	Item@armor_=(target.GetItem(0,(attack.AimHead)?(4):(3))); 
	
	if((@armor_!=null)&&targetIsPlayer)
	{
		if(attackerIsPaszczur)
		{
			WearItem(target,armor_,((100-armorDr)*rounds+2*totalDmg)/3);
		}
		else
		WearItem(target,armor_,((100-armorDr)*rounds+totalDmg)/target.Param[(6)]);
	} 
	
	if(isOffGame)
	{
		if(target.IsPlayer())target.Disconnect();
	} 
	
	if(isDead)
	{
		bool burst=attack.IsBurst;
		uint anim2Dead=0;
		
		if(target.IsKnockout())
		{
			if(target.Anim2Knockout==(86))
			anim2Dead=(100);
			else
			anim2Dead=(101);
		}
		else
		{
			if(attackFront)
			anim2Dead=(102);
			else
			anim2Dead=(103);
			
			switch(dmgType)
			{
				case(0):
				break;
				case(1):
				if(burst)
				{
					if(isCritical||isBloodyMess)
					anim2Dead=(111);
					else
					anim2Dead=(112);
				}
				else
				{
					if(isCritical||isBloodyMess)
					anim2Dead=(110);
				}
				break;
				case(2):
				anim2Dead=(115);
				break;
				case(3):
				if(isCritical||isBloodyMess)
				{
					if(isBloodyMess||Random(0,3)==0)
					anim2Dead=(119);
					else
					anim2Dead=(118);
				}
				else
				anim2Dead=(118);
				break;
				case(4):
				anim2Dead=(116);
				break;
				case(5):
				if(Random(0,1)==0)
				anim2Dead=(113);
				else
				anim2Dead=(114);
				break;
				case(7):
				anim2Dead=(117);
				break;
				default:
				break;
			}
			if(target.Param[(529)]!=0)
			{
				target.SetDir(0);
				anim2Dead=(117);
			}
		} 
		
		if(targetIsPlayer&&target.GetMap().GetProtoId()!=(3))
		AddScore(target,(5),1);
		if(validAttacker&&attackerIsPlayer&&attacker.GetMap().GetProtoId()!=(3))
		{
			AddScore(attacker,(16),1);
			if(targetIsPlayer&&attacker.GetIp()!=target.GetIp())
			{
				AddScore(attacker,(7),1);
			}
			else if(target.Id==attack.TargetId)
			target.AddEnemyInStack(attacker.Id);
		}
		
		if(validAttacker&&!attackerIsPlayer)
		attacker.EraseEnemyFromStack(target.Id);
		
		if(anim2Dead==(112)&&target.Param[(72)]<=-100)
		target.ToDead((111),attacker);
		else
		target.ToDead(anim2Dead,attacker);
		if((@attacker!=null))
		{        
			
			int spree=0;
			if((@realWeapon!=null)&&realWeapon.Val3==(16)&&(@attacker!=null)&&attacker.IsPlayer())spree+=getSpree(attacker.Param[(8)],3);
			if((@realWeapon!=null)&&realWeapon.Val4==(16)&&(@attacker!=null)&&attacker.IsPlayer())spree+=getSpree(attacker.Param[(8)],3);
			if((@realWeapon!=null)&&realWeapon.Val5==(16)&&(@attacker!=null)&&attacker.IsPlayer())spree+=getSpree(attacker.Param[(8)],3);
			if((@realWeapon!=null)&&realWeapon.Val6==(16)&&(@attacker!=null)&&attacker.IsPlayer())spree+=getSpree(attacker.Param[(8)],3);
			if((@realWeapon!=null)&&realWeapon.Val7==(16)&&(@attacker!=null)&&attacker.IsPlayer())spree+=getSpree(attacker.Param[(8)],3);
			if((@realWeapon!=null)&&realWeapon.Val8==(16)&&(@attacker!=null)&&attacker.IsPlayer())spree+=getSpree(attacker.Param[(8)],3);  
			
			if((@attacker!=null)&&attacker.IsPlayer())
			if(target.IsNpc()&&attacker.Param[(404)]>0)
			spree+=getSpree(attacker.Param[(8)],3);
			
			if((@attacker!=null)&&attacker.IsPlayer())
			if(attacker.Trait[(558)]>0)
			spree+=getSpree(attacker.Param[(8)],3);
			
			if(target.IsPlayer()&&attacker.Param[(404)]>0&&(@attacker!=null)&&attacker.IsPlayer())
			{
				spree=attacker.Param[(8)];
				attacker.ParamBase[(72)]=attacker.Param[(7)];
			}
			
			if(spree>0)
			{
				array<uint>spreedata={spree,attacker.Id};
				CreateTimeEvent(((__FullSecond)+(((100)*__TimeMultiplier/1000))),"e_KillingSpree",spreedata,true);    
				
			}
			
			if(IsTown(map))
			{
				Item@armorexp=(attack.Attacker.GetItem(0,(attack.AimHead)?(4):(3)));
				if((bt!=(0)&&bt!=(1)&&bt!=(3)&&bt!=(4)&&bt!=(2)&&bt!=(5))
				||(IsTownRole==200||IsTownRole==201||IsTownRole==202||IsTownRole==203))
				{
					attacker.ParamBase[(76)]+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
					
					if((@realWeapon!=null)&&!realWeapon.IsStackable())
					{
						realWeapon.Val0+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
						realWeapon.Val0*=1+((attacker.Param[(6)]*3)/100);
						realWeapon.Update();
						_weapon_perk(realWeapon,false);
					}
					if((@armorexp!=null))
					{
						armorexp.Val0+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
						armorexp.Update();
						_armor_perk(armorexp,false);
					}
				}
			}
			else
			{
				
				if(attackerIsPlayer)
				{
					array<Critter@>playersToShare;
					int cnt=0;
					int exp=0;
					int expDiv=0; 
					
					cnt=target.GetCritters(true,(0x01)|(0x10),playersToShare);
					if(cnt>0)
					{
						
						Critter@myLeader=attacker.GetFollowLeader();
						for(int i=0;i<cnt;++i)
						{
							
							++expDiv;
							
							if(playersToShare[i].Id==attacker.Id)
							continue; 
							
							if((@myLeader!=null)&&playersToShare[i].Id==myLeader.Id)
							continue;
							
							Critter@tmpLeader=playersToShare[i].GetFollowLeader();
							
							if((@tmpLeader!=null)&&attacker.Id==tmpLeader.Id)
							continue; 
							
							if((@tmpLeader!=null)&&(@myLeader!=null)&&tmpLeader.Id==myLeader.Id)
							continue; 
							
							playersToShare.removeAt(i);
							--i;
							--cnt;
							--expDiv;
						}
						
						if(expDiv>0)
						{
							exp=target.Param[(66)]/expDiv;
							Item@armorexp=(attack.Attacker.GetItem(0,(attack.AimHead)?(4):(3)));
							
							if((@realWeapon!=null)&&!realWeapon.IsStackable())
							{
								realWeapon.Val0+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
								realWeapon.Update();
								_weapon_perk(realWeapon,false);
							}
							if((@armorexp!=null))
							{
								armorexp.Val0+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
								armorexp.Update();
								_armor_perk(armorexp,false);
							}
						}
						else
						exp=0;
						Item@armorexp=(attack.Attacker.GetItem(0,(attack.AimHead)?(4):(3)));
						
						if((@realWeapon!=null)&&!realWeapon.IsStackable())
						{
							realWeapon.Val0+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
							realWeapon.Update();
							_weapon_perk(realWeapon,false);
						}
						if((@armorexp!=null)&&!realWeapon.IsStackable())
						{
							armorexp.Val0+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
							armorexp.Update();
							_armor_perk(armorexp,false);
						}
						if(exp>0)
						{
							for(int i=0;i<expDiv;++i)
							{
								Item@sharedweapon=playersToShare[i].GetItem(0,(1));
								Item@sharedarmor=playersToShare[i].GetItem(0,(3));
								if(playersToShare[i].Id==attacker.Id&&expDiv>1)
								{
									playersToShare[i].ParamBase[(76)]+=exp*1.25*(GetGvar((62002)))*(GetGvar((62001)));
									if((@sharedweapon!=null)&&!sharedweapon.IsStackable())
									{
										sharedweapon.Val0+=exp*1.25*(GetGvar((62002)))*(GetGvar((62001)));
										sharedweapon.Update();
										_weapon_perk(sharedweapon,false);
									}
									if((@sharedarmor!=null)&&!sharedarmor.IsStackable())
									{
										sharedarmor.Val0+=exp*1.25*(GetGvar((62002)))*(GetGvar((62001)));
										sharedarmor.Update();
										_armor_perk(sharedarmor,false);
									}
								}
								
								else
								{
									playersToShare[i].ParamBase[(76)]+=exp*(GetGvar((62002)))*(GetGvar((62001)));
									if((@sharedweapon!=null)&&!sharedweapon.IsStackable())
									{
										sharedweapon.Val0+=exp*1.25*(GetGvar((62002)))*(GetGvar((62001)));
										sharedweapon.Update();
										_weapon_perk(sharedweapon,false);
									}
									if((@sharedarmor!=null)&&!sharedarmor.IsStackable())
									{
										sharedarmor.Val0+=exp*1.25*(GetGvar((62002)))*(GetGvar((62001)));
										sharedarmor.Update();
										_armor_perk(sharedarmor,false);
									}
								}
							}
						}
					}
				}
				else
				{
					Item@armorexp=(attack.Attacker.GetItem(0,(attack.AimHead)?(4):(3)));
					
					if((@realWeapon!=null)&&!realWeapon.IsStackable())
					{
						realWeapon.Val0+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
						realWeapon.Update();
						_weapon_perk(realWeapon,false);
					}
					if((@armorexp!=null)&&!realWeapon.IsStackable())
					{
						armorexp.Val0+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
						armorexp.Update();
						_armor_perk(armorexp,false);
					}
					attacker.ParamBase[(76)]+=target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001)));
				}  
				
			} 
			
			if(target.IsPlayer())
			{
				attacker.ParamBase[(__KillBegin)+(24)]++;
			}
			
			attacker.ParamBase[(__KillBegin)+bt]++;
			
			if(target.IsNpc())
			LogExperience(attacker,target.Param[(66)]*(GetGvar((62002)))*(GetGvar((62001))),(@realWeapon!=null)?realWeapon.Proto.Weapon_Skill_0:(203),"Kill",target.GetProtoId());
			
		} 
		
	}
	else
	if(isKo)
	{
		
		int maxAp=target.Param[(8)];
		int currentAp=target.Param[(75)];
		int targetAp=currentAp;
		bool quick=target.Param[(403)]>0;
		bool upgraded_crits=attacker.Param[(321)]>1;
		if(loseTurn)
		{
			targetAp=quick?-maxAp/3:-maxAp;
			target.ParamBase[(88)]=0;
		}
		
		if(knockOut)
		{
			uint apdiv=1;
			if(upgraded_crits&&Random(1,20)==1)
			apdiv=2;
			targetAp=quick?-Random(5,(25-target.Param[(5)])*apdiv)/3:-Random(10,(30-target.Param[(5)])*apdiv);
			VerboseActionCombat(target,"Knockout");
		}
		
		if(knockDown&&!(target.IsKnockout()&&map.IsTurnBased()))
		{
			uint apdiv=1;
			if(upgraded_crits&&Random(1,20)==1)
			apdiv=2;
			targetAp-=quick?1*apdiv:3*apdiv;
		}
		if((isBelow||knockOut||knockDown||dmgType==(7)||isShotgun)&&!target.IsKnockout()&&target.Param[(531)]==0)
		{
			
			int knockDist=knockDmg;
			
			bool haveknockbackperk=false;
			if((@realWeapon!=null)&&realWeapon.Val3==(11))haveknockbackperk=true;
			if((@realWeapon!=null)&&realWeapon.Val4==(11))haveknockbackperk=true;
			if((@realWeapon!=null)&&realWeapon.Val5==(11))haveknockbackperk=true;
			if((@realWeapon!=null)&&realWeapon.Val6==(11))haveknockbackperk=true;
			if((@realWeapon!=null)&&realWeapon.Val7==(11))haveknockbackperk=true;
			if((@realWeapon!=null)&&realWeapon.Val8==(11))haveknockbackperk=true;
			if((dmgType==(7)||attack.WeaponSubtype==(2)||haveknockbackperk)&&target.IsCanWalk())
			{
				
				if(haveknockbackperk)
				knockDist/=5;
				else
				knockDist/=10;
				if(target.Param[(405)]!=0)
				knockDist/=2;
				knockDist--;
				
				if(knockDist>10)
				knockDist=10;
				uint16 knockHx=attack.Hx;
				uint16 knockHy=attack.Hy;
				if(knockDist>0)
				{
					map.GetHexCoordWall(target.HexX,target.HexY,knockHx,knockHy,180.0f,knockDist);
					target.ToKnockout(((attackFront)?(82):(83)),((attackFront)?(86):(87)),((attackFront)?(88):(89)),0,knockHx,knockHy);
				}
				else
				target.ToKnockout(((attackFront)?(82):(83)),((attackFront)?(86):(87)),((attackFront)?(88):(89)),0,target.HexX,target.HexY);
			}
			else
			target.ToKnockout(((attackFront)?(82):(83)),((attackFront)?(86):(87)),((attackFront)?(88):(89)),0,target.HexX,target.HexY);
		}
		if(targetAp<currentAp)
		target.ParamBase[(75)]=100*targetAp;
	} 
	
	else if(!(target.IsKnockout()||(((target.Param[(534)])&((0x00080000)))!=0)))
	{
		
		if(attack.ShowHitAnimForce)
		target.Action((15),attackFront?0:1,null);
		else
		target.Action((14),attackFront?0:1,null); 
		
		if(isCombatText&&dmgType!=(0)&&!targetIsPlayer)
		{
			switch(aim)
			{
				case(0):
				case(9):
				case(4):
				AI_TrySayCombatText(target,(13));
				break;
				case(7):
				AI_TrySayCombatText(target,(16));
				break;
				case(1):
				AI_TrySayCombatText(target,(10));
				break;
				case(2):
				AI_TrySayCombatText(target,(11));
				break;
				case(3):
				AI_TrySayCombatText(target,(12));
				break;
				case(8):
				AI_TrySayCombatText(target,(17));
				break;
				case(5):
				AI_TrySayCombatText(target,(14));
				break;
				case(6):
				AI_TrySayCombatText(target,(15));
				break;
				default:
				break;
			}
		}
	}
	
	bool isAimed=(aim!=(0))&&(aim!=(4))&&(aim!=(9));
	
	uint mainMsg=(4);
	uint length=4;
	
	if(isCritical)
	{
		mainMsg+=2;
		length+=2;
	}
	if(isDead)
	{
		mainMsg+=4;
		
	}
	if(isAimed)
	{
		mainMsg+=1;
		length+=1;
	}
	
	array<uint>sendEff(length);
	sendEff[0]=mainMsg;
	sendEff[1]=target.Id;
	sendEff[2]=((@attacker!=null))?attacker.Id:0;
	uint now=3;
	
	if(isAimed)
	{
		sendEff[now]=aim;
		now++;
	}
	
	sendEff[now]=totalDmg;
	now++;
	
	if(isCritical)
	{
		sendEff[now]=msgEff;
		now++;
		sendEff[now]=extraMessage;
	}
	
	Critter@[]source={target};
	array<Critter@>crits;
	
	if(@target.GetMap()!=null)
	{
		target.GetMap().GetCrittersSeeing(source,true,(0x0F)|(0x10),crits);
		
		for(int i=0,j=crits.length();i<j;i++)
		if(crits[i].Id!=target.Id)
		AddEff(crits[i],sendEff,results);
	}
	if(isCritical)
	sendEff[now]=extraMessage+1500;
	
	AddEff(target,sendEff,results); 
	
	if(validAttacker)
	{
		if((@realWeapon!=null)&&realWeapon.Val3==(14)&&target.Param[(409)]==0)AffectPoison(target,Random(10,40));
		if((@realWeapon!=null)&&realWeapon.Val4==(14)&&target.Param[(409)]==0)AffectPoison(target,Random(10,40));
		if((@realWeapon!=null)&&realWeapon.Val5==(14)&&target.Param[(409)]==0)AffectPoison(target,Random(10,40));
		if((@realWeapon!=null)&&realWeapon.Val6==(14)&&target.Param[(409)]==0)AffectPoison(target,Random(10,40));
		if((@realWeapon!=null)&&realWeapon.Val7==(14)&&target.Param[(409)]==0)AffectPoison(target,Random(10,40));
		if((@realWeapon!=null)&&realWeapon.Val8==(14)&&target.Param[(409)]==0)AffectPoison(target,Random(10,40));
		
		int lifesteal=0;
		if((@realWeapon!=null)&&realWeapon.Val3==(17))lifesteal+=totalDmg/4;
		if((@realWeapon!=null)&&realWeapon.Val4==(17))lifesteal+=totalDmg/4;
		if((@realWeapon!=null)&&realWeapon.Val5==(17))lifesteal+=totalDmg/4;
		if((@realWeapon!=null)&&realWeapon.Val6==(17))lifesteal+=totalDmg/4;
		if((@realWeapon!=null)&&realWeapon.Val7==(17))lifesteal+=totalDmg/4;
		if((@realWeapon!=null)&&realWeapon.Val8==(17))lifesteal+=totalDmg/4;
		
		if(attacker.Param[(410)]>0&&(attack.WeaponSubtype==(2)||attack.WeaponSubtype==(1)))lifesteal+=totalDmg/4;
		
		if(attacker.Param[(404)]>0)lifesteal+=totalDmg/10;
		
		if(attacker.Param[(73)]>0)
		lifesteal=lifesteal*(0.50);
		if(attackerIsPlayer)
		attacker.ParamBase[(72)]+=lifesteal;
		if(attacker.Param[(72)]>attacker.Param[(7)])
		attacker.ParamBase[(72)]=attacker.Param[(7)];
		BloodCreateByDamage(target,totalDmg,dmgType);
		if(ammoPid==(25584)&&target.Param[(409)]==0&&attacker.IsPlayer())
		AffectRadiation(target,Random(300,750));
		if((@realWeapon!=null)&&(ammoPid==(361))&&target.Param[(409)]==0)
		{
			AffectPoison(target,Random(40,100));
		}
		else
		if((@realWeapon!=null)&&(ammoPid==(362))&&target.Param[(409)]==0)
		{
			AffectPoison(target,Random(1,5));
		}
		
		else
		if((@realWeapon!=null)&&(ammoPid==(25586))&&attackerIsPlayer)
		{
			int ileleczy=0;
			if(target.Param[(382)]==0)
			ileleczy=Random(25,130)*(1+attacker.Param[(382)]);
			else ileleczy=Random(25,130)*(1+target.Param[(382)]);
			if(target.Param[(73)]>0)
			ileleczy=ileleczy*(0.50);
			target.ParamBase[(72)]+=ileleczy;
			if(attacker.Param[(320)]>0&&attacker.Param[(333)]>0&&attacker.Param[(398)]>0)
			attacker.ParamBase[(72)]+=ileleczy/2;
			target.Say((11),"You got heal for "+ileleczy+" Hit points");
			attacker.Say((11),"You heal "+target.Name+" for "+ileleczy+" Hit points");
			if(target.IsPlayer())
			attacker.ParamBase[(1184)]+=ileleczy;
			if(target.Param[(72)]>target.Param[(7)])
			target.ParamBase[(72)]=target.Param[(7)];
		}
		else
		if((@realWeapon!=null)&&(realWeapon.Proto.ProtoId==(573))&&target.Param[(409)]==0)
		{
			AffectPoison(target,Random(1,5));
		}
		else
		{
			int poison=attacker.Param[(64)];
			int radiation=attacker.Param[(65)];
			if(poison!=0||radiation!=0)
			{
				if(Random(2,21)>target.Param[(6)])
				{
					if(poison>0&&target.Param[(409)]==0)
					AffectPoison(target,Random(poison/3,poison));
					if(radiation>0)
					AffectRadiation(target,Random(radiation/3,radiation));
				}
			}
			else
			{
				int attackerBt=attacker.Param[(67)];
				if(attackerBt==(6)||attackerBt==(8)||attackerBt==(16)||attackerBt==(9)&&target.Param[(409)]==0)
				{
					if(Random(2,21)>target.Param[(6)])
					{
						if(attackerBt==(6))
						AffectPoison(target,Random(3,15));
						else if(attackerBt==(8))
						AffectPoison(target,Random(10,40));
						else if(attackerBt==(16))
						AffectRadiation(target,Random(10,40));
						else if(attackerBt==(9))
						{
							AffectPoison(target,Random(10,20));
							AffectRadiation(target,Random(10,20));
						}
					}
				}
			}
		}
	}
	if(attack.DmgType==(7)&&target.Param[(422)]==0)
	{
		if(Random(75,250)<totalDmg)
		{
			switch(Random(1,4))
			{
				case 1:target.ParamBase[(504)]=1;break;
				case 2:target.ParamBase[(503)]=1;break;
				case 3:target.ParamBase[(506)]=1;break;
				case 4:target.ParamBase[(505)]=1;break;
			}
		}
	}
	
	if(attack.DmgType==(5)&&attack.Attacker.Id!=(51))
	{
		target.ParamBase[(803)]+=2;
	}
	if(attack.DmgType==(3)&&attack.Attacker.IsPlayer())
	{
		if((@realWeapon!=null)&&(realWeapon.Proto.ProtoId!=(390)))
		target.ParamBase[(120)]=Random(1,10);
		if((@realWeapon!=null)&&(realWeapon.Proto.ProtoId==(390)))
		target.ParamBase[(120)]=1;
		target.ParamBase[(188)]=attack.Attacker.Id;
		target.AddTimeEvent("cte_Burn",GetBurnDuration(target),(11));
	}
	if(attacker.IsPlayer()&&target.IsPlayer()&&attacker.ParamBase[(89)]>203)
	{
		attacker.ParamBase[(1184)]+=totalDmg;
		target.ParamBase[(1184)]-=totalDmg;
		
	}
	LogDamage(map,attacker,target,realWeapon,attack.Ammo,aim,attack.IsBurst,totalDmg,isCritical,eff,rounds);
	PostDamage(target);
} 

void CommenceExplosion(AttackStruct&attack,Map@map,uint16 tx,uint16 ty,Critter@target,uint weapPid,bool isCritical,uint intentionallyId,bool isRocket,array<CombatRes>&results,bool isExplodeRocket)
{
	uint radius=2;
	if(isRocket)radius=isExplodeRocket?4:3; 
	
	if(weapPid==(1834)||weapPid==(25567))
	radius=4;
	
	if(weapPid==(159)||attack.ammoPid==(1271))
	{
		MolotovBlast(map,tx,ty,(608),((@attack.Attacker!=null)?attack.Attacker.Id:0));
		map.RunEffect((4027),tx,ty,2);
	}
	else if((weapPid==(26)&&attack.Attacker.Param[(402)]>1))
	{
		MolotovBlast(map,tx,ty,(608),((@attack.Attacker!=null)?attack.Attacker.Id:0));
		map.RunEffect((4027),tx,ty,2);
	}
	else if(weapPid==(25)||weapPid==(421))
	map.RunEffect((4028),tx,ty,2);
	else if(weapPid==(27)||weapPid==(25570))
	map.RunEffect((4008),tx,ty,2);
	else if((weapPid==(26)||weapPid==(9675)&&attack.Attacker.Param[(402)]!=2)||attack.ammoPid==(1270))
	map.RunEffect((4029),tx,ty,2);
	else if(isRocket&&weapPid!=(25567)&&attack.ammoPid!=(1270))
	map.RunEffect((4011),tx,ty,1);
	else if(weapPid==(1834))
	map.RunEffect((4027),tx,ty,3);
	else if(weapPid==(25567))
	map.RunEffect((4008),tx,ty,4);
	else if(weapPid==(25473))
	map.RunEffect((4008),tx,ty,2);
	else
	{
		if(attack.DmgType==(7))
		map.RunEffect((4027),tx,ty,2);
		else return;
	}
	
	string soundName="WHN1XXX1.ACM";
	ProtoItem@proto=GetProtoItem(weapPid);
	if((@proto!=null))
	soundName.rawSet(2,proto.Weapon_SoundId_0);
	map.PlaySound(soundName,tx,ty,50);
	
	array<Critter@>critsHit;
	map.GetCrittersHex(tx,ty,radius,(0x03),critsHit);
	bool validTarget=(@target!=null);
	uint targetId=0;
	bool intentionally=((@attack.Attacker!=null)&&!(attack.Attacker.IsNpc()&&!(((attack.Attacker.Param[(534)]&((0x00000020)))!=0))))||targetId==intentionallyId;
	
	if(validTarget)
	{
		targetId=target.Id;
		int CriticalChance;
		if(isCritical)CriticalChance=100;
		ApplyDamage(attack,target,1,isCritical,intentionally,results,CriticalChance);
		
		if(weapPid==(159)||attack.ammoPid==(1271)||(weapPid==(26)&&attack.Attacker.Param[(402)]>1))
		{
			target.ParamBase[(120)]+=(2);
			if(target.Param[(120)]>(10))target.ParamBase[(120)]=(10);
			target.ParamBase[(188)]=attack.Attacker.Id;
			
		}
	}
	
	attack.Hx=tx;
	attack.Hy=ty;
	
	for(int i=0,j=critsHit.length();i<j;i++)
	if(!validTarget||targetId!=critsHit[i].Id)
	{
		ApplyDamage(attack,critsHit[i],1,false,intentionally,results,0);
		
		if(weapPid==(159)||attack.ammoPid==(1271)||(weapPid==(26)&&attack.Attacker.Param[(402)]>1))
		{
			map.GetCrittersHex(tx,ty,radius,(0x03),critsHit);
			critsHit[i].ParamBase[(120)]+=(2);
			if(critsHit[i].Param[(120)]>(10))critsHit[i].ParamBase[(120)]=(10);
			critsHit[i].ParamBase[(188)]=attack.Attacker.Id;
			
		}
	}
}

void CommenceExplosionEx(Critter@attacker,Map@map,uint16 tx,uint16 ty,Critter@target,uint weapPid,bool isCritical,uint intentionallyId,bool isRocket,bool isExplodeRocket)
{
	array<CombatRes>results;
	AttackStruct attack;
	@attack.Attacker=attacker;
	attack.Aim=(9);
	ProtoItem@proto=GetProtoItem(weapPid);
	int bonusmindmg=0;
	Item@realWeapon=attacker.GetItem(0,(1));
	if((@realWeapon!=null)&&realWeapon.Val3==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val4==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val5==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val6==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val7==(2))bonusmindmg+=24;
	if((@realWeapon!=null)&&realWeapon.Val8==(2))bonusmindmg+=24;
	int bonusmaxdmg=0;
	if((@realWeapon!=null)&&realWeapon.Val3==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val4==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val5==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val6==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val7==(3))bonusmaxdmg+=19;
	if((@realWeapon!=null)&&realWeapon.Val8==(3))bonusmaxdmg+=19;
	
	if((@realWeapon!=null)&&realWeapon.Val3==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val4==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val5==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val6==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val7==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val8==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	if((@realWeapon!=null)&&realWeapon.Val2==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
	attack.DmgMin=((0)==0?proto.Weapon_DmgMin_0:((0)==1?proto.Weapon_DmgMin_1:((0)==2?proto.Weapon_DmgMin_2:0)))+((0)==0?proto.Weapon_DmgMin_0:((0)==1?proto.Weapon_DmgMin_1:((0)==2?proto.Weapon_DmgMin_2:0)))*bonusmindmg/100;
	attack.DmgMax=((0)==0?proto.Weapon_DmgMax_0:((0)==1?proto.Weapon_DmgMax_1:((0)==2?proto.Weapon_DmgMax_2:0)))+((0)==0?proto.Weapon_DmgMax_0:((0)==1?proto.Weapon_DmgMax_1:((0)==2?proto.Weapon_DmgMax_2:0)))*bonusmaxdmg/100;
	attack.DmgType=((0)==0?proto.Weapon_DmgType_0:((0)==1?proto.Weapon_DmgType_1:((0)==2?proto.Weapon_DmgType_2:0)));
	attack.WeaponPerk=proto.Weapon_Perk;
	
	CommenceExplosion(attack,map,tx,ty,target,weapPid,isCritical,intentionallyId,isRocket,results,isExplodeRocket);
	runTree(results,0);
}

void CommenceExplosionHexEx(Critter@attacker,Map@map,uint16 tx,uint16 ty,Critter@target,uint weapPid,Item@usedWeapon,uint ammoPid,bool isCritical,uint intentionallyId,bool isRocket,bool isExplodeRocket)
{
	array<CombatRes>results;
	AttackStruct attack;
	@attack.Attacker=attacker;
	attack.Aim=(9);
	@attack.RealWeapon=usedWeapon;
	ProtoItem@proto=GetProtoItem(weapPid);
	
	attack.DmgMin=((0)==0?proto.Weapon_DmgMin_0:((0)==1?proto.Weapon_DmgMin_1:((0)==2?proto.Weapon_DmgMin_2:0)));
	attack.DmgMax=((0)==0?proto.Weapon_DmgMax_0:((0)==1?proto.Weapon_DmgMax_1:((0)==2?proto.Weapon_DmgMax_2:0)));
	attack.DmgType=((0)==0?proto.Weapon_DmgType_0:((0)==1?proto.Weapon_DmgType_1:((0)==2?proto.Weapon_DmgType_2:0)));
	attack.WeaponPerk=proto.Weapon_Perk;
	if(ammoPid>0)
	attack.ammoPid=ammoPid;
	
	CommenceExplosion(attack,map,tx,ty,target,weapPid,isCritical,intentionallyId,isRocket,results,isExplodeRocket);
	runTree(results,0);
}

void CommenceDischargeEx(Critter@attacker,Map@map,uint16 tx,uint16 ty,uint dmgRad,uint dmgMin,uint dmgMax,int effChance,uint rechargeVal,bool tesla)
{
	array<CombatRes>results;
	
	AttackStruct attack;
	@attack.Attacker=attacker;
	attack.Aim=(9);
	attack.DmgMin=dmgMin;
	attack.DmgMax=dmgMax;
	attack.DmgType=(5);
	if(!tesla)
	attack.DmgType=(7);
	uint radius=dmgRad;
	uint16 stepX=attacker.HexX;
	uint16 stepY=attacker.HexY;       
	
	for(uint rad=1;rad<=radius;rad++)
	{ 
		
		stepX=attacker.HexX;
		stepY=attacker.HexY;
		map.MoveHexByDir(stepX,stepY,4,rad);
		for(uint8 stepDir=0;stepDir<radius;stepDir++)
		{
			for(uint step=0;step<rad;step++)
			{
				map.MoveHexByDir(stepX,stepY,stepDir,1);
				
				if(tesla)
				map.RunEffect((4008),stepX,stepY,0);
				if(!tesla)
				map.RunEffect((4027),stepX,stepY,0);
			}
		}
		
	}
	if(tesla)
	map.PlaySound("was1xxx"+Random(1,2),tx,ty,50);
	if(!tesla)
	{
		map.PlaySound(Random(0,1)==0?"WHN1XXX1.ACM":"WHN1XXX2.ACM");
		QuakeScreen(map);
	}
	
	array<Critter@>crits;
	uint foundCritters=map.GetCrittersHex(tx,ty,radius,(0x03),crits);
	for(uint c=0;c<foundCritters;c++)
	{
		if(crits[c].Id==attacker.Id)
		{
			crits.removeAt(c);
			foundCritters--;
			break;
		}
		
	}
	
	uint recharge=(foundCritters>0)?rechargeVal/foundCritters:0; 
	
	bool intentionally=true;
	for(uint c=0;c<foundCritters;c++)
	{
		map.RunEffect((4008),crits[c].HexX,crits[c].HexY,0);
		ApplyDamage(attack,crits[c],1,false,intentionally,results,0);
		
		Item@usedArmor=crits[c].GetItem(0,(3));
		if(!(@usedArmor!=null)||usedArmor.GetProtoId()!=(240))
		{
			crits.removeAt(c);
			--foundCritters;
			--c;
		}
	} 
	
	if(foundCritters>0&&recharge>0)
	{
		for(uint c=0;c<foundCritters;c++)
		{
			if(crits[c].IsLife())
			{
				Item@usedArmor=crits[c].GetItem(0,(3));
				if((@usedArmor!=null)||usedArmor.GetProtoId()==(240))
				{
					usedArmor.Charge+=recharge;
					if(usedArmor.Charge>usedArmor.Proto.Misc_ChargeMax)
					usedArmor.Charge=usedArmor.Proto.Misc_ChargeMax;
					usedArmor.Update();
					crits[c].Say((11),"Charging armor with "+recharge+" charges.");
					crits[c].Say((11),"Charges: "+usedArmor.Charge+"/"+usedArmor.Proto.Misc_ChargeMax+".");
				}
			}
		}
	}
	if(!tesla)
	attacker.ToDead((117),null);
	runTree(results,0);
}

void CriticalFailure(Critter&cr,ProtoItem&weapon,uint8 weaponUse,ProtoItem@ammo,uint eff,array<CombatRes>&results)
{              
	
	AttackStruct attack;
	
	int totalDmg=0;
	bool tookDamage=false;
	Item@realWeapon=cr.GetItem(0,(1));
	bool wpnIsRemoved=((weaponUse)==0?weapon.Weapon_Remove_0:((weaponUse)==1?weapon.Weapon_Remove_1:((weaponUse)==2?weapon.Weapon_Remove_2:false)));
	Map@map=cr.GetMap();
	
	if(cr.Param[(523)]!=0)
	(eff=((eff)&(~((0x00004000)))));
	
	if((((eff)&((0x00010000)))!=0)||(((eff)&((0x00001000)))!=0))
	{
		bool validAmmo=(@ammo!=null);
		uint16 ammoPid=0;
		uint16 weapPid=0;
		if(validAmmo)
		ammoPid=ammo.ProtoId;
		
		if((@weapon!=null))
		weapPid=weapon.ProtoId;
		
		int dmgType=((weaponUse)==0?weapon.Weapon_DmgType_0:((weaponUse)==1?weapon.Weapon_DmgType_1:((weaponUse)==2?weapon.Weapon_DmgType_2:0)));
		if(ammoPid==(576))dmgType=(6);
		if(ammoPid==(850))dmgType=(3);
		int targetDT=0;
		int targetDR=0;
		uint8 aim=(((weaponUse)>>4)&0xF);
		if(!attack.AimHead)
		{
			switch(dmgType)
			{
				case(1):targetDR=cr.Param[(23)];targetDT=cr.Param[(16)];break;
				case(2):targetDR=cr.Param[(24)];targetDT=cr.Param[(17)];break;
				case(3):targetDR=cr.Param[(25)];targetDT=cr.Param[(18)];break;
				case(4):targetDR=cr.Param[(26)];targetDT=cr.Param[(19)];break;
				case(7):targetDR=cr.Param[(29)];targetDT=cr.Param[(22)];break;
				case(5):targetDR=cr.Param[(27)];targetDT=cr.Param[(20)];break;
				case(6):targetDR=cr.Param[(28)];targetDT=cr.Param[(21)];break;
			}
		}
		else
		{
			switch(dmgType)
			{
				case(1):targetDR=cr.Param[(1127)];targetDT=cr.Param[(16)];break;
				case(2):targetDR=cr.Param[(1128)];targetDT=cr.Param[(17)];break;
				case(3):targetDR=cr.Param[(1129)];targetDT=cr.Param[(18)];break;
				case(4):targetDR=cr.Param[(1130)];targetDT=cr.Param[(19)];break;
				case(7):targetDT=cr.Param[(22)];break;
				case(5):targetDR=cr.Param[(1131)];targetDT=cr.Param[(20)];break;
				case(6):targetDR=cr.Param[(1132)];targetDT=cr.Param[(21)];break;
			}
		}
		Item@armor_=(cr.GetItem(0,(attack.AimHead)?(4):(3)));   
		
		int partialBypassChance=GetPartialBypassChance(cr,false);  
		
		int partialBypassDR=targetDR/4;
		int partialBypassDT=targetDT/4;
		
		if(weapon.Weapon_Perk==(3))
		targetDT/=2;
		else if(validAmmo&&((@ammo!=null)?(ammo.Ammo_DTDiv>0):false))
		targetDT/=validAmmo?ammo.Ammo_DTDiv:1;
		
		if(cr.Param[(554)]!=0)
		{
			if(dmgType==(2)||dmgType==(5)||dmgType==(4))
			{
				targetDR+=15;
				partialBypassDR+=15;
			}
			else
			{
				targetDR+=30;
				partialBypassDR+=30;
			}
		}
		targetDR+=validAmmo?ammo.Ammo_DrMod:0;
		partialBypassDR+=validAmmo?ammo.Ammo_DrMod:0;
		targetDR=(((targetDR)>(100))?(100):(((targetDR)<(0))?(0):(targetDR)));
		
		partialBypassDR=(((partialBypassDR)<(targetDR))?(partialBypassDR):(targetDR));
		targetDR=(((targetDR)>(100))?(100):(((targetDR)<(0))?(0):(targetDR)));
		partialBypassDR=(((partialBypassDR)>(100))?(100):(((partialBypassDR)<(0))?(0):(partialBypassDR)));
		partialBypassDT=(((partialBypassDT)<(targetDT))?(partialBypassDT):(targetDT));
		Item@realWeapon=cr.GetItem(0,(1));
		int bonusmindmg=0;
		if((@realWeapon!=null)&&realWeapon.Val3==(2))bonusmindmg+=24;
		if((@realWeapon!=null)&&realWeapon.Val4==(2))bonusmindmg+=24;
		if((@realWeapon!=null)&&realWeapon.Val5==(2))bonusmindmg+=24;
		if((@realWeapon!=null)&&realWeapon.Val6==(2))bonusmindmg+=24;
		if((@realWeapon!=null)&&realWeapon.Val7==(2))bonusmindmg+=24;
		if((@realWeapon!=null)&&realWeapon.Val8==(2))bonusmindmg+=24;
		int bonusmaxdmg=0;
		if((@realWeapon!=null)&&realWeapon.Val3==(3))bonusmaxdmg+=19;
		if((@realWeapon!=null)&&realWeapon.Val4==(3))bonusmaxdmg+=19;
		if((@realWeapon!=null)&&realWeapon.Val5==(3))bonusmaxdmg+=19;
		if((@realWeapon!=null)&&realWeapon.Val6==(3))bonusmaxdmg+=19;
		if((@realWeapon!=null)&&realWeapon.Val7==(3))bonusmaxdmg+=19;
		if((@realWeapon!=null)&&realWeapon.Val8==(3))bonusmaxdmg+=19;
		
		if((@realWeapon!=null)&&realWeapon.Val3==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
		if((@realWeapon!=null)&&realWeapon.Val4==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
		if((@realWeapon!=null)&&realWeapon.Val5==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
		if((@realWeapon!=null)&&realWeapon.Val6==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
		if((@realWeapon!=null)&&realWeapon.Val7==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
		if((@realWeapon!=null)&&realWeapon.Val8==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
		if((@realWeapon!=null)&&realWeapon.Val2==(101)){bonusmaxdmg+=50;bonusmindmg+=50;}
		int dmgMin=((weaponUse)==0?weapon.Weapon_DmgMin_0:((weaponUse)==1?weapon.Weapon_DmgMin_1:((weaponUse)==2?weapon.Weapon_DmgMin_2:0)))+((weaponUse)==0?weapon.Weapon_DmgMin_0:((weaponUse)==1?weapon.Weapon_DmgMin_1:((weaponUse)==2?weapon.Weapon_DmgMin_2:0)))*bonusmindmg/100;
		
		int dmgMax=((weaponUse)==0?weapon.Weapon_DmgMax_0:((weaponUse)==1?weapon.Weapon_DmgMax_1:((weaponUse)==2?weapon.Weapon_DmgMax_2:0)))+((weaponUse)==0?weapon.Weapon_DmgMax_0:((weaponUse)==1?weapon.Weapon_DmgMax_1:((weaponUse)==2?weapon.Weapon_DmgMax_2:0)))*bonusmaxdmg/100;
		int dmgMul=validAmmo?ammo.Ammo_DmgMult:1;
		int dmgDiv=validAmmo?ammo.Ammo_DmgDiv:1;
		int bonusbrd=0;
		if((@realWeapon!=null)&&realWeapon.Val3==(1))bonusbrd+=2;
		if((@realWeapon!=null)&&realWeapon.Val4==(1))bonusbrd+=2;
		if((@realWeapon!=null)&&realWeapon.Val5==(1))bonusbrd+=2;
		if((@realWeapon!=null)&&realWeapon.Val6==(1))bonusbrd+=2;
		if((@realWeapon!=null)&&realWeapon.Val7==(1))bonusbrd+=2;
		if((@realWeapon!=null)&&realWeapon.Val8==(1))bonusbrd+=2;
		bool isShotgun=weapon.Weapon_Caliber==11;
		if(!isShotgun)
		totalDmg=Random(dmgMin,dmgMax)+2*cr.Param[(305)]+cr.Param[(428)]*3+cr.Param[(328)]*2+cr.Param[(325)]+cr.Param[(395)]+bonusbrd+cr.Param[(786)];
		if(isShotgun)
		totalDmg=Random(dmgMin,dmgMax);
		
		totalDmg*=dmgMul;
		totalDmg/=dmgDiv;
		
		if(Random(1,100)<=partialBypassChance)
		{
			totalDmg-=partialBypassDT;
			totalDmg-=(totalDmg*partialBypassDR)/100;
		}
		else
		{
			totalDmg-=targetDT;
			totalDmg-=(totalDmg*targetDR)/100;
		}
		int dragon=0;
		if(totalDmg<0)
		totalDmg=0;
		int bt=cr.Param[(67)];
		
		if(cr.Param[(398)]!=0&&!(bt==(16)||bt==(10)))
		totalDmg+=15;
		
		if(cr.Param[(556)]!=0&&weapon.Weapon_IsUnarmed)
		totalDmg+=5;
		if((cr.Param[(553)]!=0&&((@realWeapon!=null)||(((realWeapon.Flags)&((0x00000080)))!=0)))||cr.Param[(553)]!=0&&cr.Param[(345)]!=0)
		totalDmg+=5;
		tookDamage=true;
	}
	
	uint16 ammoRound=((weaponUse)==0?weapon.Weapon_Round_0:((weaponUse)==1?weapon.Weapon_Round_1:((weaponUse)==2?weapon.Weapon_Round_2:0)));
	if(ammoRound>0&&(@realWeapon!=null)&&cr.Param[(522)]==0&&cr.Param[(359)]==0)
	{
		if(realWeapon.AmmoCount<=ammoRound||(((eff)&((0x00020000)))!=0))
		realWeapon.AmmoCount=0;
		else
		realWeapon.AmmoCount-=ammoRound;
		realWeapon.Update();
	}
	
	if(cr.Param[(523)]!=0||(cr.Param[(422)]>0&&Random(1,10)<=cr.Param[(0)]-5))
	(eff=((eff)&(~((0x00004000)))));
	if(cr.Param[(524)]!=0)
	(eff=((eff)&(~((0x00200000)))));
	if(cr.Param[(405)]>0)
	if((((eff)&((0x00000002)))!=0)&&Random(0,10)<=cr.Param[(2)]-3)
	(eff=((eff)&(~((0x00000002)))));
	
	if((((eff)&((0x00004000)))!=0)&&(@realWeapon!=null))
	{
		if(realWeapon.IsStackable())
		{
			Item@dropped=map.AddItem(cr.HexX,cr.HexY,weapon.ProtoId,1);
			if(realWeapon.GetCount()>1)
			realWeapon.SetCount(realWeapon.GetCount()-1);
			else
			DeleteItem(realWeapon);
			
			if(!cr.IsPlayer())
			{
				NpcPlane@plane=CreatePlane();
				array<NpcPlane@>crPlanes(0);
				
				if(cr.GetPlanes(crPlanes)>0)
				plane.Priority=crPlanes[0].Priority+1;
				else
				plane.Priority=70;
				
				plane.Type=(3);
				plane.Pick_HexX=dropped.HexX;
				plane.Pick_HexY=dropped.HexY;
				plane.Pick_Pid=dropped.GetProtoId();
				plane.Pick_UseItemId=0;
				plane.Pick_ToOpen=false;
				plane.Identifier=(38);
				plane.IdentifierExt=dropped.Id;
				plane.Run=true;
				cr.AddPlane(plane);
				SetLvar(dropped.Id,(9010),cr.Id);
			}
		}
		else
		{
			MoveItem(realWeapon,0,map,cr.HexX,cr.HexY);
			if(!cr.IsPlayer())
			{
				NpcPlane@plane=CreatePlane();
				
				array<NpcPlane@>crPlanes(0);
				
				if(cr.GetPlanes(crPlanes)>0)
				plane.Priority=crPlanes[0].Priority+1;
				else
				plane.Priority=70;
				
				plane.Type=(3);
				plane.Pick_HexX=realWeapon.HexX;
				plane.Pick_HexY=realWeapon.HexY;
				plane.Pick_Pid=realWeapon.GetProtoId();
				plane.Pick_UseItemId=0;
				plane.Pick_ToOpen=false;
				plane.Identifier=(38);
				plane.IdentifierExt=realWeapon.Id;
				plane.Run=true;
				cr.AddPlane(plane);
				SetLvar(realWeapon.Id,(9010),cr.Id);
			}
		}
	}
	
	if(((((eff)&((0x00002000)))!=0)||(((eff)&((0x00001000)))!=0))&&(@realWeapon!=null))
	{
		
		if(realWeapon.IsStackable())
		{
			if(realWeapon.GetCount()>1)
			realWeapon.SetCount(realWeapon.GetCount()-1);
		}
		else
		{
			
			int wearProcent=Random(100,2500);    
			
			realWeapon.Deterioration+=wearProcent;
			realWeapon.BrokenCount+=wearProcent/100;   
			
			realWeapon.Update();
		}
	} 
	
	if((((eff)&((0x00080000)))!=0))
	{
		totalDmg+=Random(5,200);
		tookDamage=true;
	}
	
	if((((eff)&((0x00008000)))!=0))
	{
		cr.ParamBase[(75)]=(cr.Param[(403)]>0?(-100*cr.Param[(8)])/3:-100*cr.Param[(8)]);
		cr.ParamBase[(88)]=0;
	}
	
	if((((eff)&((0x00000002)))!=0)&&!cr.IsKnockout())
	cr.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),cr.Param[(403)]!=0?1:3,cr.HexX,cr.HexY);
	
	if((((eff)&((0x00200000)))!=0))
	{
		switch(Random(1,4))
		{
			case 1:
			
			if(cr.Param[(422)]==0||Random(1,10)>cr.Param[(6)]-5)
			cr.ParamBase[(506)]=1;
			else
			(eff=((eff)&(~((0x00200000)))));
			break;
			case 2:
			if(cr.Param[(422)]==0||Random(1,10)>cr.Param[(6)]-5)
			cr.ParamBase[(505)]=1;
			else
			(eff=((eff)&(~((0x00200000)))));
			break;
			case 3:
			if(cr.Param[(422)]==0||Random(1,10)>cr.Param[(0)])
			cr.ParamBase[(504)]=1;
			else
			(eff=((eff)&(~((0x00200000)))));
			break;
			case 4:
			if(cr.Param[(422)]==0||Random(1,10)>cr.Param[(0)])
			cr.ParamBase[(503)]=1;
			else
			(eff=((eff)&(~((0x00200000)))));
			break;
			default:
			break;
		}
	}
	
	if((((eff)&((0x00001000)))!=0))
	map.RunEffect((4028),cr.HexX,cr.HexY,2);
	
	if(totalDmg>0)
	cr.ParamBase[(72)]-=totalDmg;
	
	uint[]allEff={(2),cr.Id,0,eff}; 
	
	if(tookDamage)
	{
		allEff.resize(5);
		allEff[4]=totalDmg;
		allEff[0]=(3);
	}
	
	if(cr.Param[(72)]<1)
	{
		int deadHitPoints=cr.Param[(461)]>0?__DeadHitPoints:__DeadHitPoints/2;
		if(cr.Param[(72)]>deadHitPoints&&IsHumanoid(cr)&&cr.Param[(531)]==0)
		{
			if(!cr.IsKnockout())
			cr.ToKnockout(((true)?(82):(83)),((true)?(86):(87)),((true)?(88):(89)),0,cr.HexX,cr.HexY);
		}
		else
		{
			uint anim2Dead=(102);
			if(cr.IsKnockout())
			{
				if(cr.Anim2Knockout==(86))
				anim2Dead=(100);
				else
				anim2Dead=(101);
			}
			cr.ToDead(anim2Dead,null);
			allEff[2]|=(0x10000000);
		}
	}
	
	Critter@[]him={cr};
	array<Critter@>crits;
	cr.GetMap().GetCrittersSeeing(him,true,(0x0F)|(0x10),crits);
	for(int i=0,j=crits.length();i<j;i++)
	AddEff(crits[i],allEff,results);
	
	runTree(results,0);
} 

void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId,Item@realWeapon)
{
	if(dmgType>(7))
	{
		
		return;
	}
	
	Critter@attacker=null;
	if(attackerId!=0)
	@attacker=GetCritter(attackerId);
	else@attacker=GetCritter(cr.Id);
	
	AttackStruct attack;
	@attack.Attacker=attacker;
	
	uint16 hx=cr.HexX;
	uint16 hy=cr.HexY;
	Map@map=cr.GetMap();
	if((@map!=null))
	map.MoveHexByDir(hx,hy,(dir+3)%6,1);
	Item@bron=attacker.GetItem(0,(1));
	attack.Hx=hx;
	attack.Hy=hy;
	attack.set_Aim((9));
	attack.IsBurst=false;
	attack.BloodyMess=false;
	attack.CombatMessage=false;
	attack.WeaponPerk=0;
	attack.WeaponSubtype=0;
	attack.DmgMin=dmg;
	attack.DmgMax=dmg;
	attack.DmgType=dmgType;
	attack.BonusDmg=0;
	attack.DmgMul=2;
	attack.DRMod=0;
	attack.DMMod=1;
	attack.DDMod=1;
	attack.TargetId=cr.Id;
	attack.ShowHitAnimForce=true;
	@attack.RealWeapon=realWeapon;
	
	array<CombatRes>results;
	ApplyDamage(attack,cr,1,false,true,results,0);
	
	runTree(results,0);
}

void InjureCritter(Critter&cr,uint dmg,uint dmgType,uint8 dir,uint attackerId)
{
	if(dmgType>(7))
	{
		
		return;
	}
	
	Critter@attacker=null;
	if(attackerId!=0)
	@attacker=GetCritter(attackerId);
	else@attacker=GetCritter(cr.Id);
	
	AttackStruct attack;
	@attack.Attacker=attacker;
	
	uint16 hx=cr.HexX;
	uint16 hy=cr.HexY;
	Map@map=cr.GetMap();
	if((@map!=null))
	map.MoveHexByDir(hx,hy,(dir+3)%6,1);
	Item@bron=attacker.GetItem(0,(1));
	attack.Hx=hx;
	attack.Hy=hy;
	attack.set_Aim((9));
	attack.IsBurst=false;
	attack.BloodyMess=false;
	attack.CombatMessage=false;
	attack.WeaponPerk=0;
	attack.WeaponSubtype=0;
	attack.DmgMin=dmg;
	attack.DmgMax=dmg;
	attack.DmgType=dmgType;
	attack.BonusDmg=0;
	attack.DmgMul=2;
	attack.DRMod=0;
	attack.DMMod=1;
	attack.DDMod=1;
	attack.TargetId=cr.Id;
	attack.ShowHitAnimForce=true;
	
	array<CombatRes>results;
	ApplyDamage(attack,cr,1,false,true,results,0);
	
	runTree(results,0);
}

int FindCritterInArray(array<Critter@>&crits,Critter&cr)
{
	uint crId=cr.Id;
	for(uint i=0,j=crits.length();i<j;i++)
	if(crits[i].Id==crId)
	return i;
	return-1;
}

uint GetAimApCost(int hitLocation)
{
	switch(hitLocation)
	{
		case(0):
		break;
		case(9):
		break;
		case(4):
		return __ApCostAimTorso;
		case(7):
		return __ApCostAimEyes;
		case(1):
		return __ApCostAimHead;
		case(2):
		case(3):
		return __ApCostAimArms;
		case(8):
		return __ApCostAimGroin;
		case(5):
		case(6):
		return __ApCostAimLegs;
		default:
		break;
	}
	return 0;
}

uint GetHitAim(int hitLocation)
{
	switch(hitLocation)
	{
		case(0):
		break;
		case(9):
		break;
		case(4):
		return __HitAimTorso;
		case(7):
		return __HitAimEyes;
		case(1):
		return __HitAimHead;
		case(2):
		case(3):
		return __HitAimArms;
		case(8):
		return __HitAimGroin;
		case(5):
		case(6):
		return __HitAimLegs;
		default:
		break;
	}
	return 0;
}  

int RawToHit(Critter&cr,Critter&target,ProtoItem@weapon,uint8 weaponUse,ProtoItem@ammo)
{
	int skillNum=(@weapon!=null)?((weaponUse)==0?weapon.Weapon_Skill_0:((weaponUse)==1?weapon.Weapon_Skill_1:((weaponUse)==2?weapon.Weapon_Skill_2:0))):(203);
	int toHit=cr.Param[skillNum];
	int weaponPerk=(@weapon!=null)?weapon.Weapon_Perk:0;
	int blockers=0;
	int dist=GetDistantion(cr.HexX,cr.HexY,target.HexX,target.HexY);
	if(skillNum!=(203))
	{
		
		int distmod1=2;
		int distmod2=0;
		bool havelongrange=false;
		Item@realWeapon=cr.GetItem(0,(1));
		
		if((@realWeapon!=null)&&realWeapon.Val3==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val4==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val5==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val6==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val7==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val8==(12))havelongrange=true;
		
		if(havelongrange)
		distmod1=4;
		
		int perception=cr.Param[(1)];
		int acc=dist;
		
		if(dist<distmod2)
		acc+=distmod2;
		else
		{
			if(cr.IsPlayer())
			acc-=(perception-2)*distmod1;
			else
			acc-=perception*distmod1;
		}
		
		if(-2*perception>acc)
		acc=-2*perception;
		
		acc-=2*cr.Param[(315)];
		acc-=2*cr.Param[(337)];
		acc-=2*cr.Param[(340)];
		if(acc>=0)
		{
			if(cr.Damage[(502)]!=0)
			acc*=-12;
			else
			acc*=-4;
		}
		else
		acc*=-4;
		
		toHit+=acc;
		Map@map=cr.GetMap();
		blockers=map.GetCrittersPath(cr.HexX,cr.HexY,target.HexX,target.HexY,0.0f,dist,(0x01),null);
		if(!target.IsKnockout())
		blockers--;
		toHit-=10*blockers;
	}
	
	if((@weapon!=null))
	{
		if(!(weapon.Weapon_IsUnarmed)&&cr.Param[(553)]!=0)
		toHit+=((((weapon.Flags)&((0x00000080)))!=0)?-100:20);
		
		int handlingStrength=cr.Param[(0)];
		int reqStrength=weapon.Weapon_MinStrength;
		if(cr.Param[(407)]!=0)
		handlingStrength+=2;
		if(handlingStrength<reqStrength)
		toHit-=(reqStrength-handlingStrength)*20;
		if(cr.Param[(310)]>0)
		toHit+=25;
		if(cr.Param[(418)]>0)toHit+=cr.Param[(1)];
		
		Item@realWeapon=cr.GetItem(0,(1));
		if((@realWeapon!=null)&&realWeapon.Val3==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val4==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val5==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val6==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val7==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val8==(12))toHit+=20;
	}
	
	int acmod=target.GetAC(false);
	acmod-=cr.Param[(1)]*5;
	if((@ammo!=null))
	acmod+=ammo.Ammo_AcMod;
	if(acmod>0)
	toHit-=acmod;
	
	if(cr.Damage[(502)]!=0)
	toHit-=25;
	
	if(target.IsKnockout())
	toHit+=40;
	if(target.GetMultihex()>0)
	toHit+=15;
	
	return toHit;
} 

void NotifyOops(Critter@cr,Critter@t1,Critter@t2,array<CombatRes>&results)
{ 
	
	if(!(@t2!=null))
	{
		uint[]allEff={(13),cr.Id,0};
		Critter@[]him={cr};
		array<Critter@>crits;
		cr.GetMap().GetCrittersSeeing(him,true,(0x0F)|(0x10),crits);
		for(int i=0,j=crits.length();i<j;i++)
		AddEff(crits[i],allEff,results);
	}
	else
	{
		uint[]allEff={(12),t1.Id,t2.Id};
		Critter@[]them={t1,t2};
		array<Critter@>crits;
		t1.GetMap().GetCrittersSeeing(them,true,(0x0F)|(0x10),crits);
		for(int i=0,j=crits.length();i<j;i++)
		AddEff(crits[i],allEff,results);
	}
}

void NotifyMiss(Critter@cr,array<CombatRes>&results)
{
	uint[]allEff={(1),cr.Id,0};
	Critter@[]him={cr};
	array<Critter@>crits;
	cr.GetMap().GetCrittersSeeing(him,true,(0x0F)|(0x10),crits);
	for(int i=0,j=crits.length();i<j;i++)
	AddEff(crits[i],allEff,results);
}

Critter@ChooseRandomTarget(Map&map,Critter&cr,Critter&target,uint wpnMaxDist)
{
	array<Critter@>crits;
	uint16 hx=cr.HexX;
	uint16 hy=cr.HexY;
	uint n=map.GetCrittersHex(hx,hy,wpnMaxDist,(0x03),crits);
	if(n==0)
	return null;
	uint start=Random(0,n-1);
	uint16 bx=0;
	uint16 by=0;
	uint16 pbx=0;
	uint16 pby=0;
	for(uint i=start;i<n;i++)
	{
		if(!(@crits[i]!=null))
		continue;
		if(crits[i].Id==cr.Id||crits[i].Id==target.Id)
		continue;
		
		map.GetCrittersPath(hx,hy,crits[i].HexX,crits[i].HexY,0.0f,0,(0x03),null,pbx,pby,bx,by);
		if(bx==crits[i].HexX&&by==crits[i].HexY)
		return crits[i];
	}
	for(uint i=0;i<start;i++)
	{
		if(!(@crits[i]!=null))
		continue;
		if(crits[i].Id==cr.Id||crits[i].Id==target.Id)
		continue;
		
		map.GetCrittersPath(hx,hy,crits[i].HexX,crits[i].HexY,0.0f,0,(0x03),null,pbx,pby,bx,by);
		if(bx==crits[i].HexX&&by==crits[i].HexY)
		return crits[i];
	}
	
	return null;
}

int GetPartialBypassChance(Critter&target,bool aimHead)
{
	Item@armor=(target.GetItem(0,(aimHead)?(4):(3)));
	if(!(@armor!=null))
	return 0;
	int deterPercent=(100*armor.Deterioration)/(10000);
	if(!armor.IsDeteriorable()||((target.Param[(534)]&((0x00000200)))!=0)||deterPercent<=50)
	return 0;
	return((deterPercent-50)*100)/50;
}

int AddCritRollWeapon(Item@realWeapon)
{
	int _roll=0;
	if((@realWeapon!=null))
	{
		if(realWeapon.Proto.ProtoId==(233))_roll=5;
		if(realWeapon.Proto.ProtoId==(15))_roll=5;
	}
	return _roll;
}

void AffectBurn(Critter&cr,int value)
{
	if(cr.IsDead())return;
	
	uint[]indexes;
	uint[]durations;
	bool isActive=cr.GetTimeEvents((11),indexes,durations,null)!=0;
	int count=cr.Param[(120)];
	if(count==0)return;
	cr.ParamBase[(120)]=(((count)>((10)))?((10)):(((count)<(0))?(0):(count)));
	count=cr.Param[(120)]; 
	
	if(isActive)
	{
		if(count==0)
		{
			cr.EraseTimeEvents((11));
		}
		else
		{
			uint oldDuration=durations[0];
			uint newDuration=GetBurnDuration(cr);
			if(newDuration<oldDuration)cr.ChangeTimeEvent(indexes[0],newDuration,0);
		}
	}
	else
	{
		cr.AddTimeEvent("cte_Burn",GetBurnDuration(cr),(11));
	}
	
}

uint cte_Burn(Critter&cr,int identifier,uint&rate)
{
	if(cr.IsDead())cr.ParamBase[(120)]=0;
	int count=cr.Param[(120)];
	cr.ParamBase[(120)]=(((count)>((10)))?((10)):(((count)<(0))?(0):(count)));
	uint damage=(Random(7,15));
	Critter@attacker=GetCritter(cr.Param[(188)]);
	if(attacker.Param[(402)]>0)
	damage+=7*attacker.Param[(402)];
	if(attacker.Param[(321)]>1)
	damage+=7;
	
	count=cr.Param[(120)];
	if(count>0)
	{
		if(cr.Param[(72)]>-10)
		cr.ParamBase[(72)]-=damage;
		cr.ParamBase[(120)]-=1;
	}
	return GetBurnDuration(cr);
}

uint GetBurnDuration(Critter&cr)
{
	int duration;
	int count=cr.Param[(120)];
	if(count==0)return 0;
	duration=count*(5);
	if(duration<=0)cr.EraseTimeEvents((11));;
	return duration;
}

uint getSpree(int AP,uint div)
{
	if(div==3)
	{
		switch(AP)
		{
			case 0:
			case 1:
			case 2:
			return 0;
			case 3:
			case 4:
			return 1;
			case 5:
			case 6:
			case 7:
			case 8:
			return 2;
			case 9:
			case 10:
			return 3;
			case 11:
			case 12:
			case 13:
			case 14:
			return 4;
			case 15:
			case 16:
			return 5;
			case 17:
			case 18:
			case 19:
			return 6;
			case 20:
			case 21:
			return 7;
			case 22:
			case 23:
			case 24:
			case 25:
			return 8;
			case 26:
			case 27:
			return 9;
			case 28:
			case 29:
			case 30:
			case 31:
			return 10;
			case 32:
			case 33:
			return 11;
			case 34:
			case 35:
			case 36:
			case 37:
			return 12;
			default:
			if(AP<0)
			return 0;
			if(AP>37)
			return 13;
		}
	}
	if(div==0)
	return AP;
	
	return 5;
	
}
uint e_KillingSpree(array<uint>@spreedata)
{
	int spree=spreedata[0];
	Critter@attacker=GetCritter(spreedata[1]);
	if(!(@attacker!=null)||!(@attacker.GetMap()!=null))
	return 0;
	spree*=100;
	
	if(spree+attacker.ParamBase[(75)]>=attacker.Param[(8)]*100)
	{
		
		attacker.ParamBase[(75)]=attacker.Param[(8)]*100;
		
	}
	else
	{
		
		attacker.ParamBase[(75)]+=spree; 
		
	}
	CreateTimeEvent(((__FullSecond)+(((100)*__TimeMultiplier/1000))),"e_fake_ap",spreedata,false);
	return 0;
}

uint e_fake_ap(array<uint>@spreedata)
{
	int spree=spreedata[0];
	Critter@attacker=GetCritter(spreedata[1]);
	if(!(@attacker!=null)||!(@attacker.GetMap()!=null))
	return 0;
	attacker.ParamBase[(75)]-=1;
	
	CreateTimeEvent(((__FullSecond)+(((100)*__TimeMultiplier/1000))),"e_back_ap",spreedata,false);
	return 0;
}

uint e_back_ap(array<uint>@spreedata)
{
	int spree=spreedata[0];
	Critter@attacker=GetCritter(spreedata[1]);
	if(!(@attacker!=null)||!(@attacker.GetMap()!=null))
	return 0;
	attacker.ParamBase[(75)]+=1;
	
	return 0;
}

uint get_ST(Critter&cr)
{
	int val=cr.ParamBase[(0)];
	Item@armorek=cr.GetItem(0,(3)); 
	
	if(cr.Param[(564)]>0)val+=1;
	if(cr.Param[(385)]>0)val+=cr.Param[(385)]*2;
	
	if(cr.Param[(463)]>0)val+=cr.Param[(463)];
	if(cr.Param[(551)]>0)val+=4;
	if(cr.Param[(352)]>0)val+=3;
	if(cr.Param[(395)]>0)val+=1;
	if(cr.Param[(1145)]>0)val+=cr.Param[(1145)];
	
	if(cr.Param[(562)]>0&&cr.Param[(251)]>0)val+=3;
	if(cr.Param[(562)]==0&&cr.Param[(254)]>0)val+=2;
	if(cr.Param[(562)]==0&&cr.Param[(251)]>0)val-=2;
	if(cr.Param[(562)]==0&&cr.Param[(235)]>0)val-=2;
	if(cr.Param[(562)]==0&&cr.Param[(250)]>0)val+=1;
	
	if((@armorek!=null)&&armorek.Val3==(19))val+=2;
	if((@armorek!=null)&&armorek.Val4==(19))val+=2;
	if((@armorek!=null)&&armorek.Val5==(19))val+=2;
	if((@armorek!=null)&&armorek.Val6==(19))val+=2;
	if((@armorek!=null)&&armorek.Val7==(19))val+=2;
	if((@armorek!=null)&&armorek.Val8==(19))val+=2;
	
	if((@armorek!=null)&&armorek.Val2==(105))val+=2;
	if((@armorek!=null)&&armorek.Val3==(105))val+=2;
	if((@armorek!=null)&&armorek.Val4==(105))val+=2;
	if((@armorek!=null)&&armorek.Val5==(105))val+=2;
	if((@armorek!=null)&&armorek.Val6==(105))val+=2;
	if((@armorek!=null)&&armorek.Val7==(105))val+=2;
	if((@armorek!=null)&&armorek.Val8==(105))val+=2;
	
	if(cr.Param[(192)]==5)
	{
		val+=cr.Param[(193)];
	}
	if(cr.Param[(74)]>630)
	val--;
	if(cr.Param[(74)]>810)
	val--;
	if(cr.Param[(74)]>1170)
	val--;
	if(cr.Param[(74)]>1620)
	val--;
	return(((val)>(50))?(50):(((val)<(1))?(1):(val)));
}