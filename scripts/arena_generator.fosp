

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                               

uint[]Walls=
{
	((0x1)|(0x2)),((0x2)|(0x4)),((0x2)|(0x4)),((0x2)|(0x4)),
	((0x1)|(0x2)),((0x1)|(0x2)),((0x1)|(0x2)|(0x4)),((0x1)|(0x2)|(0x4)),
	((0x1)|(0x2)),((0x2)),((0x4)),((0x2)|(0x4)),
	((0x1)|(0x2)),((0x1)|(0x2)),((0x1)|(0x2)|(0x4)),((0x1)|(0x2)|(0x4))
};

class Node
{
	Node@Next=null;
	uint X=0;
	uint Y=0;
	
	Node(int nx,int ny)
	{
		X=nx;
		Y=ny;
	}
};

class Queue
{
	private Node@head=null;
	private Node@tail=null;
	
	void Push(uint x,uint y)
	{
		if(!(@head!=null))
		{
			@head=Node(x,y);
			@tail=head;
		}
		else
		{
			@tail.Next=Node(x,y);
			@tail=tail.Next;
		}
	}
	
	bool Empty()
	{
		return(!(@head!=null));
	}
	
	void Top(uint&x,uint&y)
	{
		x=head.X;
		y=head.Y;
	}
	
	void Pop(uint&x,uint&y)
	{
		x=head.X;
		y=head.Y;
		@head=head.Next;
		if(!(@head!=null))
		@tail=null;
	}
	
	void Pop()
	{
		@head=head.Next;
		if(!(@head!=null))
		@tail=null;
	}
};

class Room
{
	private uint mX1;
	private uint mY1;
	private uint mX2;
	private uint mY2;
	uint Num;
	array<uint>Neighbours;
	
	Room(uint x1,uint y1,uint x2,uint y2,uint num)
	{
		mX1=x1;
		mY1=y1;
		mX2=x2;
		mY2=y2;
		Num=num;
	}
	
	uint RX(){return(mX1+mX2)/2;}
	uint RY(){return(mY1+mY2)/2;}
};

class Edge
{
	uint Type;
	private uint mFrom;
	private uint mTo;
	array<uint>Xs;
	array<uint>Ys;
	Edge(uint type,uint from,uint to)
	{
		Type=type;
		mFrom=from;
		mTo=to;
	}
};

class GeneratorContext
{
	private Queue@q;
	array<Room@>Rooms;
	private array<int>@tab1;
	private array<int>@tab2;
	private array<Edge@>edges;
	private array<Edge@>shootableEdges;
	private array<Edge@>spanningEdges;
	private uint minRoomX;
	private uint minRoomY;
	private uint pathSize;
	uint MaxX;
	uint MaxY;
	uint RoomsCount;  
	
	GeneratorContext(uint max_x,uint max_y,uint min_x,uint min_y,uint path_size)
	{
		MaxX=max_x;
		MaxY=max_y;
		minRoomX=min_x;
		minRoomY=min_y;
		pathSize=path_size;
		RoomsCount=0;
		@tab1=@array<int>(MaxX*MaxY,0);
		@q=Queue();
	} 
	
	void LineH(uint x,uint y,uint len)
	{
		for(uint end=x+len;x<end;x++)
		{
			tab1[(y)*MaxX+(x)]=(0x00010000);
			q.Push(x,y);
		}
	} 
	
	void LineV(uint x,uint y,uint len)
	{
		for(uint end=y+len;y<end;y++)
		{
			tab1[(y)*MaxX+(x)]=(0x00010000);
			q.Push(x,y);
		}
	} 
	
	void SubDivide(uint x1,uint y1,uint x2,uint y2)
	{
		if(x2-x1<minRoomX||y2-y1<minRoomY)
		{
			MakeRoom(x1,y1,x2,y2);
			return;
		}
		bool horizontal=false;
		if(x2-x1<2*minRoomX)
		{
			if(y2-y1<2*minRoomY)
			{
				MakeRoom(x1,y1,x2,y2);
				return;
			}
			else
			horizontal=true;
		}
		else
		{
			if(y2-y1<2*minRoomY)
			horizontal=false;
			else
			horizontal=Random(1,x2+y2-x1-y1)<=int(y2-y1);
		}
		
		if(horizontal)
		{
			uint sy=Random(y1+minRoomY,y2-minRoomY);
			LineH(x1,sy,x2-x1+1);
			SubDivide(x1,y1,x2,sy-1);
			SubDivide(x1,sy+1,x2,y2);
		}
		else
		{
			uint sx=Random(x1+minRoomX,x2-minRoomX);
			LineV(sx,y1,y2-y1+1);
			SubDivide(x1,y1,sx-1,y2);
			SubDivide(sx+1,y1,x2,y2);
		}
	} 
	
	void MakeRoom(uint x1,uint y1,uint x2,uint y2)
	{
		for(uint i=x1;i<=x2;i++)
		{
			tab1[(y1)*MaxX+(i)]=RoomsCount;
			tab1[(y2)*MaxX+(i)]=RoomsCount;
		}
		for(uint i=y1;i<=y2;i++)
		{
			tab1[(i)*MaxX+(x1)]=RoomsCount;
			tab1[(i)*MaxX+(x2)]=RoomsCount;
		}
		Rooms.insertLast(@Room(x1,y1,x2,y2,RoomsCount++));
	} 
	
	private bool isHorizontalBlocker(uint x,uint y)
	{
		return safe(x-1,y)&&safe(x+1,y)&&tab1[(y)*MaxX+(x-1)]!=(0x00010000)&&tab1[(y)*MaxX+(x+1)]!=(0x00010000);
	}
	
	private bool isVerticalBlocker(uint x,uint y)
	{
		return safe(x,y-1)&&safe(x,y+1)&&tab1[(y-1)*MaxX+(x)]!=(0x00010000)&&tab1[(y+1)*MaxX+(x)]!=(0x00010000);
	}
	
	private void makeHorizontalBlocker(uint x,uint y)
	{
		if(!(@edges[tab1[(y)*MaxX+(x-1)]*RoomsCount+tab1[(y)*MaxX+(x+1)]]!=null))
		{
			Rooms[tab1[(y)*MaxX+(x-1)]].Neighbours.insertLast(tab1[(y)*MaxX+(x+1)]);
			Rooms[tab1[(y)*MaxX+(x+1)]].Neighbours.insertLast(tab1[(y)*MaxX+(x-1)]);
			Edge@edge=Edge((0),tab1[(y)*MaxX+(x-1)],tab1[(y)*MaxX+(x+1)]);
			@edges[tab1[(y)*MaxX+(x-1)]*RoomsCount+tab1[(y)*MaxX+(x+1)]]=edge;
			@edges[tab1[(y)*MaxX+(x+1)]*RoomsCount+tab1[(y)*MaxX+(x-1)]]=edge;
			shootableEdges.insertLast(edge);
		}
		Edge@edge=getEdge(tab1[(y)*MaxX+(x-1)],tab1[(y)*MaxX+(x+1)]);
		edge.Xs.insertLast(x);
		edge.Ys.insertLast(y);
	}
	
	private void makeVerticalBlocker(uint x,uint y)
	{
		if(!(@edges[tab1[(y-1)*MaxX+(x)]*RoomsCount+tab1[(y+1)*MaxX+(x)]]!=null))
		{
			Rooms[tab1[(y-1)*MaxX+(x)]].Neighbours.insertLast(tab1[(y+1)*MaxX+(x)]);
			Rooms[tab1[(y+1)*MaxX+(x)]].Neighbours.insertLast(tab1[(y-1)*MaxX+(x)]);
			Edge@edge=Edge((0),tab1[(y-1)*MaxX+(x)],tab1[(y+1)*MaxX+(x)]);
			@edges[tab1[(y-1)*MaxX+(x)]*RoomsCount+tab1[(y+1)*MaxX+(x)]]=edge;
			@edges[tab1[(y+1)*MaxX+(x)]*RoomsCount+tab1[(y-1)*MaxX+(x)]]=edge;
			shootableEdges.insertLast(edge);
		}
		Edge@edge=getEdge(tab1[(y-1)*MaxX+(x)],tab1[(y+1)*MaxX+(x)]);
		edge.Xs.insertLast(x);
		edge.Ys.insertLast(y);
	}
	
	void FindEdges()
	{
		edges.resize(RoomsCount*RoomsCount);
		for(uint i=0;i<RoomsCount*RoomsCount;i++)
		@edges[i]=null;
		while(!q.Empty())
		{
			uint x=0;
			uint y=0;
			q.Pop(x,y);
			
			if(isHorizontalBlocker(x,y))
			makeHorizontalBlocker(x,y);
			if(isVerticalBlocker(x,y))
			makeVerticalBlocker(x,y);
		}
	} 
	
	void BuildTree()
	{
		array<uint>tree;
		tree.insertLast(Random(0,RoomsCount-1));
		while(tree.length()!=RoomsCount)
		{
			uint end=Random(0,tree.length()-1);
			uint i=(end+1)%tree.length();
			do
			{
				Room@room=Rooms[tree[i]];
				bool found=false;
				for(uint j=0;j<room.Neighbours.length();j++)
				{
					if(tree.find(room.Neighbours[j])>=0)
					continue;
					tree.insertLast(room.Neighbours[j]);
					found=true;
					spanningEdges.insertLast(getEdge(room.Num,room.Neighbours[j]));
					if(!setEdgeType(room.Num,room.Neighbours[j],(1)))
					{
						
					}
				}
				i++;
				i%=tree.length();
			}
			while(i!=end);
		}
	}
	
	void MakeShootableEdges()
	{
		uint j=shootableEdges.length();
		for(uint i=0;i<j;)
		{
			if(shootableEdges[i].Type==(1)||rollNoShootEdge())
			@shootableEdges[i]=shootableEdges[--j];
			else
			{
				shootableEdges[i].Type=(2);
				i++;
			}
		}
		shootableEdges.resize(j);
	}
	
	private bool rollNoShootEdge()
	{
		return Random(0,2)!=0;
	}
	
	void ProcessWalls()
	{   
		
		for(uint i=0,j=spanningEdges.length();i<j;i++)
		{
			Edge@edge=spanningEdges[i];
			if(edge.Xs.length()<pathSize)
			{
				for(uint k=0;k<edge.Xs.length();k++)
				tab1[(edge.Ys[k])*MaxX+(edge.Xs[k])]=(-1);
				continue;
			}
			bool horizontal=edge.Ys[0]==edge.Ys[1];
			if(horizontal)
			{
				uint localY=edge.Ys[0];
				uint minX=edge.Xs[0];
				uint maxX=edge.Xs[0];
				uint len=edge.Xs.length();
				for(uint k=1;k<len;k++)
				{
					if(edge.Xs[k]<minX)
					minX=edge.Xs[k];
					if(edge.Xs[k]>maxX)
					maxX=edge.Xs[k];
				}
				uint pathStart=Random(minX,maxX-pathSize+1);
				uint k=minX;
				while(k+2<pathStart)
				k++;
				while(k<pathStart)
				{
					tab1[(localY)*MaxX+(k)]=(0x00010002);
					k++;
				}
				while(k<pathStart+pathSize)
				{
					tab1[(localY)*MaxX+(k)]=(-1);
					k++;
				}
				while(k<pathStart+pathSize+2&&k<=maxX)
				{
					tab1[(localY)*MaxX+(k)]=(0x00010002);
					k++;
				}
			}
			else
			{
				uint localX=edge.Xs[0];
				uint minY=edge.Ys[0];
				uint maxY=edge.Ys[0];
				uint len=edge.Ys.length();
				for(uint k=1;k<len;k++)
				{
					if(edge.Ys[k]<minY)
					minY=edge.Ys[k];
					if(edge.Ys[k]>maxY)
					maxY=edge.Ys[k];
				}
				uint pathStart=Random(minY,maxY-pathSize+1);
				uint k=minY;
				while(k+2<pathStart)
				k++;
				while(k<pathStart)
				{
					tab1[(k)*MaxX+(localX)]=(0x00010002);
					k++;
				}
				while(k<pathStart+pathSize)
				{
					tab1[(k)*MaxX+(localX)]=(-1);
					k++;
				}
				while(k<pathStart+pathSize+2&&k<=maxY)
				{
					tab1[(k)*MaxX+(localX)]=(0x00010002);
					k++;
				}
			}
		} 
		
		for(uint i=0,j=shootableEdges.length();i<j;i++)
		{
			Edge@edge=shootableEdges[i];
			if(edge.Xs.length()<pathSize)
			{
				for(uint k=0;k<edge.Xs.length();k++)
				tab1[(edge.Ys[k])*MaxX+(edge.Xs[k])]=(0x00010002);
				continue;
			}
			bool horizontal=edge.Ys[0]==edge.Ys[1];
			if(horizontal)
			{
				uint localY=edge.Ys[0];
				uint minX=edge.Xs[0];
				uint maxX=edge.Xs[0];
				uint len=edge.Xs.length();
				for(uint k=1;k<len;k++)
				{
					if(edge.Xs[k]<minX)
					minX=edge.Xs[k];
					if(edge.Xs[k]>maxX)
					maxX=edge.Xs[k];
				}
				uint pathStart=Random(minX,maxX-pathSize+1);
				for(uint k=pathStart;k<pathStart+pathSize;k++)
				tab1[(localY)*MaxX+(k)]=(0x00010002);
			}
			else
			{
				uint localX=edge.Xs[0];
				uint minY=edge.Ys[0];
				uint maxY=edge.Ys[0];
				uint len=edge.Ys.length();
				for(uint k=1;k<len;k++)
				{
					if(edge.Ys[k]<minY)
					minY=edge.Ys[k];
					if(edge.Ys[k]>maxY)
					maxY=edge.Ys[k];
				}
				uint pathStart=Random(minY,maxY-pathSize+1);
				for(uint k=pathStart;k<pathStart+pathSize;k++)
				tab1[(k)*MaxX+(localX)]=(0x00010002);
			}
		}
	}
	
	private bool safe(uint x,uint y)
	{
		return x<MaxX&&y<MaxY;
	}
	
	private Edge@getEdge(uint r1,uint r2)
	{
		return edges[r1*RoomsCount+r2];
	}
	
	private int edgeType(uint r1,uint r2)
	{
		Edge@edge=edges[r1*RoomsCount+r2];
		if(!(@edge!=null))
		return-1;
		return edge.Type;
	}
	
	private uint edgeSize(uint r1,uint r2)
	{
		Edge@edge=edges[r1*RoomsCount+r2];
		if(!(@edge!=null))
		return 0;
		return edge.Xs.length();
	}
	
	private bool setEdgeType(uint r1,uint r2,uint type)
	{
		Edge@edge=edges[r1*RoomsCount+r2];
		if(!(@edge!=null))
		return false;
		edge.Type=type;
		return true;
	} 
	
	void Generate()
	{
		for(uint i=0,j=MaxX*MaxY;i<j;i++)
		tab1[i]=(-1);
		SubDivide(0,0,MaxX-1,MaxY-1);
		FindEdges();
		BuildTree();
		MakeShootableEdges();
		ProcessWalls();
		Cleanup();
		Recognize();
	} 
	
	void Cleanup()
	{
		for(uint16 y=0;y<MaxY;y++)
		for(uint16 x=0;x<MaxX;x++)
		{
			switch(tab1[(y)*MaxX+(x)])
			{
				case(0x00010000):
				case(0x00010002):
				continue;
				default:
				tab1[(y)*MaxX+(x)]=0;
			}
		}
	} 
	
	void Recognize()
	{
		@tab2=@array<int>(MaxX*MaxY,0); 
		
		for(uint i=0;i<MaxX;i++)
		{
			if(tab1[(0)*MaxX+(i)]==(0x00010000))
			tab2[(0)*MaxX+(i)]=((0x2)|(0x4));
			else if(tab1[(0)*MaxX+(i)]==(0x00010002))
			tab2[(0)*MaxX+(i)]=((0x2)|(0x4))|(0xF0);
			
			if(tab1[(MaxY-1)*MaxX+(i)]==(0x00010000))
			tab2[(MaxY-1)*MaxX+(i)]=(0x2);
			else if(tab1[(MaxY-1)*MaxX+(i)]==(0x00010002))
			tab2[(MaxY-1)*MaxX+(i)]=(0x2)|(0xF0);
		}
		for(uint i=0;i<MaxY;i++)
		{
			if(tab1[(i)*MaxX+(0)]==(0x00010000))
			tab2[(i)*MaxX+(0)]=((0x1)|(0x2));
			else if(tab1[(i)*MaxX+(0)]==(0x00010002))
			tab2[(i)*MaxX+(0)]=((0x1)|(0x2))|(0xF0);
			
			if(tab1[(i)*MaxX+(MaxX-1)]==(0x00010000))
			tab2[(i)*MaxX+(MaxX-1)]=(0x2);
			else if(tab1[(i)*MaxX+(MaxX-1)]==(0x00010002))
			tab2[(i)*MaxX+(MaxX-1)]=(0x2)|(0xF0);
		}
		
		for(uint y=1;y<MaxY-1;y++)
		for(uint x=1;x<MaxX-1;x++)
		{
			if(tab1[(y)*MaxX+(x)]==0)
			continue;
			int idx=0;
			if((((tab1[(y-1)*MaxX+(x)])&((0x00010000)))!=0))
			idx+=1;
			if((((tab1[(y+1)*MaxX+(x)])&((0x00010000)))!=0))
			idx+=2;
			if((((tab1[(y)*MaxX+(x+1)])&((0x00010000)))!=0))
			idx+=4;
			if((((tab1[(y)*MaxX+(x-1)])&((0x00010000)))!=0))
			idx+=8;
			tab2[(y)*MaxX+(x)]=Walls[idx];
			if(tab1[(y)*MaxX+(x)]==(0x00010002))
			tab2[(y)*MaxX+(x)]|=(0xF0);
		}
	} 
	
	void Spawn(Map&map,uint16 hx,uint16 hy)
	{
		Spawn(map,hx,hy,(9670),(9671));
	} 
	
	void Spawn(Map&map,uint16 hx,uint16 hy,uint16 pid_shootable,uint16 pid_wall)
	{
		for(uint16 y=0;y<MaxY;y++)
		for(uint16 x=0;x<MaxX;x++)
		{
			uint hex=tab2[(y)*MaxX+(x)];
			if(hex==0)
			continue;
			uint tx=hx+2*x;
			uint ty=hy+2*y;
			uint pid=(((hex)&((0xF0)))!=0)?pid_shootable:pid_wall;
			if((((hex)&((0x1)))!=0))
			map.AddItem(tx+1,ty,pid,1);
			if((((hex)&((0x2)))!=0))
			map.AddItem(tx,ty,pid,1);
			if((((hex)&((0x4)))!=0))
			map.AddItem(tx,ty+1,pid,1);
		}
	}
}; 

void SpawnArena(Map@map,uint16 size_x,uint16 size_y,uint16 hx,uint16 hy,uint min_room_x,uint min_room_y,uint min_path)
{
	if(!(@map!=null))
	return;
	GeneratorContext@ctx=GeneratorContext(size_x,size_y,min_room_x,min_room_y,min_path);
	ctx.Generate();
	ctx.Spawn(map,hx,hy);
}

void spawn(Critter&cr,int x,int y,int r)
{
	SpawnArena(cr.GetMap(),x,y,cr.HexX,cr.HexY,Random(r/2,r),Random(r/2,r),Random(r/2,r));
}
