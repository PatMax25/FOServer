
#ifndef MUTUAL_MODULE

#define MUTUAL_MODULE

#include "mutual_h.fos"

// teach me hoe toe hax engine
uint GetRealItemsWeight(CritterMutual& critter)
{
	int val = 0;
	array<ItemMutual@> items;
	critter.GetItems(-1, items);
	
	for(uint i = 0, j = items.length(); i<j; i++)
	{
		val += _GetItemWeight(items[i]) * items[i].GetCount();
	}
	return val;
}

// script engine 
/* uint '(CritterMutual& critter, ItemMutual@ weapon, uint8 mode)
{
	uint8 use = mode & 0xF;
	int dist = 0;
	if(valid(weapon))
	{
		int sk = _WeaponSkill(weapon.Proto, use);
		dist = _WeaponMaxDist(weapon.Proto, use);
		int strength = critter.Param[ST_STRENGTH];
		if(sk == SK_THROWING)
		{
			dist = MIN(dist, 3 * MIN(10, strength));
			dist+=3*(cr.Param[PE_HEAVE_HO]+cr.Param[PE_HEAVE_HO_II]);
		}
		else
		{
			if(cr.Param[PE_MARKSMAN]) dist *= MARKSMAN_MOD;
		}
		if(Item_Weapon_IsHtHAttack(item, mode) && cr.Params[MODE_RANGE_HTH]) dist++;
		dist += GetMultihex(cr);
		dist += checkBonus(item, BONUS_WEAPON_MAX_RANGE);
		if(dist < 0) dist = 0;
	}
	return dist;	
}
 */
 


#endif