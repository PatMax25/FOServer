// Immersion module. Authors: idea, art, conditions - VVish, code - Vice Dice. Produced in 2019, for FOnline: The Long Journey & The Last Stand projects.
//
// What it does - handles the creation and disappearance of the blood splatters after critter being hit, also create a variability and control over the process from the module.
// Currently stores several parameters inside the passive with corresponding picture to each state and have some primitive conditions to control the spawnrate.

#ifndef BLOOD_MODULE
#define BLOOD_MODULE

// #define YOUR_DEFINES

// #include "your_includes.fos", primarily - link it with header file from this script file.
#include "blood_h.fos"

const uint BloodFlags = ITEM_FLAT + ITEM_NO_BLOCK + ITEM_LIGHT_THRU + ITEM_SHOOT_THRU + ITEM_NO_LOOT + ITEM_NO_STEAL + ITEM_NO_HIGHLIGHT + ITEM_WALL_TRANS_END; // 

funcdef void BloodItemCallback(Item& blood);

array<BloodItemCallback@> BloodInitCallbacks = {@BloodGenericInit, @BloodAcidInit, @BloodOilInit};

// 4th dimensional massive to hold the strings which resembles the path to the picture. Check header file for paths macroses.
array<array<array<array<uint>>>> EpicBlood = 
{
	{
		{
		
			{
				H_RED("redbloodfresh01.png"),
				H_RED("redbloodnormal01.png"),
				H_RED("redblooddecay01.png")
			},
			
			{
				H_RED("redbloodfresh02.png"),
				H_RED("redbloodnormal02.png"),
				H_RED("redblooddecay02.png")
			},
			
			{
				H_RED("redbloodfresh03.png"),
				H_RED("redbloodnormal03.png"),
				H_RED("redblooddecay03.png")
			}
			
		},
		
		{

			{
				H_RED("redbloodfresh04.png"),
				H_RED("redbloodnormal04.png"),
				H_RED("redblooddecay04.png")
			},
			
			{
				H_RED("redbloodfresh05.png"),
				H_RED("redbloodnormal05.png"),
				H_RED("redblooddecay05.png")
			},
			
			
			{				
				H_RED("redbloodfresh06.png"),
				H_RED("redbloodnormal06.png"),
				H_RED("redblooddecay06.png")
			}
		},
		
		{
			
			{
				H_RED("redbloodfresh07.png"),
				H_RED("redbloodnormal07.png"),
				H_RED("redblooddecay07.png")
			},
			
			{
				H_RED("redbloodfresh08.png"),
				H_RED("redbloodnormal08.png"),
				H_RED("redblooddecay08.png")
			},
			
			{
				H_RED("redbloodfresh09.png"),
				H_RED("redbloodnormal09.png"),
				H_RED("redblooddecay09.png")
			}
			
		}
	
		
	},
	
	{
		{
		
			{
				H_ACID("acidbloodfresh01.png"),
				H_ACID("acidbloodnormal01.png"),
				H_ACID("acidblooddecay01.png")
			},
			
			{
				H_ACID("acidbloodfresh02.png"),
				H_ACID("acidbloodnormal02.png"),
				H_ACID("acidblooddecay02.png")
			},
			
			{
				H_ACID("acidbloodfresh03.png"),
				H_ACID("acidbloodnormal03.png"),
				H_ACID("acidblooddecay03.png")
			}
			
		},
		
		{

			{
				H_ACID("acidbloodfresh04.png"),
				H_ACID("acidbloodnormal04.png"),
				H_ACID("acidblooddecay04.png")
			},
			
			{
				H_ACID("acidbloodfresh05.png"),
				H_ACID("acidbloodnormal05.png"),
				H_ACID("acidblooddecay05.png")
			},
			
			
			{				
				H_ACID("acidbloodfresh06.png"),
				H_ACID("acidbloodnormal06.png"),
				H_ACID("acidblooddecay06.png")
			}
		},
		
		{
			
			{
				H_ACID("acidbloodfresh07.png"),
				H_ACID("acidbloodnormal07.png"),
				H_ACID("acidblooddecay07.png")
			},
			
			{
				H_ACID("acidbloodfresh08.png"),
				H_ACID("acidbloodnormal08.png"),
				H_ACID("acidblooddecay08.png")
			},
			
			{
				H_ACID("acidbloodfresh09.png"),
				H_ACID("acidbloodnormal09.png"),
				H_ACID("acidblooddecay09.png")
			}
			
		}
	
		
	},
	
	{
		{
		
			{
				H_OIL("oilbloodfresh01.png"),
				H_OIL("oilbloodnormal01.png"),
				H_OIL("oilblooddecay01.png")
			},
			
			{
				H_OIL("oilbloodfresh02.png"),
				H_OIL("oilbloodnormal02.png"),
				H_OIL("oilblooddecay02.png")
			},
			
			{
				H_OIL("oilbloodfresh03.png"),
				H_OIL("oilbloodnormal03.png"),
				H_OIL("oilblooddecay03.png")
			}
			
		},
		
		{

			{
				H_OIL("oilbloodfresh04.png"),
				H_OIL("oilbloodnormal04.png"),
				H_OIL("oilblooddecay04.png")
			},
			
			{
				H_OIL("oilbloodfresh05.png"),
				H_OIL("oilbloodnormal05.png"),
				H_OIL("oilblooddecay05.png")
			},
			
			
			{				
				H_OIL("oilbloodfresh06.png"),
				H_OIL("oilbloodnormal06.png"),
				H_OIL("oilblooddecay06.png")
			}
		},
		
		{
			
			{
				H_OIL("oilbloodfresh07.png"),
				H_OIL("oilbloodnormal07.png"),
				H_OIL("oilblooddecay07.png")
			},
			
			{
				H_OIL("oilbloodfresh08.png"),
				H_OIL("oilbloodnormal08.png"),
				H_OIL("oilblooddecay08.png")
			},
			
			{
				H_OIL("oilbloodfresh09.png"),
				H_OIL("oilbloodnormal09.png"),
				H_OIL("oilblooddecay09.png")
			}
			
		}
	
		
	}
		
};

// Previous verions of massives. Left here just for lulz.
// const string bloodPic = { "art\\items\\misc\\ANIANIANIANIANIANIANIANIANIBLOOD01.fofrm", "art\\items\\tree5.fofrm", "art\\items\\tree6.fofrm" };
// array <array <string>> RedBloodFreshPics = { {"art\\items\\blood\\red\\redbloodfresh01.png", "art\\items\\blood\\red\\redbloodfresh02.png", "art\\items\\blood\\red\\redbloodfresh03.png"}, {"art\\items\\blood\\red\\redbloodfresh04.png", "art\\items\\blood\\red\\redbloodfresh05.png", "art\\items\\blood\\red\\redbloodfresh06.png"}, {"art\\items\\blood\\red\\redbloodfresh07.png", "art\\items\\blood\\red\\redbloodfresh08.png", "art\\items\\blood\\red\\redbloodfresh09.png"} }; 

// Amazing Functions section

// Returning the blood type by performing a check on one of the critter parameters. We choose ST_BODY_TYPE, cuz it's the most simple way to distinguish critters who are going to spill the blood.
// Naturally this must have been separate module with classes, but... FOnline devs are lazy and if you're going to use it so far only once, switch() is fine.
int GetBloodType(Critter& cr)
{
	int  body_type  = cr.Param[ ST_BODY_TYPE ];
	int blood_type = BLOOD_TYPE_NONE;
	
	switch( body_type )
		{
			case BT_ALIEN:
				blood_type = BLOOD_TYPE_ACID;
				break;
			case BT_ROBOT:
				blood_type = BLOOD_TYPE_OIL;
				break;
			default:
				blood_type = BLOOD_TYPE_GENERIC;
				break;
		}
	if(cr.Param[PE_CYBORG] > 0)
		blood_type = BLOOD_TYPE_OIL;
	if(cr.GetProtoId()	== 1484)
		blood_type = BLOOD_TYPE_OIL;
	if(cr.GetProtoId()	== 1485)
		blood_type = BLOOD_TYPE_NONE;
	return blood_type;
}

// Main function, controls the spawn of the item and it's parameters - Flags, variables, stores the Id of the item to be used in the next function.
Item@ BloodCreate(Critter& creature, int bloodSize)
{
	// This check needed, since the core distinguish between blood objects is it's size. Size depends on amount of damage critter receives.
	if (bloodSize < BLOOD_SIZE_BEGIN || bloodSize > BLOOD_SIZE_END)
		return null;
	// We're getting the creature's position on the Map first.
	Map@ creatureMap = creature.GetMap();
	if (valid(creatureMap))
	{
		// Using the blood type getter which we created earlier, to distinguish the massive cells that are going to be used.
		int bloodType = GetBloodType(creature);
		if (bloodType != BLOOD_TYPE_NONE)
		{
			Item@ blood = creatureMap.AddItem(creature.HexX, creature.HexY, PID_DYNAMIC_14, 1);
			if (valid(blood))
			{

				int bloodSet = Random(BLOOD_SET_BEGIN, BLOOD_SET_END);
				int bloodState = BLOOD_STATE_FRESH;
				// This is why that 4th dimensional massive was created in the first place.
				blood.PicMap = EpicBlood [bloodType][bloodSize][bloodSet][bloodState];
				// After item changes it's picture, we need to store parameters inside variables, to be used in decay & TimEvent function later.
				BLOOD_SET_TYPE  (blood, bloodType);
				BLOOD_SET_SIZE  (blood, bloodSize);
				BLOOD_SET_SET   (blood, bloodSet);
				BLOOD_SET_STATE (blood, bloodState);
				// Flags are item properties, those are delivered by the engine for us.
				blood.Flags = BloodFlags;
				BloodInitCallbacks[bloodType](blood);
				blood.Update();
				// Here comes the TimeEvent - we're storing the Id here to be used in decay's function massive.
				array<uint> values = {blood.Id};
				CreateTimeEvent (AFTER(REAL_SECOND(10)), "e_BloodDry", values, true);
				return blood;
			}
		}
		return null;
	}
	return null;
}

// Submain function. This is the one that actually gets called in "combat.fos", after ApplyDamage.
Item@ BloodCreateByDamage(Critter& creature, int damage, int dmgType)
{
	int size = -1;
	int percent = ((damage * 100) / creature.Param[ST_MAX_LIFE]);
	// Log("Procent: " + percent + ".");
	// Log("Damag suka: " + damage + ".");
	if(dmgType == DAMAGE_PLASMA || dmgType == DAMAGE_ELECTR)
		return null;
	if (percent < BLOOD_PROCENT_SMALL)
		return null;
	else if (percent >= BLOOD_PROCENT_LARGE)
	{
		size = BLOOD_SIZE_LARGE;
	}
	else if (percent < BLOOD_PROCENT_LARGE && percent >= BLOOD_PROCENT_MEDIUM)
	{
		size = BLOOD_SIZE_MEDIUM;
	}
	else if (percent <= BLOOD_PROCENT_MEDIUM && percent >= BLOOD_PROCENT_SMALL)
	{
		size = BLOOD_SIZE_SMALL;
	}
	return BloodCreate(creature, size);
}

// Decay function. Here we're going to get rid of the items that spawned throughout the map.
uint e_BloodDry(array<uint>@ values)
{
	Item@ blood = GetItem(values[0]);
	if (valid(blood))
	{
		int bloodState = BLOOD_GET_STATE (blood);
		// If the item's Val state index is out of bounds (BLOOD_STATE_END), deletes the item and exits the function.
		if (bloodState >= BLOOD_STATE_END)
		{
			DeleteItem(blood);
			return 0;
		}
		// Works simply - checks the Val state, then switches picture and changes state to +1 then repeats intself each 10 seconds.
		else
		{
			bloodState ++;
			BLOOD_SET_STATE(blood, bloodState);
			blood.PicMap = EpicBlood [BLOOD_GET_TYPE(blood)][BLOOD_GET_SIZE(blood)][BLOOD_GET_SET(blood)][bloodState];
			blood.Update();
			return REAL_SECOND(10);
		}
	}
	return 0;
}

void BloodGenericInit(Item& blood)
{
	
}

void BloodAcidInit(Item& blood)
{
	
}

void BloodOilInit(Item& blood)
{
	
}



#endif