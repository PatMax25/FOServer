

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;           

shared interface IPolygon
{
	IPolygon@AddVertex(uint16 x,uint16 y);
	IPolygon@AddVertices(array<uint16>&hexes);
	
	void GetTriangulation(array<uint16>&triangles);      
	
	bool IsWithin(uint16 x,uint16 y);
}

class CTriPoly
{
	uint count;
	CVertex@head;
	CVertex@tail;
	
	CTriPoly()
	{
		count=0;
		@head=null;
		@tail=null;
	}
	
	CTriPoly@AddVertex(float x,float y)
	{
		if(@tail==null)
		{
			@head=@CVertex(x,y,count++);
			@head.next=head;
			@head.prev=head;
			@tail=head;
			return this;
		}
		@tail.next=@CVertex(x,y,count++);
		@tail.next.prev=tail;
		@tail=tail.next;
		@tail.next=head;
		@head.prev=tail;
		return this;
	}
	
};

class CVertex
{
	float x;
	float y;
	uint num;
	CVertex@next;
	CVertex@prev;
	CVertex(float x,float y,uint num)
	{
		this.x=x;
		this.y=y;
		this.num=num;
		@next=null;
		@prev=null;
	}
}; 

class CPolygon:IPolygon
{
	array<float>xs;
	array<float>ys;
	array<uint16>hxs;
	array<uint16>hys;
	
	CPolygon()
	{}
	
	IPolygon@AddVertex(uint16 x,uint16 y)
	{
		hxs.insertLast(x);
		hys.insertLast(y);
		float fx=3*float(x);
		float fy=(3.4641016151f)*float(y)-(float(x%2))*(1.732050807568877f);
		xs.insertLast(fx);
		ys.insertLast(fy);
		return this;
	}
	
	IPolygon@AddVertices(array<uint16>&hexes)
	{
		int idx=hxs.length();
		hxs.grow(hexes.length()/2);
		hys.grow(hexes.length()/2);
		xs.grow(hexes.length()/2);
		ys.grow(hexes.length()/2);
		
		for(uint i=0,j=hexes.length();i<j;i+=2)
		{
			hxs[idx]=hexes[i];
			hys[idx]=hexes[i+1];
			float fx=3*float(hexes[i]);
			float fy=(3.4641016151f)*float(hexes[i+1])-(float(hexes[i]%2))*(1.732050807568877f);
			xs[idx]=fx;
			ys[idx++]=fy;
		}
		return this;
	} 
	
	void GetTriangulation(array<uint16>&triangles)
	{
		CTriPoly poly;
		for(uint i=0,j=xs.length();i<j;i++)
		poly.AddVertex(xs[i],ys[i]);
		array<uint>vertlist;
		for(uint i=0,j=xs.length()-2;i<j;i++)
		ClipEar(poly,vertlist);
		for(uint i=0,j=vertlist.length();i<j;i++)
		{
			triangles.insertLast(hxs[vertlist[i]]);
			triangles.insertLast(hys[vertlist[i]]);
		}
	} 
	
	bool Intersects(float x,float y,float x1,float y1,float x2,float y2)
	{
		if(y1==y2)
		return false;
		if((y>y1&&y>y2)||(y<y1&&y<y2))
		return false;
		return(x<=x1+((x1-x2)*(y1-y))/(y2-y1));
	}
	
	bool IsWithin(uint16 x,uint16 y)
	{
		uint count=0;
		float fx=3*float(x)+(0.02f);
		float fy=(3.4641016151f)*float(y)-(float(x%2))*(1.732050807568877f)+(0.02f);
		int i=0;
		for(int j=xs.length()-1;i<j;i++)
		if(Intersects(fx,fy,xs[i],ys[i],xs[i+1],ys[i+1]))
		count++;
		
		if(Intersects(fx,fy,xs[i],ys[i],xs[0],ys[0]))
		count++;
		return(count%2)==1;
	}                    
	
}; 

void ClipEar(CTriPoly&poly,array<uint>&vertlist)
{
	bool zero=false;
	CVertex@vertex=poly.head;
	@vertex=FindEar(vertex,zero);
	if(!zero)
	{
		vertlist.insertLast(vertex.num);
		vertlist.insertLast(vertex.next.num);
		vertlist.insertLast(vertex.prev.num);
	}
	@vertex.prev.next=vertex.next;
	@vertex.next.prev=vertex.prev;
	if(vertex.num==poly.head.num)
	@poly.head=vertex.next;
}

CVertex@FindEar(CVertex@vertex,bool&zero)
{
	while(true)
	{
		float edgeinx=vertex.x-vertex.prev.x;
		float edgeiny=vertex.y-vertex.prev.y;
		float edgeoutx=vertex.next.x-vertex.x;
		float edgeouty=vertex.next.y-vertex.y;
		
		float det=Determinant(edgeinx,edgeiny,edgeoutx,edgeouty);
		
		if(det==0.0f)
		{
			zero=true;
			return@vertex;
		}
		
		if(det<0.0f)
		{
			@vertex=vertex.next;
			continue;
		}
		float edgediagx=vertex.prev.x-vertex.next.x;
		float edgediagy=vertex.prev.y-vertex.next.y;
		
		bool ok=true;
		CVertex@nextv=vertex.next.next;
		while(nextv.num!=vertex.prev.num)
		{
			if(DetNonnegative(edgeinx,edgeiny,nextv.x-vertex.prev.x,nextv.y-vertex.prev.y)&&
			DetNonnegative(edgeoutx,edgeouty,nextv.x-vertex.x,nextv.y-vertex.y)&&
			DetNonnegative(edgediagx,edgediagy,nextv.x-vertex.next.x,nextv.y-vertex.next.y))
			{
				ok=false;
				break;
			}
			@nextv=nextv.next;
		}
		if(ok)
		return@vertex;
		@vertex=vertex.next;
	}
	return null;
}

bool DetNonnegative(float x1,float y1,float x2,float y2)
{
	return x1*y2-x2*y1>=0;
}

float Determinant(float x1,float y1,float x2,float y2)
{
	return x1*y2-x2*y1;
}

void GetDrawHexAreaData(array<uint16>&area,bool triangles,int color,array<int>&data)
{
	int x=0;
	int y=0;
	
	if(!triangles)
	{
		uint len=area.length()-2;
		data.resize(3*area.length());
		int idx=0;
		for(uint i=0;i<len;i+=2)
		{
			GetHexPos(area[i],area[i+1],x,y);
			data[idx++]=x;
			data[idx++]=y;
			data[idx++]=color;
			GetHexPos(area[i+2],area[i+3],x,y);
			data[idx++]=x;
			data[idx++]=y;
			data[idx++]=color;
		}
		GetHexPos(area[len],area[len+1],x,y);
		data[idx++]=x;
		data[idx++]=y;
		data[idx++]=color;
		GetHexPos(area[0],area[1],x,y);
		data[idx++]=x;
		data[idx++]=y;
		data[idx++]=color;
	}
	else
	{
		data.resize(3*area.length()/2);
		int idx=0;
		for(uint i=0,j=area.length();i<j;i+=6)
		{
			GetHexPos(area[i],area[i+1],x,y);
			data[idx++]=x;
			data[idx++]=y;
			data[idx++]=color;
			GetHexPos(area[i+2],area[i+3],x,y);
			data[idx++]=x;
			data[idx++]=y;
			data[idx++]=color;
			GetHexPos(area[i+4],area[i+5],x,y);
			data[idx++]=x;
			data[idx++]=y;
			data[idx++]=color;
		}
	}
	
}

void DrawHexArea(array<uint16>&area,bool triangles,int color)
{
	array<int>data;
	GetDrawHexAreaData(area,triangles,color,data);
	DrawPrimitive(triangles?(3):(1),data);
} 

IPolygon@NewPolygon()
{
	return@CPolygon();
}                    

