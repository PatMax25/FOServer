

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";

bool s_TerminalDial(Critter&player,Scenery&terminal,int skill,Item@item,int dialNum)
{
	if(player.IsPlayer()&&skill==-1&&!(@item!=null))
	RunDialog(player,dialNum,terminal.HexX,terminal.HexY,false);
	return true;
}

uint innerGateEntire=10;
uint outerLeftGateEntire=11;
uint outerRightGateEntire=12; 

bool s_InnerTerminalA(Critter&player,Scenery&terminal,int skill,Item@item)
{
	return s_TerminalAirlock(player,terminal,skill,item,1);
} 

bool s_MiddleTerminalB(Critter&player,Scenery&terminal,int skill,Item@item)
{
	return s_TerminalAirlock(player,terminal,skill,item,2);
} 

bool s_OuterTerminalC(Critter&player,Scenery&terminal,int skill,Item@item)
{
	return s_TerminalAirlock(player,terminal,skill,item,3);
}

bool s_TerminalAirlock(Critter&player,Scenery&terminal,int skill,Item@item,int whichTerm)
{
	if(player.IsPlayer()&&skill==-1&&!(@item!=null))
	{
		Map@map=player.GetMap();
		uint16 x=0,y=0;
		
		map.GetEntireCoords(innerGateEntire,0,x,y);
		Item@innerDoor=map.GetDoor(x,y);
		
		map.GetEntireCoords(outerLeftGateEntire,0,x,y);
		Item@outerLeftDoor=map.GetDoor(x,y); 
		
		map.GetEntireCoords(outerRightGateEntire,0,x,y);
		Item@outerRightDoor=map.GetDoor(x,y);
		
		if(whichTerm==1)
		{
			if((@innerDoor!=null))
			innerDoor.LockerOpen();
			if((@outerRightDoor!=null))
			outerRightDoor.LockerClose();
			if((@outerLeftDoor!=null))
			outerLeftDoor.LockerClose();
		}
		if(whichTerm==2)
		{
			bool closeOuter=false;
			if((@innerDoor!=null))
			{
				closeOuter=!(((innerDoor.LockerCondition)&((0x01)))!=0);
				if(closeOuter)
				innerDoor.LockerOpen();
				else
				innerDoor.LockerClose();
			}
			if((@outerRightDoor!=null))
			{
				if(closeOuter)
				outerRightDoor.LockerClose();
				else
				outerRightDoor.LockerOpen();
			}
			if((@outerLeftDoor!=null))
			{
				if(closeOuter)
				outerLeftDoor.LockerClose();
				else
				outerLeftDoor.LockerOpen();
			}
		}
		if(whichTerm==3)
		{
			if((@innerDoor!=null))
			innerDoor.LockerClose();
			if((@outerRightDoor!=null))
			outerRightDoor.LockerOpen();
			if((@outerLeftDoor!=null))
			outerLeftDoor.LockerOpen();
		}
		
		return true;
	}
	return false;
}

const uint32 doorCloseInterval=5;
const uint32 chanceToJam=20;
const uint32 criticalFailChance=5;
const uint32 repairCheckBottom=80;
const uint32 repairCheckTop=150;
string jammedMessage="The door is jammed... electronically.";
string doorOkMessage="The door is working fine... for now.";
string repairFailMessage="You didn't manage to repair the door.";
string repairCritFailMessage="You almost had it.";
string repairSuccessMessage="You successfully repair the door.";

void _AutoDoorInit(Item&door,bool firstTime)
{
	door.SetEvent((4),"_AutoDoorOpen");
}

bool _AutoDoorOpen(Item&item,Critter&crit,int skill)
{
	if(skill==-1)
	{
		bool isOpen=(((item.LockerCondition)&((0x01)))!=0);
		if(item.Val1!=0&&!isOpen)
		{
			crit.Say((11),jammedMessage);
			return true;
		}
		array<uint>vals(2);
		vals[0]=item.Id;
		vals[1]=item.MapId;
		
		if(isOpen)
		{
			uint16 hexX=0;
			uint16 hexY=0;
			Map@map=item.GetMapPosition(hexX,hexY);
			if((@map!=null))
			{
				Critter@potentialBlocker=map.GetCritter(hexX,hexY);
				if((@potentialBlocker!=null)&&potentialBlocker.IsLife())
				return false;
			}
		}
		
		if(item.Val0!=0)
		EraseTimeEvent(item.Val0);
		if(!isOpen)
		item.Val0=CreateTimeEvent(__FullSecond+((doorCloseInterval)*__TimeMultiplier),"e_AutoCloseDoor",vals,false);
		else
		{
			tryJamDoor(item);
		}
	}
	else if(skill==(213))
	{
		if(item.Val1==0)
		crit.Say((11),doorOkMessage);
		else
		{
			if(crit.Timeout[(232)]>0)
			{
				crit.SayMsg((11),(3),(3401));
				return true;
			}
			
			if(Random(repairCheckBottom,repairCheckTop)<=crit.Param[(213)])
			{
				if(Random(1,100)>criticalFailChance)
				{
					item.Val1=0;
					crit.Say((11),repairSuccessMessage);
				}
				else
				crit.Say((11),repairCritFailMessage);
			}
			else
			crit.Say((11),repairFailMessage);
			
			crit.TimeoutBase[(232)]=(((30)*__TimeMultiplier)+crit.Param[(395)]);
		}
		return true;
	}
	
	return false;
}

uint e_AutoCloseDoor(array<uint>@vals)
{
	Map@map=GetMap(vals[1]);
	if((@map!=null))
	{
		Item@door=map.GetItem(vals[0]);
		if((@door!=null))
		{
			uint16 hexX=0;
			uint16 hexY=0;
			door.GetMapPosition(hexX,hexY);
			Critter@potentialBlocker=map.GetCritter(hexX,hexY);
			if((@potentialBlocker!=null)&&potentialBlocker.IsLife())
			return((doorCloseInterval)*__TimeMultiplier);
			
			door.LockerClose();
			door.Val0=0;
			tryJamDoor(door);
		}
	}
	return 0;
}

void tryJamDoor(Item@door)
{
	if(Random(1,100)<=chanceToJam)
	{
		door.Val1=1;
	}
}    

const uint32 doorCloseInterval2=5;
const uint32 chanceToJam2=25;
const uint32 hackVarId=9210;
const uint32 dialogId=22120;
void _HackDoorInit(Item&door,bool firstTime)
{
	door.SetEvent((4),"_HackDoorOpen");
}

bool _HackDoorOpen(Item&item,Critter&crit,int skill)
{
	if(skill==-1)
	{
		bool isOpen=(((item.LockerCondition)&((0x01)))!=0);
		
		if(isOpen)
		{
			uint16 hexX=0;
			uint16 hexY=0;
			Map@map=item.GetMapPosition(hexX,hexY);
			if((@map!=null))
			{
				Critter@potentialBlocker=map.GetCritter(hexX,hexY);
				if((@potentialBlocker!=null)&&potentialBlocker.IsLife())
				return false;
			}
		}
		
		if(isOpen)
		{
			if(item.Val0!=0)
			EraseTimeEvent(item.Val0);
			tryJamHackDoor();
		}
	}
	return false;
}

uint e_HackCloseDoor(array<uint>@vals)
{
	Map@map=GetMap(vals[1]);
	if((@map!=null))
	{
		Item@door=map.GetItem(vals[0]);
		if((@door!=null))
		{
			uint16 hexX=0;
			uint16 hexY=0;
			door.GetMapPosition(hexX,hexY);
			Critter@potentialBlocker=map.GetCritter(hexX,hexY);
			if((@potentialBlocker!=null)&&potentialBlocker.IsLife())
			return((doorCloseInterval2)*__TimeMultiplier);
			
			door.LockerClose();
			door.Val0=0;
			tryJamHackDoor();
		}
	}
	return 0;
}

void tryJamHackDoor()
{
	if(Random(1,100)<=chanceToJam2)
	{
		GameVar@hackVar=GetGlobalVar(hackVarId);
		hackVar=1;
	}
}

bool s_HackDoorOpen(Critter&player,Scenery&terminal,int skill,Item@item)
{
	if(player.IsPlayer()&&skill==-1&&!(@item!=null))
	{
		RunDialog(player,dialogId,terminal.HexX,terminal.HexY,true);
		return true;
	}
	return false;
}

void r_HackDoorOpen(Critter&player,Critter@victim,int entireNum)
{
	uint16 hexX=0;
	uint16 hexY=0;
	Map@map=player.GetMap();
	map.GetEntireCoords(entireNum,0,hexX,hexY);
	Item@door=map.GetDoor(hexX,hexY);
	door.LockerOpen();
	
	array<uint>vals(2);
	vals[0]=door.Id;
	vals[1]=door.MapId;
	if(door.Val0!=0)
	EraseTimeEvent(door.Val0);
	door.Val0=CreateTimeEvent(__FullSecond+((doorCloseInterval2)*__TimeMultiplier),"e_HackCloseDoor",vals,false);
}

const uint32 doorCloseInterval3=5;
const uint32 chanceToJam3=20;
const uint32 criticalFailChance3=5;
const uint32 lockpickCheckBottom=100;
const uint32 lockpickCheckTop=150;
string jammedMessage3="The door is locked.";
string doorOkMessage3="The door isn't locked.";
string lockpickFailMessage="You didn't manage to unlock the door.";
string lockpickCritFailMessage="You almost had it.";
string lockpickSuccessMessage="You successfully unlock the door.";

void _AutoDoorInit3(Item&door,bool firstTime)
{
	door.SetEvent((4),"_AutoDoorOpen3");
}

bool _AutoDoorOpen3(Item&item,Critter&crit,int skill)
{
	if(skill==-1)
	{
		bool isOpen=(((item.LockerCondition)&((0x01)))!=0);
		if(item.Val1!=0&&!isOpen)
		{
			crit.Say((11),jammedMessage3);
			return true;
		}
		array<uint>vals(2);
		vals[0]=item.Id;
		vals[1]=item.MapId;
		
		if(isOpen)
		{
			uint16 hexX=0;
			uint16 hexY=0;
			Map@map=item.GetMapPosition(hexX,hexY);
			if((@map!=null))
			{
				Critter@potentialBlocker=map.GetCritter(hexX,hexY);
				if((@potentialBlocker!=null)&&potentialBlocker.IsLife())
				return false;
			}
		}
		
		if(item.Val0!=0)
		EraseTimeEvent(item.Val0);
		if(!isOpen)
		item.Val0=CreateTimeEvent(__FullSecond+((doorCloseInterval3)*__TimeMultiplier),"e_AutoCloseDoor3",vals,false);
		else
		{
			tryJamDoor3(item);
		}
	}
	else if(skill==(209))
	{
		if(item.Val1==0)
		crit.Say((11),doorOkMessage3);
		else
		{
			if(crit.Timeout[(234)]>0)
			{
				crit.SayMsg((11),(3),(3401));
				return true;
			}
			
			if(Random(lockpickCheckBottom,lockpickCheckTop)<=crit.Param[(209)])
			{
				if(Random(1,100)>criticalFailChance3)
				{
					item.Val1=0;
					crit.Say((11),lockpickSuccessMessage);
				}
				else
				crit.Say((11),lockpickCritFailMessage);
			}
			else
			crit.Say((11),lockpickFailMessage);
			
			crit.TimeoutBase[(234)]=((((275-crit.Param[(209)])/15)*__TimeMultiplier)+crit.Param[(395)]);
		}
		return true;
	}
	
	return false;
}

uint e_AutoCloseDoor3(array<uint>@vals)
{
	Map@map=GetMap(vals[1]);
	if((@map!=null))
	{
		Item@door=map.GetItem(vals[0]);
		if((@door!=null))
		{
			uint16 hexX=0;
			uint16 hexY=0;
			door.GetMapPosition(hexX,hexY);
			Critter@potentialBlocker=map.GetCritter(hexX,hexY);
			if((@potentialBlocker!=null)&&potentialBlocker.IsLife())
			return((doorCloseInterval3)*__TimeMultiplier);
			
			door.LockerClose();
			door.Val0=0;
			tryJamDoor3(door);
		}
	}
	return 0;
}

void tryJamDoor3(Item@door)
{
	if(Random(1,100)<=chanceToJam3)
	{
		door.Val1=1;
	}
}

const uint32 doorCloseInterval4=5;
const uint32 chanceToJam4=25;
const uint32 hackVarId1=9211;
const uint32 dialogId1=22121;
void _HackDoorInit1(Item&door,bool firstTime)
{
	door.SetEvent((4),"_HackDoorOpen");
}

bool _HackDoorOpen1(Item&item,Critter&crit,int skill)
{
	if(skill==-1)
	{
		bool isOpen=(((item.LockerCondition)&((0x01)))!=0);
		
		if(isOpen)
		{
			uint16 hexX=0;
			uint16 hexY=0;
			Map@map=item.GetMapPosition(hexX,hexY);
			if((@map!=null))
			{
				Critter@potentialBlocker=map.GetCritter(hexX,hexY);
				if((@potentialBlocker!=null)&&potentialBlocker.IsLife())
				return false;
			}
		}
		
		if(isOpen)
		{
			if(item.Val0!=0)
			EraseTimeEvent(item.Val0);
			tryJamHackDoor1();
		}
	}
	return false;
}

uint e_HackCloseDoor1(array<uint>@vals)
{
	Map@map=GetMap(vals[1]);
	if((@map!=null))
	{
		Item@door=map.GetItem(vals[0]);
		if((@door!=null))
		{
			uint16 hexX=0;
			uint16 hexY=0;
			door.GetMapPosition(hexX,hexY);
			Critter@potentialBlocker=map.GetCritter(hexX,hexY);
			if((@potentialBlocker!=null)&&potentialBlocker.IsLife())
			return((doorCloseInterval4)*__TimeMultiplier);
			
			door.LockerClose();
			door.Val0=0;
			tryJamHackDoor1();
		}
	}
	return 0;
}

void tryJamHackDoor1()
{
	if(Random(1,100)<=chanceToJam4)
	{
		GameVar@hackVar=GetGlobalVar(hackVarId1);
		hackVar=1;
	}
}

bool s_HackDoorOpen1(Critter&player,Scenery&terminal,int skill,Item@item)
{
	if(player.IsPlayer()&&skill==-1&&!(@item!=null))
	{
		RunDialog(player,dialogId1,terminal.HexX,terminal.HexY,true);
		return true;
	}
	return false;
}

void r_HackDoorOpen1(Critter&player,Critter@victim,int entireNum)
{
	uint16 hexX=0;
	uint16 hexY=0;
	Map@map=player.GetMap();
	map.GetEntireCoords(entireNum,0,hexX,hexY);
	Item@door=map.GetDoor(hexX,hexY);
	door.LockerOpen();
	
	array<uint>vals(2);
	vals[0]=door.Id;
	vals[1]=door.MapId;
	if(door.Val0!=0)
	EraseTimeEvent(door.Val0);
	door.Val0=CreateTimeEvent(__FullSecond+((doorCloseInterval4)*__TimeMultiplier),"e_HackCloseDoor1",vals,false);
}
