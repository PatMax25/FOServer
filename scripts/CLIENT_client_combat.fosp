

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                          

import string GetCritterLexems(CritterCl&critter)from"lexems";
import string GetItemLexems(ItemCl&item)from"lexems";

import bool IsLexem(CritterCl&critter,string&lex)from"lexems";
import bool IsLexem(ItemCl&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(CritterCl&critter,string&lex)from"lexems";
import string GetLexem(ItemCl&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems";                           

shared interface IConfigVar
{
	string GetName();
	string GetValue();
	array<string>GetValueAsArray();
	array<string>GetValueAsArray(string&delimeter);
	void SetValue(int val);
	void SetValue(uint val);
	void SetValue(string&val);
	void SetValue(array<string>&val);
	void SetValue(array<string>&val,string&delimeter);
};

shared interface IConfigSection
{
	string GetName();
	bool AddVar(string&var,string&val);
	bool DeleteVar(string&var);
	bool DeleteVar(string&var,bool caseSensitive);
	IConfigVar@GetVar(string&var);
	IConfigVar@GetVar(string&varname,bool caseSensitive);
	void GetVars(array<string>&list);
	bool SetVar(string&varname,string val);
	bool VarExists(string&var);
	bool VarExists(string&var,bool caseSensitive);
};

shared interface IConfigFile
{
	bool IsVirtual();
	string GetName();
	bool AddSection(string&section);
	IConfigSection@GetSection(string&section);
	IConfigSection@GetSection(string&sectioname,bool caseSensitive);
	void GetSections(array<string>&list);
	bool SectionExists(string&section);
	bool SectionExists(string&section,bool caseSensitive);
};  

import IConfigFile@NewConfig(string&filename)from"config_file";
import bool LoadConfig(string&filename)from"config_file";
import bool SaveConfig(string&filename)from"config_file";
import bool UnloadConfig(string&filename)from"config_file";

import IConfigFile@GetConfigFile(string&filename)from"config_file";
import IConfigFile@GetConfigFile(string&filename,bool caseSensitive)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname,bool caseSensitive)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import string@GetConfigValue(string&filename,string&section,string@varname)from"config_file";
import string@GetConfigValue(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import bool SetConfigValue(string&filename,string&sectioname,string@varname,string&value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,bool value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,int value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,uint value)from"config_file";            

import uint COLOR_RGB_STRING(string&r,string&g,string&b)from"client_utils";
import uint COLOR_RGBA_STRING(string&r,string&g,string&b,string&a)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b,uint8&a)from"client_utils";

import string RandomString(uint8 length)from"client_utils";

import bool string2bool(string@text)from"client_utils";
import uint string2uint(string@text)from"client_utils";
import uint rgb_string2uint(string&text)from"client_utils";
import uint rgba_string2uint(string&text)from"client_utils";

import int string2int(string&text)from"client_utils";
import uint font_string2uint(string&text)from"client_utils";
import uint range_string2int(string&text,int&from,int&to)from"client_utils";
import uint range_string2uint(string&text,uint&from,uint&to)from"client_utils";
import void vis_string2bool(string&text,bool&head,bool&msgbox)from"client_utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";              

shared interface IWMZoneRender
{
	void SetX(int xin);
	void SetY(int yin);
	void SetColor(uint colorin);
	void SetDrawType(uint8 type);
	void SetZoneLength(int len);
	void SetLayer(uint layer);
	void Draw(uint layer);
}

shared interface IRayMap
{
	void SetDrawType(uint8 type);
	void SetColors(uint color1In,uint color2In);
	void SetId(uint id);
	void Draw();
}

shared interface IBurstRay
{
	void SetDrawType(uint8 type);
	void SetColors(uint color1In,uint color2In);
	void SetId(uint id);
	void Draw();
}

shared interface IDelayedText
{
	void SetId(uint id);
	void Draw();
}

shared interface IMuzzleFlash
{
	void SetDrawType(uint8 type);
	void SetColors(uint color1In,uint color2In);
	void SetId(uint id);
	void Draw();
}

shared interface IBurstMuzzle
{
	void SetDrawType(uint8 type);
	void SetColors(uint color1In,uint color2In);
	void SetId(uint id);
	void Draw();
}

shared interface IWeaponRadiusChosen
{
	void Draw();
	void SetDrawType(uint8 type);
	
}                                          

shared class Sprite
{
	Sprite()
	{
		Id=0;
		Width=0;
		Height=0;
		FrmCount=0;
	}
	
	bool Load(string&name,int path)
	{
		if(name.length()>0)
		{
			Id=LoadSprite(name,path);
			Filename=name;
		}
		else
		Id=0;
		RefreshData();
		return Id!=0;
	}
	
	void LoadHash(uint nameHash,uint8 dir)
	{
		Id=LoadSprite(nameHash,dir);
		RefreshData();
	}
	
	void LoadByIni(string&iniKey,int path)
	{
		string@name=GetIfaceIniStr(iniKey);
		if(@name!=null&&name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Draw(int x,int y)
	{
		if(Id!=0)
		DrawSprite(Id,-1,x,y,0);
	}
	
	private void RefreshData()
	{
		if(Id!=0)
		{
			Width=GetSpriteWidth(Id,0);
			Height=GetSpriteHeight(Id,0);
			FrmCount=GetSpriteCount(Id);
		}
		else
		{
			Width=0;
			Height=0;
			FrmCount=0;
			Filename="";
		}
	}
	
	uint Id;
	int Width;
	int Height;
	uint FrmCount;
	string Filename;
};                                                                                       

import IRayMap@CreateRay(int[]drawData)from"client_drawing";
import IBurstRay@CreateBurstRay(int[]drawData)from"client_drawing";
import IMuzzleFlash@CreateMuzzle(int[]drawData,uint type)from"client_drawing";
import IBurstMuzzle@CreateBurstMuzzle(int[]drawData,uint type)from"client_drawing";
import IDelayedText@_CreateDelayedText(int param0,int param1,int param2,string@param3,int[]@param4)from"client_drawing";
import void CreateCustomRadius(uint color,uint radius)from"client_drawing"; 

import void DrawRays()from"client_drawing";
import void DrawBurstRays()from"client_drawing";
import void DrawTexts()from"client_drawing";
import void DrawMuzzleFlashes()from"client_drawing";
import void DrawBurstMuzzles()from"client_drawing";

import void DrawCustomRadiuses()from"client_drawing";

import void DrawWMZones()from"client_drawing";           

import uint8 GetCurrentAim()from"client_keybinds";

class CCombatLog
{
	
	string MsgAttNormColor;
	string MsgAttCritColor;
	string MsgAttKillColor;
	string MsgDefNormColor;
	string MsgDefCritColor;
	string MsgDefKillColor;
	
	CCombatLog()
	{
		this.MsgAttNormColor="|0x0080FF ";
		this.MsgAttCritColor="|0x0080FF ";
		this.MsgAttKillColor="|0x0080FF ";
		this.MsgDefNormColor="|0xFF8000 ";
		this.MsgDefCritColor="|0xFF8000 ";
		this.MsgDefKillColor="|0xFF8000 ";
		
	}
};
CCombatLog CombatLog;

void CombatLogConfig()
{
	IConfigSection@section=GetConfigSection("FOnlineAT.cfg","CombatLog");
	if((@section!=null))
	{
		array<string>vars;
		section.GetVars(vars);
		
		if(vars.length()==0)
		return;
		
		for(uint v=0;v<vars.length();v++)
		{
			IConfigVar@var=section.GetVar(vars[v]);
			if(!(@var!=null))
			continue;
			
			if(var.GetName()=="MsgAttNormColor")
			CombatLog.MsgAttNormColor="|"+rgb_string2uint(var.GetValue())+" ";
			else if(var.GetName()=="MsgAttCritColor")
			CombatLog.MsgAttCritColor="|"+rgb_string2uint(var.GetValue())+" ";
			else if(var.GetName()=="MsgAttKillColor")
			CombatLog.MsgAttKillColor="|"+rgb_string2uint(var.GetValue())+" ";
			else if(var.GetName()=="MsgDefNormColor")
			CombatLog.MsgDefNormColor="|"+rgb_string2uint(var.GetValue())+" ";
			else if(var.GetName()=="MsgDefCritColor")
			CombatLog.MsgDefCritColor="|"+rgb_string2uint(var.GetValue())+" ";
			else if(var.GetName()=="MsgDefKillColor")
			CombatLog.MsgDefKillColor="|"+rgb_string2uint(var.GetValue())+" ";
		}
	}
}   

int to_hit(CritterCl&chosen,CritterCl&target,ProtoItem&weapon,uint8 weaponMode)
{
	int use=((weaponMode)&0xF);
	int hitLocation=(((weaponMode)>>4)&0xF);
	if(hitLocation==0||hitLocation==9)
	{
		if(((use)==0?weapon.Weapon_Aim_0:((use)==1?weapon.Weapon_Aim_1:((use)==2?weapon.Weapon_Aim_2:false))))
		hitLocation=GetCurrentAim();
	}
	
	if(use>2)
	return 0;
	if(target.IsDead())
	return 0;
	if(!chosen.IsLife())
	return 0;
	
	ItemCl@realWeapon=chosen.GetItem(0,(1));
	ProtoItem@ammo=null;
	
	
	if(realWeapon.GetType()==(3)&&((use)==0?weapon.Weapon_Round_0:((use)==1?weapon.Weapon_Round_1:((use)==2?weapon.Weapon_Round_2:0)))>0)
	{
		if(realWeapon.AmmoCount==0)
		return 0;
		@ammo=GetProtoItem(realWeapon.AmmoPid);
		if(!(@ammo!=null)&&(realWeapon.Proto.ProtoId!=(390)))
		return 0;
	}
	
	uint skillNum=((use)==0?weapon.Weapon_Skill_0:((use)==1?weapon.Weapon_Skill_1:((use)==2?weapon.Weapon_Skill_2:0)));
	int wpnMaxDist=((use)==0?weapon.Weapon_MaxDist_0:((use)==1?weapon.Weapon_MaxDist_1:((use)==2?weapon.Weapon_MaxDist_2:0)));
	int bonusrange=0;
	if(realWeapon.GetType()==(3)&&realWeapon.Val3==(4))bonusrange+=4;
	if(realWeapon.GetType()==(3)&&realWeapon.Val4==(4))bonusrange+=4;
	if(realWeapon.GetType()==(3)&&realWeapon.Val5==(4))bonusrange+=4;
	if(realWeapon.GetType()==(3)&&realWeapon.Val6==(4))bonusrange+=4;
	if(realWeapon.GetType()==(3)&&realWeapon.Val7==(4))bonusrange+=4;
	if(realWeapon.GetType()==(3)&&realWeapon.Val8==(4))bonusrange+=4;
	if(chosen.Param[(336)]>0&&chosen.Param[(315)]>0)
	bonusrange+=5;
	if(realWeapon.GetType()==(3))
	{
		wpnMaxDist+=bonusrange;
	}
	if(skillNum==(205))
	{
		wpnMaxDist=chosen.Param[(0)]+5;
		wpnMaxDist+=6*(chosen.Param[(336)]);
	}
	
	if(chosen.Param[(336)]>0&&chosen.Param[(315)]>0)
	bonusrange+=5;
	if(realWeapon.GetType()==(3)&&realWeapon.Val3==(102))wpnMaxDist*=2;
	if(realWeapon.GetType()==(3)&&realWeapon.Val4==(102))wpnMaxDist*=2;
	if(realWeapon.GetType()==(3)&&realWeapon.Val5==(102))wpnMaxDist*=2;
	if(realWeapon.GetType()==(3)&&realWeapon.Val6==(102))wpnMaxDist*=2;
	if(realWeapon.GetType()==(3)&&realWeapon.Val7==(102))wpnMaxDist*=2;
	if(realWeapon.GetType()==(3)&&realWeapon.Val8==(102))wpnMaxDist*=2;
	if(realWeapon.GetType()==(3)&&realWeapon.Val2==(102))wpnMaxDist*=2;
	
	int dist=GetCrittersDistantion(chosen,target);
	if(dist>wpnMaxDist)
	return 0;
	
	int toHit=int(chosen.Param[skillNum]);
	
	if(realWeapon.GetType()==(3)&&(realWeapon.Proto.ProtoId==(388)))toHit=int((((chosen.Param[(200)])>(chosen.Param[(207)]))?(chosen.Param[(200)]):(chosen.Param[(207)])));
	int bonusaccu=0;
	if(realWeapon.GetType()==(3)&&realWeapon.Val3==(12))bonusaccu+=20;
	if(realWeapon.GetType()==(3)&&realWeapon.Val4==(12))bonusaccu+=20;
	if(realWeapon.GetType()==(3)&&realWeapon.Val5==(12))bonusaccu+=20;
	if(realWeapon.GetType()==(3)&&realWeapon.Val6==(12))bonusaccu+=20;
	if(realWeapon.GetType()==(3)&&realWeapon.Val7==(12))bonusaccu+=20;
	if(realWeapon.GetType()==(3)&&realWeapon.Val8==(12))bonusaccu+=20;
	
	if(wpnMaxDist<2&&skillNum!=(203))
	{
		if(target.IsPlayer())
		{
			if(chosen.IsPlayer())
			{
				RunServerScriptUnsafe("unsafe_client@unsafe_Hexbot",chosen.Id,target.Id,weaponMode,"",null);
				
			}
		}
		
	}
	
	if(realWeapon.GetType()==(3))
	toHit+=bonusaccu;
	
	int weaponPerk=weapon.Weapon_Perk;
	int blockers=0;
	
	if(skillNum!=(203))
	{ 
		
		int distmod1=2;
		int distmod2=0;
		bool havelongrange=false;
		if((@realWeapon!=null)&&realWeapon.Val3==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val4==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val5==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val6==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val7==(12))havelongrange=true;
		if((@realWeapon!=null)&&realWeapon.Val8==(12))havelongrange=true;
		
		if(havelongrange)
		distmod1=4;
		
		int perception=chosen.Param[(1)];
		int acc=dist;
		
		if(dist<distmod2)
		acc+=distmod2;
		else
		{
			if(chosen.IsPlayer())
			acc-=(perception-2)*distmod1;
			else
			acc-=perception*distmod1;
		}
		
		if(-2*perception>acc)
		acc=-2*perception;
		
		acc-=2*chosen.Param[(315)];
		if(acc>=0)
		{
			if(chosen.Damage[(502)]!=0)
			acc*=-12;
			else
			acc*=-4;
		}
		else
		acc*=-4;
		
		toHit+=acc;
		if((@realWeapon!=null)&&realWeapon.Val3==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val4==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val5==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val6==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val7==(12))toHit+=20;
		if((@realWeapon!=null)&&realWeapon.Val8==(12))toHit+=20;
		
		blockers=GetCrittersPath(chosen.HexX,chosen.HexY,target.HexX,target.HexY,0.0f,dist,(0x01),null);
		if(!target.IsKnockout())
		blockers--;
		if(!target.IsLife())
		blockers--;
		toHit-=10*blockers;
	}
	
	if(!(weapon.Weapon_IsUnarmed)&&chosen.Trait[(553)]!=0)
	toHit+=((((weapon.Flags)&((0x00000080)))!=0)?-100:20);
	
	int handlingStrength=chosen.Param[(0)];
	int reqStrength=weapon.Weapon_MinStrength;
	if(chosen.Param[(407)]!=0)
	handlingStrength+=2;
	if(chosen.Param[(395)]!=0)
	handlingStrength+=1;
	if(handlingStrength<reqStrength)
	toHit-=(reqStrength-handlingStrength)*20;
	
	int acmod=target.GetAC(hitLocation==(1)||hitLocation==(7));
	if((@ammo!=null))
	acmod+=ammo.Ammo_AcMod;
	if(acmod>0)
	toHit-=acmod;  
	
	if(chosen.Damage[(502)]!=0)
	toHit-=25;
	if(target.IsKnockout())
	toHit+=40;
	if(target.GetMultihex()>0)
	toHit+=15;
	
	int hitMod=GetHitAim(hitLocation);
	if(skillNum==(203))
	hitMod/=2;
	toHit-=hitMod;
	int dmgType=((use)==0?weapon.Weapon_DmgType_0:((use)==1?weapon.Weapon_DmgType_1:((use)==2?weapon.Weapon_DmgType_2:0)));
	int normaldmg=0;
	if(dmgType==(1))
	normaldmg=5;
	toHit=(((toHit)>(95+chosen.Param[(395)]+normaldmg))?(95+chosen.Param[(395)]+normaldmg):(((toHit)<(5+chosen.Param[(395)]))?(5+chosen.Param[(395)]):(toHit)));
	
	return toHit;
}

uint GetHitAim(int hitLocation)
{
	switch(hitLocation)
	{
		case(0):
		break;
		case(9):
		break;
		case(4):
		return __HitAimTorso;
		case(7):
		return __HitAimEyes;
		case(1):
		return __HitAimHead;
		case(2):
		case(3):
		return __HitAimArms;
		case(8):
		return __HitAimGroin;
		case(5):
		case(6):
		return __HitAimLegs;
		default:
		break;
	}
	return 0;
}  

void hit_aim(uint8&aim)
{
	if(0<aim&&aim<9)
	return;
	
	CritterCl@chosen=GetChosen();
	if(!(@chosen!=null))
	return;
	
	ItemCl@item=chosen.GetItem(0,(1));
	if((@item!=null))
	{
		uint8 use=((item.Mode)&0xF);
		if(!((use)==0?item.Proto.Weapon_Aim_0:((use)==1?item.Proto.Weapon_Aim_1:((use)==2?item.Proto.Weapon_Aim_2:false))))
		return;
	}
	if(chosen.Trait[(557)]!=0)
	return;
	
	uint8 current_aim=GetCurrentAim();
	if(current_aim!=(9))
	aim=current_aim;
}  

void combat_result(array<uint>&data)
{
	uint datalen=data.length();
	if(datalen==0)
	return;
	if(data[0]!=datalen)
	return;     
	
	uint current=1;          
	
	while(current<datalen)
	{
		int damage=-1;
		uint effect=0;
		uint loc=0;
		int message=-1;
		
		uint mode=data[current++];
		uint whoTarget=data[current++];
		uint whoAttacker=data[current++];
		CritterCl@trueTarget=null;
		
		CritterCl@crTarget=GetCritter(whoTarget);
		CritterCl@crAttacker=GetCritter(whoAttacker);
		CritterCl@chosen=GetChosen();
		if(chosen.Param[(1170)]>0)
		return;
		bool self=(whoTarget==GetChosen().Id);
		bool myAttack=(whoAttacker==GetChosen().Id);
		bool isPvP=((@crTarget!=null)&&(@crAttacker!=null)&&crTarget.IsPlayer()&&crAttacker.IsPlayer());
		
		string name="error0";
		if((@crTarget!=null))
		{
			if(!self)
			{
				if(IsLexem(crTarget,"$name"))
				{
					name=GetLexem(crTarget,"$name");
					name=FormatTags(name,"");
				}
				else
				name=crTarget.Name;
			}
			else
			name=GetMsgStr((5),chosen.Param[(71)]==(0)?506:556);
		}
		
		string name2="somebody";
		if((@crAttacker!=null)&&crAttacker.IsPlayer())
		{
			if(!myAttack)
			{
				if(IsLexem(crAttacker,"$name"))
				{
					name2=GetLexem(crAttacker,"$name");
					name2=FormatTags(name2,"");
				}
				else
				name2=crAttacker.Name;
			}
			else
			name2="you";
		}
		
		uint offset;
		if(self)
		{
			if(crTarget.Param[(71)]==(0))
			offset=506;
			else
			offset=556;
		}
		else
		{
			if(crTarget.Param[(71)]==(0))
			offset=606;
			else
			offset=706;
		}
		
		string result; 
		
		switch(mode)
		{
			case(2):
			effect=data[current++];
			result=GetMsgStr((5),offset+8);
			result=ReplaceText(result,"%s",name);
			if(myAttack)
			result=CombatLog.MsgAttNormColor+result;
			break;
			case(3):
			effect=data[current++];
			damage=data[current++];
			result=GetMsgStr((5),offset+(damage>1?28:27));
			result=ReplaceText(result,"%s",name);
			if(damage>1)
			result=ReplaceText(result,"%d",damage);
			if(self)
			result=CombatLog.MsgDefNormColor+result;
			break;
			case(4):
			case(8):
			damage=data[current++];
			result=GetMsgStr((5),offset+(damage>1?7:(damage!=0?17:21)));
			result=ReplaceText(result,"%s",name);
			if(damage>1)
			result=ReplaceText(result,"%d",damage);
			if(self)
			{
				if(mode==(8))
				result=CombatLog.MsgDefKillColor+result;
				else
				result=CombatLog.MsgDefNormColor+result;
				if(isPvP&&whoTarget!=whoAttacker)
				result+=" by "+name2;
			}
			else
			{
				if(myAttack){
					if(mode==(8))
					result=CombatLog.MsgAttKillColor+result;
					else
					result=CombatLog.MsgAttNormColor+result;
				}
				if(isPvP)
				result+=" by "+name2;
			}
			break;
			case(5):
			case(9):
			loc=data[current++];
			damage=data[current++];
			
			result=GetMsgStr((5),offset+(damage>1?6:(damage!=0?16:20)));
			result=ReplaceText(result,"%s",name);
			
			result=ReplaceText(result,"%s",GetMsgStr((5),1000+crTarget.CrTypeAlias*10+loc-1));
			if(damage>1)
			result=ReplaceText(result,"%d",damage);
			if(self)
			{
				if(mode==(9))
				result=CombatLog.MsgDefKillColor+result;
				else
				result=CombatLog.MsgDefNormColor+result;
				if(isPvP&&whoTarget!=whoAttacker)
				result+=" by "+name2;
			}
			else
			{
				if(myAttack){
					if(mode==(9))
					result=CombatLog.MsgAttKillColor+result;
					else
					result=CombatLog.MsgAttNormColor+result;
				}
				if(isPvP)
				result+=" by "+name2;
			}
			break;
			case(6):
			damage=data[current++];
			effect=data[current++];
			message=data[current++];
			result=GetMsgStr((5),offset+(damage>1?14:(damage!=0?18:22)));
			result=ReplaceText(result,"%s",name);
			if(damage>1)
			result=ReplaceText(result,"%d",damage);
			if(self)
			{
				result=CombatLog.MsgDefCritColor+result;
				if(isPvP&&whoTarget!=whoAttacker)
				result+=" by "+name2;
			}
			else
			{
				if(myAttack)
				result=CombatLog.MsgAttCritColor+result;
				if(isPvP)
				result+=" by "+name2;
			}
			break;
			case(7):
			loc=data[current++];
			damage=data[current++];
			effect=data[current++];
			message=data[current++];
			result=GetMsgStr((5),offset+(damage>1?5:(damage!=0?15:19)));
			result=ReplaceText(result,"%s",name);
			result=ReplaceText(result,"%s",GetMsgStr((5),1000+crTarget.CrTypeAlias*10+loc-1));
			if(damage>1)
			result=ReplaceText(result,"%d",damage);
			if(self)
			{
				result=CombatLog.MsgDefCritColor+result;
				if(isPvP&&whoTarget!=whoAttacker)
				result+=" by "+name2;
			}
			else
			{
				if(myAttack)
				result=CombatLog.MsgAttCritColor+result;
				if(isPvP)
				result+=" by "+name2;
			}
			break;
			case(10):
			damage=data[current++];
			effect=data[current++]&(0x00000800);
			message=data[current++];
			result=GetMsgStr((5),offset+(damage>1?14:(damage!=0?18:22)));
			result=ReplaceText(result,"%s",name);
			if(damage>1)
			result=ReplaceText(result,"%d",damage);
			if(self)
			{
				result=CombatLog.MsgDefKillColor+result;
				if(isPvP&&whoTarget!=whoAttacker)
				result+=" by "+name2;
			}
			else
			{
				if(myAttack)
				result=CombatLog.MsgAttKillColor+result;
				if(isPvP)
				result+=" by "+name2;
			}
			break;
			case(11):
			loc=data[current++];
			damage=data[current++];
			effect=data[current++]&(0x00000800);
			message=data[current++];
			result=GetMsgStr((5),offset+(damage>1?5:(damage!=0?15:19))); 
			
			result=ReplaceText(result,"%s",name);
			result=ReplaceText(result,"%s",GetMsgStr((5),1000+crTarget.CrTypeAlias*10+loc-1));
			if(damage>1)
			result=ReplaceText(result,"%d",damage);
			if(self)
			{
				result=CombatLog.MsgDefKillColor+result;
				if(isPvP&&whoTarget!=whoAttacker)
				result+=" by "+name2;
			}
			else
			{
				if(myAttack)
				result=CombatLog.MsgAttKillColor+result;
				if(isPvP)
				result+=" by "+name2;
			}
			break;
			case(12):  
			
			@trueTarget=GetCritter(whoAttacker);
			if(self)
			{
				result=GetMsgStr((5),(crTarget.Param[(71)]==(0)?608:708));
				string nameTrue="something";
				if((@trueTarget!=null))
				nameTrue=trueTarget.Name;
				result=ReplaceText(result,"%s",nameTrue);
			}
			else
			{
				
				result=GetMsgStr((5),offset+3);
				if(whoAttacker==GetChosen().Id)
				result=ReplaceText(result,"%s",GetMsgStr((5),chosen.Param[(71)]==(0)?506:556));
				else
				{
					string nameTrue="something";
					if((@trueTarget!=null))
					nameTrue=trueTarget.Name;
					result=ReplaceText(result,"%s",nameTrue);
				}
				result=ReplaceText(result,"%s",name);
			}
			
			break;
			case(1):
			result=GetMsgStr((5),offset+9);
			result=ReplaceText(result,"%s",name);
			if(myAttack)
			result=CombatLog.MsgAttNormColor+result;
			break;
			case(13):
			result=GetMsgStr((5),offset+9);
			result=ReplaceText(result,"%s",name);
			result+=GetMsgStr((5),108)+GetMsgStr((5),offset-306+20);
			default:
			break;
		}
		
		bool isVerbose=false;
		
		array<string@>ext;
		string@floatExt="";
		if(message!=-1&&isVerbose)
		{
			result+=GetMsgStr((5),message);
		}
		else if(effect!=0)
		{
			offset-=306;
			if(mode>(3))
			{
				if((((effect)&((0x00000001)))!=0))
				ext.insertLast(GetMsgStr((5),offset));
				if((((effect)&((0x00000002)))!=0))
				ext.insertLast(GetMsgStr((5),offset+1));
				if((((effect)&((0x00000004)))!=0))
				{
					floatExt+="\ncrippled left leg";
					ext.insertLast(GetMsgStr((5),offset+2));
				}
				if((((effect)&((0x00000008)))!=0))
				{
					floatExt+="\ncrippled right leg";
					ext.insertLast(GetMsgStr((5),offset+3));
				}
				if((((effect)&((0x00000010)))!=0))
				{
					floatExt+="\ncrippled left arm";
					ext.insertLast(GetMsgStr((5),offset+4));
				}
				if((((effect)&((0x00000020)))!=0))
				{
					floatExt+="\ncrippled right arm";
					ext.insertLast(GetMsgStr((5),offset+5));
				}
				if((((effect)&((0x00000040)))!=0))
				{
					floatExt+="\nblinded";
					ext.insertLast(GetMsgStr((5),offset+6));
				} 
				
				if((((effect)&((0x00000800)))!=0))
				ext.insertLast(GetMsgStr((5),offset+11));
				if((((effect)&((0x00004000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+14));
				if((((effect)&((0x00008000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+15));
				if((((effect)&((0x00200000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+21));
			}
			else
			{
				if((((effect)&((0x00000002)))!=0))
				ext.insertLast(GetMsgStr((5),offset+1));
				
				if((((effect)&((0x00001000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+12));
				if((((effect)&((0x00002000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+13));
				if((((effect)&((0x00004000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+14));
				if((((effect)&((0x00008000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+15));
				if((((effect)&((0x00010000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+16));
				if((((effect)&((0x00020000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+17));
				if((((effect)&((0x00040000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+18));
				if((((effect)&((0x00080000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+19));
				
				if((((effect)&((0x00200000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+21));
				if((((effect)&((0x10000000)))!=0))
				ext.insertLast(GetMsgStr((5),offset+7));
			}
			offset+=306;
		}
		
		if(8<=mode&&mode<=11&&(!isVerbose||message==-1))
		ext.insertLast(GetMsgStr((5),offset+7-306));
		
		for(uint m=0,n=ext.length();m<n;m++)
		{
			if(m==n-1)
			result+=GetMsgStr((5),108);
			else
			result+=", ";
			result+=ext[m];
		}
		
		result+=".";
		
		Message(result,int(2));
		
		if(8<=mode&&mode<=11&&isVerbose&&message!=-1)
		Message(name+" "+GetMsgStr((5),offset+7-306)+".",int(2)); 
		
		if(__DamageHitDelay>0&&(damage>0||floatExt.length()>0))
		{
			if(damage<1)
			{
				@floatExt=substring(floatExt,1,floatExt.length()-1);
				MapMessage(floatExt,crTarget.HexX,crTarget.HexY,__DamageHitDelay,__ConfigDamageHitColor,true,Random(__ConfigDamageHitOffXfrom,__ConfigDamageHitOffXto),Random(__ConfigDamageHitOffYfrom,__ConfigDamageHitOffYto));
			}
			else
			MapMessage("-"+damage+floatExt,crTarget.HexX,crTarget.HexY,__DamageHitDelay,__ConfigDamageHitColor,true,Random(__ConfigDamageHitOffXfrom,__ConfigDamageHitOffXto),Random(__ConfigDamageHitOffYfrom,__ConfigDamageHitOffYto));
		}
		
		if(__ConfigShowBulletTracers==true&&(@crTarget!=null)&&(@crAttacker!=null))
		{
			
			int[]muzzleData(9,0);
			ItemCl@weapon=crAttacker.GetItem(0,(1));
			if((@weapon!=null))
			{
				uint8 use=weapon.Mode&0x0F;
				uint16 rounds=((use)==0?weapon.Proto.Weapon_Round_0:((use)==1?weapon.Proto.Weapon_Round_1:((use)==2?weapon.Proto.Weapon_Round_2:0)));
				bool isBurst=rounds>1;
				int8 dmgType=((use)==0?weapon.Proto.Weapon_DmgType_0:((use)==1?weapon.Proto.Weapon_DmgType_1:((use)==2?weapon.Proto.Weapon_DmgType_2:0)));
				int skillNum=((use)==0?weapon.Proto.Weapon_Skill_0:((use)==1?weapon.Proto.Weapon_Skill_1:((use)==2?weapon.Proto.Weapon_Skill_2:0)));
				uint8 weaponSubtype=(skillNum==(200)||skillNum==(201)||skillNum==(202))?(4):((skillNum==(205))?(3):(skillNum==(203))?(2):(1));
				bool isRanged=(weaponSubtype==(4));
				bool isPistol=(weapon.Proto.Weapon_Anim1==(8));
				bool isMinigun=(weapon.Proto.Weapon_Anim1==(12));
				bool isRifle=(weapon.Proto.Weapon_Anim1==(10));
				bool isSMG=(weapon.Proto.Weapon_Anim1==(9));
				bool isShotgun=(weapon.Proto.Weapon_SoundId_0==82);
				bool isFlamer=(weapon.Proto.Weapon_SoundId_0==73);
				bool isRocket=(weapon.Proto.Weapon_Anim1==(13));
				bool isHeavyRifle=(weapon.Proto.Weapon_Anim1==(11));          
				
				if(isRanged)
				{
					
					if(dmgType==(1))
					{
						if(!isBurst)
						{
							if(isPistol||isRifle||isHeavyRifle||isSMG)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0xFFFFFF66);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFFCC6600);
								
								muzzleData[6]=3000;
								
								CreateMuzzle(muzzleData,(0));
							}
							
						}
						else if(isBurst)
						{
							if(isMinigun)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0xFFFFFF66);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFFCC6600);
								
								muzzleData[6]=5000;
								muzzleData[7]=int(1200/20);
								muzzleData[8]=20;
							}
							else if(isRifle&&!isShotgun)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0xFFFFFF66);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFFCC6600);
								
								muzzleData[6]=5000;
								muzzleData[7]=100;
								muzzleData[8]=5;
							}
							else if(isHeavyRifle)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0xFFFFFF66);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFFCC6600);
								
								muzzleData[6]=5000;
								muzzleData[7]=200;
								muzzleData[8]=3;
							}
							else if(isSMG)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0xFFFFFF66);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFFCC6600);
								
								muzzleData[6]=5000;
								muzzleData[7]=100;
								muzzleData[8]=5;
							}
							else if(isShotgun)
							{
								int rounds=5;
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0xFFFFFF66);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFFCC6600);
								
								muzzleData[6]=3000;
								muzzleData[7]=10;
								muzzleData[8]=rounds;
							}
							
							CreateBurstMuzzle(muzzleData,(0));
						}
					}
					if(dmgType==(2))
					{
						if(!isBurst)
						{
							if(isPistol||isRifle||isHeavyRifle||isSMG)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0x60FF0000);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFFFF0000);
								
								muzzleData[7]=1000;
								
								CreateRay(muzzleData);
							}
							
						}
						else if(isBurst)
						{
							if(isMinigun)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0xDDFF0000);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFFFF0000);
								
								muzzleData[6]=10;
								muzzleData[7]=90;
								
								CreateBurstRay(muzzleData);
							}
							else
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0xDDFF0000);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFFFF0000);
								
								muzzleData[6]=5;
								muzzleData[7]=100;
								
								CreateBurstRay(muzzleData);
							}
						}
					}
					if(dmgType==(3))
					{
						
						if(isSMG)
						{
							muzzleData[0]=crAttacker.HexX;
							muzzleData[1]=crAttacker.HexY;
							muzzleData[2]=int(0xFFFFFF00);
							
							muzzleData[3]=crTarget.HexX;
							muzzleData[4]=crTarget.HexY;
							muzzleData[5]=int(0xFFFFFF00);
							
							muzzleData[6]=1200;
							muzzleData[7]=300;
							muzzleData[8]=10; 
							
							CreateMuzzle(muzzleData,(1));
						}
					}
					if(dmgType==(4))
					{
						if(!isBurst&&!isFlamer)
						{
							if(isPistol||isRifle||isHeavyRifle||isSMG)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0xBB00FF00);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0x0000FF00);
								
								muzzleData[6]=1000; 
								
								CreateMuzzle(muzzleData,(1));
							}
						}
						
						if(isBurst)
						{
							if(isMinigun)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0x6000FF00);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFF00FF00);
								
								muzzleData[6]=5000;
								muzzleData[7]=100;
								muzzleData[8]=10;
								
								CreateBurstMuzzle(muzzleData,(1));
							}
							if(isPistol||isRifle||isHeavyRifle||isSMG)
							{
								muzzleData[0]=crAttacker.HexX;
								muzzleData[1]=crAttacker.HexY;
								muzzleData[2]=int(0x6000FF00);
								
								muzzleData[3]=crTarget.HexX;
								muzzleData[4]=crTarget.HexY;
								muzzleData[5]=int(0xFF00FF00);
								
								muzzleData[6]=2000;
								muzzleData[7]=50;
								muzzleData[8]=10;
								
								CreateBurstMuzzle(muzzleData,(1));
							}
						}
					}
					if(!isBurst&&dmgType==(5))
					{
						if(isHeavyRifle)
						{
							muzzleData[0]=crAttacker.HexX;
							muzzleData[1]=crAttacker.HexY;
							muzzleData[2]=int(0x66aa49ff);
							
							muzzleData[3]=crTarget.HexX;
							muzzleData[4]=crTarget.HexY;
							muzzleData[5]=int(0xFF0000FF);
							
							muzzleData[7]=200;
							
							CreateRay(muzzleData);
						}
					}
					
					if(isBurst&&dmgType==(5))
					{
						if(isMinigun)
						{
							muzzleData[0]=crAttacker.HexX;
							muzzleData[1]=crAttacker.HexY;
							muzzleData[2]=int(0xFF0000FF);
							
							muzzleData[3]=crTarget.HexX;
							muzzleData[4]=crTarget.HexY;
							muzzleData[5]=int(0xFF0000FF);
							
							muzzleData[6]=10;
							muzzleData[7]=90;
							
							CreateBurstRay(muzzleData);
						}
					}
				}
			}
		}
	}
}
