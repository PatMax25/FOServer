                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                   

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}                          

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";                                                                                                                                                                                                                                                                                                                                                                                                                      

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                           

import bool GetItemPid(const string&in,int&out)from"main";
import bool GetVarId(const string&in,int&out)from"main";
import bool GetBaseType(const string&in,int&out)from"main";
import void ExplodeEx(Map&map,uint16 hexX,uint16 hexY,uint16 effectPid,uint effectRadius,uint damage,uint damageType,uint damageRadius,uint ownerId,uint16 explodePid)from"explode";
import uint GetRandomDeathAnimation()from"cheats";
import void SwitchState(Item&locker)from"lockers";   

Critter@GetDevCritter(Critter&player,int crId)
{
	Critter@cr=GetCritter(crId);
	if(!(@cr!=null))
	{
		player.Say((11),"Critter not valid");
		return null;
	}
	else
	return cr;
}  

Item@GetDevItem(Critter&player,int itemId)
{
	Item@item=GetItem(itemId);
	if(!(@item!=null))
	{
		player.Say((11),"Item not valid");
		return null;
	}
	else
	return item;
}

void SendLVars(Critter&player,int p0,int p1,int p2,string@param3,array<int>@param4)
{}   

void unsafe_Possess(Critter&player,int crId,int p1,int p2,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,crId);
	if((@cr!=null))
	{
		{;};
		SwapCritters(player,cr,true,true);
	}
	LogCommandUsage(player,"possessed critter '"+cr.Name+"'");
}   

void unsafe_KillCritter(Critter&player,int p0,int p1,int p2,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,p0);
	if((@cr!=null))
	{
		if(cr.Cond==(3))
		{
			if(cr.IsPlayer())
			cr.ParamBase[(532)]=0;
			cr.ToLife();
			Heal(cr);
			LogCommandUsage(player,"revived '"+cr.Name+"'");
		}
		else
		{
			if(cr.IsPlayer())
			cr.ParamBase[(532)]=1;
			cr.ToDead(GetRandomDeathAnimation(),null);
			LogCommandUsage(player,"killed '"+cr.Name+"'");
		}
	}
}  

void unsafe_NeutralizeCritter(Critter&player,int crId,int p1,int p2,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,crId);
	if((@cr!=null))
	{
		if(cr.IsKnockout())
		{
			cr.ParamBase[(75)]=100*cr.Param[(8)];
		}
		else
		cr.ToKnockout(((Random(0,1)==0)?(82):(83)),((Random(0,1)==0)?(86):(87)),((Random(0,1)==0)?(88):(89)),1000,cr.HexX,cr.HexY);
	}
}  

void unsafe_RemoveCritter(Critter&player,int crId,int p1,int p2,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,crId);
	string name;
	int id;
	if((@cr!=null))
	{
		name=cr.Name;
		id=cr.Id;
		DeleteNpc(cr);
		LogCommandUsage(player,"removed critter '"+name+"' ("+id+")");
	}
}   

void unsafe_RemoveItem(Critter&player,int itemId,int p1,int p2,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Item@item=GetDevItem(player,itemId);
	if((@item!=null))
	DeleteItem(item);
	LogCommandUsage(player,"removed item");
}   

void unsafe_Say(Critter&player,int crId,int sayType,int p2,string@message,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,crId);
	if((@cr!=null))
	{
		cr.Say(sayType,message);
	}
}   

void unsafe_MoveTo(Critter&player,int crId,int x,int y,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,crId);
	if((@cr!=null))
	{
		cr.ErasePlane(-1,true); 
		
		AddWalkPlane(cr,0,x,y,0xff,false,0);
		cr.SetHomePos(x,y,cr.Dir);  
		
	}
	LogCommandUsage(player,"issued move plan with critter '"+cr.Name+"'");
}    

void unsafe_PickItem(Critter&player,int crId,int itemId,int p2,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,crId);
	Item@item=GetDevItem(player,itemId);
	
	if((@cr!=null)&&(@item!=null))
	{
		cr.ErasePlane(-1,true);
		
		AddPickPlane(cr,0,item,0,false);
	}
	LogCommandUsage(player,"issued pick plan with critter '"+cr.Name+"'");
}   

void unsafe_Attack(Critter&player,int crId,int targetId,int p2,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,crId);
	Critter@target=GetDevCritter(player,targetId);
	
	if((@cr!=null)&&(@target!=null))
	{
		cr.ErasePlane(-1,true);
		
		AddAttackPlane(cr,0,target,__DeadHitPoints);
	}
	LogCommandUsage(player,"issued attack plan with critter '"+cr.Name+"'");
}  

void unsafe_Stop(Critter&player,int crId,int p1,int p2,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,crId);
	
	if((@cr!=null))
	{
		cr.ErasePlane(-1,true);
	}
}  

void unsafe_Trade(Critter&player,int crId,int itemId,int p2,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;     
	
	if(crId!=0)
	{
		Critter@cr=GetDevCritter(player,crId);
		if((@cr!=null))
		{
			player.ShowContainer(cr,null,(8));
			if(cr.IsPlayer())
			LogCommandUsage(player,"traded with "+cr.Name);
			else
			LogCommandUsage(player,"traded with critter '"+cr.Name+"'");
			
		}
	}
	else if(itemId!=0)
	{
		Item@item=GetDevItem(player,itemId);
		if((@item!=null))
		{
			player.ShowContainer(null,item,(7));
			LogCommandUsage(player,"browsed container "+item.Id);
		}
	}
}   

void unsafe_Teleport(Critter&player,int crId,int x,int y,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	uint8 dir=0xff;
	
	if(crId!=0)
	{
		Critter@cr=GetDevCritter(player,crId);
		if((@cr!=null))
		{
			dir=GetDirection(cr.HexX,cr.HexY,x,y);
			cr.TransitToHex(x,y,dir);
		}
	}
	else
	{
		dir=GetDirection(player.HexX,player.HexY,x,y);
		player.TransitToHex(x,y,dir);
	}
}   

void unsafe_Rotate(Critter&player,int crId,int dir,int y,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Critter@cr=GetDevCritter(player,crId);
	if((@cr!=null))
	{
		if(dir>0)
		cr.SetDir((cr.Dir+dir)%6);
		else
		cr.SetDir(cr.Dir==0?5:cr.Dir+dir);
	}
}   

void unsafe_SwitchState(Critter&player,int itemId,int x,int y,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	
	if(itemId!=0)
	{
		Item@item=GetDevItem(player,itemId);
		if((@item!=null)&&(item.GetType()==(8)||item.GetType()==(9)))
		SwitchState(item);
	}
}   

void GiveXp(Critter&player,int crId,int amount,int p2,string@message,array<int>@param4)
{
	if(player.GetAccess()<(3))
	{
		player.Say((11),"You are not allowed to use this feature.");
		return;
	}
	
	Critter@cr=GetDevCritter(player,crId);
	if((@cr!=null))
	{
		if(amount>0)
		{
			if((@message!=null)and message.length()>0)
			cr.Say((11),message);
			cr.ParamBase[(76)]+=amount;
			LogExperience(cr,amount,"devmenu");
			LogCommandUsage(player,"gave "+amount+" XP to critter '"+cr.Name+"'");
		}
	}
}

void Airstrike(Critter&player,int crId,int x,int y,string@param3,array<int>@param4)
{
	if(player.GetAccess()<(3))
	{
		player.Say((11),"You are not allowed to use this feature.");
		return;
	}
	
	if((@player!=null))
	{
		player.Say((11),"Airstrike target confirmed. Dropping the payload now.");
	}
	
	uint16 effectPid=(4011);
	uint effectRadius=2;
	uint damage=Random(1000,5000);
	uint damageType=(7);
	uint damageRadius=3;
	
	for(int i=0;i<20;i++)
	ExplodeEx(player.GetMap(),x+Random(-10,10),y+Random(-10,10),effectPid,effectRadius,damage,damageType,damageRadius,0,0);
	
	LogCommandUsage(player,"using airstrike");
}    

void unsafe_SpawnCritter(Critter&player,int p0,int p1,int p2,string@script,array<int>@param4)
{
	if(player.GetAccess()<(1))
	return;
	Map@map=player.GetMap();
	if(!(@map!=null))
	{
		player.Say((11),"Map not valid");
		return;
	}
	
	if(param4.length()<11)
	{
		player.Say((11),"Invalid parameters");
	}
	
	uint pid=param4[0];
	uint16 hexX=param4[1];
	uint16 hexY=param4[2];
	uint dir=param4[3];
	uint dialog=param4[4];
	uint ai=param4[6];
	uint bag=param4[7];
	uint teamIdPack=param4[8];
	bool isMob=param4[9]!=0;
	uint level=param4[10];
	
	AddNpc(map,pid,hexX,hexY,dir,dialog,script,ai,bag,teamIdPack/100,(teamIdPack/10)%10,teamIdPack,isMob,level);
	
	LogCommandUsage(player,"spawning critter");
} 

void answer_Generic(Critter&player,uint answerI,string&answerS)
{
	player.Say((11),"Answer integer<"+answerI+">, string<"+answerS+">.");
}

void dlgbox(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((2),5,"answer_Generic");
	cr.Say((18),"Choose you button dude.");
	cr.Say((19+(0)),"Button0");
	cr.Say((19+(1)),"Button1");
	cr.Say((19+(2)),"Button2");
	cr.Say((19+(3)),"Button3");
	cr.Say((19+(4)),"Button4");
}

void skillbox(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((3),0,"answer_Generic");
}

void say(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((5),p0,"answer_Generic");
	cr.Say((39),"Choose you...");
	cr.Say((40),"sometext");
}

void timer(Critter&cr,int p0,int p1,int p2)
{
	ProtoItem@proto=GetProtoItem((41));
	cr.ShowScreen((1),proto.PicInv,"answer_Generic");
}

void bag(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((4),0,"answer_Generic");
}

void inventory(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((7),0,"");
}

void cha(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((8),0,"");
}

void fixboy(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((9),0,"");
}

void pipboy(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((10),0,"");
}

void minimap(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((11),0,"");
}

void close(Critter&cr,int p0,int p1,int p2)
{
	cr.ShowScreen((0),0,"");
}       

