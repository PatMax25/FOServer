                

shared interface IWMZoneRender
{
	void SetX(int xin);
	void SetY(int yin);
	void SetColor(uint colorin);
	void SetDrawType(uint8 type);
	void SetZoneLength(int len);
	void SetLayer(uint layer);
	void Draw(uint layer);
}

shared interface IRayMap
{
	void SetDrawType(uint8 type);
	void SetColors(uint color1In,uint color2In);
	void SetId(uint id);
	void Draw();
}

shared interface IBurstRay
{
	void SetDrawType(uint8 type);
	void SetColors(uint color1In,uint color2In);
	void SetId(uint id);
	void Draw();
}

shared interface IDelayedText
{
	void SetId(uint id);
	void Draw();
}

shared interface IMuzzleFlash
{
	void SetDrawType(uint8 type);
	void SetColors(uint color1In,uint color2In);
	void SetId(uint id);
	void Draw();
}

shared interface IBurstMuzzle
{
	void SetDrawType(uint8 type);
	void SetColors(uint color1In,uint color2In);
	void SetId(uint id);
	void Draw();
}

shared interface IWeaponRadiusChosen
{
	void Draw();
	void SetDrawType(uint8 type);
	
}

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}                                                                                      

import bool IsGrenade(ItemCl&item)from"hexThrow";                                 

shared class Sprite
{
	Sprite()
	{
		Id=0;
		Width=0;
		Height=0;
		FrmCount=0;
	}
	
	bool Load(string&name,int path)
	{
		if(name.length()>0)
		{
			Id=LoadSprite(name,path);
			Filename=name;
		}
		else
		Id=0;
		RefreshData();
		return Id!=0;
	}
	
	void LoadHash(uint nameHash,uint8 dir)
	{
		Id=LoadSprite(nameHash,dir);
		RefreshData();
	}
	
	void LoadByIni(string&iniKey,int path)
	{
		string@name=GetIfaceIniStr(iniKey);
		if(@name!=null&&name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Draw(int x,int y)
	{
		if(Id!=0)
		DrawSprite(Id,-1,x,y,0);
	}
	
	private void RefreshData()
	{
		if(Id!=0)
		{
			Width=GetSpriteWidth(Id,0);
			Height=GetSpriteHeight(Id,0);
			FrmCount=GetSpriteCount(Id);
		}
		else
		{
			Width=0;
			Height=0;
			FrmCount=0;
			Filename="";
		}
	}
	
	uint Id;
	int Width;
	int Height;
	uint FrmCount;
	string Filename;
};                                                                                                           

bool SpritesInit=false;     

WeaponRadiusChosen@wepRadChos;

array<CustomChosenHex@>CustomChosenHexes;

array<WMZoneRender@>WMZonesRender;

array<RayMap@>RaysMap;
uint rays;

array<BurstRay@>BurstRays;
uint burstRays;

array<DelayedText@>DelayedTexts;
uint texts;

array<MuzzleFlash@>MuzzleFlashes;
uint muzzleFlashes;

array<BurstMuzzle@>BurstMuzzles;
uint burstMuzzles;

bool __ConfigDrawRays=true;    

class WMZoneRender:IWMZoneRender
{
	int realx,realy,renderx,rendery,length;
	uint color,layer;
	uint8 drawType;
	array<int>vertices; 
	
	WMZoneRender(int xin,int yin,int colorin,int lengthin)
	{
		this.realx=xin;
		this.renderx=xin;
		this.realy=yin;
		this.rendery=yin;
		this.color=colorin;
		this.length=lengthin;
	}
	
	void Draw(uint layer)
	{
		if(this.layer==layer)
		{
			RecalculateVertices();
			DrawPrimitive(drawType,vertices);
		}
	}
	
	void SetX(int xin)
	{
		this.realx=xin;
	}
	
	void SetY(int yin)
	{
		this.realy=yin;
	}
	
	void SetColor(uint colorin)
	{
		this.color=colorin;
	}
	
	void SetDrawType(uint8 type)
	{
		this.drawType=type;
	}
	
	void SetZoneLength(int len)
	{
		this.length=len;
	}
	
	void SetLayer(uint layer)
	{
		this.layer=layer;
	}
	
	void GenerateVertices()
	{
		vertices.insertLast(realx);
		vertices.insertLast(realy);
		vertices.insertLast(color);
		
		vertices.insertLast(realx+length);
		vertices.insertLast(realy);
		vertices.insertLast(color);
		
		vertices.insertLast(realx);
		vertices.insertLast(realy+length);
		vertices.insertLast(color);
		
		vertices.insertLast(realx+length);
		vertices.insertLast(realy+length);
		vertices.insertLast(color);
	}
	
	void RecalculateVertices()
	{
		vertices[0]=realx/__GmapZoom+__GmapOffsetX;
		vertices[1]=realy/__GmapZoom+__GmapOffsetY;
		
		vertices[3]=(realx+length)/__GmapZoom+__GmapOffsetX;
		vertices[4]=realy/__GmapZoom+__GmapOffsetY;
		
		vertices[6]=realx/__GmapZoom+__GmapOffsetX;
		vertices[7]=(realy+length)/__GmapZoom+__GmapOffsetY;
		
		vertices[9]=(realx+length)/__GmapZoom+__GmapOffsetX;
		vertices[10]=(realy+length)/__GmapZoom+__GmapOffsetY;
	}
}

class RayMap:IRayMap
{
	int mapx1,mapy1,mapx2,mapy2,offsetX,offsetY;
	uint color1,color2,rayRenderTime,Id,opacity;
	uint8 drawType,dir;
	array<int>data=array<int>(6);
	array<uint16>rayTimeStart=array<uint16>(8);
	uint16 rayExMs,rayExSec;
	
	int8 yInc,xInc;
	RayMap(int mapx1In,int mapy1In,int mapx2In,int mapy2In,uint renderTime,int offsetXIn,int offsetYIn)
	{
		this.mapx1=mapx1In;
		this.mapy1=mapy1In;
		this.mapx2=mapx2In;
		this.mapy2=mapy2In;
		this.offsetX=offsetXIn;
		this.offsetY=offsetYIn;
		this.rayRenderTime=renderTime;
		this.opacity=1;
		this.dir=GetDirection(mapx1,mapy1,mapx2,mapy2);
		this.yInc=(this.dir==1||this.dir==4)?1:0;
		this.xInc=yInc>0?0:1;
		GetTime(this.rayTimeStart[0],this.rayTimeStart[1],this.rayTimeStart[2],this.rayTimeStart[3],this.rayTimeStart[4],this.rayTimeStart[5],this.rayTimeStart[6],this.rayTimeStart[7]);
	}
	
	void SetDrawType(uint8 type)
	{
		this.drawType=type;
	}
	
	void SetColors(uint color1In,uint color2In)
	{
		this.color1=color1In;
		this.color2=color2In;
	}
	
	void SetId(uint id)
	{
		this.Id=id;
	}
	
	void SetOpacity(uint opacity)
	{
		this.opacity=opacity;
		this.data.resize(opacity*6);
	}
	
	void Draw()
	{
		GetTime(this.rayTimeStart[0],this.rayTimeStart[0],this.rayTimeStart[0],this.rayTimeStart[0],this.rayTimeStart[0],this.rayTimeStart[0],rayExSec,rayExMs);
		uint msDiff=rayExMs-rayTimeStart[7]+((rayExSec-rayTimeStart[6])*1000);
		
		if(((uint(rayExSec-rayTimeStart[6]))>=(rayRenderTime/1000))&&((uint(rayExMs-rayTimeStart[7]))>rayRenderTime%1000))
		{
			rays-=1;
			@RaysMap[Id]=null;
		}
		else
		{
			RecalculatePoints(msDiff);
			DrawPrimitive(drawType,data);
		}
		
	}
	
	void GenerateData()
	{
		GetHexPos(mapx1,mapy1,data[0],data[1]);
		data[1]-=(35/(__SpritesZoom));
		data[2]=color1;
		
		GetHexPos(mapx2,mapy2,data[3],data[4]);
		data[3]-=(offsetX/(__SpritesZoom));
		data[4]-=(offsetY/(__SpritesZoom));
		data[5]=color2;
	}
	
	void RecalculatePoints(uint msPass)
	{
		uint alpha=(((int(255-float(255*(float(msPass)/float(rayRenderTime)))))>(0))?(int(255-float(255*(float(msPass)/float(rayRenderTime))))):(0));
		
		for(uint i=0,j=opacity;i<j;i++)
		{
			GetHexPos(mapx1,mapy1,data[i*6],data[(i*6)+1]);
			data[(i*6)]+=xInc*i;
			data[(i*6)+1]-=(35/(__SpritesZoom)-yInc*i);
			data[(i*6)+2]=((((color1)|0xFF000000)^0xFF000000)|(((((float(alpha)-float(100))>(255))?(255):(((float(alpha)-float(100))<(0))?(0):(float(alpha)-float(100)))))&0xFF)<<24);
			
			GetHexPos(mapx2,mapy2,data[(i*6)+3],data[(i*6)+4]);
			data[(i*6)+3]-=(offsetX/(__SpritesZoom)-xInc*i);
			data[(i*6)+4]-=(offsetY/(__SpritesZoom)-yInc*i);
			data[(i*6)+5]=((((color2)|0xFF000000)^0xFF000000)|((alpha)&0xFF)<<24);
			
		}           
		
	}
} 

class BurstRay:IBurstRay
{
	array<RayMap@>Rays;
	uint Id,currentRay,opacity;
	array<uint16>rayTimeStart=array<uint16>(8);
	uint16 rayExMs,rayExSec; 
	
	BurstRay(int amount,int mapx1In,int mapy1In,int mapx2In,int mapy2In,uint renderTime,int rayOffsetX,int rayOffsetY)
	{
		if(amount>0)
		{
			this.Rays.resize(amount);
			for(uint i=0,j=this.Rays.length();i<j;i++)
			{
				RayMap@ray=RayMap(mapx1In,mapy1In,mapx2In,mapy2In,renderTime,Random(rayOffsetX-(rayOffsetX*2),rayOffsetX*2),Random(0,rayOffsetY));
				@this.Rays[i]=ray;
				
			}
			this.currentRay=0;
			
			GetTime(this.rayTimeStart[0],this.rayTimeStart[1],this.rayTimeStart[2],this.rayTimeStart[3],this.rayTimeStart[4],this.rayTimeStart[5],this.rayTimeStart[6],this.rayTimeStart[7]);
		} 
		
	}
	
	void SetDrawType(uint8 type)
	{
		for(uint i=0,j=this.Rays.length();i<j;i++)
		{
			this.Rays[i].drawType=type;
		}
	}
	
	void SetColors(uint color1In,uint color2In)
	{
		for(uint i=0,j=this.Rays.length();i<j;i++)
		{
			this.Rays[i].color1=color1In;
			this.Rays[i].color2=color2In;
		}
	}
	
	void SetId(uint id)
	{
		this.Id=id;
	}
	void SetOpacity(uint opacity)
	{
		this.opacity=opacity;
		for(uint i=0,j=Rays.length();i<j;i++)
		{
			Rays[i].SetOpacity(opacity);
		}
	} 
	
	void Draw()
	{
		if(currentRay<this.Rays.length()-1)
		{
			GetTime(this.rayTimeStart[0],this.rayTimeStart[0],this.rayTimeStart[0],this.rayTimeStart[0],this.rayTimeStart[0],this.rayTimeStart[0],rayExSec,rayExMs);
			uint msDiff=rayExMs-rayTimeStart[7]+((rayExSec-rayTimeStart[6])*1000);
			
			if(((uint(rayExSec-rayTimeStart[6]))>=(this.Rays[currentRay].rayRenderTime/1000))&&((uint(rayExMs-rayTimeStart[7]))>this.Rays[currentRay].rayRenderTime%1000))
			{
				currentRay+=1;
				GetTime(this.rayTimeStart[0],this.rayTimeStart[1],this.rayTimeStart[2],this.rayTimeStart[3],this.rayTimeStart[4],this.rayTimeStart[5],this.rayTimeStart[6],this.rayTimeStart[7]);
			}
			this.Rays[currentRay].RecalculatePoints(msDiff);
			DrawPrimitive(this.Rays[currentRay].drawType,this.Rays[currentRay].data);
		}
		else
		{
			burstRays-=1;
			@BurstRays[Id]=null;
		}
	}
	
}

class WeaponRadiusChosen
{
	ItemCl@chosenWeapon;
	uint color;
	array<int>data=array<int>(21,0);
	uint8 drawType;
	
	WeaponRadiusChosen(uint color)
	{
		this.color=color;
		
		for(uint8 i=0,j=data.length()/3;i<j;i++)
		{
			this.data[(i*3)+2]=this.color;
		}
	}
	
	void Draw()
	{
		RecalculateVertices();
		DrawPrimitive(drawType,data);
	}
	
	void SetDrawType(uint8 type)
	{
		this.drawType=type;
	}
	
	void RecalculateVertices()
	{
		CritterCl@chosen=GetChosen();
		@chosenWeapon=chosen.GetItem(0,(1));
		if(chosenWeapon.GetType()==(3))
		{
			uint16 hexX,hexY;
			uint8 wepMode=chosenWeapon.Mode&0x0F;
			uint wpnMaxDist=((wepMode)==0?chosenWeapon.Proto.Weapon_MaxDist_0:((wepMode)==1?chosenWeapon.Proto.Weapon_MaxDist_1:((wepMode)==2?chosenWeapon.Proto.Weapon_MaxDist_2:0))); 
			
			uint8 wepSkill=0;
			switch(wepMode)
			{
				case 0:
				wepSkill=chosenWeapon.Proto.Weapon_Skill_0;
				break;
				case 1:
				wepSkill=chosenWeapon.Proto.Weapon_Skill_1;
				break;
				case 2:
				wepSkill=chosenWeapon.Proto.Weapon_Skill_2;
				break;
				
			}   
			
			if(IsGrenade(chosenWeapon))
			{
				if(chosen.Param[(336)]!=0)
				{
					wpnMaxDist+=chosen.Param[(336)]*3;
				}
			} 
			
			for(uint8 i=0,j=data.length()/3;i<j;i++)
			{
				hexX=chosen.HexX;
				hexY=chosen.HexY;
				MoveHexByDir(hexX,hexY,i%6,wpnMaxDist);
				GetHexPos(hexX,hexY,this.data[i*3],this.data[(i*3)+1]);
			}
		}
	}
}

class CustomChosenHex
{
	uint color,radius;
	array<int>data=array<int>(21,0);
	uint8 drawType;
	
	CustomChosenHex(uint color,uint radius)
	{
		this.color=color;
		this.radius=radius;
		for(uint8 i=0,j=data.length()/3;i<j;i++)
		{
			this.data[(i*3)+2]=this.color;
		}
	}
	
	void Draw()
	{
		RecalculateVertices();
		DrawPrimitive(drawType,data);
	}
	
	void SetDrawType(uint8 type)
	{
		this.drawType=type;
	} 
	
	void RecalculateVertices()
	{
		CritterCl@chosen=GetChosen();
		
		if((@chosen!=null))
		{
			uint16 hexX,hexY;
			for(uint8 i=0,j=data.length()/3;i<j;i++)
			{
				hexX=chosen.HexX;
				hexY=chosen.HexY;
				MoveHexByDir(hexX,hexY,i%6,this.radius);
				GetHexPos(hexX,hexY,this.data[i*3],this.data[(i*3)+1]);
			}
		}
	}
}                                                               

class DelayedText:IDelayedText
{
	uint color,Id,time;
	int posX,posY,offX,offY;
	string text;
	uint16 mapX,mapY,undef,textExSec,textExMs,width;
	bool map;
	uint8 font;
	
	array<uint16>textTimeStart=array<uint16>(8); 
	
	DelayedText(uint16 posX,uint16 posY,uint color,uint8 font,uint time,string text,bool map,uint16 mapX,uint16 mapY,int offX,int offY)
	{
		this.posX=posX;
		this.posY=posY;
		this.color=color;
		this.time=time;
		this.text=text;
		this.map=map;
		this.font=font;
		this.offX=offX;
		this.offY=offY;
		this.width=this.text.length()*10;
		GetTime(this.textTimeStart[0],this.textTimeStart[1],this.textTimeStart[2],this.textTimeStart[3],this.textTimeStart[4],this.textTimeStart[5],this.textTimeStart[6],this.textTimeStart[7]);
		if(map)
		{
			this.mapX=mapX;
			this.mapY=mapY;
		}
	} 
	
	void SetId(uint id)
	{
		this.Id=id;
	}
	
	void Draw()
	{
		if(this.map)
		MapToScreenPos();
		
		this.posX-=this.width/2;
		
		DrawText(this.text,this.posX+this.offX/__SpritesZoom,this.posY+this.offY/__SpritesZoom,this.text.length()*10,100,this.color,this.font,(0x0004));
		
		GetTime(undef,undef,undef,undef,undef,undef,textExSec,textExMs);
		if(((uint(textExSec-textTimeStart[6]))>=(time/1000))&&((uint(textExMs-textTimeStart[7]))>time%1000))
		{
			@DelayedTexts[this.Id]=null;
			texts--;
		}
	}
	
	void MapToScreenPos()
	{
		GetHexPos(this.mapX,this.mapY,this.posX,this.posY);
	}
	
}

class MuzzleFlash:IMuzzleFlash
{
	uint color1,color2,Id,Type;
	uint16 mapx1,mapy1;
	uint8 drawType;
	array<int>data=array<int>(6);
	array<int>vector=array<int>(2);
	
	array<int>dataBolt=array<int>(18); 
	
	array<uint16>timeStart=array<uint16>(8);
	array<float>speed=array<float>(2);
	uint16 exMs,exSec,time;
	
	MuzzleFlash(int mapx1In,int mapy1In,int mapx2In,int mapy2In,uint16 speed,int offsetXIn,int offsetYIn)
	{
		int destx=0,desty=0;
		this.mapx1=mapx1In;
		this.mapy1=mapy1In;
		GetHexPos(mapx1,mapy1,data[0],data[1]);
		this.data[3]=this.data[0];
		this.data[4]=this.data[1];
		GetHexPos(mapx2In,mapy2In,destx,desty);
		this.vector[0]=(destx+(offsetXIn/__SpritesZoom))-this.data[0];
		this.vector[1]=(desty+(offsetYIn/__SpritesZoom))-this.data[1];
		this.speed[0]=speed*(this.vector[0]/(abs(this.vector[0])+abs(this.vector[1])))/1000;
		this.speed[1]=speed*(this.vector[1]/(abs(this.vector[0])+abs(this.vector[1])))/1000;
		this.time=(abs(this.vector[0]+this.vector[1])/(abs(this.speed[0]+this.speed[1])));
		GetTime(this.timeStart[0],this.timeStart[0],this.timeStart[0],this.timeStart[0],this.timeStart[0],this.timeStart[0],timeStart[6],timeStart[7]);
	}
	
	void SetDrawType(uint8 type)
	{
		this.drawType=type;
	}
	
	void SetColors(uint color1In,uint color2In)
	{
		this.color1=color1In;
		this.color2=color2In;
	}
	
	void SetId(uint id)
	{
		this.Id=id;
	}
	
	void SetType(uint type)
	{
		this.Type=type;
	}
	
	void Draw()
	{
		GetTime(this.timeStart[0],this.timeStart[0],this.timeStart[0],this.timeStart[0],this.timeStart[0],this.timeStart[0],exSec,exMs);
		uint msDiff=exMs-timeStart[7]+((exSec-timeStart[6])*1000); 
		
		if((msDiff>=(time%10000)))
		{
			muzzleFlashes-=1;
			@MuzzleFlashes[Id]=null;
		}
		else
		{
			RecalculatePoints(msDiff);
			if(Type==(0))DrawPrimitive((1),data);
			else if(Type==(1))DrawPrimitive((5),dataBolt);
			
		}
		
	} 
	
	void RecalculatePoints(uint msPass)
	{
		
		GetHexPos(mapx1,mapy1,data[0],data[1]); 
		
		data[0]=(data[0]+(speed[0]*msPass));
		data[1]=(data[1]+(-32/__SpritesZoom)+(speed[1]*msPass));
		
		data[3]=(data[0]-(speed[0]*msPass/10));
		data[4]=(data[1]-(speed[1]*msPass/10));
		
		data[2]=color1;
		data[5]=color2; 
		
		if(Type==(1))
		{
			uint boltRadius=3;
			
			dataBolt[0]=data[3];
			dataBolt[1]=data[4];
			
			dataBolt[3]=data[0]-boltRadius;
			dataBolt[4]=data[1];
			
			dataBolt[6]=data[0];
			dataBolt[7]=data[1]-boltRadius;
			
			dataBolt[9]=data[0]+boltRadius;
			dataBolt[10]=data[1];
			
			dataBolt[12]=data[0];
			dataBolt[13]=data[1]+boltRadius;
			
			dataBolt[15]=data[0]-boltRadius;
			dataBolt[16]=data[1];
			
			dataBolt[2]=color2;
			dataBolt[5]=color1;
			dataBolt[8]=color1;
			dataBolt[11]=color1;
			dataBolt[14]=color1;
			dataBolt[17]=color1;
		} 
		
	}
} 

class BurstMuzzle:IBurstMuzzle
{
	array<MuzzleFlash@>muzzles;
	uint Id,amount,delay,currentMuzzle,maxDelay,speed,color1,color2,Type;
	int offsetX,offsetY,distanceFactor;
	uint16 mapx1,mapy1,mapx2,mapy2;
	uint8 drawType;
	
	array<uint16>timeStart=array<uint16>(8);
	uint16 exMs,exSec;
	
	BurstMuzzle(int mapx1In,int mapy1In,int mapx2In,int mapy2In,uint speed,uint delay,int amount,int offsetX,int offsetY)
	{
		if(amount>0)
		{
			this.speed=speed;
			this.mapx1=mapx1In;
			this.mapy1=mapy1In;
			this.mapx2=mapx2In;
			this.mapy2=mapy2In;
			this.offsetX=offsetX;
			this.offsetY=offsetY;
			this.delay=delay;
			this.currentMuzzle=0;
			this.amount=amount;
			this.muzzles.resize(this.amount);
			this.maxDelay=this.amount*this.delay;
			this.distanceFactor=GetDistantion(mapx1,mapy1,mapx2,mapy2);
			GetTime(this.timeStart[0],this.timeStart[1],this.timeStart[2],this.timeStart[3],this.timeStart[4],this.timeStart[5],this.timeStart[6],this.timeStart[7]);
		}
	}
	
	void SetDrawType(uint8 type)
	{
		this.drawType=type;
	}
	
	void SetColors(uint color1In,uint color2In)
	{
		
		this.color1=color1In;
		this.color2=color2In;
		
	}
	
	void SetId(uint id)
	{
		this.Id=id;
	}
	
	void SetType(uint type)
	{
		this.Type=type;
	}
	
	void Draw()
	{
		GetTime(this.timeStart[0],this.timeStart[0],this.timeStart[0],this.timeStart[0],this.timeStart[0],this.timeStart[0],exSec,exMs);
		uint msDiff=exMs-timeStart[7]+((exSec-timeStart[6])*1000);
		uint timeDiff=msDiff-(((this.currentMuzzle)*this.delay)%this.maxDelay); 
		
		if(timeDiff>=this.delay)
		{
			
			for(uint i=0,j=timeDiff/this.delay;i<j;i++)
			{
				if(currentMuzzle>=amount)
				{
					burstMuzzles-=1;
					@BurstMuzzles[this.Id]=null;
					return;
				}
				
				MuzzleFlash@burstMuzzle=MuzzleFlash(this.mapx1,this.mapy1,this.mapx2,this.mapy2,Random(1500,this.speed),Random(-this.offsetX-distanceFactor,this.offsetX+distanceFactor),Random(-this.offsetY-distanceFactor,this.offsetY+distanceFactor));
				burstMuzzle.SetColors(this.color1,this.color2);
				burstMuzzle.SetDrawType(this.drawType);
				burstMuzzle.SetId(FindFreeMuzzleCell());
				burstMuzzle.SetType(Type);
				@MuzzleFlashes[burstMuzzle.Id]=burstMuzzle;
				@this.muzzles[amount-(amount-this.currentMuzzle)]=burstMuzzle;
				
				currentMuzzle++;
			}
		}
		
	} 
	
}

uint FindFreeRayCell()
{
	for(uint i=0,j=RaysMap.length();i<j;i++)
	{
		if(@RaysMap[i]==null)
		return i;
	}
	
	RaysMap.insertLast(null);
	return RaysMap.length()-1;
	
} 

uint FindFreeBurstRayCell()
{
	for(uint i=0,j=BurstRays.length();i<j;i++)
	{
		if(@BurstRays[i]==null)
		return i;
	}
	
	BurstRays.insertLast(null);
	return BurstRays.length()-1;
}                                                                                            

uint FindFreeTextCell()
{
	for(uint i=0,j=DelayedTexts.length();i<j;i++)
	{
		if(@DelayedTexts[i]==null)
		return i;
	}
	
	DelayedTexts.insertLast(null);
	return DelayedTexts.length()-1;
}

uint FindFreeMuzzleCell()
{
	for(uint i=0,j=MuzzleFlashes.length();i<j;i++)
	{
		if(@MuzzleFlashes[i]==null)
		return i;
	}
	
	MuzzleFlashes.insertLast(null);
	return MuzzleFlashes.length()-1;
}

uint FindFreeBurstMuzzleCell()
{
	for(uint i=0,j=BurstMuzzles.length();i<j;i++)
	{
		if(@BurstMuzzles[i]==null)
		return i;
	}
	
	BurstMuzzles.insertLast(null);
	return BurstMuzzles.length()-1;
} 

void DrawRays()
{
	if(rays>0)
	{
		for(uint i=0,j=RaysMap.length();i<j;i++)
		{
			if(@RaysMap[i]!=null)
			RaysMap[i].Draw();
		}
	}
}

void DrawBurstRays()
{
	if(burstRays>0)
	{
		for(uint i=0,j=BurstRays.length();i<j;i++)
		{
			if(@BurstRays[i]!=null)
			BurstRays[i].Draw();
		}
	}
}                             

void DrawTexts()
{
	if(texts>0)
	{
		for(uint i=0,j=DelayedTexts.length();i<j;i++)
		{
			if(@DelayedTexts[i]!=null)
			DelayedTexts[i].Draw();
		}
	}
}

void DrawMuzzleFlashes()
{
	if(muzzleFlashes>0)
	{
		for(uint i=0,j=MuzzleFlashes.length();i<j;i++)
		{
			if(@MuzzleFlashes[i]!=null)
			MuzzleFlashes[i].Draw();
		}
	}
}

void DrawBurstMuzzles()
{
	if(burstMuzzles>0)
	{
		for(uint i=0,j=BurstMuzzles.length();i<j;i++)
		{
			if(@BurstMuzzles[i]!=null)
			{
				BurstMuzzles[i].Draw();
			}
		}
	}
}

void DrawWepRadius(CritterCl@chosen)
{
	if((@wepRadChos!=null))
	{
		ItemCl@chosenItem=chosen.GetItem(0,(1));
		
		if(chosenItem.GetType()==(3))
		wepRadChos.Draw();
	}
}

void DrawCustomRadiuses()
{
	if(CustomChosenHexes.length()!=0)
	{
		for(uint i=0,j=CustomChosenHexes.length();i<j;i++)
		{
			CustomChosenHexes[i].Draw();
		}
	}
}

void DrawWMZones()

{        
	
}   

IRayMap@CreateRay(int[]drawData)
{
	if(__ConfigDrawRays)
	{
		RayMap@ray=RayMap(drawData[(0)],drawData[(1)],drawData[(3)],drawData[(4)],drawData[(7)],0,35);
		ray.SetColors(drawData[2],drawData[5]);
		ray.SetDrawType((1));
		ray.SetId(FindFreeRayCell());
		ray.SetOpacity(2);
		@RaysMap[ray.Id]=ray;
		
		rays+=1;
		
		return ray;
	}
	
	return null;
}

IBurstRay@CreateBurstRay(int[]drawData)
{
	if(__ConfigDrawRays)
	{
		BurstRay@burstRay=BurstRay(drawData[(6)],drawData[(0)],drawData[(1)],drawData[(3)],drawData[(4)],drawData[(7)],10,35);
		burstRay.SetColors(drawData[2],drawData[5]);
		burstRay.SetDrawType((1));
		burstRay.SetId(FindFreeBurstRayCell());
		burstRay.SetOpacity(4);
		@BurstRays[burstRay.Id]=burstRay;
		
		burstRays+=1;
		
		return burstRay;
	}
	return null;
}

IMuzzleFlash@CreateMuzzle(int[]drawData,uint type)
{
	
	if(__ConfigDrawRays)
	{
		MuzzleFlash@muzzle=MuzzleFlash(drawData[(0)],drawData[(1)],drawData[(3)],
		drawData[(4)],drawData[(6)],Random(-10,10),Random(-15,25));
		
		muzzle.SetColors(drawData[2],drawData[5]);
		muzzle.SetDrawType((1));
		muzzle.SetId(FindFreeMuzzleCell());
		muzzle.SetType(type);
		@MuzzleFlashes[muzzle.Id]=muzzle;
		
		muzzleFlashes+=1;
		return muzzle;
		
	}
	return null;
}

IBurstMuzzle@CreateBurstMuzzle(int[]drawData,uint type)
{
	if(__ConfigDrawRays)
	{
		BurstMuzzle@burstMuzzle=BurstMuzzle(drawData[(0)],drawData[(1)],drawData[(3)],
		drawData[(4)],drawData[(6)],drawData[(7)],drawData[(8)],Random(-25,35),Random(-15,35));
		
		burstMuzzle.SetColors(drawData[2],drawData[5]);
		burstMuzzle.SetDrawType((1));
		burstMuzzle.SetId(FindFreeBurstMuzzleCell());
		burstMuzzle.SetType(type);
		@BurstMuzzles[burstMuzzle.Id]=burstMuzzle;
		
		muzzleFlashes+=drawData[8];
		burstMuzzles+=1;
		
		return burstMuzzle;
		
	}
	return null;
}                   

IDelayedText@_CreateDelayedText(int param0,int param1,int param2,string@param3,int[]@param4)
{
	DelayedText@text=DelayedText(param0,param1,param2,uint(param4[0]),param4[1],param3,param4[2]>0?true:false,param4[3],param4[4],param4[5],param4[6]);
	text.SetId(FindFreeTextCell());
	@DelayedTexts[text.Id]=text;
	
	texts+=1;
	return text;
	
} 

void _DrawPenetratingRay(int param0,int param1,int param2,string@param3,int[]@param4)
{
	
	int[]rayInfo;
	rayInfo.resize(8);
	bool ray=false;
	
	uint16 hx=param4[0],hy=param4[1],tx=param4[2],ty=param4[3];
	uint weaponPid=param4[4];
	
	GetHexCoord(hx,hy,tx,ty,0.0f,param2);
	
	if(weaponPid==(392)||weaponPid==(394))
	{
		rayInfo[2]=0x00FFFFFF;
		rayInfo[5]=int(((uint((0xFF<<24)|(((0xFF)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0xFF)&0xFF)))));
		ray=true;
	}
	else
	{
		rayInfo[2]=int(((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))));
		rayInfo[5]=int(((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))));
		ray=true;
	}
	
	if(ray)
	{
		rayInfo[0]=hx;
		rayInfo[1]=hy;
		rayInfo[3]=tx;
		rayInfo[4]=ty;
		rayInfo[7]=150;
		CreateRay(rayInfo);
	}
	
}

void CreateCustomRadius(uint color,uint radius)
{
	CustomChosenHex@cch=CustomChosenHex(color,radius);
	cch.SetDrawType((2));
	CustomChosenHexes.insertLast(cch);
}             

