//
// FOnline: 2238
// Rotators
//
// mob.fos
//

// Generic mob ai
#include "_macros.fos"
#include "npc_planes_h.fos"
#include "npc_roles_h.fos"

// npc roles (defines distance mob will attack from))
#define ROLE_DEFAULT          (0)
#define ROLE_AGRESSIVE        (1)
#define ROLE_PASSIVE          (2)
#define ISTOWN_ROLE_DEFAULT   (200)
#define ISTOWN_ROLE_AGRESSIVE (201)
#define ISTOWN_ROLE_PASSIVE   (202)

// useful variables
#define ALERTED           # (cr)           (cr.ParamBase[ST_VAR1]) // idle time is shorter if in that mode // note that it uses StatBase for read and write

// idle time in milseconds (normal is slower for performance issues)
#define IDLE_NORMAL       (5000)
#define IDLE_ALERTED      (1000)
#define IDLE_ALERTED_2    (200)

void critter_init(Critter& mob, bool firstTime)
{
    mob.SetEvent(CRITTER_EVENT_IDLE, "_MobIdle");
    mob.SetEvent(CRITTER_EVENT_DEAD, "_MobDead");
	mob.ParamBase[ST_LEVEL] = Random(9,26);
	mob.ParamBase[ST_ENDURANCE] = Random(9,15);
	mob.ParamBase[ST_CURRENT_HP] = mob.Param[ST_MAX_LIFE];
    // mob.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_MobShowCritter");
    // mob.SetEvent(CRITTER_EVENT_HIDE_CRITTER, "_MobHideCritter");
    // mob.SetEvent(CRITTER_EVENT_ATTACKED, "_MobAttacked");
    _CritSetExtMode(mob, MODE_EXT_MOB);
}

void critter_init_aggr(Critter& mob, bool firstTime)
{
    mob.SetEvent(CRITTER_EVENT_IDLE, "_MobIdleAggr");
    mob.SetEvent(CRITTER_EVENT_DEAD, "_MobDead");
    mob.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_MobShowCritterAggr"); // bringing back old function bcs insta attack on enter to map
	mob.ParamBase[ST_LEVEL] = Random(9,26);
	mob.ParamBase[ST_ENDURANCE] = Random(9,15);
	mob.ParamBase[ST_CURRENT_HP] = mob.Param[ST_MAX_LIFE];
    // mob.SetEvent(CRITTER_EVENT_HIDE_CRITTER, "_MobHideCritter");
    // mob.SetEvent(CRITTER_EVENT_ATTACKED, "_MobAttacked");
    _CritSetExtMode(mob, MODE_EXT_MOB);
}

void _DontMove(Critter& mob, bool firstTime)
{
    mob.SetEvent(CRITTER_EVENT_IDLE, "_MobIdle2");
    mob.SetEvent(CRITTER_EVENT_DEAD, "_MobDead");
	mob.ParamBase[ST_LEVEL] = Random(9,26);
	mob.ParamBase[ST_ENDURANCE] = Random(9,15);
	mob.ParamBase[ST_CURRENT_HP] = mob.Param[ST_MAX_LIFE];
    // mob.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_MobShowCritter");
    // mob.SetEvent(CRITTER_EVENT_HIDE_CRITTER, "_MobHideCritter");
    // mob.SetEvent(CRITTER_EVENT_ATTACKED, "_MobAttacked");
    _CritSetExtMode(mob, MODE_EXT_MOB);
}

void _MineMob(Critter& mob, bool firstTime)
{
    mob.SetEvent(CRITTER_EVENT_IDLE, "_MineMobIdle");
    mob.SetEvent(CRITTER_EVENT_DEAD, "_MobDead");
	mob.ParamBase[ST_LEVEL] = Random(9,26);
	mob.ParamBase[ST_ENDURANCE] = Random(9,15);
	mob.ParamBase[ST_CURRENT_HP] = mob.Param[ST_MAX_LIFE];
    _CritSetExtMode(mob, MODE_EXT_MOB);
}


void critter_init_half_agro(Critter& mob, bool firstTime)
{
    mob.SetEvent(CRITTER_EVENT_IDLE, "_MobIdleHalfAgro");
    mob.SetEvent(CRITTER_EVENT_DEAD, "_MobDead");
	mob.ParamBase[ST_LEVEL] = Random(9,26);
	mob.ParamBase[ST_ENDURANCE] = Random(9,15);
	mob.ParamBase[ST_CURRENT_HP] = mob.Param[ST_MAX_LIFE];
    // mob.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_MobShowCritterAggr");
    // mob.SetEvent(CRITTER_EVENT_HIDE_CRITTER, "_MobHideCritter");
    // mob.SetEvent(CRITTER_EVENT_ATTACKED, "_MobAttacked");
    _CritSetExtMode(mob, MODE_EXT_MOB);
}

/* void _MobShowCritter(Critter& mob, Critter& showCrit)
{
	if(showCrit.IsPlayer() || !_CritHasExtMode(showCrit,MODE_EXT_MOB))	
	{
		AddAttackPlane(mob, AI_PLANE_ATTACK_PRIORITY, showCrit);
	}
} */

// old version of _MobShowCritter

void _MobShowCritter(Critter& mob, Critter& showCrit)
{
    if(showCrit.IsPlayer())
        ALERTED(mob) += 1;
}

bool _MobAttacked( Critter& mob, Critter& attacker )
{
		array<Critter@> players(0);
		array<Critter@> npc(0);
		array<Critter@> mobs(0);
		array<Critter@> nearMobs(0);
		Map@ map = mob.GetMap();
		uint PlayersNum = map.GetCritters(0, FIND_ONLY_PLAYERS | FIND_LIFE, players);
		uint NpcNum = map.GetCritters(0, FIND_ONLY_NPC | FIND_LIFE, npc);				//Get NPC'c in all map
		uint MobsNum = 0;
		
		if(npc.length() > 0)															//Separate mobs from other NPC's
		{
			for(uint n = 0; n < NpcNum; n++)
			{
				if(_CritHasExtMode(npc[n],MODE_EXT_MOB))									//Sort by Ext. Mode
				{
					mobs.insertLast(npc[n]);											//Add in other array	
					MobsNum++;
				}
				if(!_CritHasExtMode(npc[n],MODE_EXT_MOB))
				{
					players.insertLast(npc[n]);
					PlayersNum++;
				}
			}
		}
		if(!mob.IsSee(attacker)) 
			{
				AddWalkPlane(mob, 0, attacker.HexX, attacker.HexY, 0xff, true, 1);
			}
		if(players.length() > 0)
		{
			for(uint m = 0; m < MobsNum; m++)
			{
				NpcPlane@ plane = mobs[m].GetCurPlane();
				if((valid(plane)) && (plane.Type == AI_PLANE_ATTACK))
				{
					mobs[m].DropPlanes();
					for(uint i = 0; i < PlayersNum; i++)	
					{
						AddAttackPlane(mobs[m], AI_PLANE_ATTACK_PRIORITY, players[i]);
					}
				}
				uint NearMobsNum = mob.GetCritters(true, FIND_ONLY_NPC | FIND_LIFE, nearMobs);
				for(uint n = 0; n < NearMobsNum; n++)
				{
					AddAttackPlane(nearMobs[n], AI_PLANE_ATTACK_PRIORITY, attacker);
				}
			}
		}
	return true;
}

void _MobIdleHalfAgro(Critter& mob)
{
	// the great optimizer
    if(!mob.IsLife())
    {
		mob.Wait(IDLE_ALERTED);
        return;
    }

    // check critters in sight
     array<Critter@> crits;
    // get visible players
    uint            num = mob.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, crits);

    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(mob);
    for(uint i = 0; i < num; i++)
    {
		if(GetCrittersDistantion(mob, crits[i]) > dist)
			mob.Say(SAY_NORM_ON_HEAD, "Idling, Distance const: " + dist + ", Dinstance var: " + GetCrittersDistantion(mob, crits[i]));
            // continue;
        else
        {
            // attack
			mob.Say(SAY_NORM_ON_HEAD, "Attack, Distance const: " + dist + ", Dinstance var: " + GetCrittersDistantion(mob, crits[i]));
		
			NpcPlane@ plane = mob.GetCurPlane();
			if((valid(plane)) && (plane.Identifier != AI_PLANE_ATTACK))
				mob.DropPlanes();

			mob.AddEnemyInStack(crits[i].Id);
			AddAttackPlane(mob, 0, crits[i]);
            return;
        }
    }
	
    if(crits.length() > 0)
    {
        MoveMob(mob, false);
		mob.Wait(IDLE_ALERTED_2);
		// mob.Say(SAY_NORM_ON_HEAD, "Found player but not attack yet! Distance: " + dist + ", ");
    }
    else
	// NpcPlane@ plane = mob.GetCurPlane();
	
	// if((Random(1, 100) == 1) && mob.IsNoPlanes())
    {
        MoveMob(mob, false);
        mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        mob.Wait(IDLE_ALERTED_2);
    }
	
}

//
// Checks if critter is within attack distance
//

void _MineMobIdle(Critter& mob)
{
	// the great optimizer
    if(!mob.IsLife())
    {
		mob.Wait(IDLE_ALERTED_2);
        return;
    }

    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint   num = 0;

	switch (Random(1,2))
	{
	case 1: {num = mob.GetCritters(false, FIND_ONLY_NPC | FIND_LIFE_AND_KO, crits); break;}
	case 2: {num = mob.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE_AND_KO, crits); break;}
	}
    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(mob);
    for(uint i = 0; i < num; i++)
    {
		if((GetCrittersDistantion(mob, crits[i]) > dist) || (crits[i].Param[ST_NPC_ROLE] == ROLE_MOB_MINE))
            continue;
        else
        {
            // attack
			mob.AddEnemyInStack(crits[i].Id);
            return;
        }
    }
	
    if(crits.length() > 0)
    {
        // MoveMob(mob, false);
        mob.Wait(IDLE_ALERTED_2);
    }
    else
    {
        //MoveMob(mob, false);
        //mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        mob.Wait(IDLE_ALERTED_2);
    }	
}
	
	/*// the great optimizer
    if(!mob.IsLife())
    {
        mob.Wait(IDLE_NORMAL);
        return;
    }

    // check critters in sight
    array<Critter@> crits;
    uint            num = mob.GetCritters(false, FIND_LIFE | FIND_ONLY_NPC, crits);
	mob.Say(SAY_NORM_ON_HEAD, ""+num);
    uint            dist = GetDistance(mob);

    for(uint i = 0; i < num; i++)
    {
        if((GetCrittersDistantion(mob, crits[i]) > dist) || (crits[i].Param[ST_NPC_ROLE] == ROLE_MOB_MINE))
            continue;
        else
        {
            mob.AddEnemyInStack(crits[i].Id);
            return;
        }
    }

    MoveMob(mob, false);
	mob.Say(SAY_NORM_ON_HEAD, "Don't care");
    mob.Wait(IDLE_NORMAL); */


void _MobIdle(Critter& mob)
{
    // the great optimizer
    if(!mob.IsLife())
    {
        mob.Wait(IDLE_NORMAL);
        return;
    }

    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint            num = mob.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE, crits);

    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(mob);
    for(uint i = 0; i < num; i++)
    {
        if(GetCrittersDistantion(mob, crits[i]) > dist)
            continue;
        else
        {
            // attack
            mob.AddEnemyInStack(crits[i].Id);
            return;
        }
    }
    if(crits.length() > 0)
    {
        // MoveMob(mob, false);
        mob.Wait(IDLE_ALERTED);
    }
    else
    {
        MoveMob(mob, false);
        // mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        mob.Wait(IDLE_NORMAL);
    }
}

// Critter stays on his spot, does not move randomly around.
void _MobIdle2(Critter& mob)
{
    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint            num = mob.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE, crits);
    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(mob);
    for(uint i = 0; i < num; i++)
    {
        if(GetCrittersDistantion(mob, crits[i]) > dist)
            continue;
        else
        {
            // attack
			
            mob.AddEnemyInStack(crits[i].Id);
            return;
        }
    }
    if(ALERTED(mob) > 0)
    {
        // MoveMob(mob, false);
        mob.Wait(IDLE_ALERTED);
    }
    else
    {
        // MoveMob(mob, false);
        // mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        mob.Wait(IDLE_NORMAL);
    }
}

void _MobDead(Critter& mob, Critter@ killer)
{
    mob.ClearEnemyStack();
}

void MoveMob(Critter& mob, bool run)
{
    int dist = Random(0, (mob.Param[ST_NPC_ROLE] % 100 / 10));
    if(dist == 0)
    {
        mob.MoveRandom();
    }
    else
    {
        // bool AddWalkPlane(Critter& npc, uint priory, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint8 cut)
        uint16 hexX = mob.HexX;
        uint16 hexY = mob.HexY;
        mob.GetMap().MoveHexByDir(hexX, hexY, Random(0, 5), dist);
        AddWalkPlane(mob, 0, hexX, hexY, 0xff, run, 0);
    }
}

//
// Gets distance after which critter becomes agressive
//
int GetDistance(Critter& mob)
{
    // TODO: damaged eye??
    int base = __LookNormal + 3 * mob.Param[ST_PERCEPTION];
	
	
	
    // switch works only for ints??
    int role = int(mob.Param[ST_NPC_ROLE]);
    switch(role)
    {
    case ROLE_DEFAULT:
	case ISTOWN_ROLE_DEFAULT:
        // mob.Say(SAY_NORM, "" + base + "/" + 3 + "=" + base/3);
        return base / 3;
    case ROLE_AGRESSIVE:
    case ROLE_MOB_WAVE:
	case ISTOWN_ROLE_AGRESSIVE:
        return base / 2;
    case ROLE_PASSIVE:
	case ROLE_MOB_MINE:
	case ISTOWN_ROLE_PASSIVE:
        return base / 4;
    }
    return base / 3;
}

void _MobHideCritter(Critter& mob, Critter& hideCrit)
{
    if(hideCrit.IsPlayer())
        ALERTED(mob) -= 1;
}

void _MobDead(Critter& mob)
{}


void _MobIdleAggr(Critter& mob)
{
    // the great optimizer
    if(!mob.IsLife())
    {
        return;
    }

    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint            num = mob.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE, crits);

    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(mob);
    for(uint i = 0; i < num; i++)
    {
        if(GetCrittersDistantion(mob, crits[i]) > dist)
            continue;
        else
        {
            // attack
            mob.AddEnemyInStack(crits[i].Id);
            return;
        }
    }
    if(crits.length() > 0)
    {
        // MoveMob(mob, false);
    }
    else
    {
        MoveMob(mob, false);
        // mob.Say(SAY_NORM_ON_HEAD, "Don't care");
    }
}

// mobs fixes added by worldremaker
void _MobShowCritterAggr(Critter& mob, Critter& showCrit)
{
	if(showCrit.IsPlayer() && showCrit.IsLife())
	{
		uint 			dist = GetDistance(mob);
		if(GetCrittersDistantion(mob, showCrit) <= dist)
		{
			
		
				mob.Say(SAY_NORM_ON_HEAD, "Attack when walking.");
		
				// NpcPlane@ plane = mob.GetCurPlane();
				// if((valid(plane)) && (plane.Identifier != AI_PLANE_ATTACK))
					// mob.DropPlanes();

				mob.AddEnemyInStack(showCrit.Id);
				AddAttackPlane(mob, 0, showCrit);
			
		}
	}
}