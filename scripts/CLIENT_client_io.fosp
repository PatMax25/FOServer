

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       

shared class Sprite
{
	Sprite()
	{
		Id=0;
		Width=0;
		Height=0;
		FrmCount=0;
	}
	
	bool Load(string&name,int path)
	{
		if(name.length()>0)
		{
			Id=LoadSprite(name,path);
			Filename=name;
		}
		else
		Id=0;
		RefreshData();
		return Id!=0;
	}
	
	void LoadHash(uint nameHash,uint8 dir)
	{
		Id=LoadSprite(nameHash,dir);
		RefreshData();
	}
	
	void LoadByIni(string&iniKey,int path)
	{
		string@name=GetIfaceIniStr(iniKey);
		if(@name!=null&&name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Draw(int x,int y)
	{
		if(Id!=0)
		DrawSprite(Id,-1,x,y,0);
	}
	
	private void RefreshData()
	{
		if(Id!=0)
		{
			Width=GetSpriteWidth(Id,0);
			Height=GetSpriteHeight(Id,0);
			FrmCount=GetSpriteCount(Id);
		}
		else
		{
			Width=0;
			Height=0;
			FrmCount=0;
			Filename="";
		}
	}
	
	uint Id;
	int Width;
	int Height;
	uint FrmCount;
	string Filename;
};     

shared interface IControl
{
	void SetParent(IControl@parent); 
	
	bool IsVisible();
	bool IsActive();
	
	void Disable();
	void Enable();
	
	void Show(bool showAll=false);
	void Show(int left,int top);
	void Hide(); 
	
	void ShowWindow();
	void ShowWindow(int left,int top);
	void HideWindow();
	void Center();
	
	int Left();
	int Right();
	int Top();
	int Bottom();
	int Width();
	int Height();
	
	IControl@Position(int,int);
	IControl@Position(string&iniKey);
	IControl@Left(int);
	IControl@Top(int);
	IControl@Width(int);
	IControl@Height(int);
	IControl@Size(int,int);
	
	void Init();
	void Draw();
	void Update();
	bool MouseDown(int x,int y,int click);
	bool MouseUp(int x,int y,int click);
	void MouseMove(int fromX,int fromY,int toX,int toY);
	bool KeyDown(uint8 key,string&keyText);
	void KeyUp(uint8 key,string&keyText);
};   

class Control:IControl
{
	
	IControl@parent;
	
	array<IControl@>controls; 
	
	int left;
	int top;
	int width;
	int height;     
	
	bool active;
	
	bool visible;
	
	bool focus; 
	
	bool mousePressed;
	int mouseX;
	int mouseY;
	
	Control()
	{
		active=true;
		visible=true;
		focus=false;
		
		mousePressed=false;
		mouseX=0;
		mouseY=0;
		
		left=top=width=height=0;
	}
	
	Control(int left,int top,int width,int height)
	{
		active=true;
		visible=true;
		focus=false;
		
		mousePressed=false;
		mouseX=0;
		mouseY=0;
		
		this.left=left;
		this.top=top;
		this.width=width;
		this.height=height;
	}    
	
	bool IsVisible(){return visible;}
	bool IsActive(){return active;}   
	
	int Left()
	{
		if((@parent!=null))
		return parent.Left()+left;
		else
		return left;
	}
	int Top()
	{
		if((@parent!=null))
		return parent.Top()+top;
		else
		return top;
	}
	int Right(){return Left()+Width();}
	int Bottom(){return Top()+Height();}
	int Height(){return height;}
	int Width(){return width;}
	
	IControl@Position(int x,int y){left=x;top=y;return this;}
	IControl@Left(int x){left=x;return this;}
	IControl@Top(int y){top=y;return this;}
	IControl@Width(int w){width=w;return this;}
	IControl@Height(int h){height=h;return this;}
	IControl@Size(int w,int h){height=h;width=w;return this;}
	
	IControl@Position(string&iniKey)
	{
		left=0;
		top=0;
		width=0;
		height=0; 
		
		string@str=GetIfaceIniStr(iniKey);
		if(@str==null||str=="")
		return this;
		
		array<string@>@valuesStr=split(str," ");
		if(valuesStr.length()!=4)
		return this;
		
		array<int>values(4);
		for(int i=0;i<4;i++)
		if(!StrToInt(valuesStr[i],values[i]))
		return this;
		
		left=values[0];
		top=values[1];
		width=values[2]-values[0]+1;
		height=values[3]-values[1]+1;
		return this;
	}   
	
	bool IsInside(int x,int y)
	{
		return(x>=Left())&&(x<Right())&&(y>=Top())&&(y<Bottom());
	}   
	
	void SetParent(IControl@control)
	{
		@parent=control;
	}   
	
	void Enable()
	{
		active=true;
		OnEnabled();
	}
	void Disable()
	{
		active=false;
		OnDisabled();
	}   
	
	void Show(bool showAll=false)
	{
		visible=true;
		if(showAll)
		{
			for(uint i=0,j=controls.length();i<j;i++)
			controls[i].Show(showAll);
		}
		OnShow();
	}
	void Show(int left,int top)
	{
		this.left=left;
		this.top=top;
		visible=true;
		OnShow();
	}
	void Hide()
	{
		visible=false;
		for(uint i=0,j=controls.length();i<j;i++)
		controls[i].Hide();
		OnHide();
	}
	
	void ShowWindow()
	{
		Message("This control does not have window attached.");
	}
	void ShowWindow(int x,int y)
	{
		Message("This control does not have window attached.");
	}
	void HideWindow()
	{
		Message("This control does not have window attached.");
	}  
	
	void Center()
	{
		Position(parent.Width()/2-Width()/2,parent.Height()/2-Height()/2);
	}
	void Init()
	{
		for(uint i=0,j=controls.length();i<j;i++)
		controls[i].Init();
	}  
	
	void SetFocus(bool focused)
	{
		this.focus=focused;
		
		if(focused)
		GotFocus();
		else
		LostFocus();
	}   
	
	void AddControl(IControl@control)
	{
		control.SetParent(this);
		controls.insertLast(@control);
	}    
	
	bool MouseDown(int x,int y,int click)
	{
		bool intercepted=false;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].MouseDown(x,y,click)?true:intercepted;
		}
		if(!intercepted)
		{
			if(click!=(4)&&click!=(3))
			{
				if(IsInside(x,y))
				{
					mousePressed=true;
					mouseX=x;
					mouseY=y;
					SetFocus(true);
					intercepted=true;
				}
				else
				{
					SetFocus(false);
				}
			}
		}
		return intercepted;
	}
	bool MouseUp(int x,int y,int click)
	{
		bool intercepted=false;
		if(IsInside(x,y)&&mousePressed)
		{
			
			Click();
			intercepted=true;
		}
		
		mousePressed=false;
		
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].MouseUp(x,y,click)?true:intercepted;
		}
		return intercepted;
	}
	void MouseMove(int fromX,int fromY,int toX,int toY)
	{
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			controls[i].MouseMove(fromX,fromY,toX,toY);
		}
	}
	bool KeyDown(uint8 key,string&keyText)
	{
		bool intercepted=false;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].KeyDown(key,keyText)?true:intercepted;
		}
		return intercepted;
	}
	void KeyUp(uint8 key,string&keyText)
	{
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			controls[i].KeyUp(key,keyText);
		}
	}   
	
	void Draw()
	{
		for(uint i=0,j=controls.length();i<j;i++)
		if(controls[i].IsVisible())
		controls[i].Draw();
	}  
	
	void Update()
	{
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsActive())
			controls[i].Update();
		}
	}        
	
	void Click()
	{}  
	
	void GotFocus()
	{}  
	
	void LostFocus()
	{}  
	
	void OnShow()
	{}  
	
	void OnHide()
	{}  
	
	void OnEnabled()
	{}  
	
	void OnDisabled()
	{}
};      

class CButton:Control
{
	string caption;
	Sprite spriteUp;
	Sprite spriteDown;
	
	int textBorder;
	
	CButton(int left,int top,string@caption)
	{
		super(left,top,119,30);
		spriteUp.Load("wm_tab.png",(4));
		spriteDown.Load("wm_blanktab.png",(4));
		this.caption=caption;
		textBorder=30;
	}
	CButton(int left,int top,int width,int height,string&down)
	{ 
		
		if(!spriteDown.Load(down,(4)))
		Message("Couldn't load sprite: "+down);
		super(left,top,(((width)>(spriteDown.Width))?(width):(spriteDown.Width)),(((height)>(spriteDown.Height))?(height):(spriteDown.Height)));
		textBorder=0;
	}
	CButton(int left,int top,int width,int height,string&up,string&down)
	{
		if(!spriteUp.Load(up,(4)))
		Message("Couldn't load sprite(up): "+up);
		if(!spriteDown.Load(down,(4)))
		Message("Couldn't load sprite(down): "+down);
		super(left,top,(((width)>(spriteUp.Width))?(width):(spriteUp.Width)),(((height)>(spriteUp.Height))?(height):(spriteUp.Height)));
		textBorder=0;
	}
	CButton(string&iniKey,string&down)
	{ 
		
		if(!spriteDown.Load(down,(4)))
		Message("Couldn't load sprite: "+down);
		Control::Position(iniKey);
		textBorder=0;
	}  
	
	void SetCaption(string@caption){this.caption=caption;}
	
	void Draw()
	{
		if(mousePressed)
		{
			if(spriteDown.Id!=0)
			DrawSprite(spriteDown.Id,0,Left(),Top(),0);
		}
		else
		{
			if(spriteUp.Id!=0)
			DrawSprite(spriteUp.Id,0,Left(),Top(),0);
		}
		int color=active?0:int(0xffaaaaaa);
		if(caption!="")
		DrawText(caption,Left()+textBorder,Top(),Width()-textBorder,Height(),color,(5),(0x0008)|(0x0200));
	}
}; 

class CDialogRedButton:Control
{
	Sprite spriteDown;
	
	CDialogRedButton(int left,int top)
	{
		super(left,top,16,16);
		spriteDown.Load("di_rdbt1.frm",(4));
	}  
	
	void Draw()
	{
		if(mousePressed)
		DrawSprite(spriteDown.Id,0,Left(),Top(),0);
	}
};

class CSmallButton:Control
{
	Sprite spriteDown;
	
	CSmallButton(int left,int top)
	{
		super(left,top,16,16);
		spriteDown.Load("lilreddn.frm",(4));
	}  
	
	void Draw()
	{
		if(mousePressed)
		DrawSprite(spriteDown.Id,0,Left(),Top(),0);
	}
};

class CSmallArrowUp:Control
{
	Sprite spriteDown;
	
	CSmallArrowUp(int left,int top)
	{
		super(left,top,16,16); 
		
	}  
	
	void Draw()
	{ 
		
	}
};

class CSmallArrowDown:Control
{
	Sprite spriteDown;
	
	CSmallArrowDown(int left,int top)
	{
		super(left,top,16,16); 
		
	}  
	
	void Draw()
	{ 
		
	}
};   

class CLabel:Control
{
	int font;
	int color;
	int format;
	string@caption;
	
	CLabel(int left,int top,int width,int height,string@caption)
	{
		super(left,top,width,height);
		@this.caption=@caption;
		this.color=0;
		font=(5);
		format=(0x0008)|(0x0200);
	}
	CLabel(int left,int top,int width,int height,string@caption,int font)
	{
		super(left,top,width,height);
		@this.caption=@caption;
		this.color=0;
		this.font=font;
		format=(0x0008)|(0x0200);
	}
	void SetCaption(string@caption)
	{
		@this.caption=@caption;
	}
	void set_Caption(string@caption)
	{
		@this.caption=@caption;
	}
	string@get_Caption()
	{
		return@caption;
	}
	void SetColor(uint color)
	{
		this.color=color;
	}
	void set_Color(uint color)
	{
		this.color=color;
	}
	void SetFont(uint font)
	{
		this.font=font;
	}
	void set_Font(uint font)
	{
		this.font=font;
	}
	void SetFormat(uint format)
	{
		this.format=format;
	}
	void Draw()
	{
		DrawText(caption,Left(),Top(),Width(),Height(),color,font,format);
	}
};   

class CTextBox:Control
{
	
	string text;
	
	string drawnText;
	uint cursorPos;
	
	uint cursorTime;
	
	uint cursorChangedTime;
	
	int showCursor;
	
	string cursor1;
	string cursor2; 
	
	int color;
	int format;
	int font;
	uint maxlength;
	
	CTextBox(int left,int top,int width,int height,string@text)
	{
		super(left,top,width,height);
		this.text=text;
		cursorPos=text.rawLength();
		cursorTime=400;
		cursorChangedTime=0;
		showCursor=0;
		cursor1="!";
		cursor2=".";
		drawnText=text;
		
		color=0;
		font=(5);
		format=(0x0200);
		maxlength=0;
	}  
	
	string@Text()
	{
		return text;
	}  
	
	string@GetCursor()
	{
		if(showCursor==0)
		return"";
		else if(showCursor==1)
		return cursor1;
		else
		return cursor2;
	}
	void SetColor(uint color)
	{
		this.color=color;
	}
	void SetFormat(uint format)
	{
		this.format=format;
	}
	void SetText(string@text)
	{
		this.text=text;
		cursorPos=text.rawLength();
		RefreshDrawnText();
	}
	void SetMaxLength(uint ml)
	{
		maxlength=ml;
	}  
	
	void ShowCursor(int show)
	{
		showCursor=show;
		RefreshDrawnText();
	}  
	
	void RefreshDrawnText()
	{
		if(showCursor>0)
		{
			if(cursorPos==text.rawLength())
			drawnText=text+GetCursor();
			else
			drawnText=substring(text,0,cursorPos)+GetCursor()+substring(text,cursorPos,text.rawLength()-cursorPos);
		}
		else
		drawnText=text;
	}                                   
	
	void InsertChar(uint8 key,string&keyText)
	{
		text=substring(text,0,cursorPos)+keyText+substring(text,cursorPos,text.length()-cursorPos);
		cursorPos++;
	}
	
	void Draw()
	{
		uint tick=GetTick();
		
		if(tick-cursorChangedTime>cursorTime)
		{
			cursorChangedTime=tick;
			if(showCursor==1)
			ShowCursor(2);
			else if(focus)
			ShowCursor(1);
			else
			ShowCursor(0);
		} 
		
		DrawText(drawnText,Left(),Top(),Width(),Height(),color,font,format);
	}
	
	bool KeyDown(uint8 key,string&keyText)
	{
		if(focus)
		{
			
			if(key==0x0E)
			{
				if(text.rawLength()>0&&cursorPos>0)
				{
					text=substring(text,0,cursorPos-1)+substring(text,cursorPos,text.rawLength()-cursorPos);
					cursorPos--;
				}
			}
			else if(key==0xD3)
			{
				if(text.rawLength()>0&&cursorPos<text.rawLength())
				{
					text=substring(text,0,cursorPos)+substring(text,cursorPos+1,text.rawLength()-cursorPos-1);
				}
			}
			
			else if(key==0xC7)
			{
				cursorPos=0;
			}
			else if(key==0xCF)
			{
				cursorPos=text.rawLength();
			}
			
			else if(key==0xCB)
			{
				if(cursorPos>0)
				cursorPos--;
			}
			else if(key==0xCD)
			{
				if(cursorPos<text.rawLength())
				cursorPos++;
			}
			
			else if(key==0x01||key==0x1C||key==0x9C)
			{
				SetFocus(false);
			}
			else
			{
				if(maxlength==0||maxlength>text.rawLength())
				InsertChar(key,keyText);
			}
			
			RefreshDrawnText();
			return true;
		}
		return Control::KeyDown(key,keyText);
	}
};   

class CSprite:Control
{
	Sprite sprite;
	
	CSprite(string@spriteName,int path=(4))
	{
		super();
		sprite.Load(spriteName,path);
	}
	CSprite(uint nameHash,int path=(4))
	{
		super();
		sprite.LoadHash(nameHash,path);
	}
	CSprite(int left,int top,int width,int height,string@spriteName,int path=(4))
	{
		super(left,top,width,height);
		sprite.Load(spriteName,path);
	}
	
	void Draw()
	{
		DrawSprite(sprite.Id,-1,Left(),Top(),0);
		Control::Draw();
	}
};   

class CSpriteEx:CSprite
{
	int index;
	bool scratch;
	bool center;
	uint color;
	bool applyOffsets;
	
	CSpriteEx(string@spriteName)
	{
		super(spriteName);
		Init();
	}
	
	CSpriteEx(uint nameHash,int path=(4))
	{
		super(nameHash,path);
		Init();
	}
	
	CSpriteEx(int left,int top,int width,int height,string@spriteName)
	{
		super(left,top,width,height,spriteName);
		Init();
	}
	
	private void Init()
	{
		CSprite::Init();
		this.index=-1;
		this.scratch=false;
		this.center=false;
		this.color=0;
		this.applyOffsets=true;
	}
	
	void Draw()
	{
		if(this.sprite.Id>0)
		DrawSprite(this.sprite.Id,this.index,Left(),Top(),this.sprite.Width,this.sprite.Height,this.scratch,this.center,this.color,this.applyOffsets);
		Control::Draw();
	}
};   

class CListBox:Control
{
	array<string@>elements;
	
	uint start;
	
	uint index;
	
	uint textHeight;
	
	CListBox(int left,int top,int width,int height)
	{
		super(left,top,width,height);
		start=0;
		textHeight=12;
	}   
	
	uint GetRowCount()
	{
		return height/textHeight;
	}  
	
	uint GetIndex()
	{
		return index;
	}  
	
	void AddElement(string@elem)
	{
		elements.insertLast(elem);
	}  
	
	void Scroll(int d)
	{
		start=(((int(start)+d)>(int(elements.length()-1)))?(int(elements.length()-1)):(((int(start)+d)<(0))?(0):(int(start)+d)));
	}  
	
	void Draw()
	{
		for(uint i=start,j=(((elements.length())<(start+uint(Height()/textHeight)))?(elements.length()):(start+uint(Height()/textHeight)));i<j;i++)
		{
			DrawText(elements[i],Left(),Top()+(i-start)*textHeight,Width(),textHeight,i==index?0xffffffff:0,(5),(0x0200));
		}
	}   
	
	void Click()
	{
		uint el=start+(mouseY-Top())/textHeight;
		if(el<elements.length())
		index=el;
		Control::Click();
	}
};   

class CContextButton:CButton
{
	uint crId;
	uint itemId;
	uint16 hexX;
	uint16 hexY;
	
	CContextButton(string caption)
	{
		super(0,0,caption);
		hexX=0;
		hexY=0;
	}   
	
	void SetCritter(CritterCl@cr)
	{
		crId=itemId=0;
		if((@cr!=null))
		crId=cr.Id;
	}  
	
	void SetItem(ItemCl@item)
	{
		crId=itemId=0;
		if((@item!=null))
		itemId=item.Id;
	}  
	
	void SetHex(uint16 x,uint16 y)
	{
		this.hexX=x;
		this.hexY=y;
	}
};   

class Window:Control,IGUIScreenCallbackFocus,IGUIScreenCallbackShow
{
	IGUIScreenOpt@screen;
	
	int Left(){return screen.GetPosX();}
	int Top(){return screen.GetPosY();}
	int Width(){return screen.GetWidth();}
	int Height(){return screen.GetHeight();}
	
	bool autoMode;
	
	Window()
	{
		super();
		autoMode=false;
	}
	
	void Init()
	{
		@screen=GUI_GetScreenOptions();
		Control::Init();
	}
	
	IControl@Position(int x,int y)
	{
		screen.Position(x,y);
		return this;
	}
	IControl@Size(int w,int h)
	{
		screen.Size(w,h);
		return this;
	}  
	
	void Center()
	{
		Position(__ScreenWidth/2-Width()/2,__ScreenHeight/2-Height()/2);
	} 
	
	void OnShow(int p0,int p1,int p2)
	{
		if(p0!=0||p1!=0)
		Show(p0,p1);
		else
		Show();
	}
	
	void Show(int x,int y)
	{
		screen.Position(x,y);
		Control::Show(x,y);
	} 
	
	void ShowWindow()
	{
		GUI_ShowScreen(screen.GetIndex(),0,0,0);
	}
	void ShowWindow(int x,int y)
	{
		screen.Position(x,y);
		GUI_ShowScreen(screen.GetIndex(),x,y,0);
	}
	void HideWindow()
	{
		GUI_HideScreen(screen.GetIndex(),0,0,0);
		Disable();
	}
	void OnLostFocus()
	{
		HideWindow();
		Disable();
	}
	
	bool MouseDown(int x,int y,int click)
	{
		bool intercepted=false;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].MouseDown(x,y,click)?true:intercepted;
		}
		if(!intercepted)
		{
			if(click!=(4)&&click!=(3))
			{
				if(IsInside(x,y))
				{
					mousePressed=true;
					mouseX=x;
					mouseY=y;
					SetFocus(true);
					intercepted=true;
				}
				else
				{
					SetFocus(false);
				}
				
				return false;
			}
		}
		return intercepted;
	}   
	
	void Auto(bool v){autoMode=v;}
	bool Auto(){return autoMode;}
};       

import void GUI_Init()from"client_gui";
import void GUI_GetActiveScreens(array<int>&result)from"client_gui";
import int GUI_GetActiveScreen()from"client_gui";
import int GUI_GetActiveMainScreen()from"client_gui";
import int GUI_GetMainScreen()from"client_gui";
import void GUI_ShowScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";
import void GUI_Render(bool mainScreen)from"client_gui";

import void GUI_Update(uint dt)from"client_gui";
import bool GUI_MouseDown(int x,int y,int click)from"client_gui";
import bool GUI_MouseUp(int x,int y,int click)from"client_gui";
import void GUI_MouseMove(int fromX,int fromY,int toX,int toY)from"client_gui";
import bool GUI_KeyDown(uint8 key,string&keyText)from"client_gui";
import bool GUI_KeyUp(uint8 key,string&keyText)from"client_gui";
import void GUI_InputLost()from"client_gui";
import bool GUI_IsKeyPressed(uint8 key)from"client_gui"; 

import void GUI_GetIniCoords(string&ini,int&left,int&top,int&right,int&bottom)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import IGUIScreenOpt@GUI_GetScreen(int screenIndex)from"client_gui"; 

import IGUIElementTextOpt@GUI_AddText(int screenIndex)from"client_gui";
import IGUIElementTextOpt@GUI_AddText(int screenIndex,string@text,int x,int y)from"client_gui";
import IGUIElementImageOpt@GUI_AddImage(int screenIndex)from"client_gui";
import IGUIElementImageOpt@GUI_AddImage(int screenIndex,string@sprName,int patch,int x,int y)from"client_gui";
import IGUIElementButtonOpt@GUI_AddButton(int screenIndex)from"client_gui";
import IGUIElementButtonOpt@GUI_AddButton(int screenIndex,int x,int y)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui"; 

import void SetScreenPos(int screenIndex,int posX,int posY)from"client_gui";
import IGUIElementEditBoxOpt@GUI_AddEditBox(int screenIndex)from"client_gui";
import IGUIElementEditBoxOpt@GUI_AddEditBox(int screenIndex,int x,int y)from"client_gui";
import void SetPipBoyCallbackShow(IGUIScreenCallbackShow@callback)from"client_gui";     

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
};
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
};

shared interface IGUIScreenCallbackFocus
{
	void OnLostFocus();
};

shared interface IGUIScreenCallbackMouseClick{bool OnMouseClick(int click);}
shared interface IGUIScreenCallbackMouseMove{bool OnMouseMove(int x,int y);}

shared interface IGUIScreenCallbackKeyPress
{
	bool OnKeyPress(uint8 key,string&keyText);
}

shared interface IGUIScreenCallbackMouseDown
{
	bool OnMouseDown(int click);
}
shared interface IGUIScreenCallbackMove{void OnMove(int posX,int posY);}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@SetCallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@SetCallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@SetCallbackMove(IGUIScreenCallbackMove@callback);
	
	IGUIScreenOpt@SetCallbackFocus(IGUIScreenCallbackFocus@callback);
	IGUIScreenOpt@SetCallbackMouseDown(IGUIScreenCallbackMouseDown@callback);
	IGUIScreenOpt@SetCallbackKeyPress(IGUIScreenCallbackKeyPress@callback);
	
	IControl@Control();
	IGUIScreenOpt@Control(IControl@control);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@Size(int w,int h);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@SizeByMultipleImages(int horizontalCount,int verticalCount);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@Hardcoded(bool enabled); 
	
	int GetPosX();
	int GetPosY();
	int GetWidth();
	int GetHeight();
	int GetIndex();
};

shared interface IGUIElementCallbackInit{void OnInit(int id);}
shared interface IGUIElementCallbackDraw{void OnDraw(int id);}
shared interface IGUIElementCallbackKeyPress{bool OnKeyPress(uint8 key,string&keyText);}
shared interface IGUIElementCallbackMouseDown{void OnMouseDown(int click);}
shared interface IGUIElementCallbackMouseClick{void OnMouseClick(int id,int click);}
shared interface IGUIElementCallbackMouseMove{void OnMouseMove(int x,int y);}
shared interface IGUIElementCallbackValueChange{void OnValueChange(int newValue);}
shared interface IGUIElementCallbackStateChange{void OnStateChange(bool state);}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackMouseMove(IGUIElementCallbackMouseMove@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@Visible(bool visible);
	IGUIElementOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementOpt@AbsolutePosition(int x,int y);
	IGUIElementOpt@CollisionTransparent(bool collisionTransparent);
	IGUIElementOpt@AddText(int id,string@text,int x,int y,int width,int height,int font,uint color,int flags);
	IGUIElementOpt@AddImage(int id,string@sprName,int x,int y);
	IGUIElementOpt@AddImage(int id,int patch,string@sprName,int x,int y);
	IGUIElementCallbackInit@GetCallbackInit();
	
	void MouseDown(int click);
	void MouseUp(int click,bool IsCollision);
	void MouseMove(int x,int y);
	
	void Draw(int screenX,int screenY);
	void Update(uint dt);
	void SetFocused(bool state);
	void SetVisible(bool visible);
	void SetAbsolutePosition(bool absolutePosition);
	
	void SetCollisionTransparent(bool collisionTransparent);
	void InputLost();
	
	IGUIElementOpt@GetNewInstance(); 
	
	bool IsVisible();
	bool IsFocused();
	bool IsAbsolutePosition();
	bool IsCollisionTransparent();
	bool IsCollision(int screenX,int screenY,int mouseX,int mouseY);
	int GetId();
	int GetPosX();
	int GetPosY();
	int GetHeight();
	int GetWidth();
	
	bool KeyPress(uint8 key,string&keyText);
	void KeyUp(uint8 key,string&keyText);
}

shared interface IGUIElementTextOpt
{
	IGUIElementTextOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementTextOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementTextOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementTextOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementTextOpt@CallbackMouseMove(IGUIElementCallbackMouseMove@callback);
	
	IGUIElementTextOpt@Position(int x,int y);
	IGUIElementTextOpt@Position(int x,int y,int w,int h);
	IGUIElementTextOpt@Position(string&iniKey);
	IGUIElementTextOpt@AbsolutePosition(int x,int y);
	IGUIElementTextOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementTextOpt@Text(string@text);
	IGUIElementTextOpt@Text(string@text,int font,uint color);
	IGUIElementTextOpt@Text(string@text,int font,uint color,int flags);
	IGUIElementTextOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementTextOpt@Visible(bool visible);
	IGUIElementTextOpt@TextBoxSize(int width,int height);
	IGUIElementTextOpt@TextOptions(int font,uint color);
	IGUIElementTextOpt@TextOptions(int font,uint color,int flags);
	IGUIElementTextOpt@TextOptions(int font,uint color,uint colorDown,int flags);
	IGUIElementTextOpt@TextColor(uint color);
	
	void Draw(int screenX,int screenY);
	void SetText(string&text);
	void SetVisible(bool visible);
	void SetFocused(bool state); 
	
	bool IsVisible();
	string@GetText();
	int GetFont();
	uint GetTextColor(); 
	
	int GetId();
}

shared interface IGUIElementImageOpt
{
	IGUIElementImageOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementImageOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementImageOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementImageOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	
	IGUIElementImageOpt@Position(int x,int y);
	IGUIElementImageOpt@Position(int x,int y,int w,int h);
	IGUIElementImageOpt@Position(string&iniKey);
	IGUIElementImageOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementImageOpt@Visible(bool visible); 
	
	void SetVisible(bool visible);
	void SetPosX(int x);
	void SetPosY(int y);
	void SetFocused(bool state);
	void SetAbsolutePosition(bool absolute);
	void Draw(int screenX,int screenY);  
	
	bool IsVisible();
	int GetPosX();
	int GetPosY();
	int GetImageWidth();
	int GetImageHeight();
	
	bool IsCollision(int screenX,int screenY,int mouseX,int mouseY);
}

shared interface IGUIElementButtonOpt
{
	IGUIElementButtonOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementButtonOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementButtonOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementButtonOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	
	IGUIElementButtonOpt@Position(int x,int y);
	IGUIElementButtonOpt@Position(int x,int y,int w,int h);
	IGUIElementButtonOpt@Position(string&iniKey);
	IGUIElementButtonOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementButtonOpt@Text(string@text);
	IGUIElementButtonOpt@Text(string@text,int font,uint color);
	IGUIElementButtonOpt@Text(string@text,int font,uint color,int flags);
	IGUIElementButtonOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementButtonOpt@Visible(bool visible);
	IGUIElementButtonOpt@TextShift(int deltaX,int deltaY,int deltaDownX,int deltaDownY);
	IGUIElementButtonOpt@TextWidth(int width);
	IGUIElementButtonOpt@UpPic(string@sprName);
	IGUIElementButtonOpt@DownPic(string@sprName);
	IGUIElementButtonOpt@ClickableZone(int width,int height);
	IGUIElementButtonOpt@ClickableZone(int x,int y,int width,int height);
	
	void SetVisible(bool visible);
	void SetFocused(bool state);
	void Hide();
	void Show();
	
	bool IsVisible();
	string getText();
	int GetPosX();
	int GetPosY();
}

shared interface IGUIElementEditBoxOpt
{
	IGUIElementEditBoxOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementEditBoxOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementEditBoxOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementEditBoxOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementEditBoxOpt@CallbackMouseMove(IGUIElementCallbackMouseMove@callback);
	IGUIElementEditBoxOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	
	IGUIElementEditBoxOpt@Position(int x,int y);
	IGUIElementEditBoxOpt@Position(int x,int y,int w,int h);
	IGUIElementEditBoxOpt@Position(string&iniKey);
	IGUIElementEditBoxOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementEditBoxOpt@Text(string@text);
	IGUIElementEditBoxOpt@Text(string@text,int font,uint color);
	IGUIElementEditBoxOpt@Text(string@text,int font,uint color,int flags);
	IGUIElementEditBoxOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementEditBoxOpt@Visible(bool visible);
	IGUIElementEditBoxOpt@TextBoxSize(int width,int height);
	IGUIElementEditBoxOpt@TextOptions(int font,uint color);
	IGUIElementEditBoxOpt@TextOptions(int font,uint color,int flags);
	IGUIElementEditBoxOpt@TextOptions(int font,uint color,uint colorDown,int flags);
	IGUIElementEditBoxOpt@TextColor(uint color);
	IGUIElementEditBoxOpt@VisibleText(string@text);
	IGUIElementEditBoxOpt@BackgroundPic(string@sprName);
	IGUIElementEditBoxOpt@MaxLen(int maxLen);
	IGUIElementEditBoxOpt@EditBoxSize(int width,int height);
	IGUIElementEditBoxOpt@LeftMargin(int lMargin);
	IGUIElementEditBoxOpt@RightMargin(int rMargin);
	IGUIElementEditBoxOpt@UpMargin(int uMargin);
	IGUIElementEditBoxOpt@DownMargin(int dMargin);
	IGUIElementEditBoxOpt@Margins(int lMargin,int rMargin,int uMargin,int dMargin);
	IGUIElementEditBoxOpt@PasswordMode(bool isPasswordMode);
	IGUIElementEditBoxOpt@PasswordChar(string@passChar);
	IGUIElementEditBoxOpt@NumericMode(bool isNumericMode);
	
	void Draw(int screenX,int screenY);
	void setVisible(bool visible);
	void setFocused(bool state);
	void NoInput(bool var);
	
	string@getText();
	bool isVisible();
	
	int getId();
}                       

import void IndicatorMouse(bool down,int click)from"client_interface";
import void ToggleInterfaceShown()from"client_interface";
import void SetInterfaceShown(bool setting)from"client_interface";
import bool IsInterfaceShown()from"client_interface";                

shared interface IConfigVar
{
	string GetName();
	string GetValue();
	array<string>GetValueAsArray();
	array<string>GetValueAsArray(string&delimeter);
	void SetValue(int val);
	void SetValue(uint val);
	void SetValue(string&val);
	void SetValue(array<string>&val);
	void SetValue(array<string>&val,string&delimeter);
};

shared interface IConfigSection
{
	string GetName();
	bool AddVar(string&var,string&val);
	bool DeleteVar(string&var);
	bool DeleteVar(string&var,bool caseSensitive);
	IConfigVar@GetVar(string&var);
	IConfigVar@GetVar(string&varname,bool caseSensitive);
	void GetVars(array<string>&list);
	bool SetVar(string&varname,string val);
	bool VarExists(string&var);
	bool VarExists(string&var,bool caseSensitive);
};

shared interface IConfigFile
{
	bool IsVirtual();
	string GetName();
	bool AddSection(string&section);
	IConfigSection@GetSection(string&section);
	IConfigSection@GetSection(string&sectioname,bool caseSensitive);
	void GetSections(array<string>&list);
	bool SectionExists(string&section);
	bool SectionExists(string&section,bool caseSensitive);
};  

import IConfigFile@NewConfig(string&filename)from"config_file";
import bool LoadConfig(string&filename)from"config_file";
import bool SaveConfig(string&filename)from"config_file";
import bool UnloadConfig(string&filename)from"config_file";

import IConfigFile@GetConfigFile(string&filename)from"config_file";
import IConfigFile@GetConfigFile(string&filename,bool caseSensitive)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname,bool caseSensitive)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import string@GetConfigValue(string&filename,string&section,string@varname)from"config_file";
import string@GetConfigValue(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import bool SetConfigValue(string&filename,string&sectioname,string@varname,string&value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,bool value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,int value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,uint value)from"config_file";            

import uint COLOR_RGB_STRING(string&r,string&g,string&b)from"client_utils";
import uint COLOR_RGBA_STRING(string&r,string&g,string&b,string&a)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b,uint8&a)from"client_utils";

import string RandomString(uint8 length)from"client_utils";

import bool string2bool(string@text)from"client_utils";
import uint string2uint(string@text)from"client_utils";
import uint rgb_string2uint(string&text)from"client_utils";
import uint rgba_string2uint(string&text)from"client_utils";

import int string2int(string&text)from"client_utils";
import uint font_string2uint(string&text)from"client_utils";
import uint range_string2int(string&text,int&from,int&to)from"client_utils";
import uint range_string2uint(string&text,uint&from,uint&to)from"client_utils";
import void vis_string2bool(string&text,bool&head,bool&msgbox)from"client_utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";                              

import uint ValidToolForTarget(ItemCl@tool,ItemCl@target)from"client_smart_cursor";
import bool TryUseSmartCursor(int click)from"client_smart_cursor";
import void TryDrawSmartCursor()from"client_smart_cursor

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       

import bool IsGMTEnabled()from"client_main";

import bool IsAuthorized()from"client_dev_menu";
import bool DevMenuProcessKey(uint8 key,string&keyText)from"client_dev_menu";
import void ShowChatScreen()from"client_screen_chat";
import bool GMToolsProcessKey(uint8 key,string&keyText)from"client_gmtools";
import bool GMToolsMenu()from"client_gmtools";
import bool GMToolsAccess()from"client_gmtools";
import bool GMToolsLoadMenu(string filename)from"client_gmtools_menu";    

import bool ProcessBind(uint8 key)from"client_keybinds";

import int stringReplaceText(string&s,string@f,string@t)from"config_file";

import void ThrowingKeyDown(uint8 key,string&keyText)from"throwing";
import void ThrowingKeyUp(uint8 key,string&keyText)from"throwing";
import void ThrowingInputLost()from"throwing";
import bool ThrowingMouseDown(int click)from"throwing";

import void HexShotingKeyDown(uint8 key,string&keyText)from"hexShot";
import void HexShotingKeyUp(uint8 key,string&keyText)from"hexShot";
import void HexShotingInputLost()from"hexShot";
import bool HexShotingMouseDown(int click)from"hexShot";

import void HexThrowingKeyDown(uint8 key,string&keyText)from"hexThrow";
import void HexThrowingKeyUp(uint8 key,string&keyText)from"hexThrow";
import void HexThrowingInputLost()from"hexThrow";
import bool HexThrowingMouseDown(int click)from"hexThrow";

import void ChangeOnHeadAwarenessPlayer()from"client_critter_onhead";
import void ChangeOnHeadAwarenessNPC()from"client_critter_onhead";         

int PrevMouseX=__MouseX;
int PrevMouseY=__MouseY;
array<uint>lastActionsForHexBot; 

void input_lost()
{
	ThrowingInputLost();
	HexShotingInputLost();
	HexThrowingInputLost();
	IndicatorMouse(false,0);
	__MapZooming=false;
	
	GUI_InputLost();
}
void client_get_active_screens(int[]&result)
{
	GUI_GetActiveScreens(result);
}   

bool key_down(uint8 key,string&keyText)
{
	CritterCl@chosen=GetChosen();
	array<uint>chosenaction;
	GetChosenActions(chosenaction);
	array<int>actionData;
	for(uint8 i=0;i<chosenaction.length();i++)actionData.insertLast(chosenaction[i]);    
	
	if(key!=0x38&&key!=0xB8&&key!=0x2A&&key!=0x36&&key!=0x9D&&key!=0x1D&&key==0x39)if(EndTurnBasedTurn())return true;
	
	if(key!=0x38&&key!=0xB8&&key!=0x2A&&key!=0x36&&(key==0x9D||key==0x1D)&&key==0x39)if(EndTurnBasedCombat())return true;
	
	if(key==0x2A&&(GUI_IsKeyPressed(0x1D)||GUI_IsKeyPressed(0x38))&&__ConfigIgnoreLangChange)
	return(true);                
	
	ThrowingKeyDown(key,keyText);
	HexShotingKeyDown(key,keyText);
	HexThrowingKeyDown(key,keyText);
	
	if(GMToolsProcessKey(key,keyText))
	return(true);
	if(DevMenuProcessKey(key,keyText))
	return(true);
	
	bool oldFog=__ConfigFog;
	if(ProcessBind(key))
	{
		bool newFog=__ConfigFog;
		if(newFog!=oldFog)
		{
			if(SetConfigValue("FOnlineAT.cfg","AfterTimes","Fog",__ConfigFog)&&
			string2bool(GetConfigValue("FOnlineAT.cfg","AfterTimes","Autosave")))
			{
				SaveConfig("FOnlineAT.cfg");
				Message("Fog: "+GetConfigValue("FOnlineAT.cfg","AfterTimes","Fog"));
			}
		}
		return true;
	}
	
	if(key==0x2C)
	__MapZooming=true;
	
	switch(key)
	{
		case 0x3E:
		ToggleInterfaceShown();
		break; 
		
		case 0x40:
		if(SetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayNames",!__ShowPlayerNames)&&
		string2bool(GetConfigValue("FOnlineAT.cfg","AfterTimes","Autosave")))
		{
			SaveConfig("FOnlineAT.cfg");
			Message("Display player names: "+GetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayNames"));
		}
		break;
		
		case 0x41:
		ChangeOnHeadAwarenessNPC();
		break;
		
		case 0x42:
		if(SetConfigValue("FOnlineAT.cfg","AfterTimes","MouseScroll",!__MouseScroll)&&
		string2bool(GetConfigValue("FOnlineAT.cfg","AfterTimes","Autosave")))
		{
			SaveConfig("FOnlineAT.cfg");
			Message("Mouse scroll: "+GetConfigValue("FOnlineAT.cfg","AfterTimes","MouseScroll"));
		}
		break;
		
		case 0x43:
		ChangeOnHeadAwarenessPlayer();
		break;
		case 0x16:
		{
			bool Open=true;
			int[]active_screens;
			client_get_active_screens(active_screens);
			if(@active_screens!=null)
			{
				if(active_screens.length()!=1)Open=false;
				else if(active_screens[0]!=(5))Open=false;
			}
			else Open=false;
			if(__ConsoleActive==true)Open=false;
			if(Open)
			{
				ChangeCursor(0);
				ShowChatScreen();
				return false;
			}
		}
	}
	
	if(key==0x44&&(!GUI_IsKeyPressed(0x2A)&&!GUI_IsKeyPressed(0x36)))
	{
		__ConfigDisplayTCZones++;
		__ConfigDisplayTCZones%=3;
		if(SetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayTCZones",__ConfigDisplayTCZones)&&
		string2bool(GetConfigValue("FOnlineAT.cfg","AfterTimes","Autosave")))
		{
			SaveConfig("FOnlineAT.cfg");
			Message("Display TC zones: "+GetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayTCZones"));
		}
	}
	
	if(key==0x44&&(GUI_IsKeyPressed(0x2A)||GUI_IsKeyPressed(0x36)))
	{
		__ConfigDisplayTC=!__ConfigDisplayTC;
		if(SetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayTC",__ConfigDisplayTC)&&
		string2bool(GetConfigValue("FOnlineAT.cfg","AfterTimes","Autosave")))
		{
			SaveConfig("FOnlineAT.cfg");
			Message("Display TC messages: "+GetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayTC"));
		}
	}
	if(key==0x52)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_Regroup",0,0,0,null,null);
	}
	if(key==0x4F)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_UseBuffout",0,0,0,null,null);
	}
	if(key==0x50)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_UseNuka",0,0,0,null,null);
	}
	if(key==0x51)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_Follow",0,0,0,null,null);
	}
	if(key==0x4B)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_UseRadX",0,0,0,null,null);
	}
	if(key==0x4C)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_UseDrugs",0,0,0,null,null);
	}
	if(key==0x4D)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_UseRadAway",0,0,0,null,null);
	}
	if(key==0x47)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_UseJetAntidote",0,0,0,null,null);
	}
	if(key==0x48)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_Stop",0,0,0,null,null);
	}
	if(key==0x49)
	{
		RunServerScriptUnsafe("followers_menu@unsafe_Flee",0,0,0,null,null);
	}    
	
	return(GUI_KeyDown(key,keyText));
}

bool key_up(uint8 key,string&keyText)
{
	CritterCl@chosen=GetChosen();
	array<uint>chosenaction;
	GetChosenActions(chosenaction);
	array<int>actionData;
	for(uint8 i=0;i<chosenaction.length();i++)actionData.insertLast(chosenaction[i]); 
	
	ThrowingKeyUp(key,keyText);
	HexShotingKeyUp(key,keyText);
	HexThrowingKeyUp(key,keyText);
	
	if(key==0x2C)
	__MapZooming=false;
	
	return GUI_KeyUp(key,keyText);
}    

bool mouse_down(int click)
{  
	
	if(ThrowingMouseDown(click))
	return true;
	if(HexShotingMouseDown(click))
	return true;
	if(HexThrowingMouseDown(click))
	return true;
	if(TryUseSmartCursor(click))
	return true;  
	
	IndicatorMouse(true,click);
	
	GetChosenActions(lastActionsForHexBot);
	
	if(IsGMTEnabled()&&GMToolsMenu()&&
	GUI_GetActiveScreen()==(5)&&GUI_IsKeyPressed(0x1D))
	{
		ChangeCursor((0));
		GUI_ShowScreen((47),__MouseX,__MouseY,0);
		
		return(true);
	}
	else if(IsAuthorized()&&
	GUI_GetActiveScreen()==(5)&&GUI_IsKeyPressed(0x1D))
	{
		ChangeCursor((0));
		GUI_ShowScreen((41),__MouseX,__MouseY,0);
		return(true);
	}
	else if(GUI_GetActiveScreen()==(5)&&GUI_IsKeyPressed(0x38))
	{
		ChangeCursor((0));
		GUI_ShowScreen((44),__MouseX,__MouseY,0);
		return(true);
	}
	else if(GUI_GetActiveScreen()==(5)&&__RTS)
	{
		bool gui_result=GUI_MouseDown(__MouseX,__MouseY,click);
		if(!gui_result)
		{
			int cursorCurrent=GetCurrentCursor();
			
			if(click==(1))
			{
				ChangeCursor((1));
			}
			else
			if(click==(2))
			{
				RunServerScriptUnsafe("followers_menu@unsafe_Command",0,0,0,null,null);
			}
			else if(click==(3)||click==(4))
			{
				if(cursorCurrent==(2))
				ChangeCursor((0));
				else
				if(cursorCurrent==(3))
				ChangeCursor((0));
				else
				if(cursorCurrent==(4))
				ChangeCursor((0));
				else
				if(cursorCurrent==(0))
				ChangeCursor((3));
			}
			return(false);
		}
		return gui_result;
	}              
	
	else
	return(GUI_MouseDown(__MouseX,__MouseY,click));
}

bool mouse_up(int click)
{
	IndicatorMouse(false,0);
	CritterCl@chosen=GetChosen();
	array<uint>chosenaction;
	GetChosenActions(chosenaction);
	array<int>actionData;
	for(uint8 i=0;i<chosenaction.length();i++)actionData.insertLast(chosenaction[i]);
	string@key="mouse";   
	
	if(GUI_GetActiveScreen()==(5)&&__RTS)
	{
		if(click==(1))
		{
			uint16 cx=0,cy=0;
			GetMonitorHex(__MouseX,__MouseY,cx,cy);
			uint[]actions={(1),cx,cy,GUI_IsKeyPressed(0x2A)?0:1,0,0,0};
			SetChosenActions(actions);
			int cursorLast=GetLastCursor();
			ChangeCursor(cursorLast);
			return true;
		}
		if(click==(2))
		{
			int cursorCurrent=GetCurrentCursor();
			IGUIScreenOpt@window;
			CritterCl@chosen=GetChosen();
			
			uint16 x=__MouseX;
			uint16 y=__MouseY;
			CritterCl@cr=GetMonitorCritter(x,y);
			uint16 hexX=0;
			uint16 hexY=0;
			GetMonitorHex(__MouseX,__MouseY,hexX,hexY);
			if(cursorCurrent==(1))
			RunServerScriptUnsafe("followers_menu@unsafe_Command",1,hexX,hexY,null,null);
			if(cursorCurrent==(3))
			RunServerScriptUnsafe("followers_menu@unsafe_Command",2,hexX,hexY,null,null);
			if(cursorCurrent==(4)||cursorCurrent==(2)||cursorCurrent==(6)||cursorCurrent==(0))
			RunServerScriptUnsafe("followers_menu@unsafe_Command",3,hexX,hexY,null,null);
			
			return true;
		}
	}
	
	return(GUI_MouseUp(__MouseX,__MouseY,click));
}

bool IsHexBot()
{
	if(GUI_GetActiveMainScreen()==(5))
	{    
		
		array<uint>currentActionsForHexBot;
		GetChosenActions(currentActionsForHexBot);
		
		if(currentActionsForHexBot.length()==7)
		{ 
			
			bool isHexBot=false;
			
			for(uint i=0;i<currentActionsForHexBot.length();i++)
			{
				if(currentActionsForHexBot[i]!=lastActionsForHexBot[i])isHexBot=true;
			}
			
			if(isHexBot)
			{ 
				
				array<CritterCl@>critsForHexBot;
				
				GetCrittersHex(currentActionsForHexBot[1],currentActionsForHexBot[1],1,(0x03),critsForHexBot);
				
				if(critsForHexBot.length()>0)
				{ 
					
					array<int>actionData;
					
					if(lastActionsForHexBot.length()>0)for(uint8 i=0;i<lastActionsForHexBot.length();i++)actionData.insertLast(lastActionsForHexBot[i]);
					if(currentActionsForHexBot.length()>0)for(uint8 i=0;i<currentActionsForHexBot.length();i++)actionData.insertLast(currentActionsForHexBot[i]);
					for(uint8 i=0;i<critsForHexBot.length();i++)actionData.insertLast(critsForHexBot[i].Id);
					
					RunServerScriptUnsafe("unsafe_client@unsafe_HexBotDetected",lastActionsForHexBot.length(),currentActionsForHexBot.length(),critsForHexBot.length(),null,actionData);  
					
					return true;
				}   
				
			}    
			
		}            
		
	}
	
	return false;
}

void mouse_move(int x,int y)
{
	if(__DisableMouseEvents)
	{
		__MouseX=PrevMouseX;
		__MouseY=PrevMouseY;
		return;
	}
	
	GUI_MouseMove(PrevMouseX,PrevMouseY,__MouseX,__MouseY);
	PrevMouseX=__MouseX;
	PrevMouseY=__MouseY;
}

void filename_tokens(string&replacement)
{
	string charname="Unknown";
	uint level=0;
	
	CritterCl@chosen=GetChosen();
	if((@chosen!=null))
	{
		charname=chosen.Name;
		level=chosen.Param[(77)];
	}
	
	stringReplaceText(replacement,"%CHARNAME%",charname);
	stringReplaceText(replacement,"%CHARLEVEL%",""+level);
	
}

void filename_logfile(string&filename)
{
	string@replacement=GetConfigValue("FOnlineAT.cfg","AfterTimes","LogfileName");
	
	if(!(@replacement!=null))
	return;
	
	array<string@>@fname=split(filename,"messbox_");
	if(fname.length()==2&&fname[1].length()==23)
	{
		string day=substring(fname[1],8,2);
		string month=substring(fname[1],5,2);
		string year=substring(fname[1],0,4);
		string hour=substring(fname[1],11,2);
		string minute=substring(fname[1],14,2);
		string second=substring(fname[1],17,2);
		string extension=substring(fname[1],20,3);
		
		stringReplaceText(replacement,"%DAY%",day);
		stringReplaceText(replacement,"%MONTH%",month);
		stringReplaceText(replacement,"%YEAR%",year);
		stringReplaceText(replacement,"%HOUR%",hour);
		stringReplaceText(replacement,"%MINUTE%",minute);
		stringReplaceText(replacement,"%SECOND%",second);
		stringReplaceText(replacement,"%EXTENSION%",extension);
		filename_tokens(replacement);
		
		filename=replacement;
	} 
	
}

void filename_screenshot(string&filename)
{
	string@replacement=GetConfigValue("FOnlineAT.cfg","AfterTimes","ScreenshotName");
	
	if(!(@replacement!=null))
	return; 
	
	array<string@>@fname=split(filename,"screen_");
	if(fname.length()==2&&fname[1].length()==23)
	{
		string day=substring(fname[1],8,2);
		string month=substring(fname[1],5,2);
		string year=substring(fname[1],0,4);
		string hour=substring(fname[1],11,2);
		string minute=substring(fname[1],14,2);
		string second=substring(fname[1],17,2);
		string extension=substring(fname[1],20,3);
		
		stringReplaceText(replacement,"%DAY%",day);
		stringReplaceText(replacement,"%MONTH%",month);
		stringReplaceText(replacement,"%YEAR%",year);
		stringReplaceText(replacement,"%HOUR%",hour);
		stringReplaceText(replacement,"%MINUTE%",minute);
		stringReplaceText(replacement,"%SECOND%",second);
		stringReplaceText(replacement,"%EXTENSION%",extension);
		filename_tokens(replacement);
		
		filename=replacement;
	} 
	
}   

bool EndTurnBasedTurn()
{
	if(__ConsoleActive)
	return false;
	
	CritterCl@chosen=GetChosen();
	if((@chosen!=null)&&chosen.IsTurnBasedTurn())
	{
		RunServerScriptUnsafe("unsafe_client@unsafe_EndTurnBasedTurn",0,0,0,null,null);
		return true;
	}
	
	return false;
}

bool EndTurnBasedCombat()
{
	if(__ConsoleActive)
	return false;
	
	CritterCl@chosen=GetChosen();
	if((@chosen!=null)&&chosen.IsTurnBasedTurn())
	{
		RunServerScriptUnsafe("unsafe_client@unsafe_EndTurnBasedCombat",0,0,0,null,null);
		return true;
	}
	
	return false;
}
