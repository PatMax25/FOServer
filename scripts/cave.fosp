

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                

import uint GetCrType(uint pid)from"weap_anim_table";
import bool CanUseWeapon(uint crtype,uint weaponpid)from"weap_anim_table"; 

import void SetWear(Item&item,int wearProcent)from"repair";
import void SetMinWear(Item&item,int wearProcent)from"repair";

array<ICaveCritter@>critters;
array<ICaveGroup@>groups;

void InitCritters()
{
	CaveCritter@critter;
	@critter=CaveCritter();                                                                                                                                                                                                                                                                                                                                                                                                            
	
	int[]small_gun_bags={156,157,212,234,220,230,240,241,265};
	
	int[]big_gun_bags={239,242,272,273,193,194};
	int[]melee_bags={215,247,248,161,150,152,159,190};
	
	array<int>raider_bags;
	array<int>slaver_bags;
	array<int>all_bags;
	
	AddBagToBag(raider_bags,small_gun_bags);
	AddBagToBag(raider_bags,big_gun_bags);
	
	AddBagToBag(slaver_bags,small_gun_bags);
	AddBagToBag(slaver_bags,melee_bags);
	
	AddBagToBag(all_bags,melee_bags);
	AddBagToBag(all_bags,small_gun_bags);
	AddBagToBag(all_bags,big_gun_bags);
	
	AddCaveCritter((1),84,142,(10));
	AddCaveCritter((3),11,1,(7));
	AddCaveCritter((5),12,1,(9));
	AddCaveCritter((6),9,1,(21));
	AddCaveCritter((7),6,1,(8));
	AddCaveCritter((20),239,melee_bags,(136));
	AddCaveCritter((21),238,raider_bags,(136));
	AddCaveCritter((22),212,raider_bags,(136));
	AddCaveCritter((10),205,melee_bags,(1));
	AddCaveCritter((11),205,slaver_bags,(16));
	AddCaveCritter((12),205,slaver_bags,(16));
	AddCaveCritter((13),17,1,(46));
	AddCaveCritter((14),18,1,(46));
	AddCaveCritter((15),19,1,(46));
	AddCaveCritter((16),234,melee_bags,(14));
	AddCaveCritter((17),235,melee_bags,(14));
	AddCaveCritter((18),359,all_bags,(136));
	AddCaveCritter((19),360,all_bags,(136));
	AddCaveCritter((4),510,1,(7)); 
	
}

void InitGroups()
{
	CaveGroup@group;
	@group=CaveGroup();                                                                                                                                                                                                                                                                                                                                                                                 
	
	uint[]group_1={(1)};
	uint[]group_2={(1),(3)};
	uint[]group_3={(1),(3),(7)};
	uint[]group_4={(3)};
	uint[]group_5={(20),(21),(22)};
	uint[]group_6={(10),(3),(6)};
	uint[]group_7={(10)};
	uint[]group_8={(18),(19)};
	uint[]group_9={(5),(3)};
	uint[]group_10={(11),(12),(13),(14),(15)};
	uint[]group_11={(16),(17)};
	uint[]group_12={(4)};
	uint[]group_13={(4),(3)};
	
	AddCaveGroup(group_1);
	AddCaveGroup(group_2);
	AddCaveGroup(group_3);
	AddCaveGroup(group_4);
	AddCaveGroup(group_5);
	AddCaveGroup(group_6);
	AddCaveGroup(group_7);
	AddCaveGroup(group_8);
	AddCaveGroup(group_9);
	AddCaveGroup(group_10);
	AddCaveGroup(group_11);
	AddCaveGroup(group_12);
	AddCaveGroup(group_13);
	
} 

uint e_Deteriorate(array<uint>@values)
{
	Critter@npc=GetCritter(values[0]);
	if(!(@npc!=null))
	return 0;
	
	array<Item@>items;
	uint num=npc.GetItems(-1,items);
	
	for(uint i=0;i<num;i++)
	{
		if(items[i].IsDeteriorable())
		{
			SetMinWear(items[i],Random(20,40));
			SetWear(items[i],Random(65,95));
		}
	}
	return 0;
}

ICaveCritter@GetCaveCritterByID(uint id)
{
	for(uint i=0;i<critters.length();i++)
	{
		if(critters[i].GetID()==int(id))
		return critters[i];
	}
	return null;
}

void AddBagToBag(array<int>&bag,array<int>toadd)
{
	for(uint i=0;i<toadd.length();i++)
	{
		bag.insertLast(toadd[i]);
	}
}

void AddCaveGroup(array<uint>critters)
{
	CaveGroup group();
	group.AddCritters(critters);
	groups.insertLast(group);
}

void AddCaveCritter(uint id,uint pid,uint bag,uint aipack)
{
	CaveCritter critter();
	critter.ID(id).PID(pid).Bag(bag).AI(aipack);
	critters.insertLast(critter);
}

void AddCaveCritter(uint id,uint pid,array<int>bags,uint aipack)
{
	CaveCritter critter();
	critter.ID(id).PID(pid).Bag(bags).AI(aipack);
	critters.insertLast(critter);
}

shared interface ICaveGroup
{
	ICaveGroup@AddCritters(array<uint>critters);
	array<uint>GetCritters();
};

class CaveGroup:ICaveGroup
{
	array<uint>critters;
	
	ICaveGroup@AddCritters(array<uint>critters)
	{
		this.critters=critters;
		return this;
	}
	
	array<uint>GetCritters()
	{
		return critters;
	}
};

shared interface ICaveCritter
{
	ICaveCritter@Bag(int bagid);
	ICaveCritter@Bag(array<int>bags);
	ICaveCritter@Team(int team);
	ICaveCritter@Level(int level);
	ICaveCritter@PID(int pid);
	ICaveCritter@ID(int id);
	ICaveCritter@AI(int aipack);
	ICaveCritter@Difficulty(int difficulty);
	
	bool Spawn(Map@map,uint x,uint y);
	
	uint GetCost();
	int GetDifficulty();
	int GetID();
};

class CaveCritter:ICaveCritter
{
	array<int>bags;
	int bag;
	int selectedbag;
	int team;
	int pid;
	int id;
	int aipack;
	string script;
	int level;
	int difficulty;
	
	CaveCritter()
	{
		team=2;
		pid=0;
		id=0;
		aipack=1;
		level=0;
		script=("mob@critter_init");
		difficulty=(2);
	}
	
	ICaveCritter@Bag(int bag)
	{
		this.bags.insertLast(bag);
		return this;
	}
	
	ICaveCritter@Bag(array<int>bags)
	{
		for(uint i=0;i<bags.length();i++)
		{
			this.bags.insertLast(bags[i]);
		}
		return this;
	}
	
	ICaveCritter@Team(int team)
	{
		this.team=team;
		return this;
	}
	
	ICaveCritter@Level(int level)
	{
		this.level=level;
		return this;
	}
	ICaveCritter@PID(int pid)
	{
		this.pid=pid;
		return this;
	}
	ICaveCritter@ID(int id)
	{
		this.id=id;
		return this;
	}
	
	ICaveCritter@AI(int aipack)
	{
		this.aipack=aipack;
		return this;
	}
	
	ICaveCritter@Difficulty(int difficulty)
	{
		this.difficulty=difficulty;
		return this;
	}
	
	int GetDifficulty(){return difficulty;}
	int GetID(){return id;}
	int SelectBag()
	{
		bool found=false;
		uint crtype=GetCrType(pid);
		do{int __temp;uint pos;for(uint __i=0;__i<bags.length()-1;__i++){pos=Random(__i,bags.length()-1);__temp=bags[pos];bags[pos]=bags[__i];bags[__i]=__temp;}}while(false);
		for(uint i=0;i<bags.length();i++)
		{
			array<uint>mincounts,maxcounts;
			array<int>slots;
			array<uint16>pids;
			uint num=GetBagItems(bags[i],pids,mincounts,maxcounts,slots);
			for(uint y=0;y<num;y++)
			{
				if(CanUseWeapon(crtype,pids[y]))
				{
					{;};
					return bags[i];
				}
			}
		}
		
		return 1;
	}
	
	uint GetCost()
	{
		array<uint>mincounts,maxcounts;
		array<int>slots;
		array<uint16>pids;
		selectedbag=SelectBag();
		if(selectedbag==1)
		return 0;
		
		uint num=GetBagItems(selectedbag,pids,mincounts,maxcounts,slots);
		uint cost=0;
		for(uint i=0;i<num;i++)
		{
			cost+=BaseItemValue(pids[i],7,80,true)*(mincounts[i]+maxcounts[i])/2;
		}
		{;};
		return cost;
	}
	
	bool Spawn(Map@map,uint x,uint y)
	{
		if(level==0)
		level=Random(1,10);
		
		selectedbag=SelectBag();
		
		{;};
		Critter@npc=AddNpc(map,pid,x,y,Random(0,5),0,script,aipack,selectedbag,(5000)+team,false,level);
		if(!(@npc!=null))
		return false;
		
		npc.ParamBase[(84)]=(-2);
		npc.ChangeCrType(npc.ParamBase[(112)]);
		(npc.ParamBase[(534)]=npc.Param[(534)]|((0x00000200)));
		
		CreateTimeEvent(((__FullSecond)+(((1)*__TimeMultiplier))),"e_Deteriorate",npc.Id,false);
		
		return true;
	}
};                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

array<ICaveItem@>items;

uint cur_group;

void InitItems()
{               
	
	SetGroup((1));
	AddCaveItem((19),95,1);
	AddCaveItem((127),75,2);
	AddCaveItem((41),50,1);
	AddCaveItem((278),75,1);
	AddCaveItem((318),5,1);
	AddCaveItem((416),10,1);
	AddCaveItem((289),25,1);
	AddCaveItem((101),10,1);
	AddCaveItem((316),10,1);
	AddCaveItem((315),10,1);
	AddCaveItem((314),10,1);
	AddCaveItem((117),10,1);
	AddCaveItem((9721),3,1);
	AddCaveItem((9723),3,1);
	AddCaveItem((9725),3,1);
	AddCaveItem((79),3,1);
	AddCaveItem((470),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((1800),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((1802),3,1);
	AddCaveItem((1803),3,1);
	AddCaveItem((1804),3,1);
	AddCaveItem((1805),3,1);
	AddCaveItem((1806),3,1);
	AddCaveItem((1807),3,1);
	AddCaveItem((1808),3,1);
	AddCaveItem((1809),3,1);
	AddCaveItem((1824),3,1);
	AddCaveItem((9628),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((9630),3,1);
	AddCaveItem((9631),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((9633),3,1);
	AddCaveItem((9634),3,1);
	AddCaveItem((9635),3,1);
	AddCaveItem((9653),3,1);
	AddCaveItem((9681),3,1);
	AddCaveItem((9918),3,1);
	AddCaveItem((9919),3,1);
	AddCaveItem((9921),3,1);
	AddCaveItem((84),3,1);
	AddCaveItem((549),3,1);
	AddCaveItem((47),3,1);
	AddCaveItem((408),3,1);
	AddCaveItem((91),3,1);
	AddCaveItem((409),3,1);
	AddCaveItem((289),3,1);
	AddCaveItem((297),3,1);
	AddCaveItem((543),3,1);
	AddCaveItem((605),3,1);
	AddCaveItem((764),3,1);
	AddCaveItem((765),3,1);
	AddCaveItem((766),3,1);
	AddCaveItem((770),3,1);
	AddCaveItem((773),3,1);
	AddCaveItem((775),3,1);
	AddCaveItem((776),3,1);
	AddCaveItem((9911),3,1);
	AddCaveItem((92),3,1);
	AddCaveItem((127),3,1);
	AddCaveItem((271),3,1);
	AddCaveItem((272),3,1);
	AddCaveItem((284),3,1);
	AddCaveItem((285),3,1);
	AddCaveItem((318),3,1);
	AddCaveItem((416),3,1);
	AddCaveItem((542),3,1);
	AddCaveItem((532),3,1);
	AddCaveItem((534),3,1);
	AddCaveItem((475),3,1);
	AddCaveItem((251),3,1);
	AddCaveItem((429),3,1);
	AddCaveItem((75),3,1);
	AddCaveItem((101),3,1);
	AddCaveItem((117),3,1);
	AddCaveItem((126),3,1);
	AddCaveItem((226),3,1);
	AddCaveItem((227),3,1);
	AddCaveItem((262),3,1);
	AddCaveItem((295),3,1);
	AddCaveItem((314),3,1);
	AddCaveItem((315),3,1);
	AddCaveItem((316),3,1);
	AddCaveItem((317),3,1);
	AddCaveItem((325),3,1);
	AddCaveItem((326),3,1);
	AddCaveItem((436),3,1);
	AddCaveItem((437),3,1);
	AddCaveItem((474),3,1);
	AddCaveItem((112),3,1);
	AddCaveItem((27566),3,1);
	AddCaveItem((27567),3,1);
	AddCaveItem((27568),3,1);
	AddCaveItem((27569),3,1);
	AddCaveItem((27574),3,1);
	AddCaveItem((27575),3,1);
	AddCaveItem((27576),3,1);
	AddCaveItem((27577),3,1);
	AddCaveItem((27579),3,1);
	AddCaveItem((27580),3,1);
	AddCaveItem((27581),3,1);
	AddCaveItem((27582),3,1);
	AddCaveItem((27584),3,1);
	AddCaveItem((27585),3,1);
	AddCaveItem((27586),3,1);
	AddCaveItem((27587),3,1);
	AddCaveItem((27588),3,1);
	AddCaveItem((27592),3,1);
	AddCaveItem((27593),3,1);
	AddCaveItem((27594),3,1);
	AddCaveItem((27595),3,1);
	AddCaveItem((27596),3,1);
	AddCaveItem((27597),3,1);
	AddCaveItem((27598),3,1);
	AddCaveItem((27599),3,1);
	AddCaveItem((27607),3,1);
	AddCaveItem((27608),3,1);
	AddCaveItem((27609),3,1);
	AddCaveItem((27611),3,1);
	AddCaveItem((27613),3,1);
	AddCaveItem((27614),3,1);
	AddCaveItem((27615),3,1);
	AddCaveItem((27616),3,1);
	AddCaveItem((27617),3,1);
	AddCaveItem((27618),3,1);
	AddCaveItem((27620),3,1);
	AddCaveItem((119),3,1);
	AddCaveItem((225),3,1);
	AddCaveItem((331),3,1);
	AddCaveItem((471),3,1);
	AddCaveItem((9751),3,1);
	AddCaveItem((9752),3,1);
	AddCaveItem((9753),3,1);
	AddCaveItem((9754),3,1);
	AddCaveItem((9755),3,1);
	AddCaveItem((9756),3,1);
	AddCaveItem((9757),3,1);
	AddCaveItem((9758),3,1);
	AddCaveItem((9759),3,1);
	AddCaveItem((9760),3,1);
	AddCaveItem((9761),3,1);
	AddCaveItem((9762),3,1);
	AddCaveItem((9763),3,1);
	AddCaveItem((9764),3,1);
	AddCaveItem((9765),3,1);
	AddCaveItem((9766),3,1);
	AddCaveItem((9767),3,1);
	AddCaveItem((9768),3,1);
	AddCaveItem((9769),3,1);
	AddCaveItem((9770),3,1);
	AddCaveItem((9771),3,1);
	AddCaveItem((9772),3,1);
	AddCaveItem((9773),3,1);
	AddCaveItem((9774),3,1);
	AddCaveItem((9827),3,1);
	AddCaveItem((9828),3,1);
	AddCaveItem((9831),3,1);
	AddCaveItem((9780),3,1);
	AddCaveItem((9836),3,1);
	AddCaveItem((9781),3,1);
	AddCaveItem((9782),3,1);
	AddCaveItem((9783),3,1);
	AddCaveItem((9784),3,1);
	AddCaveItem((9785),3,1);
	AddCaveItem((9786),3,1);
	AddCaveItem((9787),3,1);
	AddCaveItem((9848),3,1);
	AddCaveItem((9849),3,1);
	AddCaveItem((9857),3,1);
	AddCaveItem((9853),3,1);
	AddCaveItem((9854),3,1);
	AddCaveItem((9855),3,1);
	AddCaveItem((9856),3,1);
	AddCaveItem((9858),3,1);
	AddCaveItem((9859),3,1);
	AddCaveItem((9860),3,1);
	AddCaveItem((9790),3,1);
	AddCaveItem((9791),3,1);
	AddCaveItem((9792),3,1);
	AddCaveItem((9793),3,1);
	AddCaveItem((9794),3,1);
	AddCaveItem((9795),3,1);
	AddCaveItem((9796),3,1);
	AddCaveItem((9797),3,1);
	AddCaveItem((9798),3,1);
	AddCaveItem((9799),3,1);
	AddCaveItem((9832),3,1);
	AddCaveItem((9833),3,1);
	AddCaveItem((9834),3,1);
	AddCaveItem((9835),3,1);
	AddCaveItem((9837),3,1);
	AddCaveItem((9838),3,1);
	AddCaveItem((9840),3,1);
	AddCaveItem((9841),3,1);
	AddCaveItem((9843),3,1);
	AddCaveItem((9844),3,1);
	AddCaveItem((9845),3,1);
	AddCaveItem((9846),3,1);
	AddCaveItem((9847),3,1);
	
	SetGroup((7));
	AddCaveItem((40),85,1);
	AddCaveItem((53),15,1);
	AddCaveItem((87),15,1);
	AddCaveItem((259),15,1);
	AddCaveItem((48),15,1);
	AddCaveItem((49),15,1);
	AddCaveItem((109),15,1);
	AddCaveItem((144),35,1);
	AddCaveItem((525),15,1);
	AddCaveItem((260),5,1);
	AddCaveItem((378),3,1);
	AddCaveItem((470),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((1800),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((1802),3,1);
	AddCaveItem((1803),3,1);
	AddCaveItem((1804),3,1);
	AddCaveItem((1805),3,1);
	AddCaveItem((1806),3,1);
	AddCaveItem((1807),3,1);
	AddCaveItem((1808),3,1);
	AddCaveItem((1809),3,1);
	AddCaveItem((1824),3,1);
	AddCaveItem((9628),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((9630),3,1);
	AddCaveItem((9631),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((9633),3,1);
	AddCaveItem((9634),3,1);
	AddCaveItem((9635),3,1);
	AddCaveItem((9653),3,1);
	AddCaveItem((9681),3,1);
	AddCaveItem((9918),3,1);
	AddCaveItem((9919),3,1);
	AddCaveItem((9921),3,1);
	AddCaveItem((84),3,1);
	AddCaveItem((549),3,1);
	AddCaveItem((47),3,1);
	AddCaveItem((408),3,1);
	AddCaveItem((91),3,1);
	AddCaveItem((409),3,1);
	AddCaveItem((289),3,1);
	AddCaveItem((297),3,1);
	AddCaveItem((543),3,1);
	AddCaveItem((605),3,1);
	AddCaveItem((764),3,1);
	AddCaveItem((765),3,1);
	AddCaveItem((766),3,1);
	AddCaveItem((770),3,1);
	AddCaveItem((773),3,1);
	AddCaveItem((775),3,1);
	AddCaveItem((776),3,1);
	AddCaveItem((9911),3,1);
	AddCaveItem((92),3,1);
	AddCaveItem((127),3,1);
	AddCaveItem((271),3,1);
	AddCaveItem((272),3,1);
	AddCaveItem((284),3,1);
	AddCaveItem((285),3,1);
	AddCaveItem((318),3,1);
	AddCaveItem((416),3,1);
	AddCaveItem((542),3,1);
	AddCaveItem((532),3,1);
	AddCaveItem((534),3,1);
	AddCaveItem((475),3,1);
	AddCaveItem((251),3,1);
	AddCaveItem((429),3,1);
	AddCaveItem((75),3,1);
	AddCaveItem((101),3,1);
	AddCaveItem((117),3,1);
	AddCaveItem((126),3,1);
	AddCaveItem((226),3,1);
	AddCaveItem((227),3,1);
	AddCaveItem((262),3,1);
	AddCaveItem((295),3,1);
	AddCaveItem((314),3,1);
	AddCaveItem((315),3,1);
	AddCaveItem((316),3,1);
	AddCaveItem((317),3,1);
	AddCaveItem((325),3,1);
	AddCaveItem((326),3,1);
	AddCaveItem((436),3,1);
	AddCaveItem((437),3,1);
	AddCaveItem((474),3,1);
	AddCaveItem((112),3,1);
	AddCaveItem((27566),3,1);
	AddCaveItem((27567),3,1);
	AddCaveItem((27568),3,1);
	AddCaveItem((27569),3,1);
	AddCaveItem((27574),3,1);
	AddCaveItem((27575),3,1);
	AddCaveItem((27576),3,1);
	AddCaveItem((27577),3,1);
	AddCaveItem((27579),3,1);
	AddCaveItem((27580),3,1);
	AddCaveItem((27581),3,1);
	AddCaveItem((27582),3,1);
	AddCaveItem((27584),3,1);
	AddCaveItem((27585),3,1);
	AddCaveItem((27586),3,1);
	AddCaveItem((27587),3,1);
	AddCaveItem((27588),3,1);
	AddCaveItem((27592),3,1);
	AddCaveItem((27593),3,1);
	AddCaveItem((27594),3,1);
	AddCaveItem((27595),3,1);
	AddCaveItem((27596),3,1);
	AddCaveItem((27597),3,1);
	AddCaveItem((27598),3,1);
	AddCaveItem((27599),3,1);
	AddCaveItem((27607),3,1);
	AddCaveItem((27608),3,1);
	AddCaveItem((27609),3,1);
	AddCaveItem((27611),3,1);
	AddCaveItem((27613),3,1);
	AddCaveItem((27614),3,1);
	AddCaveItem((27615),3,1);
	AddCaveItem((27616),3,1);
	AddCaveItem((27617),3,1);
	AddCaveItem((27618),3,1);
	AddCaveItem((27620),3,1);
	AddCaveItem((119),3,1);
	AddCaveItem((225),3,1);
	AddCaveItem((331),3,1);
	AddCaveItem((471),3,1);
	AddCaveItem((9751),3,1);
	AddCaveItem((9752),3,1);
	AddCaveItem((9753),3,1);
	AddCaveItem((9754),3,1);
	AddCaveItem((9755),3,1);
	AddCaveItem((9756),3,1);
	AddCaveItem((9757),3,1);
	AddCaveItem((9758),3,1);
	AddCaveItem((9759),3,1);
	AddCaveItem((9760),3,1);
	AddCaveItem((9761),3,1);
	AddCaveItem((9762),3,1);
	AddCaveItem((9763),3,1);
	AddCaveItem((9764),3,1);
	AddCaveItem((9765),3,1);
	AddCaveItem((9766),3,1);
	AddCaveItem((9767),3,1);
	AddCaveItem((9768),3,1);
	AddCaveItem((9769),3,1);
	AddCaveItem((9770),3,1);
	AddCaveItem((9771),3,1);
	AddCaveItem((9772),3,1);
	AddCaveItem((9773),3,1);
	AddCaveItem((9774),3,1);
	AddCaveItem((9827),3,1);
	AddCaveItem((9828),3,1);
	AddCaveItem((9831),3,1);
	AddCaveItem((9780),3,1);
	AddCaveItem((9836),3,1);
	AddCaveItem((9781),3,1);
	AddCaveItem((9782),3,1);
	AddCaveItem((9783),3,1);
	AddCaveItem((9784),3,1);
	AddCaveItem((9785),3,1);
	AddCaveItem((9786),3,1);
	AddCaveItem((9787),3,1);
	AddCaveItem((9848),3,1);
	AddCaveItem((9849),3,1);
	AddCaveItem((9857),3,1);
	AddCaveItem((9853),3,1);
	AddCaveItem((9854),3,1);
	AddCaveItem((9855),3,1);
	AddCaveItem((9856),3,1);
	AddCaveItem((9858),3,1);
	AddCaveItem((9859),3,1);
	AddCaveItem((9860),3,1);
	AddCaveItem((9790),3,1);
	AddCaveItem((9791),3,1);
	AddCaveItem((9792),3,1);
	AddCaveItem((9793),3,1);
	AddCaveItem((9794),3,1);
	AddCaveItem((9795),3,1);
	AddCaveItem((9796),3,1);
	AddCaveItem((9797),3,1);
	AddCaveItem((9798),3,1);
	AddCaveItem((9799),3,1);
	AddCaveItem((9832),3,1);
	AddCaveItem((9833),3,1);
	AddCaveItem((9834),3,1);
	AddCaveItem((9835),3,1);
	AddCaveItem((9837),3,1);
	AddCaveItem((9838),3,1);
	AddCaveItem((9840),3,1);
	AddCaveItem((9841),3,1);
	AddCaveItem((9843),3,1);
	AddCaveItem((9844),3,1);
	AddCaveItem((9845),3,1);
	AddCaveItem((9846),3,1);
	AddCaveItem((9847),3,1);
	
	SetGroup((2));
	AddCaveItem((4),50,1);
	AddCaveItem((236),40,1);
	AddCaveItem((383),60,1);
	AddCaveItem((7),50,1);
	AddCaveItem((320),75,1);
	AddCaveItem((5),85,1);
	AddCaveItem((20),35,1);
	AddCaveItem((6),25,1);
	AddCaveItem((115),10,1);
	AddCaveItem((386),5,1);
	AddCaveItem((517),1,1);
	AddCaveItem((293),1,1);
	AddCaveItem((470),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((1800),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((1802),3,1);
	AddCaveItem((1803),3,1);
	AddCaveItem((1804),3,1);
	AddCaveItem((1805),3,1);
	AddCaveItem((1806),3,1);
	AddCaveItem((1807),3,1);
	AddCaveItem((1808),3,1);
	AddCaveItem((1809),3,1);
	AddCaveItem((1824),3,1);
	AddCaveItem((9628),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((9630),3,1);
	AddCaveItem((9631),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((9633),3,1);
	AddCaveItem((9634),3,1);
	AddCaveItem((9635),3,1);
	AddCaveItem((9653),3,1);
	AddCaveItem((9681),3,1);
	AddCaveItem((9918),3,1);
	AddCaveItem((9919),3,1);
	AddCaveItem((9921),3,1);
	AddCaveItem((84),3,1);
	AddCaveItem((549),3,1);
	AddCaveItem((47),3,1);
	AddCaveItem((408),3,1);
	AddCaveItem((91),3,1);
	AddCaveItem((409),3,1);
	AddCaveItem((289),3,1);
	AddCaveItem((297),3,1);
	AddCaveItem((543),3,1);
	AddCaveItem((605),3,1);
	AddCaveItem((764),3,1);
	AddCaveItem((765),3,1);
	AddCaveItem((766),3,1);
	AddCaveItem((770),3,1);
	AddCaveItem((773),3,1);
	AddCaveItem((775),3,1);
	AddCaveItem((776),3,1);
	AddCaveItem((9911),3,1);
	AddCaveItem((92),3,1);
	AddCaveItem((127),3,1);
	AddCaveItem((271),3,1);
	AddCaveItem((272),3,1);
	AddCaveItem((284),3,1);
	AddCaveItem((285),3,1);
	AddCaveItem((318),3,1);
	AddCaveItem((416),3,1);
	AddCaveItem((542),3,1);
	AddCaveItem((532),3,1);
	AddCaveItem((534),3,1);
	AddCaveItem((475),3,1);
	AddCaveItem((251),3,1);
	AddCaveItem((429),3,1);
	AddCaveItem((75),3,1);
	AddCaveItem((101),3,1);
	AddCaveItem((117),3,1);
	AddCaveItem((126),3,1);
	AddCaveItem((226),3,1);
	AddCaveItem((227),3,1);
	AddCaveItem((262),3,1);
	AddCaveItem((295),3,1);
	AddCaveItem((314),3,1);
	AddCaveItem((315),3,1);
	AddCaveItem((316),3,1);
	AddCaveItem((317),3,1);
	AddCaveItem((325),3,1);
	AddCaveItem((326),3,1);
	AddCaveItem((436),3,1);
	AddCaveItem((437),3,1);
	AddCaveItem((474),3,1);
	AddCaveItem((112),3,1);
	AddCaveItem((27566),3,1);
	AddCaveItem((27567),3,1);
	AddCaveItem((27568),3,1);
	AddCaveItem((27569),3,1);
	AddCaveItem((27574),3,1);
	AddCaveItem((27575),3,1);
	AddCaveItem((27576),3,1);
	AddCaveItem((27577),3,1);
	AddCaveItem((27579),3,1);
	AddCaveItem((27580),3,1);
	AddCaveItem((27581),3,1);
	AddCaveItem((27582),3,1);
	AddCaveItem((27584),3,1);
	AddCaveItem((27585),3,1);
	AddCaveItem((27586),3,1);
	AddCaveItem((27587),3,1);
	AddCaveItem((27588),3,1);
	AddCaveItem((27592),3,1);
	AddCaveItem((27593),3,1);
	AddCaveItem((27594),3,1);
	AddCaveItem((27595),3,1);
	AddCaveItem((27596),3,1);
	AddCaveItem((27597),3,1);
	AddCaveItem((27598),3,1);
	AddCaveItem((27599),3,1);
	AddCaveItem((27607),3,1);
	AddCaveItem((27608),3,1);
	AddCaveItem((27609),3,1);
	AddCaveItem((27611),3,1);
	AddCaveItem((27613),3,1);
	AddCaveItem((27614),3,1);
	AddCaveItem((27615),3,1);
	AddCaveItem((27616),3,1);
	AddCaveItem((27617),3,1);
	AddCaveItem((27618),3,1);
	AddCaveItem((27620),3,1);
	AddCaveItem((119),3,1);
	AddCaveItem((225),3,1);
	AddCaveItem((331),3,1);
	AddCaveItem((471),3,1);
	AddCaveItem((9751),3,1);
	AddCaveItem((9752),3,1);
	AddCaveItem((9753),3,1);
	AddCaveItem((9754),3,1);
	AddCaveItem((9755),3,1);
	AddCaveItem((9756),3,1);
	AddCaveItem((9757),3,1);
	AddCaveItem((9758),3,1);
	AddCaveItem((9759),3,1);
	AddCaveItem((9760),3,1);
	AddCaveItem((9761),3,1);
	AddCaveItem((9762),3,1);
	AddCaveItem((9763),3,1);
	AddCaveItem((9764),3,1);
	AddCaveItem((9765),3,1);
	AddCaveItem((9766),3,1);
	AddCaveItem((9767),3,1);
	AddCaveItem((9768),3,1);
	AddCaveItem((9769),3,1);
	AddCaveItem((9770),3,1);
	AddCaveItem((9771),3,1);
	AddCaveItem((9772),3,1);
	AddCaveItem((9773),3,1);
	AddCaveItem((9774),3,1);
	AddCaveItem((9827),3,1);
	AddCaveItem((9828),3,1);
	AddCaveItem((9831),3,1);
	AddCaveItem((9780),3,1);
	AddCaveItem((9836),3,1);
	AddCaveItem((9781),3,1);
	AddCaveItem((9782),3,1);
	AddCaveItem((9783),3,1);
	AddCaveItem((9784),3,1);
	AddCaveItem((9785),3,1);
	AddCaveItem((9786),3,1);
	AddCaveItem((9787),3,1);
	AddCaveItem((9848),3,1);
	AddCaveItem((9849),3,1);
	AddCaveItem((9857),3,1);
	AddCaveItem((9853),3,1);
	AddCaveItem((9854),3,1);
	AddCaveItem((9855),3,1);
	AddCaveItem((9856),3,1);
	AddCaveItem((9858),3,1);
	AddCaveItem((9859),3,1);
	AddCaveItem((9860),3,1);
	AddCaveItem((9790),3,1);
	AddCaveItem((9791),3,1);
	AddCaveItem((9792),3,1);
	AddCaveItem((9793),3,1);
	AddCaveItem((9794),3,1);
	AddCaveItem((9795),3,1);
	AddCaveItem((9796),3,1);
	AddCaveItem((9797),3,1);
	AddCaveItem((9798),3,1);
	AddCaveItem((9799),3,1);
	AddCaveItem((9832),3,1);
	AddCaveItem((9833),3,1);
	AddCaveItem((9834),3,1);
	AddCaveItem((9835),3,1);
	AddCaveItem((9837),3,1);
	AddCaveItem((9838),3,1);
	AddCaveItem((9840),3,1);
	AddCaveItem((9841),3,1);
	AddCaveItem((9843),3,1);
	AddCaveItem((9844),3,1);
	AddCaveItem((9845),3,1);
	AddCaveItem((9846),3,1);
	AddCaveItem((9847),3,1);
	
	SetGroup((3));
	AddCaveItem((300),30,1);
	AddCaveItem((122),20,1);
	AddCaveItem((8),30,1);
	AddCaveItem((22),20,1);
	AddCaveItem((18),20,1);
	AddCaveItem((241),20,1);
	AddCaveItem((313),20,1);
	AddCaveItem((388),40,1);
	AddCaveItem((390),1,1);
	AddCaveItem((396),1,1);
	AddCaveItem((470),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((1800),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((1802),3,1);
	AddCaveItem((1803),3,1);
	AddCaveItem((1804),3,1);
	AddCaveItem((1805),3,1);
	AddCaveItem((1806),3,1);
	AddCaveItem((1807),3,1);
	AddCaveItem((1808),3,1);
	AddCaveItem((1809),3,1);
	AddCaveItem((1824),3,1);
	AddCaveItem((9628),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((9630),3,1);
	AddCaveItem((9631),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((9633),3,1);
	AddCaveItem((9634),3,1);
	AddCaveItem((9635),3,1);
	AddCaveItem((9653),3,1);
	AddCaveItem((9681),3,1);
	AddCaveItem((9918),3,1);
	AddCaveItem((9919),3,1);
	AddCaveItem((9921),3,1);
	AddCaveItem((84),3,1);
	AddCaveItem((549),3,1);
	AddCaveItem((47),3,1);
	AddCaveItem((408),3,1);
	AddCaveItem((91),3,1);
	AddCaveItem((409),3,1);
	AddCaveItem((289),3,1);
	AddCaveItem((297),3,1);
	AddCaveItem((543),3,1);
	AddCaveItem((605),3,1);
	AddCaveItem((764),3,1);
	AddCaveItem((765),3,1);
	AddCaveItem((766),3,1);
	AddCaveItem((770),3,1);
	AddCaveItem((773),3,1);
	AddCaveItem((775),3,1);
	AddCaveItem((776),3,1);
	AddCaveItem((9911),3,1);
	AddCaveItem((92),3,1);
	AddCaveItem((127),3,1);
	AddCaveItem((271),3,1);
	AddCaveItem((272),3,1);
	AddCaveItem((284),3,1);
	AddCaveItem((285),3,1);
	AddCaveItem((318),3,1);
	AddCaveItem((416),3,1);
	AddCaveItem((542),3,1);
	AddCaveItem((532),3,1);
	AddCaveItem((534),3,1);
	AddCaveItem((475),3,1);
	AddCaveItem((251),3,1);
	AddCaveItem((429),3,1);
	AddCaveItem((75),3,1);
	AddCaveItem((101),3,1);
	AddCaveItem((117),3,1);
	AddCaveItem((126),3,1);
	AddCaveItem((226),3,1);
	AddCaveItem((227),3,1);
	AddCaveItem((262),3,1);
	AddCaveItem((295),3,1);
	AddCaveItem((314),3,1);
	AddCaveItem((315),3,1);
	AddCaveItem((316),3,1);
	AddCaveItem((317),3,1);
	AddCaveItem((325),3,1);
	AddCaveItem((326),3,1);
	AddCaveItem((436),3,1);
	AddCaveItem((437),3,1);
	AddCaveItem((474),3,1);
	AddCaveItem((112),3,1);
	AddCaveItem((27566),3,1);
	AddCaveItem((27567),3,1);
	AddCaveItem((27568),3,1);
	AddCaveItem((27569),3,1);
	AddCaveItem((27574),3,1);
	AddCaveItem((27575),3,1);
	AddCaveItem((27576),3,1);
	AddCaveItem((27577),3,1);
	AddCaveItem((27579),3,1);
	AddCaveItem((27580),3,1);
	AddCaveItem((27581),3,1);
	AddCaveItem((27582),3,1);
	AddCaveItem((27584),3,1);
	AddCaveItem((27585),3,1);
	AddCaveItem((27586),3,1);
	AddCaveItem((27587),3,1);
	AddCaveItem((27588),3,1);
	AddCaveItem((27592),3,1);
	AddCaveItem((27593),3,1);
	AddCaveItem((27594),3,1);
	AddCaveItem((27595),3,1);
	AddCaveItem((27596),3,1);
	AddCaveItem((27597),3,1);
	AddCaveItem((27598),3,1);
	AddCaveItem((27599),3,1);
	AddCaveItem((27607),3,1);
	AddCaveItem((27608),3,1);
	AddCaveItem((27609),3,1);
	AddCaveItem((27611),3,1);
	AddCaveItem((27613),3,1);
	AddCaveItem((27614),3,1);
	AddCaveItem((27615),3,1);
	AddCaveItem((27616),3,1);
	AddCaveItem((27617),3,1);
	AddCaveItem((27618),3,1);
	AddCaveItem((27620),3,1);
	AddCaveItem((119),3,1);
	AddCaveItem((225),3,1);
	AddCaveItem((331),3,1);
	AddCaveItem((471),3,1);
	AddCaveItem((9751),3,1);
	AddCaveItem((9752),3,1);
	AddCaveItem((9753),3,1);
	AddCaveItem((9754),3,1);
	AddCaveItem((9755),3,1);
	AddCaveItem((9756),3,1);
	AddCaveItem((9757),3,1);
	AddCaveItem((9758),3,1);
	AddCaveItem((9759),3,1);
	AddCaveItem((9760),3,1);
	AddCaveItem((9761),3,1);
	AddCaveItem((9762),3,1);
	AddCaveItem((9763),3,1);
	AddCaveItem((9764),3,1);
	AddCaveItem((9765),3,1);
	AddCaveItem((9766),3,1);
	AddCaveItem((9767),3,1);
	AddCaveItem((9768),3,1);
	AddCaveItem((9769),3,1);
	AddCaveItem((9770),3,1);
	AddCaveItem((9771),3,1);
	AddCaveItem((9772),3,1);
	AddCaveItem((9773),3,1);
	AddCaveItem((9774),3,1);
	AddCaveItem((9827),3,1);
	AddCaveItem((9828),3,1);
	AddCaveItem((9831),3,1);
	AddCaveItem((9780),3,1);
	AddCaveItem((9836),3,1);
	AddCaveItem((9781),3,1);
	AddCaveItem((9782),3,1);
	AddCaveItem((9783),3,1);
	AddCaveItem((9784),3,1);
	AddCaveItem((9785),3,1);
	AddCaveItem((9786),3,1);
	AddCaveItem((9787),3,1);
	AddCaveItem((9848),3,1);
	AddCaveItem((9849),3,1);
	AddCaveItem((9857),3,1);
	AddCaveItem((9853),3,1);
	AddCaveItem((9854),3,1);
	AddCaveItem((9855),3,1);
	AddCaveItem((9856),3,1);
	AddCaveItem((9858),3,1);
	AddCaveItem((9859),3,1);
	AddCaveItem((9860),3,1);
	AddCaveItem((9790),3,1);
	AddCaveItem((9791),3,1);
	AddCaveItem((9792),3,1);
	AddCaveItem((9793),3,1);
	AddCaveItem((9794),3,1);
	AddCaveItem((9795),3,1);
	AddCaveItem((9796),3,1);
	AddCaveItem((9797),3,1);
	AddCaveItem((9798),3,1);
	AddCaveItem((9799),3,1);
	AddCaveItem((9832),3,1);
	AddCaveItem((9833),3,1);
	AddCaveItem((9834),3,1);
	AddCaveItem((9835),3,1);
	AddCaveItem((9837),3,1);
	AddCaveItem((9838),3,1);
	AddCaveItem((9840),3,1);
	AddCaveItem((9841),3,1);
	AddCaveItem((9843),3,1);
	AddCaveItem((9844),3,1);
	AddCaveItem((9845),3,1);
	AddCaveItem((9846),3,1);
	AddCaveItem((9847),3,1);
	
	SetGroup((4));
	AddCaveItem((10),25,1);
	AddCaveItem((287),25,1);
	AddCaveItem((299),25,1);
	AddCaveItem((23),25,1);
	AddCaveItem((143),25,1);
	AddCaveItem((162),1,1);
	AddCaveItem((403),1,1);
	AddCaveItem((470),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((1800),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((1802),3,1);
	AddCaveItem((1803),3,1);
	AddCaveItem((1804),3,1);
	AddCaveItem((1805),3,1);
	AddCaveItem((1806),3,1);
	AddCaveItem((1807),3,1);
	AddCaveItem((1808),3,1);
	AddCaveItem((1809),3,1);
	AddCaveItem((1824),3,1);
	AddCaveItem((9628),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((9630),3,1);
	AddCaveItem((9631),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((9633),3,1);
	AddCaveItem((9634),3,1);
	AddCaveItem((9635),3,1);
	AddCaveItem((9653),3,1);
	AddCaveItem((9681),3,1);
	AddCaveItem((9918),3,1);
	AddCaveItem((9919),3,1);
	AddCaveItem((9921),3,1);
	AddCaveItem((84),3,1);
	AddCaveItem((549),3,1);
	AddCaveItem((47),3,1);
	AddCaveItem((408),3,1);
	AddCaveItem((91),3,1);
	AddCaveItem((409),3,1);
	AddCaveItem((289),3,1);
	AddCaveItem((297),3,1);
	AddCaveItem((543),3,1);
	AddCaveItem((605),3,1);
	AddCaveItem((764),3,1);
	AddCaveItem((765),3,1);
	AddCaveItem((766),3,1);
	AddCaveItem((770),3,1);
	AddCaveItem((773),3,1);
	AddCaveItem((775),3,1);
	AddCaveItem((776),3,1);
	AddCaveItem((9911),3,1);
	AddCaveItem((92),3,1);
	AddCaveItem((127),3,1);
	AddCaveItem((271),3,1);
	AddCaveItem((272),3,1);
	AddCaveItem((284),3,1);
	AddCaveItem((285),3,1);
	AddCaveItem((318),3,1);
	AddCaveItem((416),3,1);
	AddCaveItem((542),3,1);
	AddCaveItem((532),3,1);
	AddCaveItem((534),3,1);
	AddCaveItem((475),3,1);
	AddCaveItem((251),3,1);
	AddCaveItem((429),3,1);
	AddCaveItem((75),3,1);
	AddCaveItem((101),3,1);
	AddCaveItem((117),3,1);
	AddCaveItem((126),3,1);
	AddCaveItem((226),3,1);
	AddCaveItem((227),3,1);
	AddCaveItem((262),3,1);
	AddCaveItem((295),3,1);
	AddCaveItem((314),3,1);
	AddCaveItem((315),3,1);
	AddCaveItem((316),3,1);
	AddCaveItem((317),3,1);
	AddCaveItem((325),3,1);
	AddCaveItem((326),3,1);
	AddCaveItem((436),3,1);
	AddCaveItem((437),3,1);
	AddCaveItem((474),3,1);
	AddCaveItem((112),3,1);
	AddCaveItem((27566),3,1);
	AddCaveItem((27567),3,1);
	AddCaveItem((27568),3,1);
	AddCaveItem((27569),3,1);
	AddCaveItem((27574),3,1);
	AddCaveItem((27575),3,1);
	AddCaveItem((27576),3,1);
	AddCaveItem((27577),3,1);
	AddCaveItem((27579),3,1);
	AddCaveItem((27580),3,1);
	AddCaveItem((27581),3,1);
	AddCaveItem((27582),3,1);
	AddCaveItem((27584),3,1);
	AddCaveItem((27585),3,1);
	AddCaveItem((27586),3,1);
	AddCaveItem((27587),3,1);
	AddCaveItem((27588),3,1);
	AddCaveItem((27592),3,1);
	AddCaveItem((27593),3,1);
	AddCaveItem((27594),3,1);
	AddCaveItem((27595),3,1);
	AddCaveItem((27596),3,1);
	AddCaveItem((27597),3,1);
	AddCaveItem((27598),3,1);
	AddCaveItem((27599),3,1);
	AddCaveItem((27607),3,1);
	AddCaveItem((27608),3,1);
	AddCaveItem((27609),3,1);
	AddCaveItem((27611),3,1);
	AddCaveItem((27613),3,1);
	AddCaveItem((27614),3,1);
	AddCaveItem((27615),3,1);
	AddCaveItem((27616),3,1);
	AddCaveItem((27617),3,1);
	AddCaveItem((27618),3,1);
	AddCaveItem((27620),3,1);
	AddCaveItem((119),3,1);
	AddCaveItem((225),3,1);
	AddCaveItem((331),3,1);
	AddCaveItem((471),3,1);
	AddCaveItem((9751),3,1);
	AddCaveItem((9752),3,1);
	AddCaveItem((9753),3,1);
	AddCaveItem((9754),3,1);
	AddCaveItem((9755),3,1);
	AddCaveItem((9756),3,1);
	AddCaveItem((9757),3,1);
	AddCaveItem((9758),3,1);
	AddCaveItem((9759),3,1);
	AddCaveItem((9760),3,1);
	AddCaveItem((9761),3,1);
	AddCaveItem((9762),3,1);
	AddCaveItem((9763),3,1);
	AddCaveItem((9764),3,1);
	AddCaveItem((9765),3,1);
	AddCaveItem((9766),3,1);
	AddCaveItem((9767),3,1);
	AddCaveItem((9768),3,1);
	AddCaveItem((9769),3,1);
	AddCaveItem((9770),3,1);
	AddCaveItem((9771),3,1);
	AddCaveItem((9772),3,1);
	AddCaveItem((9773),3,1);
	AddCaveItem((9774),3,1);
	AddCaveItem((9827),3,1);
	AddCaveItem((9828),3,1);
	AddCaveItem((9831),3,1);
	AddCaveItem((9780),3,1);
	AddCaveItem((9836),3,1);
	AddCaveItem((9781),3,1);
	AddCaveItem((9782),3,1);
	AddCaveItem((9783),3,1);
	AddCaveItem((9784),3,1);
	AddCaveItem((9785),3,1);
	AddCaveItem((9786),3,1);
	AddCaveItem((9787),3,1);
	AddCaveItem((9848),3,1);
	AddCaveItem((9849),3,1);
	AddCaveItem((9857),3,1);
	AddCaveItem((9853),3,1);
	AddCaveItem((9854),3,1);
	AddCaveItem((9855),3,1);
	AddCaveItem((9856),3,1);
	AddCaveItem((9858),3,1);
	AddCaveItem((9859),3,1);
	AddCaveItem((9860),3,1);
	AddCaveItem((9790),3,1);
	AddCaveItem((9791),3,1);
	AddCaveItem((9792),3,1);
	AddCaveItem((9793),3,1);
	AddCaveItem((9794),3,1);
	AddCaveItem((9795),3,1);
	AddCaveItem((9796),3,1);
	AddCaveItem((9797),3,1);
	AddCaveItem((9798),3,1);
	AddCaveItem((9799),3,1);
	AddCaveItem((9832),3,1);
	AddCaveItem((9833),3,1);
	AddCaveItem((9834),3,1);
	AddCaveItem((9835),3,1);
	AddCaveItem((9837),3,1);
	AddCaveItem((9838),3,1);
	AddCaveItem((9840),3,1);
	AddCaveItem((9841),3,1);
	AddCaveItem((9843),3,1);
	AddCaveItem((9844),3,1);
	AddCaveItem((9845),3,1);
	AddCaveItem((9846),3,1);
	AddCaveItem((9847),3,1);
	
	SetGroup((5));
	AddCaveItem((94),25,1);
	AddCaveItem((385),25,1);
	AddCaveItem((242),15,1);
	AddCaveItem((268),15,1);
	AddCaveItem((354),5,1);
	
	AddCaveItem((9),15,1);
	AddCaveItem((296),15,1);
	AddCaveItem((283),15,1);
	AddCaveItem((332),15,1);
	AddCaveItem((470),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((1800),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((1802),3,1);
	AddCaveItem((1803),3,1);
	AddCaveItem((1804),3,1);
	AddCaveItem((1805),3,1);
	AddCaveItem((1806),3,1);
	AddCaveItem((1807),3,1);
	AddCaveItem((1808),3,1);
	AddCaveItem((1809),3,1);
	AddCaveItem((1824),3,1);
	AddCaveItem((9628),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((9630),3,1);
	AddCaveItem((9631),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((9633),3,1);
	AddCaveItem((9634),3,1);
	AddCaveItem((9635),3,1);
	AddCaveItem((9653),3,1);
	AddCaveItem((9681),3,1);
	AddCaveItem((9918),3,1);
	AddCaveItem((9919),3,1);
	AddCaveItem((9921),3,1);
	AddCaveItem((84),3,1);
	AddCaveItem((549),3,1);
	AddCaveItem((47),3,1);
	AddCaveItem((408),3,1);
	AddCaveItem((91),3,1);
	AddCaveItem((409),3,1);
	AddCaveItem((289),3,1);
	AddCaveItem((297),3,1);
	AddCaveItem((543),3,1);
	AddCaveItem((605),3,1);
	AddCaveItem((764),3,1);
	AddCaveItem((765),3,1);
	AddCaveItem((766),3,1);
	AddCaveItem((770),3,1);
	AddCaveItem((773),3,1);
	AddCaveItem((775),3,1);
	AddCaveItem((776),3,1);
	AddCaveItem((9911),3,1);
	AddCaveItem((92),3,1);
	AddCaveItem((127),3,1);
	AddCaveItem((271),3,1);
	AddCaveItem((272),3,1);
	AddCaveItem((284),3,1);
	AddCaveItem((285),3,1);
	AddCaveItem((318),3,1);
	AddCaveItem((416),3,1);
	AddCaveItem((542),3,1);
	AddCaveItem((532),3,1);
	AddCaveItem((534),3,1);
	AddCaveItem((475),3,1);
	AddCaveItem((251),3,1);
	AddCaveItem((429),3,1);
	AddCaveItem((75),3,1);
	AddCaveItem((101),3,1);
	AddCaveItem((117),3,1);
	AddCaveItem((126),3,1);
	AddCaveItem((226),3,1);
	AddCaveItem((227),3,1);
	AddCaveItem((262),3,1);
	AddCaveItem((295),3,1);
	AddCaveItem((314),3,1);
	AddCaveItem((315),3,1);
	AddCaveItem((316),3,1);
	AddCaveItem((317),3,1);
	AddCaveItem((325),3,1);
	AddCaveItem((326),3,1);
	AddCaveItem((436),3,1);
	AddCaveItem((437),3,1);
	AddCaveItem((474),3,1);
	AddCaveItem((112),3,1);
	AddCaveItem((27566),3,1);
	AddCaveItem((27567),3,1);
	AddCaveItem((27568),3,1);
	AddCaveItem((27569),3,1);
	AddCaveItem((27574),3,1);
	AddCaveItem((27575),3,1);
	AddCaveItem((27576),3,1);
	AddCaveItem((27577),3,1);
	AddCaveItem((27579),3,1);
	AddCaveItem((27580),3,1);
	AddCaveItem((27581),3,1);
	AddCaveItem((27582),3,1);
	AddCaveItem((27584),3,1);
	AddCaveItem((27585),3,1);
	AddCaveItem((27586),3,1);
	AddCaveItem((27587),3,1);
	AddCaveItem((27588),3,1);
	AddCaveItem((27592),3,1);
	AddCaveItem((27593),3,1);
	AddCaveItem((27594),3,1);
	AddCaveItem((27595),3,1);
	AddCaveItem((27596),3,1);
	AddCaveItem((27597),3,1);
	AddCaveItem((27598),3,1);
	AddCaveItem((27599),3,1);
	AddCaveItem((27607),3,1);
	AddCaveItem((27608),3,1);
	AddCaveItem((27609),3,1);
	AddCaveItem((27611),3,1);
	AddCaveItem((27613),3,1);
	AddCaveItem((27614),3,1);
	AddCaveItem((27615),3,1);
	AddCaveItem((27616),3,1);
	AddCaveItem((27617),3,1);
	AddCaveItem((27618),3,1);
	AddCaveItem((27620),3,1);
	AddCaveItem((119),3,1);
	AddCaveItem((225),3,1);
	AddCaveItem((331),3,1);
	AddCaveItem((471),3,1);
	AddCaveItem((9751),3,1);
	AddCaveItem((9752),3,1);
	AddCaveItem((9753),3,1);
	AddCaveItem((9754),3,1);
	AddCaveItem((9755),3,1);
	AddCaveItem((9756),3,1);
	AddCaveItem((9757),3,1);
	AddCaveItem((9758),3,1);
	AddCaveItem((9759),3,1);
	AddCaveItem((9760),3,1);
	AddCaveItem((9761),3,1);
	AddCaveItem((9762),3,1);
	AddCaveItem((9763),3,1);
	AddCaveItem((9764),3,1);
	AddCaveItem((9765),3,1);
	AddCaveItem((9766),3,1);
	AddCaveItem((9767),3,1);
	AddCaveItem((9768),3,1);
	AddCaveItem((9769),3,1);
	AddCaveItem((9770),3,1);
	AddCaveItem((9771),3,1);
	AddCaveItem((9772),3,1);
	AddCaveItem((9773),3,1);
	AddCaveItem((9774),3,1);
	AddCaveItem((9827),3,1);
	AddCaveItem((9828),3,1);
	AddCaveItem((9831),3,1);
	AddCaveItem((9780),3,1);
	AddCaveItem((9836),3,1);
	AddCaveItem((9781),3,1);
	AddCaveItem((9782),3,1);
	AddCaveItem((9783),3,1);
	AddCaveItem((9784),3,1);
	AddCaveItem((9785),3,1);
	AddCaveItem((9786),3,1);
	AddCaveItem((9787),3,1);
	AddCaveItem((9848),3,1);
	AddCaveItem((9849),3,1);
	AddCaveItem((9857),3,1);
	AddCaveItem((9853),3,1);
	AddCaveItem((9854),3,1);
	AddCaveItem((9855),3,1);
	AddCaveItem((9856),3,1);
	AddCaveItem((9858),3,1);
	AddCaveItem((9859),3,1);
	AddCaveItem((9860),3,1);
	AddCaveItem((9790),3,1);
	AddCaveItem((9791),3,1);
	AddCaveItem((9792),3,1);
	AddCaveItem((9793),3,1);
	AddCaveItem((9794),3,1);
	AddCaveItem((9795),3,1);
	AddCaveItem((9796),3,1);
	AddCaveItem((9797),3,1);
	AddCaveItem((9798),3,1);
	AddCaveItem((9799),3,1);
	AddCaveItem((9832),3,1);
	AddCaveItem((9833),3,1);
	AddCaveItem((9834),3,1);
	AddCaveItem((9835),3,1);
	AddCaveItem((9837),3,1);
	AddCaveItem((9838),3,1);
	AddCaveItem((9840),3,1);
	AddCaveItem((9841),3,1);
	AddCaveItem((9843),3,1);
	AddCaveItem((9844),3,1);
	AddCaveItem((9845),3,1);
	AddCaveItem((9846),3,1);
	AddCaveItem((9847),3,1);
	
	SetGroup((6));
	AddCaveItem((74),30,1);
	AddCaveItem((1),30,1);
	AddCaveItem((2),30,1);
	AddCaveItem((17),15,1);
	AddCaveItem((113),30,1);
	AddCaveItem((733),15,1);
	AddCaveItem((734),15,1);
	AddCaveItem((726),15,1);
	AddCaveItem((240),15,1);
	AddCaveItem((380),15,1);
	AddCaveItem((381),15,1);
	AddCaveItem((727),1,1);
	AddCaveItem((738),1,1);
	AddCaveItem((524),1,1);
	AddCaveItem((239),1,1);
	AddCaveItem((752),1,1);
	AddCaveItem((9654),1,1);
	AddCaveItem((741),1,1);
	AddCaveItem((433),1,1);
	AddCaveItem((470),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((1800),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((1802),3,1);
	AddCaveItem((1803),3,1);
	AddCaveItem((1804),3,1);
	AddCaveItem((1805),3,1);
	AddCaveItem((1806),3,1);
	AddCaveItem((1807),3,1);
	AddCaveItem((1808),3,1);
	AddCaveItem((1809),3,1);
	AddCaveItem((1824),3,1);
	AddCaveItem((9628),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((9630),3,1);
	AddCaveItem((9631),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((9633),3,1);
	AddCaveItem((9634),3,1);
	AddCaveItem((9635),3,1);
	AddCaveItem((9653),3,1);
	AddCaveItem((9681),3,1);
	AddCaveItem((9918),3,1);
	AddCaveItem((9919),3,1);
	AddCaveItem((9921),3,1);
	AddCaveItem((84),3,1);
	AddCaveItem((549),3,1);
	AddCaveItem((47),3,1);
	AddCaveItem((408),3,1);
	AddCaveItem((91),3,1);
	AddCaveItem((409),3,1);
	AddCaveItem((289),3,1);
	AddCaveItem((297),3,1);
	AddCaveItem((543),3,1);
	AddCaveItem((605),3,1);
	AddCaveItem((764),3,1);
	AddCaveItem((765),3,1);
	AddCaveItem((766),3,1);
	AddCaveItem((770),3,1);
	AddCaveItem((773),3,1);
	AddCaveItem((775),3,1);
	AddCaveItem((776),3,1);
	AddCaveItem((9911),3,1);
	AddCaveItem((92),3,1);
	AddCaveItem((127),3,1);
	AddCaveItem((271),3,1);
	AddCaveItem((272),3,1);
	AddCaveItem((284),3,1);
	AddCaveItem((285),3,1);
	AddCaveItem((318),3,1);
	AddCaveItem((416),3,1);
	AddCaveItem((542),3,1);
	AddCaveItem((532),3,1);
	AddCaveItem((534),3,1);
	AddCaveItem((475),3,1);
	AddCaveItem((251),3,1);
	AddCaveItem((429),3,1);
	AddCaveItem((75),3,1);
	AddCaveItem((101),3,1);
	AddCaveItem((117),3,1);
	AddCaveItem((126),3,1);
	AddCaveItem((226),3,1);
	AddCaveItem((227),3,1);
	AddCaveItem((262),3,1);
	AddCaveItem((295),3,1);
	AddCaveItem((314),3,1);
	AddCaveItem((315),3,1);
	AddCaveItem((316),3,1);
	AddCaveItem((317),3,1);
	AddCaveItem((325),3,1);
	AddCaveItem((326),3,1);
	AddCaveItem((436),3,1);
	AddCaveItem((437),3,1);
	AddCaveItem((474),3,1);
	AddCaveItem((112),3,1);
	AddCaveItem((27566),3,1);
	AddCaveItem((27567),3,1);
	AddCaveItem((27568),3,1);
	AddCaveItem((27569),3,1);
	AddCaveItem((27574),3,1);
	AddCaveItem((27575),3,1);
	AddCaveItem((27576),3,1);
	AddCaveItem((27577),3,1);
	AddCaveItem((27579),3,1);
	AddCaveItem((27580),3,1);
	AddCaveItem((27581),3,1);
	AddCaveItem((27582),3,1);
	AddCaveItem((27584),3,1);
	AddCaveItem((27585),3,1);
	AddCaveItem((27586),3,1);
	AddCaveItem((27587),3,1);
	AddCaveItem((27588),3,1);
	AddCaveItem((27592),3,1);
	AddCaveItem((27593),3,1);
	AddCaveItem((27594),3,1);
	AddCaveItem((27595),3,1);
	AddCaveItem((27596),3,1);
	AddCaveItem((27597),3,1);
	AddCaveItem((27598),3,1);
	AddCaveItem((27599),3,1);
	AddCaveItem((27607),3,1);
	AddCaveItem((27608),3,1);
	AddCaveItem((27609),3,1);
	AddCaveItem((27611),3,1);
	AddCaveItem((27613),3,1);
	AddCaveItem((27614),3,1);
	AddCaveItem((27615),3,1);
	AddCaveItem((27616),3,1);
	AddCaveItem((27617),3,1);
	AddCaveItem((27618),3,1);
	AddCaveItem((27620),3,1);
	AddCaveItem((119),3,1);
	AddCaveItem((225),3,1);
	AddCaveItem((331),3,1);
	AddCaveItem((471),3,1);
	AddCaveItem((9751),3,1);
	AddCaveItem((9752),3,1);
	AddCaveItem((9753),3,1);
	AddCaveItem((9754),3,1);
	AddCaveItem((9755),3,1);
	AddCaveItem((9756),3,1);
	AddCaveItem((9757),3,1);
	AddCaveItem((9758),3,1);
	AddCaveItem((9759),3,1);
	AddCaveItem((9760),3,1);
	AddCaveItem((9761),3,1);
	AddCaveItem((9762),3,1);
	AddCaveItem((9763),3,1);
	AddCaveItem((9764),3,1);
	AddCaveItem((9765),3,1);
	AddCaveItem((9766),3,1);
	AddCaveItem((9767),3,1);
	AddCaveItem((9768),3,1);
	AddCaveItem((9769),3,1);
	AddCaveItem((9770),3,1);
	AddCaveItem((9771),3,1);
	AddCaveItem((9772),3,1);
	AddCaveItem((9773),3,1);
	AddCaveItem((9774),3,1);
	AddCaveItem((9827),3,1);
	AddCaveItem((9828),3,1);
	AddCaveItem((9831),3,1);
	AddCaveItem((9780),3,1);
	AddCaveItem((9836),3,1);
	AddCaveItem((9781),3,1);
	AddCaveItem((9782),3,1);
	AddCaveItem((9783),3,1);
	AddCaveItem((9784),3,1);
	AddCaveItem((9785),3,1);
	AddCaveItem((9786),3,1);
	AddCaveItem((9787),3,1);
	AddCaveItem((9848),3,1);
	AddCaveItem((9849),3,1);
	AddCaveItem((9857),3,1);
	AddCaveItem((9853),3,1);
	AddCaveItem((9854),3,1);
	AddCaveItem((9855),3,1);
	AddCaveItem((9856),3,1);
	AddCaveItem((9858),3,1);
	AddCaveItem((9859),3,1);
	AddCaveItem((9860),3,1);
	AddCaveItem((9790),3,1);
	AddCaveItem((9791),3,1);
	AddCaveItem((9792),3,1);
	AddCaveItem((9793),3,1);
	AddCaveItem((9794),3,1);
	AddCaveItem((9795),3,1);
	AddCaveItem((9796),3,1);
	AddCaveItem((9797),3,1);
	AddCaveItem((9798),3,1);
	AddCaveItem((9799),3,1);
	AddCaveItem((9832),3,1);
	AddCaveItem((9833),3,1);
	AddCaveItem((9834),3,1);
	AddCaveItem((9835),3,1);
	AddCaveItem((9837),3,1);
	AddCaveItem((9838),3,1);
	AddCaveItem((9840),3,1);
	AddCaveItem((9841),3,1);
	AddCaveItem((9843),3,1);
	AddCaveItem((9844),3,1);
	AddCaveItem((9845),3,1);
	AddCaveItem((9846),3,1);
	AddCaveItem((9847),3,1); 
	
	SetGroup((8));
	AddCaveItem((107),1,1);
	AddCaveItem((108),1,1);
	AddCaveItem((140),1,1);
	AddCaveItem((756),3,1);
	AddCaveItem((757),3,1);
	AddCaveItem((758),3,1);
	AddCaveItem((759),3,1);
	AddCaveItem((760),3,1);
	AddCaveItem((761),3,1);
	AddCaveItem((22054),1,10);
	AddCaveItem((22055),1,10);
	AddCaveItem((22056),1,10);
	AddCaveItem((22057),1,10);
	AddCaveItem((22058),1,10);
	AddCaveItem((22059),1,10);
	AddCaveItem((22060),1,10);
	AddCaveItem((769),3,1);
	AddCaveItem((770),3,1);
	AddCaveItem((771),3,1);
	AddCaveItem((772),3,1);
	AddCaveItem((773),3,1);
	AddCaveItem((774),3,1);
	AddCaveItem((775),3,1);
	AddCaveItem((776),3,1);
	AddCaveItem((777),3,1);
	
	AddCaveItem((470),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((1800),3,1);
	AddCaveItem((1801),3,1);
	AddCaveItem((1802),3,1);
	AddCaveItem((1803),3,1);
	AddCaveItem((1804),3,1);
	AddCaveItem((1805),3,1);
	AddCaveItem((1806),3,1);
	AddCaveItem((1807),3,1);
	AddCaveItem((1808),3,1);
	AddCaveItem((1809),3,1);
	AddCaveItem((1824),3,1);
	AddCaveItem((9628),3,1);
	AddCaveItem((9629),3,1);
	AddCaveItem((9630),3,1);
	AddCaveItem((9631),3,1);
	AddCaveItem((9632),3,1);
	AddCaveItem((9633),3,1);
	AddCaveItem((9634),3,1);
	AddCaveItem((9635),3,1);
	AddCaveItem((9653),3,1);
	AddCaveItem((9681),3,1);
	AddCaveItem((9918),3,1);
	AddCaveItem((9919),3,1);
	AddCaveItem((9921),3,1);
	AddCaveItem((84),3,1);
	AddCaveItem((549),3,1);
	AddCaveItem((47),3,1);
	AddCaveItem((408),3,1);
	AddCaveItem((91),3,1);
	AddCaveItem((409),3,1);
	AddCaveItem((289),3,1);
	AddCaveItem((297),3,1);
	AddCaveItem((543),3,1);
	AddCaveItem((605),3,1);
	AddCaveItem((764),3,1);
	AddCaveItem((765),3,1);
	AddCaveItem((766),3,1);
	AddCaveItem((770),3,1);
	AddCaveItem((773),3,1);
	AddCaveItem((775),3,1);
	AddCaveItem((776),3,1);
	AddCaveItem((9911),3,1);
	AddCaveItem((92),3,1);
	AddCaveItem((127),3,1);
	AddCaveItem((271),3,1);
	AddCaveItem((272),3,1);
	AddCaveItem((284),3,1);
	AddCaveItem((285),3,1);
	AddCaveItem((318),3,1);
	AddCaveItem((416),3,1);
	AddCaveItem((542),3,1);
	AddCaveItem((532),3,1);
	AddCaveItem((534),3,1);
	AddCaveItem((475),3,1);
	AddCaveItem((251),3,1);
	AddCaveItem((429),3,1);
	AddCaveItem((75),3,1);
	AddCaveItem((101),3,1);
	AddCaveItem((117),3,1);
	AddCaveItem((126),3,1);
	AddCaveItem((226),3,1);
	AddCaveItem((227),3,1);
	AddCaveItem((262),3,1);
	AddCaveItem((295),3,1);
	AddCaveItem((314),3,1);
	AddCaveItem((315),3,1);
	AddCaveItem((316),3,1);
	AddCaveItem((317),3,1);
	AddCaveItem((325),3,1);
	AddCaveItem((326),3,1);
	AddCaveItem((436),3,1);
	AddCaveItem((437),3,1);
	AddCaveItem((474),3,1);
	AddCaveItem((112),3,1);
	AddCaveItem((27566),3,1);
	AddCaveItem((27567),3,1);
	AddCaveItem((27568),3,1);
	AddCaveItem((27569),3,1);
	AddCaveItem((27574),3,1);
	AddCaveItem((27575),3,1);
	AddCaveItem((27576),3,1);
	AddCaveItem((27577),3,1);
	AddCaveItem((27579),3,1);
	AddCaveItem((27580),3,1);
	AddCaveItem((27581),3,1);
	AddCaveItem((27582),3,1);
	AddCaveItem((27584),3,1);
	AddCaveItem((27585),3,1);
	AddCaveItem((27586),3,1);
	AddCaveItem((27587),3,1);
	AddCaveItem((27588),3,1);
	AddCaveItem((27592),3,1);
	AddCaveItem((27593),3,1);
	AddCaveItem((27594),3,1);
	AddCaveItem((27595),3,1);
	AddCaveItem((27596),3,1);
	AddCaveItem((27597),3,1);
	AddCaveItem((27598),3,1);
	AddCaveItem((27599),3,1);
	AddCaveItem((27607),3,1);
	AddCaveItem((27608),3,1);
	AddCaveItem((27609),3,1);
	AddCaveItem((27611),3,1);
	AddCaveItem((27613),3,1);
	AddCaveItem((27614),3,1);
	AddCaveItem((27615),3,1);
	AddCaveItem((27616),3,1);
	AddCaveItem((27617),3,1);
	AddCaveItem((27618),3,1);
	AddCaveItem((27620),3,1);
	AddCaveItem((119),3,1);
	AddCaveItem((225),3,1);
	AddCaveItem((331),3,1);
	AddCaveItem((471),3,1);
	AddCaveItem((9751),3,1);
	AddCaveItem((9752),3,1);
	AddCaveItem((9753),3,1);
	AddCaveItem((9754),3,1);
	AddCaveItem((9755),3,1);
	AddCaveItem((9756),3,1);
	AddCaveItem((9757),3,1);
	AddCaveItem((9758),3,1);
	AddCaveItem((9759),3,1);
	AddCaveItem((9760),3,1);
	AddCaveItem((9761),3,1);
	AddCaveItem((9762),3,1);
	AddCaveItem((9763),3,1);
	AddCaveItem((9764),3,1);
	AddCaveItem((9765),3,1);
	AddCaveItem((9766),3,1);
	AddCaveItem((9767),3,1);
	AddCaveItem((9768),3,1);
	AddCaveItem((9769),3,1);
	AddCaveItem((9770),3,1);
	AddCaveItem((9771),3,1);
	AddCaveItem((9772),3,1);
	AddCaveItem((9773),3,1);
	AddCaveItem((9774),3,1);
	AddCaveItem((9827),3,1);
	AddCaveItem((9828),3,1);
	AddCaveItem((9831),3,1);
	AddCaveItem((9780),3,1);
	AddCaveItem((9836),3,1);
	AddCaveItem((9781),3,1);
	AddCaveItem((9782),3,1);
	AddCaveItem((9783),3,1);
	AddCaveItem((9784),3,1);
	AddCaveItem((9785),3,1);
	AddCaveItem((9786),3,1);
	AddCaveItem((9787),3,1);
	AddCaveItem((9848),3,1);
	AddCaveItem((9849),3,1);
	AddCaveItem((9857),3,1);
	AddCaveItem((9853),3,1);
	AddCaveItem((9854),3,1);
	AddCaveItem((9855),3,1);
	AddCaveItem((9856),3,1);
	AddCaveItem((9858),3,1);
	AddCaveItem((9859),3,1);
	AddCaveItem((9860),3,1);
	AddCaveItem((9790),3,1);
	AddCaveItem((9791),3,1);
	AddCaveItem((9792),3,1);
	AddCaveItem((9793),3,1);
	AddCaveItem((9794),3,1);
	AddCaveItem((9795),3,1);
	AddCaveItem((9796),3,1);
	AddCaveItem((9797),3,1);
	AddCaveItem((9798),3,1);
	AddCaveItem((9799),3,1);
	AddCaveItem((9832),3,1);
	AddCaveItem((9833),3,1);
	AddCaveItem((9834),3,1);
	AddCaveItem((9835),3,1);
	AddCaveItem((9837),3,1);
	AddCaveItem((9838),3,1);
	AddCaveItem((9840),3,1);
	AddCaveItem((9841),3,1);
	AddCaveItem((9843),3,1);
	AddCaveItem((9844),3,1);
	AddCaveItem((9845),3,1);
	AddCaveItem((9846),3,1);
	AddCaveItem((9847),3,1); 
	
}

void AddCaveItem(uint pid,uint chance,uint luckrequirement)
{
	CaveItem item();
	item.PID(pid).Chance(chance).LuckRequirement(luckrequirement).Group(cur_group);
	items.insertLast(item);
}

void SetGroup(uint group)
{
	cur_group=group;
}

shared interface ICaveItem
{
	ICaveItem@PID(uint pid);
	ICaveItem@Chance(uint chance);
	ICaveItem@LuckRequirement(uint luckrequirement);
	ICaveItem@Group(uint group);
	
	uint GetLuckRequirement();
	uint GetChance();
	uint GetPID();
	uint GetGroup();
	
	void AddItemToMap(Map@map,uint x,uint y);
};

class CaveItem:ICaveItem
{
	uint pid;
	uint chance;
	uint luckrequirement;
	uint group;
	
	CaveItem()
	{
		pid=0;
		chance=0;
		luckrequirement=0;
	}
	
	ICaveItem@PID(uint pid)
	{
		this.pid=pid;
		return this;
	}
	
	ICaveItem@Group(uint group)
	{
		this.group=group;
		return this;
	} 
	
	ICaveItem@Chance(uint chance)
	{
		this.chance=chance;
		return this;
	} 
	
	ICaveItem@LuckRequirement(uint luckrequirement)
	{
		this.luckrequirement=luckrequirement;
		return this;
	}
	
	uint GetLuckRequirement(){return luckrequirement;}
	uint GetChance(){return chance;}
	uint GetPID(){return pid;}
	uint GetGroup(){return group;}
	
	void AddItemToMap(Map@map,uint x,uint y)
	{
		{;};
		Item@item=map.AddItem(x,y,pid,1);
		if((@item!=null)&&item.IsDeteriorable())
		{
			SetMinWear(item,Random(20,40));
			SetWear(item,Random(65,95));
		}
	}
}

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                                                                                                                                                                                                                                                                                                                 

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}                        

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   

uint[][]PositionDirs=
{
	{0},
	
	{1,4,3,2,1,0,5,2,3,4,5,0,1},
	{1,5,0,1,2,3,4,1,0,5,4,3,2},
	{1,4,2},
	{1,5,1},
	{2,1,2,0,0,1,2,3,3,0,0,4,5,3,3,4,5},
	{2,1,2,4,5},
	{2,4,4,0,0,4,4,3,3,0,0,2,2,3,3,2,2},
	{2,5,5,0,0,5,5,3,3,0,0,1,1,3,3,1,1},
	{2,1,2,0,0,0,0,1,2,3,3,3,3,0,0,0,0,4,5,3,3,3,3,4,5}
};                                                                                                                                                                           

shared interface IZone
{
	uint GetX();
	uint GetY();
	uint GetTerrain();
	uint8 GetFactor();
	void SetFactor(uint8 factor);
	int GetValue();
	void SetValue(int val);
	void AddValue(int val);
	void SubValue(uint val);
	bool ContainsFlag(uint flag);
	void SetQuantity(uint group,uint quantity);
	void ChangeQuantity(uint group,int mod);
	uint GetBaseQuantity(uint group);
	uint GetQuantity(uint group);
	uint GetLocationPids(array<uint16>&pids);
}; 

import IZone@GetZone(uint wx,uint wy)from"worldmap";   

import void CritterEnterCave(Critter&critter)from"cavelog";
import void AddCaveGenerated()from"cavelog";
import void AddCrittersGenerated()from"cavelog";
import void AddCrittersKilled()from"cavelog";
import void AddPlayerDeaths()from"cavelog";
import void AddItemsGenerated()from"cavelog";
import void AddItemsPicked()from"cavelog";

array<uint>corpse_bags;

ICaveItem@GetCaveItem(Critter&player)
{
	uint rndnum=Random(910,980);
	uint rand=(((rndnum)>(980))?(980):(((rndnum)<(0))?(0):(rndnum)));
	uint group=(1);
	
	if(rand<910)
	group=(1);
	else if(rand<920)
	group=(7);
	else if(rand<930)
	group=(2);
	else if(rand<940)
	group=(8);
	else if(rand<950)
	group=(3);
	else if(rand<960)
	group=(5);
	else if(rand<970)
	group=(4);
	else if(rand<980)
	group=(6);
	
	do{ICaveItem@__temp;uint pos;for(uint __i=0;__i<items.length()-1;__i++){pos=Random(__i,items.length()-1);@__temp=items[pos];@items[pos]=items[__i];@items[__i]=__temp;}}while(false);
	for(uint i=0;i<items.length();i++)
	{
		ICaveItem@item=items[i];
		if((item.GetGroup()==group)&&(uint(player.Param[(6)])>=item.GetLuckRequirement())&&(Random(0,99)>uint(item.GetChance())))
		return item;
	}
	return null;
}

ICaveCritter@GetCaveCritter(ICaveGroup@group)
{
	array<uint>groupcritters=group.GetCritters();
	return GetCaveCritterByID((groupcritters[Random(0,groupcritters.length()-1)]));
}

bool FillItems(Map@map,Critter&player)
{
	uint amount=Random(1,(5));
	{;};
	
	array<Entire>item_entires;
	ParseEntires(map,item_entires,(20));
	
	if(item_entires.length()==0)
	{
		Log("No entires found to place items on in cave with PID "+map.GetProtoId());
		return false;
	}
	
	for(uint i=0;i<amount;i++)
	{
		Entire@entire=(item_entires[Random(0,item_entires.length()-1)]);
		ICaveItem@item=GetCaveItem(player);
		if((@item!=null))
		{
			{;};
			item.AddItemToMap(map,entire.HexX,entire.HexY);
			AddItemsGenerated();
		}
		else
		i--;
	}
	
	return true;
}

bool FillCritters(Map@map,Critter&player)
{
	uint amount=Random(0,(10));
	{;};
	
	array<Entire>critter_entires;
	
	ParseEntires(map,critter_entires,(10));
	ParseEntires(map,critter_entires,(11));
	ParseEntires(map,critter_entires,(12));
	
	if(critter_entires.length()==0)
	{
		Log("Couldn't find any entires for critters in cave with PID "+map.GetProtoId());
		return false;
	}
	
	{;};
	ICaveGroup@group=(groups[Random(0,groups.length()-1)]);
	
	for(uint i=0;i<amount;i++)
	{
		{;};
		ICaveCritter@critter=GetCaveCritter(group);
		{;};
		Entire@entire=(critter_entires[Random(0,critter_entires.length()-1)]);
		
		if(!(@entire!=null))
		{
			{;};
			i--;
		}
		else
		{
			if((@critter!=null))
			{
				{;};
				critter.Spawn(map,entire.HexX,entire.HexY);
				AddCrittersGenerated();
			}
			else
			Log("Critter not valid, can't spawn");
		}
	}
	
	return true;
}

int SelectCorpseBag(uint crpid)
{
	do{uint __temp;uint pos;for(uint __i=0;__i<corpse_bags.length()-1;__i++){pos=Random(__i,corpse_bags.length()-1);__temp=corpse_bags[pos];corpse_bags[pos]=corpse_bags[__i];corpse_bags[__i]=__temp;}}while(false);
	for(uint i=0;i<corpse_bags.length();i++)
	{
		if(!HasUnusableWeapon(crpid,corpse_bags[i]))
		return corpse_bags[i];
	}
	return 1;
}

void AddCorpse(Map@map,Critter&player,Entire@entire)
{
	uint[]corpses={1,2,14,23,24,30,31,32,40,41,63,69,91,92};
	uint pid=(corpses[Random(0,corpses.length()-1)]);
	uint bag=SelectCorpseBag(pid);
	{;};
	
	Critter@npc=AddNpc(map,pid,entire.HexX,entire.HexY,Random(0,5),(82),"",0,1,(5000),false,1);
	
	npc.ToDead(2,null);
	npc.ParamBase[(84)]=(-2);   
	
	GiveBag(bag,npc);
}

bool FillMap(Map@map,Critter&player)
{
	if(!(@map!=null))
	return false;
	
	if(Random(0,1)==0)
	{
		if(!FillItems(map,player))
		return false;
		
		if(!FillCritters(map,player))
		return false;
	}
	
	if(map.GetData((21))>0)
	{
		{;};
		array<Entire>item_entires;
		ParseEntires(map,item_entires,(20));
		Entire@entire=(item_entires[Random(0,item_entires.length()-1)]);
		Item@item=map.AddItem(entire.HexX,entire.HexY,map.GetData((21)),1);
		item.Val1=map.GetData((22));
	}
	
	array<Entire>dead_entires;
	ParseEntires(map,dead_entires,(21));
	if(dead_entires.length()==0)
	{
		{;};
	}
	
	if((dead_entires.length()>0)&&Random(0,99)==0)
	{
		Entire@entire=(dead_entires[Random(0,dead_entires.length()-1)]);
		AddCorpse(map,player,entire);
	}
	
	AddCaveGenerated();
	return true;
}

void InitCaveRandomization()
{
	InitItems();
	InitCritters();
	InitGroups();
	
	for(uint i=146;i<269;i++)
	corpse_bags.insertLast(i);
}
