                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                      

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}      

import bool IsBigFaction(uint faction)from"factions";
import bool IsTheSameFaction(uint player1Id,uint player2Id)from"factions";
import void _Resign(uint playerId)from"factions"; 

import int RegisterFaction(uint id,const string@name,bool playerDriven)from"factions";
import int RegisterFaction(const string@name,bool playerDriven,uint&out id)from"factions";

import bool RemoveFaction(uint faction)from"factions"; 

import bool GetFactionNameStr(uint faction,string&out name)from"factions";
import bool GetFactionId(const string@name,uint&out id)from"factions"; 

import bool IsFactionNameFree(const string&)from"factions";
import bool IsFactionNameValid(const string&)from"factions";

import bool IsGang(uint faction)from"factions";

import uint16 GetFactionRadioChannel(uint faction)from"factions";
import void SetFactionRadioChannel(uint faction,uint16 channel)from"factions"; 

import int AddPlayer(uint faction,uint id)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)from"factions"; 

import int RemovePlayer(uint faction,uint id)from"factions"; 

import int GetFaction(uint faction,uint id)from"factions";
import int GetStatus(uint faction,uint id)from"factions";
import int GetRank(uint faction,uint id)from"factions";
import bool IsMember(uint faction,Critter&cr)from"factions";
import bool IsMemberOffline(uint faction,uint id)from"factions";
import bool StoredInDB(uint faction,uint id)from"factions";
import uint GetRecordsCount(uint faction)from"factions";
import uint GetMembersCount(uint faction)from"factions";
import uint GetMembers(uint faction,array<uint>&ids)from"factions";
import uint GetLeaderId(uint faction)from"factions";
import void SetLeaderId(uint faction,uint id)from"factions";
import uint GetClaimId(uint faction)from"factions";
import void SetClaimId(uint faction,uint id)from"factions";
import uint GetLeaderTime(uint faction)from"factions";
import void SetLeaderTime(uint faction,uint time)from"factions";
import uint GetClaimTime(uint faction)from"factions";
import void SetClaimTime(uint faction,uint time)from"factions";
import uint GetFactionLocationId(uint faction)from"factions";
import bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)from"factions";

import void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)from"factions";

import uint GetFactionScore(uint faction)from"factions";
import void ModifyFactionScore(uint faction,int amount)from"factions";
import void UpdateLastUsed(uint faction)from"factions";
import uint GetFactionsCount()from"factions"; 

import int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)from"factions";
import int GetNextId(uint faction,uint currId,bool members,uint&out nextId)from"factions";
import int GetFirstId(uint faction,bool members,uint&out id)from"factions"; 

import int ModifyRank(uint faction,uint id,uint newRank)from"factions";
import int ModifyStatus(uint faction,uint id,uint newStatus)from"factions";
import int ModifyFaction(uint faction,uint id,uint newFaction)from"factions"; 

import int InvitePlayer(uint faction,uint playerId)from"factions";
import int ConfirmInvitation(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId,bool applyModifiers)from"factions";
import int ChangeRank(uint faction,uint playerId,uint newRank)from"factions";
import int ExpelMember(uint faction,uint playerId)from"factions";
import int ExpelMember(uint faction,uint playerId,bool applyModifiers)from"factions";

import uint GetPlayerFaction(uint playerId)from"factions";
import uint GetPlayerRank(uint playerId)from"factions"; 

import void AddFactionNews(uint faction,uint master,uint slave,uint type)from"factions";
import bool GetFactionNews(uint faction,uint index,uint&out master,uint&out slave,uint&out type,uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)from"factions";
import uint GetFactionNewsCount(uint faction)from"factions"; 

import uint CheckFactionBaseCoords(uint x,uint y)from"factions";

import bool SaveFactionData(uint faction)from"factions";
import bool FactionExists(uint faction)from"factions"; 

import uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)from"factions";   

import void InitFactions()from"factions";
import void UpdateFactionsInfo(Critter&cr)from"factions";
import IFaction@GetFaction(int)from"factions";
import IFaction@GetFaction(const string&)from"factions";
import IFaction@GetFactionByIdx(int idx)from"factions";
import void UpdateGroupVars(Critter&player)from"factions";     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);
	void settag(int index,int tag,int r,int g,int b);
	int get_tag(int index);
	int get_b(int index);
	int get_r(int index);
	int get_g(int index);  
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
};                                                                                                                                                                                                                                                                                                                                                                         

array<int>GroupAlliancesSQ((100)*(100));
array<int>ReputationModifiersSQ((100)*(100));
dictionary FactionUniformsDictionary;
dictionary UniformHelmetsDictionary;       

int[]reptable00={};
int[]reptable01={};
int[]reptable02=
{
	(3),-2000,
	(4),-2000,
	(5),-300,
	(7),-700,
	(18),-300,
	(31),-50,
	(34),50,
	(36),50,
	(89),50,
	(90),50,
	(91),50
	
};

int[]reptable03=
{
	(2),-2000,
	(4),-1000,
	(5),-300,
	(6),-150,
	(7),-500,
	(8),-500,
	(9),100,
	(13),-500,
	(14),-650,
	(16),-500,
	(17),1000,
	(18),-300,
	(20),-500,
	(21),-500,
	(24),-500,
	(29),-500,
	(30),-500,
	(31),-500,
	(37),-500,
	(38),-500,
	(80),-500,
	(81),-500,
	(82),-500,
	(83),-500,
	(85),-500,
	(86),-500,
	(88),-500,
	(89),-250,
	(91),-100
};

int[]reptable04=
{
	(2),-2000,
	(3),-700,
	(5),-150,
	(6),-350,
	(14),500,
	(18),-500,
	(39),1600,
	(84),500,
	(86),300,
	(88),1000
};

int[]reptable05=
{
	(2),-300,
	(3),-500,
	(4),-1000,
	(7),-1500,
	(8),-500,
	(9),-500,
	(18),300,
	(20),150,
	(24),-700,
	(25),500,
	(26),500,
	(27),400,
	(31),200,
	(32),100,
	(33),50,
	(34),500,
	(36),650,
	(39),-500,
	(40),-200,
	(80),150,
	(81),50,
	(82),450,
	(83),500,
	(85),500,
	(86),100,
	(89),1000,
	(90),1500,
	(91),500
};

int[]reptable06=
{
	(2),100,
	(3),-450,
	(4),-1150,
	(7),-2000,
	(8),-500,
	(13),-200,
	(14),-450,
	(16),-1000,
	(17),-50,
	(24),-150,
	(25),350,
	(26),350,
	(27),250,
	(31),100,
	(32),-250,
	(34),250,
	(36),400,
	(39),-150,
	(40),-400,
	(83),1000,
	(85),650,
	(88),-700,
	(89),50,
	(90),150,
	(91),50
};

int[]reptable07=
{
	(2),-1000,
	(3),-1000,
	(4),-1000,
	(5),-1000,
	(6),-2000,
	(13),-500,
	(14),-500,
	(16),1000,
	(18),-1700,
	(20),-250,
	(24),150,
	(29),-250,
	(30),-150,
	(32),-100,
	(33),-1750,
	(37),-50,
	(39),-200,
	(40),650,
	(80),-100,
	(81),150,
	(82),-150,
	(83),-500,
	(85),-50,
	(86),-100,
	(87),500,
	(88),-800,
	(89),-100,
	(90),-50
};

int[]reptable08=
{
	(2),-100,
	(3),-100,
	(4),-150,
	(5),-200,
	(6),-350,
	(7),100,
	(9),500,
	(13),-50,
	(14),-100,
	(18),-1000,
	(19),100,
	(20),-50,
	(24),750,
	(29),-100,
	(30),-50,
	(31),-50,
	(32),-100,
	(33),-1500,
	(37),-500,
	(39),-500,
	(40),1300,
	(81),500,
	(83),-300,
	(84),-50,
	(85),500,
	(86),-150,
	(87),1500,
	(88),-200,
	(89),-50,
	(90),50
};

int[]reptable09=
{
	(2),-1000,
	(3),100,
	(4),-1000,
	(5),100,
	(6),500,
	(8),1000,
	(16),100,
	(18),-2000,
	(19),500,
	(24),100,
	(25),-50,
	(26),-50,
	(27),-50,
	(29),-200,
	(30),-50,
	(31),-50,
	(32),-50,
	(33),-1600,
	(34),-50,
	(36),-50,
	(37),-1000,
	(39),-150,
	(40),150,
	(80),-50,
	(81),1000,
	(82),-50,
	(83),100,
	(86),-50,
	(87),500,
	(88),-100,
	(89),-300,
	(90),-200,
	(91),-200
};

int[]reptable10=
{
	(82),600
};

int[]reptable11=
{
	(85),2000
};

int[]reptable12=
{
	(85),2000
};

int[]reptable13=
{
	(2),500,
	(3),-500,
	(4),-350,
	(5),350,
	(6),200,
	(7),-700,
	(8),-600,
	(9),-1000,
	(11),500,
	(12),500,
	(14),1500,
	(16),-550,
	(17),-700,
	(18),500,
	(19),-500,
	(20),350,
	(21),-150,
	(24),-350,
	(25),500,
	(26),500,
	(27),500,
	(29),50,
	(30),600,
	(31),50,
	(32),-200,
	(33),250,
	(34),100,
	(36),100,
	(37),150,
	(39),-200,
	(40),-150,
	(80),50,
	(82),100,
	(84),900,
	(85),50,
	(86),1500,
	(89),150,
	(90),250,
	(91),50
};

int[]reptable14=
{
	(3),-250,
	(4),550,
	(7),-100,
	(8),-100,
	(9),-100,
	(13),1500,
	(16),-50,
	(17),-50,
	(19),-50,
	(24),-50,
	(32),150,
	(40),-100,
	(84),500,
	(86),1800,
	(88),50
};

int[]reptable15=
{
	(40),500,
	(87),1500
};

int[]reptable16=
{
	(5),-150,
	(6),-1500,
	(7),1500,
	(18),-300,
	(40),100,
	(87),1750
};

int[]reptable17=
{
	(2),-1000,
	(3),2000,
	(5),-500,
	(6),-500,
	(7),200,
	(18),-1000,
	(33),-750,
	(87),1100
};

int[]reptable18=
{
	(2),-300,
	(3),-800,
	(4),-500,
	(5),300,
	(7),-1500,
	(9),-2000,
	(19),-2000,
	(13),250,
	(14),100,
	(16),-550,
	(17),-500,
	(20),50,
	(21),-50,
	(24),-350,
	(33),50,
	(40),-300,
	(81),-50,
	(87),-50,
	(89),100,
	(90),100
};

int[]reptable19=
{
	(9),100,
	(18),-2000
};

int[]reptable20=
{
	(2),400,
	(3),-550,
	(4),-750,
	(5),300,
	(7),-550,
	(8),-250,
	(9),-1000,
	(16),-100,
	(17),-200,
	(18),200,
	(19),-50,
	(24),-50,
	(25),100,
	(26),150,
	(27),100,
	(29),400,
	(30),100,
	(31),50,
	(32),-250,
	(33),50,
	(34),50,
	(36),150,
	(39),-100,
	(40),-50,
	(80),50,
	(82),50,
	(83),50,
	(85),50,
	(89),50,
	(90),50,
	(91),50
};

int[]reptable21={};
int[]reptable22={};
int[]reptable23={};
int[]reptable24=
{
	(5),-500,
	(6),-500,
	(7),150,
	(9),100,
	(13),-100,
	(14),-150,
	(18),-150,
	(20),-50,
	(21),150,
	(29),-50,
	(33),-200,
	(40),550,
	(81),400,
	(83),-100,
	(85),-50,
	(87),100,
	(89),-50
};

int[]reptable25=
{
	(3),-100,
	(4),-500,
	(5),200,
	(6),300,
	(7),-500,
	(9),-500,
	(10),500,
	(11),500,
	(12),500,
	(13),500,
	(14),500,
	(15),500,
	(18),150,
	(19),-50,
	(20),500,
	(24),-600,
	(29),250,
	(30),100,
	(31),150,
	(33),50,
	(34),150,
	(36),500,
	(37),50,
	(38),-50,
	(39),-200,
	(40),-100,
	(80),500,
	(81),300,
	(82),500,
	(83),500,
	(84),250,
	(85),500,
	(86),150,
	(89),1000,
	(90),2000,
	(91),500
};

int[]reptable26=
{
	(3),-100,
	(4),-500,
	(5),200,
	(6),100,
	(7),-500,
	(9),-150,
	(10),100,
	(11),100,
	(12),100,
	(13),250,
	(14),100,
	(15),150,
	(18),500,
	(20),500,
	(24),-500,
	(29),500,
	(30),500,
	(33),50,
	(36),500,
	(39),-50,
	(40),-450,
	(80),50,
	(81),50,
	(82),200,
	(83),250,
	(84),50,
	(85),500,
	(86),500,
	(89),1000,
	(90),2000,
	(91),500
};

int[]reptable27=
{
	(2),100,
	(3),-500,
	(4),-500,
	(5),500,
	(6),500,
	(7),-500,
	(9),-500,
	(13),150,
	(18),500,
	(20),500,
	(24),-150,
	(29),100,
	(30),100,
	(31),50,
	(36),500,
	(39),-150,
	(40),-450,
	(80),50,
	(81),50,
	(82),400,
	(83),250,
	(84),100,
	(85),200,
	(86),100,
	(89),500,
	(90),2000,
	(91),500
};

int[]reptable28={};
int[]reptable29=
{
	(2),200,
	(3),-1000,
	(4),-500,
	(5),250,
	(6),200,
	(7),-1000,
	(8),-250,
	(9),-700,
	(10),-100,
	(13),-150,
	(14),-300,
	(15),-200,
	(16),-400,
	(17),-600,
	(18),200,
	(19),-100,
	(20),150,
	(24),-250,
	(25),50,
	(26),50,
	(27),50,
	(31),150,
	(34),100,
	(36),200,
	(39),-100,
	(40),-150,
	(80),150,
	(81),50,
	(82),50,
	(83),100,
	(85),200,
	(88),-50,
	(89),100,
	(90),250,
	(91),2000
};

int[]reptable30=
{
	(3),-150,
	(4),-500,
	(5),50,
	(6),50,
	(7),-2000,
	(8),-500,
	(9),-1500,
	(13),50,
	(14),50,
	(15),-150,
	(16),-500,
	(17),-1000,
	(18),50,
	(19),-500,
	(20),50,
	(21),-250,
	(24),-100,
	(25),50,
	(26),50,
	(27),50,
	(39),-100,
	(40),-150,
	(80),100,
	(81),200,
	(82),100,
	(83),100,
	(84),50,
	(85),150,
	(86),50,
	(89),400,
	(90),250,
	(91),100
};

int[]reptable31=
{
	(2),50,
	(3),-50,
	(4),-500,
	(5),500,
	(6),500,
	(7),-1000,
	(9),-500,
	(15),50,
	(16),50,
	(17),50,
	(18),200,
	(19),100,
	(20),500,
	(21),100,
	(29),500,
	(30),100,
	(33),1000,
	(36),500,
	(39),-50,
	(91),1500
};

int[]reptable32=
{
	(2),-1000,
	(3),-500,
	(5),100,
	(6),-500,
	(7),-500,
	(9),-500,
	(18),50,
	(19),-500,
	(20),-150,
	(88),300,
	(90),250,
	(91),250
};

int[]reptable33=
{
	(3),-150,
	(4),-500,
	(7),-500,
	(9),-500,
	(24),-600,
	(40),-150
};

int[]reptable34=
{
	(7),-500,
	(2),1000,
	(5),1000,
	(6),1000,
	(8),1000,
	(9),1000,
	(10),1000,
	(11),1000,
	(12),1000,
	(13),1000,
	(14),1000,
	(15),1000,
	(16),1000,
	(17),1000,
	(18),1000,
	(19),1000,
	(20),1000,
	(21),1000,
	(22),1000,
	(23),1000,
	(24),1000,
	(25),1000,
	(26),1000,
	(27),1000,
	(28),1000,
	(29),1000,
	(30),1000,
	(31),1000,
	(32),1000,
	(33),1000,
	(35),1000,
	(35),1000,
	(36),1000,
	(37),1000,
	(38),1000,
	(39),1000,
	(40),1000,
	(41),1000,
	(80),1000,
	(81),1000,
	(82),1000,
	(83),1000,
	(84),1000,
	(85),1000,
	(86),1000,
	(87),1000,
	(88),1000,
	(89),1000,
	(90),1000,
	(91),1000
};

int[]reptable35={};
int[]reptable36=
{
	(7),-800,
	(90),1000
};

int[]reptable37=
{
	(4),300,
	(5),-200,
	(6),-950,
	(7),-1000,
	(8),-800,
	(9),-2000,
	(18),500,
	(19),-2000,
	(32),150,
	(33),50,
	(39),200,
	(40),-100,
	(81),-150,
	(83),-150
};

int[]reptable38=
{
	(9),700,
	(81),1000
};

int[]reptable39=
{
	(2),-1500,
	(3),-500,
	(4),2000,
	(5),200,
	(6),100,
	(7),-450,
	(8),-150,
	(9),-1000,
	(13),500,
	(14),500,
	(29),-100,
	(30),300,
	(37),750,
	(86),50,
	(88),200,
	(90),900
};

int[]reptable40=
{
	(8),300,
	(9),-50,
	(15),200,
	(16),100,
	(17),50,
	(18),-100,
	(24),50,
	(33),-100,
	(87),1000
};

int[]reptable41={};
int[]reptable42={};
int[]reptable43=
{
	(1),0,
	(8),500,
	(15),200,
	(16),300,
	(17),250,
	(87),1000
};
int[]reptable44={};
int[]reptable45={};
int[]reptable46={};
int[]reptable47={};
int[]reptable48={};
int[]reptable49={};
int[]reptable50={};
int[]reptable51={};
int[]reptable52={};
int[]reptable53={};
int[]reptable54={};
int[]reptable55={};
int[]reptable56={};
int[]reptable57={};
int[]reptable58={};
int[]reptable59={};
int[]reptable60={};
int[]reptable61={};
int[]reptable62={};
int[]reptable63={};
int[]reptable64={};
int[]reptable65={};
int[]reptable66={};
int[]reptable67={};
int[]reptable68={};
int[]reptable69={};
int[]reptable70={};
int[]reptable71={};
int[]reptable72={};
int[]reptable73={};
int[]reptable74={};
int[]reptable75={};
int[]reptable76={};
int[]reptable77={};
int[]reptable78={};
int[]reptable79={};
int[]reptable80=
{
	(2),500,
	(3),-1000,
	(4),-1250,
	(5),50,
	(6),150,
	(7),-800,
	(8),-100,
	(9),-2000,
	(10),100,
	(11),50,
	(12),50,
	(13),100,
	(15),-50,
	(16),-100,
	(17),-150,
	(18),100,
	(19),-500,
	(21),-250,
	(24),-150,
	(37),250
};

int[]reptable81=
{
	(2),100,
	(3),-200,
	(4),-100,
	(5),-50,
	(7),100,
	(18),-100,
	(19),100,
	(24),50,
	(33),-100,
	(37),-150,
	(38),500
};

int[]reptable82=
{
	(7),-500,
	(9),-500,
	(10),1000,
	(19),-100,
	(20),100,
	(21),-50,
	(24),-150,
	(25),150,
	(26),150,
	(27),150,
	(33),50,
	(34),250,
	(36),150,
	(37),50,
	(39),-50,
	(40),-50,
	(80),100,
	(83),50,
	(84),50,
	(85),50,
	(86),50,
	(87),-50,
	(89),100,
	(90),200,
	(91),50
};

int[]reptable83=
{
	(3),-100,
	(4),-150,
	(5),-50,
	(6),1000,
	(7),-2000,
	(9),-500,
	(16),-500,
	(21),-50,
	(24),-50,
	(25),100,
	(26),100,
	(27),50,
	(33),100,
	(34),100,
	(36),150,
	(37),50,
	(40),-50,
	(80),50,
	(82),50,
	(85),50,
	(86),50,
	(87),-50,
	(88),-50,
	(89),300,
	(90),500,
	(91),50
};

int[]reptable84=
{
	(3),-500,
	(4),500,
	(6),-100,
	(7),-250,
	(8),-50,
	(13),500,
	(14),600,
	(25),100,
	(26),100,
	(27),100,
	(30),250,
	(32),50,
	(34),100,
	(36),50,
	(40),-100,
	(86),500,
	(88),1000,
	(89),50,
	(90),100
};

int[]reptable85=
{
	(6),500,
	(7),-500,
	(8),-100,
	(9),-200,
	(11),2000,
	(12),2000,
	(13),50,
	(25),50,
	(26),50,
	(27),50,
	(80),100,
	(81),50,
	(82),150,
	(83),150,
	(86),100,
	(87),100,
	(89),50,
	(90),150,
	(91),50
};

int[]reptable86=
{
	(3),-150,
	(4),500,
	(13),1000,
	(14),1500,
	(25),100,
	(26),100,
	(27),100,
	(30),150,
	(34),200,
	(36),50,
	(40),-50,
	(84),700,
	(88),450,
	(89),100,
	(90),350
};

int[]reptable87=
{
	(3),50,
	(4),-150,
	(5),-200,
	(6),-100,
	(7),350,
	(8),2000,
	(15),2000,
	(16),2000,
	(17),1000,
	(18),-150,
	(33),-400,
	(40),1100,
	(81),100
};

int[]reptable88={};
int[]reptable89=
{
	(4),-150,
	(5),400,
	(6),100,
	(7),-100,
	(8),-50,
	(9),-500,
	(13),50,
	(18),350,
	(19),-50,
	(20),50,
	(24),-100,
	(25),100,
	(26),100,
	(27),100,
	(30),50,
	(31),50,
	(32),50,
	(33),200,
	(34),100,
	(36),150,
	(40),-50,
	(80),50,
	(82),100,
	(83),50,
	(85),50,
	(87),-50,
	(90),500,
	(91),150
};

int[]reptable90=
{
	(2),50,
	(3),-250,
	(4),-500,
	(5),700,
	(6),200,
	(7),-350,
	(8),-50,
	(9),-700,
	(13),250,
	(14),50,
	(15),50,
	(16),-150,
	(17),-200,
	(18),500,
	(19),-200,
	(20),200,
	(21),-50,
	(25),2000,
	(26),2000,
	(27),2000,
	(30),50,
	(32),50,
	(33),250,
	(34),2000,
	(36),2000,
	(39),100,
	(40),-300,
	(82),100,
	(83),100,
	(84),50,
	(85),100,
	(89),600,
	(91),300
};

int[]reptable91=
{
	(3),-100,
	(4),-500,
	(5),500,
	(6),50,
	(7),-250,
	(9),-150,
	(18),150,
	(19),-100,
	(24),-50,
	(25),500,
	(26),500,
	(27),500,
	(29),2000,
	(30),500,
	(31),750,
	(32),150,
	(33),450,
	(34),500,
	(36),100,
	(40),-50,
	(89),150,
	(90),250
};

int[]reptable92={};
int[]reptable93={};
int[]reptable94={};
int[]reptable95={};
int[]reptable96={};
int[]reptable97={};
int[]reptable98={};
int[]reptable99={};

int[]alltable00={};
int[]alltable01={};
int[]alltable02=
{
	(3),(2),
	(4),(2),
	(7),(2),
	(8),(2),
	(16),(2),
	(17),(2)
};

int[]alltable03=
{
	(2),(2),
	(4),(2),
	(5),(2),
	(6),(2),
	(7),(2),
	
	(13),(2),
	(14),(2),
	(17),(1),
	(18),(2),
	(19),(2),
	(20),(2),
	(21),(2),
	(24),(2),
	(25),(2),
	(26),(2),
	(27),(2),
	(29),(2),
	(30),(2),
	(31),(2),
	(32),(2),
	(33),(2),
	(34),(2),
	(37),(2),
	(38),(2),
	(39),(2),
	(80),(2),
	(81),(2),
	(82),(2),
	(83),(2),
	(84),(2),
	(85),(2),
	(86),(2),
	(88),(2),
	(89),(2),
	(90),(2),
	(91),(2)
};

int[]alltable04=
{
	(2),(2),
	(3),(2),
	(5),(2),
	(13),(2),
	(14),(1),
	(18),(2),
	(20),(2),
	(24),(2),
	(25),(2),
	(26),(2),
	(27),(2),
	(29),(2),
	(30),(2),
	(31),(2),
	(33),(2),
	(34),(2),
	(36),(2),
	(39),(1),
	(87),(2),
	(90),(2),
	(91),(2)
};

int[]alltable05=
{
	(2),(1),
	(3),(2),
	(4),(2),
	(7),(2),
	(9),(2),
	(18),(1),
	(24),(2),
	(25),(1),
	(26),(1),
	(27),(1),
	(34),(1),
	(36),(1),
	(39),(2),
	(88),(2),
	(20),(1)
};

int[]alltable06=
{
	(3),(2),
	(4),(2),
	(7),(2),
	(9),(1),
	(16),(2),
	(20),(1),
	(25),(1),
	(26),(1),
	(27),(1),
	(34),(1),
	(36),(1),
	(38),(2),
	(39),(2),
	(83),(1),
	(84),(2),
	(88),(2)
};

int[]alltable07=
{
	(2),(2),
	(3),(2),
	(4),(2),
	(5),(2),
	(6),(2),
	(11),(2),
	(12),(2),
	(13),(2),
	(18),(2),
	(20),(2),
	(25),(2),
	(26),(2),
	(27),(2),
	(29),(2),
	(30),(2),
	(31),(2),
	(33),(2),
	(34),(2),
	(36),(2),
	(37),(2),
	(38),(2),
	(39),(2),
	(80),(2),
	(81),(2),
	(82),(2),
	(83),(2),
	(84),(2),
	(85),(2),
	(86),(2),
	(87),(1),
	(88),(2),
	(89),(2),
	(91),(2)
};

int[]alltable08=
{
	(4),(2),
	(5),(2),
	(6),(2),
	(7),(1),
	(18),(2),
	(29),(2),
	(30),(2),
	(31),(2),
	(32),(2),
	(33),(2),
	(39),(2),
	(83),(2),
	(85),(2),
	(87),(1),
	(88),(2),
	(89),(2)
};

int[]alltable09=
{
	(2),(2),
	(3),(2),
	(4),(2),
	(5),(2),
	(6),(2),
	(10),(2),
	(11),(2),
	(12),(2),
	(13),(2),
	(14),(2),
	(18),(2),
	(25),(2),
	(26),(2),
	(27),(2),
	(29),(2),
	(30),(2),
	(33),(2),
	(34),(2),
	(36),(2),
	(37),(2),
	(39),(2),
	(80),(2),
	(82),(2),
	(83),(2),
	(84),(2),
	(85),(2),
	(86),(2),
	(88),(2),
	(89),(2),
	(90),(2),
	(91),(2)
};

int[]alltable10=
{
	(7),(2),
	(9),(2),
	(82),(1)
};

int[]alltable11=
{
	(85),(1)
};

int[]alltable12=
{
	(85),(1)
};

int[]alltable13=
{
	(3),(2),
	(7),(2),
	(9),(2),
	(14),(1),
	(19),(2),
	(21),(2),
	(84),(1),
	(86),(1)
};

int[]alltable14=
{
	(3),(2),
	(4),(1),
	(7),(2),
	(13),(1),
	(86),(1),
	(88),(1)
};

int[]alltable15=
{
	(3),(2),
	(4),(2),
	(9),(2),
	(32),(2),
	(39),(2),
	(40),(1),
	(87),(1)
};

int[]alltable16=
{
	(2),(2),
	(3),(2),
	(4),(2),
	(5),(2),
	(6),(2),
	(7),(1),
	(18),(2),
	(32),(2),
	(33),(2),
	(37),(2),
	(39),(2),
	(83),(2),
	(87),(1)
};

int[]alltable17=
{
	(2),(2),
	(3),(1),
	(18),(2),
	(33),(2),
	(87),(1)
};

int[]alltable18=
{
	(2),(1),
	(3),(2),
	(4),(2),
	(5),(1),
	(7),(2),
	(8),(2),
	(9),(2),
	(19),(2),
	(15),(2),
	(16),(2),
	(17),(2),
	(21),(2),
	(24),(2),
	(39),(2)
};

int[]alltable19=
{
	(37),(2),
	(18),(2)
};

int[]alltable20=
{
	(3),(2),
	(4),(2),
	(7),(2),
	(9),(2),
	(19),(2),
	(39),(2)
};

int[]alltable21={};
int[]alltable22={};
int[]alltable23={};
int[]alltable24=
{
	(2),(2)
};

int[]alltable25=
{
	(7),(2),
	(90),(1)
};

int[]alltable26=
{
	(7),(2),
	(90),(1)
};

int[]alltable27=
{
	(7),(2),
	(90),(1)
};

int[]alltable28={};
int[]alltable29=
{
	(4),(2),
	(7),(2),
	(31),(1),
	(39),(2),
	(88),(2),
	(91),(1)
};

int[]alltable30=
{
	(3),(2),
	(4),(2),
	(7),(2),
	(9),(2),
	(19),(2),
	(21),(2),
	(24),(2),
	(39),(2),
	(91),(1)
};

int[]alltable31=
{
	(91),(1)
};

int[]alltable32=
{
	(27),(1),
	(90),(1),
	(91),(1),
	(5),(1)
};

int[]alltable33=
{
	(7),(2),
	(8),(2),
	(9),(2),
	(16),(2),
	(17),(2),
	(18),(1),
	(19),(2),
	(21),(2),
	(31),(1)
};

int[]alltable34=
{
	(2),(1),
	(5),(1),
	(6),(1),
	(8),(1),
	(9),(1),
	(10),(1),
	(11),(1),
	(12),(1),
	(13),(1),
	(14),(1),
	(15),(1),
	(16),(1),
	(17),(1),
	(18),(1),
	(19),(1),
	(20),(1),
	(21),(1),
	(22),(1),
	(23),(1),
	(24),(1),
	(25),(1),
	(26),(1),
	(27),(1),
	(28),(1),
	(29),(1),
	(30),(1),
	(31),(1),
	(32),(1),
	(33),(1),
	(35),(1),
	(35),(1),
	(36),(1),
	(37),(1),
	(38),(1),
	(39),(1),
	(40),(1),
	(41),(1),
	(80),(1),
	(81),(1),
	(82),(1),
	(83),(1),
	(84),(1),
	(85),(1),
	(86),(1),
	(87),(1),
	(88),(1),
	(89),(1),
	(90),(1),
	(91),(1)
};

int[]alltable35={};
int[]alltable36=
{
	(7),(2),
	(90),(1)
};

int[]alltable37=
{
	(3),(2),
	(4),(2),
	(6),(2),
	(7),(2),
	(9),(2),
	(18),(1),
	(19),(2),
	(39),(2),
	(32),(1)
};

int[]alltable38=
{
	(3),(2),
	(7),(2),
	(8),(2),
	(16),(2),
	(17),(2),
	(18),(2),
	(19),(2),
	(33),(2),
	(81),(1)
};

int[]alltable39=
{
	(2),(2),
	(4),(1),
	(32),(2)
};

int[]alltable40=
{
	(15),(1),
	(87),(1)
};

int[]alltable41={};
int[]alltable42={};
int[]alltable43=
{
	(87),(1)
};
int[]alltable44={};
int[]alltable45={};
int[]alltable46={};
int[]alltable47={};
int[]alltable48={};
int[]alltable49={};
int[]alltable50={};
int[]alltable51={};
int[]alltable52={};
int[]alltable53={};
int[]alltable54={};
int[]alltable55={};
int[]alltable56={};
int[]alltable57={};
int[]alltable58={};
int[]alltable59={};
int[]alltable60={};
int[]alltable61={};
int[]alltable62={};
int[]alltable63={};
int[]alltable64={};
int[]alltable65={};
int[]alltable66={};
int[]alltable67={};
int[]alltable68={};
int[]alltable69={};
int[]alltable70={};
int[]alltable71={};
int[]alltable72={};
int[]alltable73={};
int[]alltable74={};
int[]alltable75={};
int[]alltable76={};
int[]alltable77={};
int[]alltable78={};
int[]alltable79={};
int[]alltable80=
{
	(3),(2),
	(4),(2),
	(7),(2),
	(9),(2),
	(18),(1),
	(19),(2),
	(37),(1),
	(39),(2)
};

int[]alltable81=
{
	(4),(2),
	(7),(1),
	(9),(1),
	(24),(1),
	(37),(2),
	(38),(1),
	(87),(1)
};

int[]alltable82=
{
	(7),(2),
	(9),(2),
	(10),(1),
	(25),(1),
	(26),(1),
	(27),(1),
	(34),(1),
	(36),(1),
	(83),(1)
};

int[]alltable83=
{
	(3),(2),
	(4),(2),
	(6),(1),
	(7),(2),
	(8),(2),
	(9),(2),
	(13),(1),
	(15),(2),
	(16),(2),
	(17),(2),
	(19),(2),
	(20),(1),
	(25),(1),
	(26),(1),
	(27),(1),
	(32),(1),
	(34),(1),
	(36),(1),
	(39),(2),
	(40),(2),
	(90),(1)
};

int[]alltable84=
{
	(3),(2),
	(7),(2),
	(9),(2),
	(13),(1),
	(14),(1),
	(25),(1),
	(26),(1),
	(27),(1),
	(30),(1),
	(34),(1),
	(36),(1),
	(86),(1),
	(88),(1)
};

int[]alltable85=
{
	(3),(2),
	(4),(2),
	(6),(1),
	(8),(1),
	(11),(1),
	(12),(1),
	(25),(1),
	(26),(1),
	(27),(1),
	(32),(1),
	(34),(1),
	(36),(1),
	(39),(2)
};

int[]alltable86=
{
	(3),(2),
	(7),(2),
	(9),(2),
	(13),(1),
	(14),(1),
	(19),(2),
	(30),(1),
	(84),(1),
	(88),(1)
};

int[]alltable87=
{
	(8),(1),
	(15),(1),
	(16),(1),
	(17),(1),
	(43),(1),
	(40),(1),
	(85),(1)
};

int[]alltable88=
{
	(3),(2),
	(84),(1),
	(86),(1)
};

int[]alltable89=
{
	(3),(2),
	(4),(2),
	(7),(2),
	(9),(2),
	(18),(1),
	(24),(2),
	(32),(1),
	(39),(2),
	(90),(1)
};

int[]alltable90=
{
	(3),(2),
	(4),(2),
	(5),(1),
	(7),(2),
	(9),(2),
	(18),(1),
	(19),(2),
	(25),(1),
	(26),(1),
	(27),(1),
	(34),(1),
	(36),(1),
	(40),(2),
	(89),(1)
};

int[]alltable91=
{
	(3),(2),
	(4),(2),
	(7),(2),
	(9),(2),
	(24),(2),
	(25),(1),
	(26),(1),
	(27),(1),
	(29),(1),
	(31),(1),
	(32),(1),
	(34),(1),
	(36),(1),
	(39),(2),
	(90),(1)
};

int[]alltable92={};
int[]alltable93={};
int[]alltable94={};
int[]alltable95={};
int[]alltable96={};
int[]alltable97={};
int[]alltable98={};
int[]alltable99={};
int[]@[]ReputationMods={reptable00,reptable01,reptable02,reptable03,reptable04,reptable05,reptable06,reptable07,reptable08,reptable09,reptable10,reptable11,reptable12,reptable13,reptable14,reptable15,reptable16,reptable17,reptable18,reptable19,reptable20,reptable21,reptable22,reptable23,reptable24,reptable25,reptable26,reptable27,reptable28,reptable29,reptable30,reptable31,reptable32,reptable33,reptable34,reptable35,reptable36,reptable37,reptable38,reptable39,reptable40,reptable41,reptable42,reptable43,reptable44,reptable45,reptable46,reptable47,reptable48,reptable49,reptable50,reptable51,reptable52,reptable53,reptable54,reptable55,reptable56,reptable57,reptable58,reptable59,reptable60,reptable61,reptable62,reptable63,reptable64,reptable65,reptable66,reptable67,reptable68,reptable69,reptable70,reptable71,reptable72,reptable73,reptable74,reptable75,reptable76,reptable77,reptable78,reptable79,reptable80,reptable81,reptable82,reptable83,reptable84,reptable85,reptable86,reptable87,reptable88,reptable89,reptable90,reptable91,reptable92,reptable93,reptable94,reptable95,reptable96,reptable97,reptable98,reptable99};
int[]@[]AllianceMods={alltable00,alltable01,alltable02,alltable03,alltable04,alltable05,alltable06,alltable07,alltable08,alltable09,alltable10,alltable11,alltable12,alltable13,alltable14,alltable15,alltable16,alltable17,alltable18,alltable19,alltable20,alltable21,alltable22,alltable23,alltable24,alltable25,alltable26,alltable27,alltable28,alltable29,alltable30,alltable31,alltable32,alltable33,alltable34,alltable35,alltable36,alltable37,alltable38,alltable39,alltable40,alltable41,alltable42,alltable43,alltable44,alltable45,alltable46,alltable47,alltable48,alltable49,alltable50,alltable51,alltable52,alltable53,alltable54,alltable55,alltable56,alltable57,alltable58,alltable59,alltable60,alltable61,alltable62,alltable63,alltable64,alltable65,alltable66,alltable67,alltable68,alltable69,alltable70,alltable71,alltable72,alltable73,alltable74,alltable75,alltable76,alltable77,alltable78,alltable79,alltable80,alltable81,alltable82,alltable83,alltable84,alltable85,alltable86,alltable87,alltable88,alltable89,alltable90,alltable91,alltable92,alltable93,alltable94,alltable95,alltable96,alltable97,alltable98,alltable99}; 

void InitGroups()
{
	for(uint i=0,j=ReputationModifiersSQ.length();i<j;i++)
	ReputationModifiersSQ[i]=0;
	for(uint i=0,j=GroupAlliancesSQ.length();i<j;i++)
	GroupAlliancesSQ[i]=0;
	
	for(uint i=0,j=ReputationMods.length();i<j;i++)
	for(uint k=0,l=ReputationMods[i].length();k<l;k+=2)
	ReputationModifiersSQ[(i*(100)+ReputationMods[i][k])]=ReputationMods[i][k+1];
	
	for(uint i=0,j=AllianceMods.length();i<j;i++)
	for(uint k=0,l=AllianceMods[i].length();k<l;k+=2)
	GroupAlliancesSQ[(i*(100)+AllianceMods[i][k])]=AllianceMods[i][k+1];        
	
}  

void ApplyReputationModifiers(Critter&cr,uint index)
{
	if(!(index>=2&&index<=99))
	return;
	for(uint i=0,j=ReputationMods[index].length();i<j;i+=2)
	cr.ReputationBase[ReputationMods[index][i]]=cr.Reputation[ReputationMods[index][i]]+ReputationMods[index][i+1];
}

void ApplyReputationModifiers(Critter&cr,uint index,float fraction)
{
	if(!(index>=2&&index<=99))
	return;
	for(uint i=0,j=ReputationMods[index].length();i<j;i+=2)
	cr.ReputationBase[ReputationMods[index][i]]=int(cr.Reputation[ReputationMods[index][i]]+float(ReputationMods[index][i+1]));
}

void ApplyReputationModifiers(Critter&cr,uint index,int num,int den)
{
	if(!(index>=2&&index<=99))
	return;
	for(uint i=0,j=ReputationMods[index].length();i<j;i+=2)
	cr.ReputationBase[ReputationMods[index][i]]=cr.Reputation[ReputationMods[index][i]]+(num*ReputationMods[index][i+1])/den;
}

int GetReputationModifier(uint fac1,uint fac2)
{
	if(!((((fac1)<(fac2))?(fac1):(fac2))>=2&&(((fac1)<(fac2))?(fac1):(fac2))<=99)||!((((fac1)>(fac2))?(fac1):(fac2))>=2&&(((fac1)>(fac2))?(fac1):(fac2))<=99))
	return 0;
	return ReputationModifiersSQ[(fac1*(100)+fac2)];
}

int GetUniform(Critter&cr,int&factionOut)
{
	Item@armor=cr.GetItem(0,(3));
	if((@armor!=null))
	{
		int faction;
		int uniformPid=armor.GetProtoId();
		if(FactionUniformsDictionary.get(""+uniformPid,faction))
		{
			factionOut=faction;
			Item@head=cr.GetItem(0,(4));
			if((@head!=null)&&head.GetType()==(1))
			{
				int helmetUniformPid=0;
				UniformHelmetsDictionary.get(""+head.GetProtoId(),helmetUniformPid);
				if(helmetUniformPid==uniformPid)
				return(3);
				else
				return(1);
			}
			else
			return(2);
		}
		else
		{
			factionOut=0;
			return(0);
		}
	}
	return(0);
}

bool HasFactionUniform(Critter&cr,int factionIn,int minStatus)
{
	int faction=0;
	int uniform=GetUniform(cr,faction);
	return(faction!=0&&factionIn==faction&&uniform>=minStatus);
}

int GetUniformFaction(Critter&cr)
{
	Item@armor=cr.GetItem(0,(3));
	if((@armor!=null))
	{
		int faction;
		if(FactionUniformsDictionary.get(""+armor.GetProtoId(),faction))
		{
			return faction;
		}
	}
	return 0;
}

int GetGroupsStatus(uint fac1,uint fac2)
{
	if(!((((fac1)<(fac2))?(fac1):(fac2))>=2&&(((fac1)<(fac2))?(fac1):(fac2))<=99)||!((((fac1)>(fac2))?(fac1):(fac2))>=2&&(((fac1)>(fac2))?(fac1):(fac2))<=99))
	return(0);
	if(fac1==fac2)
	return(1);
	return GroupAlliancesSQ[(fac1*(100)+fac2)];
}

int GetGroupsStatus(Critter&c2,Critter&c1)
{
	if(c2.IsPlayer())
	{
		return(0);
	}
	
	int groupStatus=GetGroupsStatus((c1.Param[(106)]),(c2.Param[(106)]));
	int uniformFaction=0;
	int uniformStatus=GetUniform(c2,uniformFaction);
	int uniformGroupStatus=GetGroupsStatus((c1.Param[(106)]),uniformFaction);
	if(uniformGroupStatus==(2)||(groupStatus==(2)&&!(uniformGroupStatus==(1)&&uniformStatus>(1))))
	{
		return(2);
	}
	if(groupStatus==(1))
	return(1);
	
	return(0); 
	
}

void ReputationsInit(Critter&cr)
{
	uint index=(cr.Param[(106)]);
	if(!(index>=2&&index<=99))
	return;
	
	for(uint k=0,l=ReputationMods[index].length();k<l;k+=2)
	cr.ReputationBase[ReputationMods[index][k]]=cr.Reputation[ReputationMods[index][k]]+ReputationMods[index][k+1];
}    

void FeedReputations(Critter@cr,uint index,int cap)
{
	if(index>=AllianceMods.length())
	return;
	for(uint i=0,j=AllianceMods[index].length();i<j;i+=2)
	{
		if(AllianceMods[index][i+1]!=(2))
		continue;
		
		uint faction=AllianceMods[index][i];
		int mod=GetReputationModifier(index,faction); 
		
		int val=-mod/(100);
		val=(((1)>(val))?(1):(val));
		int rep=cr.Reputation[faction];
		{};
		if(rep>=cap)
		continue;
		rep+=val;
		if(rep>cap)
		rep=cap;
		cr.ReputationBase[faction]=rep;
		
	}
}
