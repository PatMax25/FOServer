

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}                                            

import void MoveCars(Map&from,Map&to)from"car";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsCompanion(Critter&follower)from"follower";
import bool isCar(Item@onItem)from"item_lock";

void map_item(Item&item,bool firstTime)
{
	item.SetEvent((2),"_MapUse");
}

bool _MapUse(Item&item,Critter&cr,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if((@onCritter!=null)||(@onItem!=null)||(@onScenery!=null))
	{
		cr.SayMsg((11),(3),(10202));
		return(true);
	}
	Map@map=cr.GetMap();
	
	if(!(@map!=null))
	{
		cr.Say((11),"Invalid map.");
		return(false);
	}
	if(item.Val0==0)
	{
		cr.Say((11),"map wrogly spawned");
		return(false);
	}
	if(!IsEncounterMap(map))
	{
		cr.Say((11),"Only on encounter");
		return(false);
	}
	uint location=item.Val0; 
	
	array<Critter@>players={cr};
	int id=CreateLocation(location,cr.WorldX,cr.WorldY,players);
	Location@loc=GetLocation(id);
	Map@base=loc.GetMapByIndex(0);
	MoveCars(map,base);
	uint16 x=1;
	uint16 y=2;
	base.GetEntireCoords(0,0,x,y);
	cr.TransitToMap(base.Id,x,y,cr.Dir);
	cr.Say((11),"|-1 To manage with base use type command ~base");
	loc.Color=(uint(((180)<<24)|(((46)&0xFF)<<16)|(((111)&0xFF)<<8)|((146)&0xFF)));
	loc.Update();
	DeleteItem(item);
	return(true);
}

void map_scenery(Item&item,bool firstTime)
{
	item.SetEvent((4),"skill_scenery");
	item.SetEvent((3),"_map_use_on");
}

void map_empty(Item&item,bool firstTime)
{
	item.SetEvent((2),"_MapEmptyUse");
}

bool _MapEmptyUse(Item&item,Critter&player,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if((@onCritter!=null)||(@onItem!=null)||(@onScenery!=null))
	return false;
	bool locations=false;
	if(item.Val0==0)
	{
		player.Say((11),"Map its empty");
		return true;
	}
	player.SetKnownLoc(true,item.Val0);
	if(item.Val1>0)
	{
		player.SetKnownLoc(true,item.Val1);
		locations=true;
	}
	if(item.Val2>0)
	player.SetKnownLoc(true,item.Val2);
	if(item.Val3>0)
	player.SetKnownLoc(true,item.Val3);
	if(item.Val4>0)
	player.SetKnownLoc(true,item.Val4);
	if(item.Val5>0)
	player.SetKnownLoc(true,item.Val5);
	if(item.Val6>0)
	player.SetKnownLoc(true,item.Val6);
	if(item.Val7>0)
	player.SetKnownLoc(true,item.Val7);
	if(item.Val8>0)
	player.SetKnownLoc(true,item.Val8);
	if(item.Val9>0)
	player.SetKnownLoc(true,item.Val9);
	if(locations)
	player.Say((11),"Locations marked in your pipboy");
	else player.Say((11),"Location marked in your pipboy");
	return true;
}

bool _map_use_on(Item&item,Critter&cr,Item@usedItem)
{
	if(!(@usedItem!=null))
	return false;
	if(item.Val0>0)
	{
		cr.Say((11),"Sharing mode its disabled");
		return true;
	}
	uint16 itemPid=usedItem.GetProtoId();
	if((int(itemPid)==(51)))
	{
		DeleteItem(usedItem);
		DeleteLocation(cr.GetMap().GetLocation().Id);
		return true;
	}
	if((int(itemPid)==(1276)))
	{
		if(usedItem.Val0==0)
		{
			usedItem.Val0=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		if(usedItem.Val1==0)
		{
			usedItem.Val1=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		if(usedItem.Val2==0)
		{
			usedItem.Val2=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		if(usedItem.Val3==0)
		{
			usedItem.Val3=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		if(usedItem.Val4==0)
		{
			usedItem.Val4=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		if(usedItem.Val5==0)
		{
			usedItem.Val5=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		if(usedItem.Val6==0)
		{
			usedItem.Val6=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		if(usedItem.Val7==0)
		{
			usedItem.Val7=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		if(usedItem.Val8==0)
		{
			usedItem.Val8=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		if(usedItem.Val9==0)
		{
			usedItem.Val9=cr.GetMap().GetLocation().Id;
			cr.Say((11),"Map Set Successfull");
			return true;
		}
		cr.Say((11),"No space on map anymore, use another one");
		return true;
	}
	
	return false;
}

bool skill_scenery(Item&item,Critter&player,int skill)
{
	if(skill==(212)&&player.IsKnownLoc(true,player.GetMap().GetLocation().Id))
	{
		if(item.Val0==0)
		{
			item.Val0=1;
			player.Say((11),"Sharing disabled");
			return(true);
		}
		else
		{
			item.Val0=0;
			player.Say((11),"Sharing enabled");
			return(true);
		}
	}
	if(player.IsKnownLoc(true,player.GetMap().GetLocation().Id)&&item.Val0==0)
	{
		player.Say((11),"You already know this location, to disable sharing use science skill");
		return(true);
		
	}
	if(player.IsKnownLoc(true,player.GetMap().GetLocation().Id)&&item.Val0==1)
	{
		player.Say((11),"You already know this location, to enable sharing use science skill");
		return(true);
		
	}
	if(!player.IsKnownLoc(true,player.GetMap().GetLocation().Id)&&item.Val0==1)
	{
		player.Say((11),"location is not able to share, contact with owner");
		return(true);
	}
	if(!player.IsKnownLoc(true,player.GetMap().GetLocation().Id)&&item.Val0==0)
	{
		player.Say((11),"Marked in your pipboy");
		player.SetKnownLoc(true,player.GetMap().GetLocation().Id);
		return(true);
	}
	return false;
}

array<uint>tier0bases={1200,1201,1202};
uint last0=2;
array<uint>tier1bases={1203,1204,1205};
uint last1=2;
array<uint>tier2bases={529,524,523,520,460,459,458,246,245,210,207,205,204,203,202,75};
uint last2=15;
array<uint>tier3bases={435,436,437,439,481,521,208,528};
uint last3=7;
array<uint>tier4bases={440,463,464,467,468,469,470,471,472,480,482,518,525};
uint last4=12;
uint last5=12;
array<uint>tier6bases={373,374,375,383,384,1206};
uint last6=5;
array<uint>tier5bases={440,463,464,467,468,469,470,471,472,480,482,518,525};

void r_addbasemap(Critter&player,Critter@npc)
{
	addbasemap(player);
}
void addbasemap(Critter&player)
{
	Item@it=player.AddItem((1274),1);
	switch(Random(1,100))
	{
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
		case 27:
		case 28:
		case 29:
		case 30:
		it.Val0=tier1bases[Random(0,last1)];break;
		case 31:
		case 32:
		case 33:
		case 34:
		case 35:
		case 36:
		case 37:
		case 38:
		case 39:
		case 40:
		case 41:
		case 42:
		case 43:
		case 44:
		case 45:
		it.Val0=tier2bases[Random(0,last2)];break;
		case 46:
		case 47:
		case 48:
		case 49:
		case 50:
		it.Val0=tier3bases[Random(0,last3)];break;
		case 51:
		it.Val0=tier4bases[Random(0,last4)];break;
		case 100:
		if(Random(1,4)==4)
		it.Val0=tier5bases[Random(0,last5)];
		else if(Random(1,100000)==1)
		it.Val0=tier6bases[Random(0,last6)];
		else
		it.Val0=tier0bases[Random(0,last0)];
		break;
		default:
		it.Val0=tier0bases[Random(0,last0)];break;
	}
	it.Update();
}

void addbasemap(Item&con)
{
	Item@it=con.AddItem((1274),1,0);
	switch(Random(1,100))
	{
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
		case 26:
		case 27:
		case 28:
		case 29:
		case 30:
		it.Val0=tier1bases[Random(0,last1)];break;
		case 31:
		case 32:
		case 33:
		case 34:
		case 35:
		case 36:
		case 37:
		case 38:
		case 39:
		case 40:
		case 41:
		case 42:
		case 43:
		case 44:
		case 45:
		it.Val0=tier2bases[Random(0,last2)];break;
		case 46:
		case 47:
		case 48:
		case 49:
		case 50:
		it.Val0=tier3bases[Random(0,last3)];break;
		case 51:
		it.Val0=tier4bases[Random(0,last4)];break;
		case 100:
		if(Random(1,4)==4)
		it.Val0=tier5bases[Random(0,last4)];
		else if(Random(1,100000)==1)
		it.Val0=tier6bases[Random(0,last6)];
		else
		it.Val0=tier0bases[Random(0,last0)];
		break;
		default:
		it.Val0=tier0bases[Random(0,last0)];break;
	}
	it.Update();
}
import void InitializeDynamicMob(Map&map)from"mob_dynamic";
import void InitializeDynamicMob(Map&map,bool withBoss)from"mob_dynamic";
import bool IsBase(Map@map)from"world_common";
import bool IsTent(Map@map)from"world_common";

void map_init(Map&map,bool firstTime)
{ 
	
}

void updatetentsandbases(Critter&player,int fortest,int r,int)
{
	array<Location@>locs;
	uint num=0;
	for(uint i=0;i<2000;i++)
	{
		num+=GetAllLocations(i,locs);
	}
	for(uint i=0;i<num;i++)
	{
		if(!(@locs[i]!=null))
		continue;
		array<Map@>maps;
		locs[i].GetMaps(maps);
		if(IsBase(maps[0])||IsTent(maps[0]))
		{
			maps[0].SetEvent((1),"_locupdate");
			maps[0].SetLoopTime(0,1000000);
		}
	}
}

void dungeon_init_1(Map&map,bool firstTime)
{
	if(firstTime)
	switch(map.GetProtoId())
	{
		case(627):
		case(628):
		case(629):
		case(630):
		case(631):
		case(633):
		InitializeDynamicMob(map);break;
		case(632):
		InitializeDynamicMob(map,true);break;
	}
}

void _locupdate(Map&map)
{
	bool carinside=false;
	bool playerinside=false;
	bool companioninside=false;
	Location@loc=map.GetLocation();
	array<Critter@>crits;
	uint num=map.GetCritters(0,(0x0F),crits);
	for(uint i=0;i<crits.length();i++)
	{
		if(crits[i].IsPlayer())
		playerinside=true;
		if(IsCompanion(crits[i]))
		companioninside=true;
	}
	array<Item@>items;
	uint n=map.GetItems(0,items);
	for(uint i=0;i<items.length();i++)
	{
		if(isCar(items[i]))
		carinside=true;
	}
	
	if(carinside&&playerinside&&companioninside)
	{
		loc.Color=(uint(((180)<<24)|(((0)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)));
		loc.Update();
	}
	if(!carinside&&playerinside&&companioninside)
	{
		loc.Color=(uint(((180)<<24)|(((0)&0xFF)<<16)|(((0)&0xFF)<<8)|((255)&0xFF)));
		loc.Update();
	}
	if(carinside&&!playerinside&&companioninside)
	{
		loc.Color=(uint(((180)<<24)|(((255)&0xFF)<<16)|(((128)&0xFF)<<8)|((0)&0xFF)));
		loc.Update();
	}
	if(carinside&&playerinside&&!companioninside)
	{
		loc.Color=(uint(((180)<<24)|(((153)&0xFF)<<16)|(((0)&0xFF)<<8)|((153)&0xFF)));
		loc.Update();
	}
	if(!carinside&&!playerinside&&companioninside)
	{
		loc.Color=(uint(((180)<<24)|(((255)&0xFF)<<16)|(((255)&0xFF)<<8)|((0)&0xFF)));
		loc.Update();
	}
	if(!carinside&&playerinside&&!companioninside)
	{
		loc.Color=(uint(((180)<<24)|(((255)&0xFF)<<16)|(((102)&0xFF)<<8)|((178)&0xFF)));
		loc.Update();
	}
	if(carinside&&!playerinside&&!companioninside)
	{
		loc.Color=(uint(((180)<<24)|(((46)&0xFF)<<16)|(((111)&0xFF)<<8)|((146)&0xFF)));
		loc.Update();
	}
	if(!carinside&&!playerinside&&!companioninside)
	{
		loc.Color=(uint(((180)<<24)|(((192)&0xFF)<<16)|(((192)&0xFF)<<8)|((192)&0xFF)));
		loc.Update();
	}
}    

bool d_know(Critter&player,Critter@terminal)
{
	if(player.IsKnownLoc(true,player.GetMap().GetLocation().Id))
	return true;
	return false;
}
