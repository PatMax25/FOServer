

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;              

import void DisableItemPerk(Critter&cr,uint8 type)from"item_perks";
import void DisableItemPerk(Critter&cr,Item&item,uint8 type)from"item_perks";
import void EnableItemPerk(Critter&cr,Item&item,uint8 type)from"item_perks";              

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                                                                                                                                                 

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}                                                                                                                                                                                                                                                                                                                                                                                                                      

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
}

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";          

import void InitEconomy()from"economy";
import void SendLevelThresholds(Critter&)from"economy"; 

import bool BankAccountExists(uint bankid,uint account)from"economy";
import bool BankAccountRemoveMoney(uint bankid,uint account,uint amount)from"economy";
import bool BankHasAccess(uint bankid,uint account,uint playerid)from"economy";
import int BankGetAccountBalance(uint bankid,uint account)from"economy";
import int BankGetAccountID(uint bankid,uint playerid)from"economy";
import uint BankAddAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankCreateAccount(uint bankid,uint playerid)from"economy";
import uint BankDepositMoney(uint bankid,uint playerid,uint account,int amount)from"economy";
import uint BankGetAccessCount(uint bankid,uint account)from"economy";
import uint BankGetAccountOwner(uint bankid,uint account)from"economy";
import uint BankGetAccountType(uint bankid,uint account)from"economy";
import uint BankGetCreditRating(uint bankid,uint account)from"economy";
import uint BankGetLoan(uint bankid,uint account)from"economy";
import uint BankRemoveAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankSetAccountType(uint bankid,uint account,uint accounttype)from"economy";
import uint BankSetCreditRating(uint bankid,uint account,uint rating)from"economy";
import uint BankSetLoan(uint bankid,uint account,uint loan)from"economy";
import uint BankTakeLoan(uint bankid,uint account,uint amount)from"economy";
import uint BankTransferMoney(uint bankid,uint fromaccount,uint toaccount,uint amount)from"economy";
import uint BankWithdrawMoney(uint bankid,uint playerid,uint account,int amount)from"economy"; 

import bool BanksTransferFromCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import bool BanksTransferToCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import uint BanksGetTotalMoney()from"economy";
import void BanksAddMoney(uint amount)from"economy";
import void BanksRemoveMoney(uint amount)from"economy"; 

import bool BankAddMoney(uint bankid,uint amount)from"economy";
import bool BankRemoveMoney(uint bankid,uint amount)from"economy";
import bool BankSetMoney(uint bankid,uint amount)from"economy";
import uint BankGetLoanInterest(uint bankid)from"economy";
import uint BankGetNumberOfAccounts(uint bankid)from"economy";
import float BankGetSaveInterest(uint bankid)from"economy";
import uint BankGetTotalMoney(uint bankid)from"economy";
import uint BankGetTotalBalance(uint bankid)from"economy";
import float BankGetReserveRatio(uint bankid)from"economy";
import uint BankSetLoanInterest(uint bankid,uint interest)from"economy";
import uint BankSetSaveInterest(uint bankid,float interest)from"economy";
import bool BankTransferFromCritter(uint bankId,Critter&critter,uint amount,uint type,bool virtual)from"economy";

import void SaveBankData()from"economy";   

import int GetItemSellModifier(Critter&player,Critter&trader)from"economy";
import int GetItemBuyModifier(Critter&player,Critter&trader)from"economy";
import uint GetItemCost(Item&item,Critter&cr,Critter&trader,bool sell)from"economy";
import uint GetItemCostPlain(Item&item,Critter&cr,Critter&trader)from"economy";

import array<int>GetTraderLevels(Critter@npc)from"economy";
import uint GetTraderLevel(Critter@npc,uint type)from"economy";

import uint ItemLevel(Item&item)from"economy";
import uint ItemLevel(uint pid)from"economy";
import uint TraderCapacity(Critter@npc)from"economy";
import uint TraderCapacity(Critter@npc,uint type,uint level)from"economy";
import uint TraderMoneyCapacity(Critter@npc)from"economy";
import uint TradingItemType(Item&item)from"economy";
import uint TradingItemType(uint pid)from"economy";                                                                                                          

const string@FD_Bank_Result2String(uint res)
{
	if(res==(1))
	return"FD_BANK_RESULT_SUCCESS";
	else if(res==(2))
	return"FD_BANK_RESULT_UNKNOWN";
	else if(res==(3))
	return"FD_BANK_RESULT_TOO_MANY_ACCOUNTS";
	else if(res==(4))
	return"FD_BANK_RESULT_ALREADY_HAS_ACCOUNT";
	else if(res==(5))
	return"FD_BANK_RESULT_NOT_ENOUGH_MONEY";
	else if(res==(6))
	return"FD_BANK_RESULT_BANK_FULL";
	else if(res==(7))
	return"FD_BANK_RESULT_BANK_EMPTY";
	else if(res==(8))
	return"FD_BANK_RESULT_DATA_ERROR";
	else if(res==(9))
	return"FD_BANK_RESULT_INVALID_PLAYER";
	else if(res==(10))
	return"FD_BANK_RESULT_NO_ACCOUNT";
	else
	return"FD_Result: Unknown error code";
}

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}      

import bool IsBigFaction(uint faction)from"factions";
import bool IsTheSameFaction(uint player1Id,uint player2Id)from"factions";
import void _Resign(uint playerId)from"factions"; 

import int RegisterFaction(uint id,const string@name,bool playerDriven)from"factions";
import int RegisterFaction(const string@name,bool playerDriven,uint&out id)from"factions";

import bool RemoveFaction(uint faction)from"factions"; 

import bool GetFactionNameStr(uint faction,string&out name)from"factions";
import bool GetFactionId(const string@name,uint&out id)from"factions"; 

import bool IsFactionNameFree(const string&)from"factions";
import bool IsFactionNameValid(const string&)from"factions";

import bool IsGang(uint faction)from"factions";

import uint16 GetFactionRadioChannel(uint faction)from"factions";
import void SetFactionRadioChannel(uint faction,uint16 channel)from"factions"; 

import int AddPlayer(uint faction,uint id)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)from"factions"; 

import int RemovePlayer(uint faction,uint id)from"factions"; 

import int GetFaction(uint faction,uint id)from"factions";
import int GetStatus(uint faction,uint id)from"factions";
import int GetRank(uint faction,uint id)from"factions";
import bool IsMember(uint faction,Critter&cr)from"factions";
import bool IsMemberOffline(uint faction,uint id)from"factions";
import bool StoredInDB(uint faction,uint id)from"factions";
import uint GetRecordsCount(uint faction)from"factions";
import uint GetMembersCount(uint faction)from"factions";
import uint GetMembers(uint faction,array<uint>&ids)from"factions";
import uint GetLeaderId(uint faction)from"factions";
import void SetLeaderId(uint faction,uint id)from"factions";
import uint GetClaimId(uint faction)from"factions";
import void SetClaimId(uint faction,uint id)from"factions";
import uint GetLeaderTime(uint faction)from"factions";
import void SetLeaderTime(uint faction,uint time)from"factions";
import uint GetClaimTime(uint faction)from"factions";
import void SetClaimTime(uint faction,uint time)from"factions";
import uint GetFactionLocationId(uint faction)from"factions";
import bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)from"factions";

import void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)from"factions";

import uint GetFactionScore(uint faction)from"factions";
import void ModifyFactionScore(uint faction,int amount)from"factions";
import void UpdateLastUsed(uint faction)from"factions";
import uint GetFactionsCount()from"factions"; 

import int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)from"factions";
import int GetNextId(uint faction,uint currId,bool members,uint&out nextId)from"factions";
import int GetFirstId(uint faction,bool members,uint&out id)from"factions"; 

import int ModifyRank(uint faction,uint id,uint newRank)from"factions";
import int ModifyStatus(uint faction,uint id,uint newStatus)from"factions";
import int ModifyFaction(uint faction,uint id,uint newFaction)from"factions"; 

import int InvitePlayer(uint faction,uint playerId)from"factions";
import int ConfirmInvitation(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId,bool applyModifiers)from"factions";
import int ChangeRank(uint faction,uint playerId,uint newRank)from"factions";
import int ExpelMember(uint faction,uint playerId)from"factions";
import int ExpelMember(uint faction,uint playerId,bool applyModifiers)from"factions";

import uint GetPlayerFaction(uint playerId)from"factions";
import uint GetPlayerRank(uint playerId)from"factions"; 

import void AddFactionNews(uint faction,uint master,uint slave,uint type)from"factions";
import bool GetFactionNews(uint faction,uint index,uint&out master,uint&out slave,uint&out type,uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)from"factions";
import uint GetFactionNewsCount(uint faction)from"factions"; 

import uint CheckFactionBaseCoords(uint x,uint y)from"factions";

import bool SaveFactionData(uint faction)from"factions";
import bool FactionExists(uint faction)from"factions"; 

import uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)from"factions";   

import void InitFactions()from"factions";
import void UpdateFactionsInfo(Critter&cr)from"factions";
import IFaction@GetFaction(int)from"factions";
import IFaction@GetFaction(const string&)from"factions";
import IFaction@GetFactionByIdx(int idx)from"factions";
import void UpdateGroupVars(Critter&player)from"factions";     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);
	void settag(int index,int tag,int r,int g,int b);
	int get_tag(int index);
	int get_b(int index);
	int get_r(int index);
	int get_g(int index);  
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
};  

shared interface IFactionBase
{
	
	uint get_Id()const;
	
	uint get_FactionId()const;
	
	const string&get_Name()const;
	
	uint get_LocationId()const; 
	
	void Show(Critter&cr)const;
	
	void Hide(Critter&cr)const; 
	
	bool IsRankAllowed(int rank)const;
	
	void AllowRank(int rank,bool allow);
	
	bool IsStatusAllowed(int status)const;
	
	void AllowStatus(int status,bool allow); 
	
	void Remove();
};  

import IFactionBase@GetFactionBase(uint faction_id,const string&faction_name)from"factions_bases";
import IFactionBase@GetFactionBase(uint id)from"factions_bases";
import IFactionBase@GetFactionBaseByLocId(uint id)from"factions_bases";
import uint GetFactionBases(uint faction_id,array<IFactionBase@>@)from"factions_bases";
import bool AddFactionBase(IFactionBase&)from"factions_bases";
import void AddFactionBase(uint)from"factions_bases";
import IFactionBase@CreateFactionBase(uint faction_id,const string&name,uint location_id)from"factions_bases";
import void RemoveFactionBase(uint,const string&)from"factions_bases";
import void RemoveFactionBase(IFactionBase&)from"factions_bases

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                                                                                                                                                                                                                                                        

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                  

import string GetRandomFirstName(uint gender)from"npc_names";
import string GetRandomFirstName(uint gender,int&index)from"npc_names";

import string GetRandomNick(uint gender)from"npc_names";

import string GetRandomSurname()from"npc_names";

import string GetRandomFullName(uint gender)from"npc_names";
import string GetRandomFullName(uint gender,int&firstName,bool&genderNick,int&nick,int&surname)from"npc_names"; 

import string GetFirstName(uint gender,uint index)from"npc_names";
import string GetNick(uint gender,uint index,bool genderNick)from"npc_names";
import string GetSurname(uint index)from"npc_names";  

import void LogNames(bool printNames)from"npc_names

shared class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(!IsAnyData(name))
		return false;
		if(!GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const bool&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const string&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const float&value)
	{
		int dummy=FloatToInt(value);
		return Set(dummy);
	}
	
	Serializator@opShl(const float&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const array<int64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<bool>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<bool>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<string>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<string>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<float>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(FloatToInt(values[i]));
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<float>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Critter&cr)
	{
		return Set(cr);
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Item&item)
	{
		return Set(item);
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@opShr(bool&value)
	{
		return Get(value);
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@opShr(string&str)
	{
		return Get(str);
	}
	
	Serializator@Get(float&value)
	{
		int dummy=0;
		Get(dummy);
		value=IntToFloat(dummy);
		return this;
	}
	
	Serializator@opShr(float&value)
	{
		return Get(value);
	}
	
	Serializator@Get(array<int64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<float>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		{
			int dummy=0;
			Get(dummy);
			values[i]=IntToFloat(dummy);
		}
		return this;
	}
	
	Serializator@opShr(array<float>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<bool>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<bool>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<string>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<string>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@opShr(Critter@&cr)
	{
		return Get(cr);
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	Serializator@opShr(Item@&item)
	{
		return Get(item);
	}
	
	array<uint8>Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};   

import bool AddToFollowerlist(Critter&master,Critter&follower)from"follower_common";  

uint e_DisableBagRefresh(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))
	{
		cr.SetBagRefreshTime((uint(-1)));
		{;};
	}
	return 0;
}

void NerfWeaponSkills(Critter&cr,uint primary,uint secondary)
{
	for(uint i=(200);i<=(205);i++)
	{
		if(i!=primary&&i!=secondary)
		{
			if(i==(201))
			cr.ParamBase[i]=-80;
			else
			cr.ParamBase[i]=-30;
		}
	}
}

shared interface IMerc
{
	IMerc@Dialog(int dialogid);
	IMerc@Script(string&script);
	IMerc@AI(int aipack);
	IMerc@Bag(int bagid);
	IMerc@Team(int teamid);
	IMerc@Level(int level);
	IMerc@PID(int pid);
	IMerc@PID(array<int>npcpids);
	IMerc@Type(int type);
	IMerc@ID(int id);
	IMerc@Cost(int cost);
	IMerc@StartCost(int cost);
	IMerc@SellPrice(int price);
	IMerc@DynamicPrice();
	
	bool IsDynamicPrice();
	int GetDialog();
	string@GetScript();
	int GetAIPack();
	int GetBagID();
	int GetBagValue();
	int GetTeamID();
	int GetLevel();
	int GetLastPID();
	array<int>GetPIDs();
	uint GetType();
	int8 GetBaseType();
	int GetCost();
	int GetSellPrice();
	uint GetID();
	string@GetName();
	
	bool Spawn(Critter&master);
}; 

class CMerc:IMerc
{
	bool dynamicprice;
	int dir;
	int dialogid;
	string script;
	int aipack;
	int8 basetype;
	int bagid;
	int teamid;
	int level;
	int respawnTime;
	array<int>npcpids;
	int npcpid;
	int cost;
	int bagvalue;
	int startcost;
	uint type;
	int sellprice;
	uint id;
	string name;
	
	Serializator serializer;
	
	CMerc()
	{
		dir=Random(0,6);
		dialogid=(9310);
		script="follower@critter_init";
		basetype=-1;
		aipack=0;
		bagid=0;
		teamid=0;
		level=1;
		respawnTime=(-2);
		cost=0;
		sellprice=0;
		id=0;
		type=0;
		dynamicprice=false;
	}
	
	bool Spawn(Critter&master)
	{
		npcpid=(npcpids[Random(0,npcpids.length()-1)]);
		
		Critter@SpawnedNpc=AddNpc(master.GetMap(),npcpid,master.HexX,master.HexY,dir,dialogid,script,aipack,bagid,teamid,false,level);
		if((@SpawnedNpc!=null))
		{
			SpawnedNpc.FollowerVarBase[(929)]=(master.Param[(106)]);
			SpawnedNpc.FollowerVarBase[(932)]=type;
			SpawnedNpc.FollowerVarBase[(930)]=id;
			basetype=SpawnedNpc.CrType;
			SpawnedNpc.FollowerVarBase[(933)]=master.Id;
			SpawnedNpc.ParamBase[(84)]=respawnTime;
			
			if(type==(3)||type==(4)||type==(2))
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			switch(type)
			{
				case(6):
				case(12):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(7):
				case(13):
				NerfWeaponSkills(SpawnedNpc,(200),0);
				break;
				case(8):
				case(11):
				NerfWeaponSkills(SpawnedNpc,(201),0);
				break;
				case(5):
				case(10):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(9):
				NerfWeaponSkills(SpawnedNpc,(202),0);
				break;
				default:
				break;
			}
			
			SpawnedNpc.ChangeCrType(SpawnedNpc.ParamBase[(112)]);
			
			CreateTimeEvent(((__FullSecond)+(((3)*60))),"e_DisableBagRefresh",SpawnedNpc.Id,true);
			ArmBestWeapon(SpawnedNpc);
			
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(306)]+=1;
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(315)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(405)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(309)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(313)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(330)]+=1;
			
			for(uint i=0;i<=6;i++)SpawnedNpc.ParamBase[i]+=Random(-1,1);   
			
			SpawnedNpc.ParamBase[(7)]+=(Random(0,20));
			SpawnedNpc.ParamBase[(7)]-=10;
			
			SpawnedNpc.ParamBase[(72)]=SpawnedNpc.Param[(7)];
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			if(!AddToFollowerlist(master,SpawnedNpc))
			Log("Failed to assign merc's id to master("+master.Id+") followerlist");
			
			this.name=GenerateNewName(SpawnedNpc);
			
			if(this.name.length()>0)
			SetLexem(SpawnedNpc,"$name",this.name);
			
			return true;
		}
		else
		{
			Log("Failed to create mercenary of PID "+npcpid+" with mercid "+id+" on map id "+master.GetMapId());
			master.Say((11),"Failed to create mercenary, report this error immediately");
		} 
		
		return false;
	}
	
	IMerc@Dialog(int dialogid)
	{
		this.dialogid=dialogid;
		return this;
	}
	
	IMerc@Script(string&script)
	{
		this.script=script;
		return this;
	}
	
	IMerc@AI(int aipack)
	{
		this.aipack=aipack;
		return this;
	}
	
	IMerc@Bag(int bagid)
	{
		this.bagid=bagid;
		
		bagvalue=0;
		array<uint>mincounts,maxcounts;
		array<int>slots;
		array<uint16>pids;
		uint num=GetBagItems(bagid,pids,mincounts,maxcounts,slots);
		uint cost=0;
		for(uint i=0;i<num;i++)
		{
			bagvalue+=BaseItemValue(pids[i],7,80,true)*(mincounts[i]+maxcounts[i])/2;
		}
		
		return this;
	}
	
	IMerc@Team(int teamid)
	{
		this.teamid=teamid;
		return this;
	}
	
	IMerc@Level(int level)
	{
		this.level=level;
		return this;
	}
	
	IMerc@PID(int npcpid)
	{
		this.npcpids.insertLast(npcpid);
		return this;
	}
	
	IMerc@PID(array<int>npcpids)
	{
		for(uint i=0;i<npcpids.length();i++)
		{
			this.npcpids.insertLast(npcpids[i]);
		}
		return this;
	}
	
	IMerc@Type(int type)
	{
		this.type=type;
		return this;
	}
	
	IMerc@ID(int id)
	{
		this.id=id;
		return this;
	}
	
	IMerc@DynamicPrice()
	{
		dynamicprice=true;
		return this;
	}
	
	bool IsDynamicPrice()
	{
		return dynamicprice;
	}
	
	IMerc@StartCost(int cost)
	{
		serializer.Clear();
		if(!serializer.Load("merc_"+id)||GetGvar((12000))==0)
		{
			this.cost=cost;
			serializer.Clear();
			serializer.Set(this.cost).Save("merc_"+id);
		}
		else
		serializer.Get(this.cost);
		
		return this;
	}
	
	IMerc@Cost(int cost)
	{
		{;};
		this.cost=cost;
		
		serializer.Clear();
		serializer.Set(this.cost).Save("merc_"+id);
		
		return this;
	}
	
	IMerc@SellPrice(int sellprice)
	{
		this.sellprice=sellprice;
		return this;
	}
	
	int GetDialog(){return dialogid;}
	string@GetScript(){return script;}
	int8 GetBaseType(){return basetype;}
	int GetAIPack(){return aipack;}
	int GetBagID(){return bagid;}
	int GetTeamID(){return teamid;}
	int GetLevel(){return level;}
	int GetLastPID(){return npcpid;}
	array<int>GetPIDs(){return npcpids;}
	int GetCost(){return cost;}
	int GetBagValue(){return bagvalue;}
	int GetSellPrice(){return sellprice;}
	uint GetID(){return id;}
	uint GetType(){return type;}
	string@GetName(){return name;}
}; 

import bool IsFollowing(Critter&critter)from"follower_common";
import bool IsOwnersFollower(Critter&owner,Critter&critter)from"follower_common";
import bool CanHaveMoreFollowers(Critter&player,uint FollowerType)from"follower_common";
import Critter@GetFollowersOwner(Critter&critter)from"follower_common";
import bool RightDistance(Critter&follower,Critter&owner)from"follower_common";
import bool HasFollowerOfBaseType(Critter&owner,uint basetype)from"follower_common";
import Critter@GetFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import bool RemoveFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import int GetNumberOfFollowingFollowersOfPlayer(Critter&player)from"follower_common";
import int GetNumberOfFollowersOfPlayer(Critter&player)from"follower_common";
import uint GetSlaveTypes(Critter&player)from"follower_common";
import void ClearFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import void AddFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import uint NumberOfFollowersOnMap(Map@map)from"follower_common";
import uint GetFollowerType(Critter&critter)from"follower_common";
import bool DisbandFollower(Critter&player,Critter&cr,bool reset)from"follower_common";
import bool MakeFollower(Critter&critter,uint type,string&script,uint dialogid,Critter&owner,bool FreeBarter)from"follower_common";
import Critter@LocateFollowerByType(IMerc@merc,Critter&owner)from"follower_common";
import Critter@LocateFollowerByID(uint id,Critter&owner)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers,bool OnlyIsSeen)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers)from"follower_common";
import int GetFollowers(Critter&player,bool all,array<Critter@>&followers)from"follower_common";
import uint CountFollowers(Critter&player,bool all)from"follower_common";
import uint CountFollowers(Critter&player,Map@map)from"follower_common";
import uint GetPartyPointsMax(Critter&player)from"follower_common";
import uint GetPartyPointsUsed(Critter&player)from"follower_common";
import bool IsMerc(Critter&follower)from"follower_common";                                                                                                         

import void InitTents()from"map_tent";

import uint GetTentVars(array<uint>&vars)from"map_tent";
import uint GetTentVarsCount()from"map_tent";
import bool GetFreeTentVar(Critter&cr,uint&var)from"map_tent";
import uint GetFreeTentVars(Critter&cr,array<uint>&vars)from"map_tent";
import uint GetTakenTentVars(Critter&cr,array<uint>&vars)from"map_tent";
import uint GetTakenTentVars(uint crId,array<uint>&vars)from"map_tent";

import uint GetAllTents(array<Location@>&locations)from"map_tent";
import uint GetAllShelters(array<Location@>&locations)from"map_tent";
import uint GetAllHouses(array<Location@>&locations)from"map_tent";

import uint GetTentLocations(Critter&tentOwner,array<Location@>&locations)from"map_tent";
import uint GetTentLocations(uint tentOwnerId,array<Location@>&locations)from"map_tent";

import Location@GetNearestTentLocation(Critter&tentOwner,uint16 wx,uint16 wy)from"map_tent";
import Location@GetNearestTentLocation(uint tentOwnerId,uint16 wx,uint16 wy)from"map_tent";

import bool CanCreateTent(Map&map)from"map_tent";
import void TryCreateTent(Critter&cr)from"map_tent";

import bool RemoveTent(Critter&cr,Location&tent,bool recycle)from"map_tent";
import bool RemoveTentByVar(Critter&cr,uint var,bool recycle)from"map_tent";
import void RemoveAllTents(Critter&cr,bool recycle)from"map_tent";

import bool IsTentOwner(Map&tent,Critter&cr)from"map_tent";

import void myinfo_tent(Critter&cr)from"map_tent

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      

shared interface IPolygon
{
	IPolygon@AddVertex(uint16 x,uint16 y);
	IPolygon@AddVertices(array<uint16>&hexes);   
	
	bool IsWithin(Critter&cr);
	bool IsWithin(Item&item);  
	
	bool IsWithin(uint16 x,uint16 y);
};  

import IPolygon@NewPolygon()from"polygon"; 

import IPolygon@LoadShapeFromEntires(Map&map,uint first,uint last)from"polygon";          

import ITown@GetTownByIndex(uint index)from"towns";
import ITown@GetTown(uint id)from"towns";
import uint GetTownCount()from"towns";
import uint GetTowns(array<ITown@>@towns)from"towns";  

import bool AddMilitia(Map@map)from"town";
import void InitMilitia()from"town";
import bool IsTCTown(Map@map)from"town";
import uint RetrieveTownId(Map@map)from"town";
import uint RetrieveTownId(Critter&critter)from"town";
import ITown@RetrieveTown(Critter&critter)from"town";
import bool ValidTown(ITown@town)from"town";
import void GainControl(Critter&player)from"town";
import uint GetNearMembers(Critter&player)from"town";
import bool IsPolicy(Critter&player,uint policy)from"town";
import bool IsControllingTown(Critter&player)from"town";
import bool AlertMilitia(Critter&cr)from"town";
import int SelectBag(uint crpid)from"town";
import void SpawnInitMilitia(Map@map)from"town";
import int CountMilitia(Map@map)from"town";
import void ClearInfluenceBuffer(Critter&cr)from"town";  

class PresenceStruct
{
	uint factionId;
	uint count;
	PresenceStruct(uint factionId)
	{
		this.factionId=factionId;
		this.count=1;
	}
};

shared interface ITown
{
	ITown@SetMapID(uint id);
	ITown@SetTownID(uint id);
	ITown@SetBaseRewardValue(uint value);
	ITown@SetInfluenceMemberRequirement(uint number);
	ITown@SetNearbyMemberRequirement(uint number);
	ITown@SetTotalMemberRequirement(uint number);
	ITown@SetLimboContainer(Item@container);
	ITown@SetRewardContainer(Item@container);
	ITown@SetTownLeader(Critter@leader);
	ITown@SetSpeechModifier(int modifier);
	ITown@SetHour(uint hour);
	ITown@SetCaptureArea(IPolygon@capturearea);
	ITown@SetMilitiaEnabled();
	ITown@SetRewardStartCaps(uint caps);
	ITown@SetVersion(uint version);
	
	uint GetVersion();
	
	uint GetTownID();
	string GetTownName();
	bool LoadData();
	bool SaveData();
	bool IsMilitiaEnabled();
	bool IsFriendlyFaction(uint factionid);
	bool IsFriend(Critter&cr);
	bool IsValidCaptor(Critter&cr);
	bool IsWithinCaptureArea(Critter&cr);
	void AreaCheck();
	bool AddFriendlyFaction(uint factionid);
	bool RemoveFriendlyFaction(uint factionid);
	array<uint>GetFriendlyFactions();
	float GetControllingInfluence();
	uint GetMilitiaMax();
	uint GetControllingFaction();
	uint GetNumberOfKilledNPCs();
	uint GetControlCycles();
	uint GetStatus();
	void SetStatus(uint status);
	void SetScore();
	void SetPreviousFaction(uint previous);
	uint GetlastSecond();
	void SetlastSecond(uint sec);
	uint GetAreaCount();
	uint GetCountdown();
	void SetCountdownStatus(bool enabled);
	bool GetCountdownStatus();
	void SendCountdownTime(Critter&player);
	uint GetMemberNearbyRequirement();
	uint GetMemberTotalRequirement();
	Item@GetLimboContainer();
	Item@GetRewardContainer();
	uint GetTownLeaderId();
	uint GetMapID();
	int GetSpeechModifier();
	bool GainControl(Critter&player);
	void IncreaseNPCDeath(uint num);
	void ModifyInfluence(uint factionId,float value);
	void SetInfluence(uint factionId,float value);
	void ResetStats();
	void ResetControl();
	void RevertControl();
	void ClearRewardContainer();
	void ClearLimboContainer();
	void ClearContainers();
	void Update(uint hour,uint minute);
	void UpdateCountdown();
	void UpdateTick();
	void TownCheck();
	
	bool IsLaw(uint law);
	void SetLaw(uint law,bool enabled);
	
	void AddMoney(int money);
	int GetMoney(); 
	
	float GetInfluence(uint faction);
	
	Location@GetLocation();
};                                                                                                                                                                                                                                                                                                                                                                           

import bool IsNight()from"world_common";
import bool IsDay()from"world_common";
import bool IsMorning()from"world_common";
import bool IsAfternoon()from"world_common";
import bool IsEvening()from"world_common";
import bool IsHospital(Map@map)from"world_common";
import bool IsCave(Map@map)from"world_common";
import bool IsMine(Map@map)from"world_common";
import bool IsJail(Map@map)from"world_common";
import bool IsBase(Map@map)from"world_common";
import bool IsTent(Map@map)from"world_common";
import bool IsWarzone(Map@map)from"world_common";  

import bool IsArenaCombatant(Critter&cr)from"arena";
import Map@GetRoomPosition(uint PlayerId,uint16&out hx,uint16&out hy)from"rooms";
import IMerc@GetMerc(uint id)from"mercs";
import void DropItems(Critter&cr)from"replication";       

bool IsCompanion(Critter&follower)
{
	return(GetFollowerType(follower)==(1));
}

bool IsAnimal(Critter&follower)
{
	return(GetFollowerType(follower)==(4)||GetFollowerType(follower)==(3));
}

uint cte_UpdateLoyality(Critter&follower,int identifier,uint&rate)
{
	
	if(IsAnimal(follower))
	return 0;
	
	UpdateLoyality(follower);
	
	if((((follower.Param[(534)]&((0x00000020)))!=0)&&follower.Param[(104)]==(9314))&&GetLoyality(follower)<(20)&&Random(0,2)==0)
	{
		Critter@master=GetMaster(follower);
		if(!(@master!=null))
		return(((7)*__TimeMultiplier*86400));
		Map@map=master.GetMap();
		
		if((@map!=null)&&map.Id!=0&&master.GetMapId()==follower.GetMapId()&&!IsTown(map))
		{
			{;};
			DisbandFollower(master,follower,true);
			follower.AddEnemyInStack(master.Id);
			AttackCritter(follower,master);
			master.Say((11),"One of your slaves have become disloyal and has rebelled!");
			switch(Random(0,3))
			{
				case 0:
				follower.Say((3),"I've had enough with you!");
				case 1:
				follower.Say((3),"Death before dishonor!");
				case 2:
				follower.Say((3),"I should have done this a long time ago!");
				case 3:
				follower.Say((3),"Die you fucker!!!");
			}
		}
	}
	
	return(((7)*__TimeMultiplier*86400));
}

bool HasMasterSpeakerPerk(Critter&follower){return(((follower.FollowerVar[(941)])&((0x1)))!=0);}

void UpdateLoyality(Critter&follower)
{
	ModifyLoyality(follower,HasMasterSpeakerPerk(follower)?(Random(-5,-15)/2):Random(-5,-15));
	{};
}

void r_FollowMode(Critter&player,Critter@follower,int value)
{
	SetMode(player,follower,value);
} 

void r_AttackPolicy(Critter&player,Critter@follower,int value)
{
	follower.FollowerVarBase[(926)]=value;
	follower.FollowerVarBase[(929)]=GetGroupIndex(player);  
	
	array<Critter@>crits;
	uint num=player.GetCritters(false,(0x03),crits);
	for(uint i=0;i<num;i++)
	_ShowCritter(follower,crits[i]);
}

void r_ArmBestWeapon(Critter&player,Critter@follower)
{
	ArmBestWeapon(follower);
}

void r_PutDownWeapon(Critter&player,Critter@follower)
{
	PutAwayItems(follower);
}

void r_DropAllItems(Critter&player,Critter@follower)
{
	DropAllItems(follower);
}

void r_PickUpUnder(Critter&player,Critter@follower)
{
	PickAllItemsOnHex(follower);
}

void r_IncreaseLoyality(Critter&player,Critter@follower,int Min,int Max)
{
	ModifyLoyality(follower,Min,Max);
} 

void r_Rotate(Critter&player,Critter@follower,int value)
{
	uint dir=follower.Dir;
	
	(dir>=5)?dir=0:dir++;
	
	follower.SetHomePos(follower.HexX,follower.HexY,dir);
	follower.SetDir(dir);
} 

void r_Distance(Critter&player,Critter@follower,int value)
{
	follower.FollowerVarBase[(928)]=value;
	
} 

void r_ClaimFollower(Critter&player,Critter@follower,int value)
{
	follower.FollowerVarBase[(933)]=player.Id;
	follower.FollowerVarBase[(927)]=0;
	
} 

uint r_TellWeaponSkill(Critter&player,Critter@follower)
{
	switch(GetBestWeaponSkill(follower))
	{
		case(200):
		return 13;
		case(201):
		return 14;
		case(202):
		return 15;
		case(203):
		return 11;
		case(205):
		return 16;
		default:
		return 0;
	}
	return 0;
}

uint GetLoyality(Critter&follower){return follower.FollowerVar[(937)];}

void ModifyLoyality(Critter&cr,int value)
{
	cr.FollowerVarBase[(937)]=(((GetLoyality(cr)+value)>(100))?(100):(((GetLoyality(cr)+value)<(0))?(0):(GetLoyality(cr)+value)));
	{};
}

void ModifyLoyality(Critter&cr,int IncMin,int IncMax)
{
	ModifyLoyality(cr,Random(IncMin,IncMax));
} 

string GetMercLoyalityText(uint loyality)
{
	if(loyality==100)
	return"I'll admit it, @sex@|sir||ma’am|. You're good. Maybe one of the best.@@Best damn assignment I ever had, @sex@|sir||ma’am|. Hand to God.";
	else if(loyality>90)
	return"I'll admit it, @sex@|sir||ma’am|. You're good. Maybe one of the best.@@Best damn assignment I ever had, @sex@|sir||ma’am|. Hand to God.";
	else if(loyality>80)
	return"I'd feel better if I was taking the lead. You gotta be careful out here, @sex@|sir||ma’am|.@@Master, be careful out here.";
	else if(loyality>70)
	return"Yes @sex@|sir||ma’am|?@@New orders, @sex@|sir||ma’am|?@@What's the plan, @sex@|sir||ma’am|?@@What's up, @sex@|sir||ma’am|?";
	else if(loyality>60)
	return"Yes @sex@|sir||ma’am|?@@New orders, @sex@|sir||ma’am|?@@What's the plan, @sex@|sir||ma’am|?@@What's up, @sex@|sir||ma’am|?";
	else if(loyality>50)
	return"Guess you ain't so bad after all. @sex@|sir||ma’am|.@@Maybe I was wrong about you, @sex@|sir||ma’am|.";
	else if(loyality>40)
	return"I can't believe I got this babysitting job.@@I'm here to protect your stupid ass, not talk to it.@@You want a conversation? Rent a hooker.";
	else if(loyality>30)
	return"I can't believe I got this babysitting job.@@I'm here to protect your stupid ass, not talk to it.@@You want a conversation? Rent a hooker.";
	else if(loyality>20)
	return"Awww, am I too violent for you, cupcake?@@@sex@|Fightin' men might not be your thing, pal.||Fightin' men might not be your thing, missy.|@@Mouth breathing piece of... what?";
	else if(loyality>10)
	return"Awww, am I too violent for you, cupcake?@@@sex@|Fightin' men might not be your thing, pal.||Fightin' men might not be your thing, missy.|@@Mouth breathing piece of... what?";
	else if(loyality>0)
	return"You're a coward, and you'll die like one.@@Faster you die, faster I'm outta here. Let's get your stupid ass killed.";
	else if(loyality==0)
	return"You're a coward, and you'll die like one.@@Faster you die, faster I'm outta here. Let's get your stupid ass killed.";
	else
	return"GetMercLoyalityText error";
}

string GetCompanionLoyalityText(uint loyality)
{
	if(loyality==100)
	return"Don't worry @sex@|pal||sweetie|, ain't nobody touching you so long as I'm around.@@You know, you remind me of a @sex@|guy||lady| I used to travel with a couple years back. Uh, not sure you want to know what happened to @sex@|him||her|, though. Awful mess.@@You know, hanging out with you makes me wonder why I used to putz around this stinkhole by myself.@@I'm a little embarrassed to admit this, but you're the best friend I've had in years.";
	else if(loyality>90)
	return"Don't worry @sex@|pal||sweetie|, ain't nobody touching you so long as I'm around.@@You know, you remind me of a @sex@|guy||lady| I used to travel with a couple years back. Uh, not sure you want to know what happened to @sex@|him||her|, though. Awful mess.@@You know, hanging out with you makes me wonder why I used to putz around this stinkhole by myself.@@I'm a little embarrassed to admit this, but you're the best friend I've had in years.";
	else if(loyality>80)
	return"Don't worry @sex@|pal||sweetie|, ain't nobody touching you so long as I'm around.@@You know, you remind me of a @sex@|guy||lady| I used to travel with a couple years back. Uh, not sure you want to know what happened to @sex@|him||her|, though. Awful mess.@@You know, hanging out with you makes me wonder why I used to putz around this stinkhole by myself.@@I'm a little embarrassed to admit this, but you're the best friend I've had in years.";
	else if(loyality>70)
	return"What's eating you, compadre?@@What's eating you, amigo?@@What's on your mind, chief?@@Maybe we can travel where I want to go for a while. No? Alright, fine. Just saying.@@Another beautiful wasteland day, ain't it?";
	else if(loyality>60)
	return"What's eating you, compadre?@@What's eating you, amigo?@@What's on your mind, chief?@@Maybe we can travel where I want to go for a while. No? Alright, fine. Just saying.@@Another beautiful wasteland day, ain't it?";
	else if(loyality>50)
	return"Hey, you ain't half bad. Maybe this travelling together's gonna work out @sex@|buddy||missy|.@@You watch my back, maybe we've got a chance out here.@@Sorry about what I said before. Guess I've been travelling too long to warm up to new folks.@@I gotta ask, why is everyone and everything trying to kill you?";
	else if(loyality>40)
	return"Hey, you ain't half bad. Maybe this travelling together's gonna work out @sex@|buddy||missy|.@@You watch my back, maybe we've got a chance out here.@@Sorry about what I said before. Guess I've been travelling too long to warm up to new folks.@@I gotta ask, why is everyone and everything trying to kill you?";
	else if(loyality>30)
	return"Why don't we just try quiet time for a while?@@@sex@|Not interested, pal.||Not interested, sweetie.|@@This'd be really awkward if I gave a shit about your feelings.@@I'm travelling with you because I have to. Nothing more.";
	else if(loyality>20)
	return"Why don't we just try quiet time for a while?@@@sex@|Not interested, pal.||Not interested, sweetie.|@@This'd be really awkward if I gave a shit about your feelings.@@I'm travelling with you because I have to. Nothing more.";
	else if(loyality>10)
	return"Why don't we just try quiet time for a while?@@@sex@|Not interested, pal.||Not interested, sweetie.|@@This'd be really awkward if I gave a shit about your feelings.@@I'm travelling with you because I have to. Nothing more.";
	else if(loyality>0)
	return"You look at me like that again, I'm gonna beat you so bad your sister'll wish she never gave birth to ya.@@What the fuck are you looking at?";
	else if(loyality==0)
	return"You look at me like that again, I'm gonna beat you so bad your sister'll wish she never gave birth to ya.@@What the fuck are you looking at?";
	else
	return"GetCompanionLoyalityText error";
}

string GetSlaveLoyalityText(uint loyality)
{
	if(loyality==100)
	return"Master, I don't know how I ever survived without you.@@Don't ever leave me, Master.";
	else if(loyality>90)
	return"I'll die before I let them touch you, Master.@@Master, be careful out here.";
	else if(loyality>80)
	return"I'll die before I let them touch you, Master.@@Master, be careful out here.";
	else if(loyality>70)
	return"I'll die before I let them touch you, Master.@@Master, be careful out here.";
	else if(loyality>60)
	return"How can I be of service, Master?@@What is it you require, Master?@@Yes, Master?";
	else if(loyality>50)
	return"How can I be of service, Master?@@What is it you require, Master?@@Yes, Master?";
	else if(loyality>40)
	return"I miss my family. Do you think they miss me?@@You're not ever letting me go, are you?";
	else if(loyality>30)
	return"I miss my family. Do you think they miss me?@@You're not ever letting me go, are you?";
	else if(loyality>20)
	return"You slaving piece of shit.@@You'll let your guard down soon enough.";
	else if(loyality>10)
	return"You slaving piece of shit.@@You'll let your guard down soon enough.";
	else if(loyality>0)
	return"You can't watch me forever.@@[Spits on the ground]@@You want something, you scumbag?";
	else if(loyality==0)
	return"You can't watch me forever.@@[Spits on the ground]@@You want something, you scumbag?";
	else
	return"GetSlaveLoyalityTex error";
}

string GetLoyalityText(Critter&npc)
{
	uint loyality=npc.FollowerVar[(937)];
	uint type=npc.FollowerVar[(932)];
	if(IsMerc(npc))
	return GetMercLoyalityText(loyality);
	else if(type==(1))
	return GetCompanionLoyalityText(loyality);
	else if(type==(2))
	return GetSlaveLoyalityText(loyality);
	return"GetLoyalityText error";
}  

void dlg_ShowMercPayCost(Critter&player,Critter@follower,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	
	IMerc@merc=GetMerc(follower.FollowerVar[(930)]);
	
	text+="$payment"+GetMercLoyalityCost(merc.GetCost());
}

void dlg_ShowLoyality(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))
	return;
	
	text+="$loyality"+GetLoyalityText(npc);
}

void dlg_ShowStats(Critter&player,Critter@npc,string@text)
{
	if(!((@text!=null)&&text.length()==0))return;
	
	text+="$stats"+"ST: "+npc.Param[(0)]+" PE: "+npc.Param[(1)]+" EN: "+npc.Param[(2)]+" CH: "+npc.Param[(3)]+" IN: "+npc.Param[(4)]+" AG: "+npc.Param[(5)]+" LK: "+npc.Param[(6)]+"\nLevel: "+npc.Param[(77)]+"\nExperience: "+npc.Param[(76)]+"\nSkill: ";
	
	switch(GetBestWeaponSkill(npc))
	{
		case(200):{text+="Small Guns ("+npc.Param[(200)]+"%)";break;}
		case(201):{text+="Big Guns ("+npc.Param[(201)]+"%)";break;}
		case(202):{text+="Energy Weapons ("+npc.Param[(202)]+"%)";break;}
		case(203):{text+="Close Combat ("+npc.Param[(203)]+"%)";break;}
		case(205):{text+="Throwing ("+npc.Param[(205)]+"%)";break;}
		default:break;
	}
} 

uint dlg_ChooseBase(Critter&cr,Critter@follower,string@say)
{
	array<IFactionBase@>bases;
	uint factionId=cr.FollowerVar[(929)];
	uint baseNum=GetFactionBases(factionId,bases);
	
	if(((@say!=null)&&say.length()==0))
	{
		string baseStr;
		for(uint i=0;i<bases.length();i++)
		baseStr+=bases[i].Name+"\n";
		
		say+="$bases"+baseStr;
	}
	
	if(!((@say!=null)&&say.length()>0))
	return 0;
	
	uint baseId;
	uint baseIndex;
	if(baseNum==0)
	{
		cr.Say((12),"No bases found.");
		return 0;
	}
	
	for(uint i=0;i<bases.length();i++)
	if(bases[i].Name==say)
	{
		baseIndex=i;
		baseId=bases[i].Id;
	}
	
	if(baseId==0)
	if(baseNum==0)
	{
		cr.Say((12),"Base name doesn't exist.");
		return 0;
	}
	else
	{
		follower.FollowerVarBase[(942)]=baseId;
		cr.Say((12),"Respawn base successfully set to '"+bases[baseIndex].Name+"' .");
		return 0;
	}
	return 0;
}

uint dlg_GiveFollower(Critter&player,Critter@npc,string@say)
{
	if(!((@say!=null)&&say.length()>0))
	return 0;
	
	Critter@target=GetPlayer(say);
	if(!(@target!=null))
	{
		player.Say((12),"Invalid player.");
		return 0;
	}
	
	if(!(@npc!=null))
	{
		player.Say((12),"Error. Report this and try again");
		return 0;
	}
	
	if(player.Id==target.Id)
	{
		player.Say((12),"But that's you!");
		return 0;
	}
	
	if(player.GetMapId()!=target.GetMapId())
	{
		player.Say((12),"Player is not present on this map.");
		return 0;
	}
	
	if((((target.Flags)&((0x00080000)))!=0))
	{
		player.Say((12),"Player is not in game.");
		return 0;
	}
	
	if(IsArenaCombatant(target))
	{
		player.Say((12),"Player is inside arena.");
		return 0;
	}
	
	if(!CanHaveMoreFollowers(target,npc.FollowerVar[(932)]))
	{
		player.Say((12),"The player can't lead this follower.");
		return 0;
	}
	if((IsBase(player.GetMap())||IsTent(player.GetMap())))
	{
		DisbandFollower(player,npc,false);
		MakeFollower(npc,npc.FollowerVar[(932)],GetScriptName(npc.GetScriptId()),npc.Param[(104)],target,true);
		if((((npc.Param[(534)]&((0x00000020)))!=0)&&npc.Param[(104)]==(9314)))
		return(14);
		else if((((npc.Param[(534)]&((0x00000020)))!=0)&&npc.Param[(104)]==(9312)))
		return(8);
		else return 100;
	}
	else
	{
		player.Say((12),"Do it in Base or Tent.");
		return 0;
	}
}

bool d_IsLoyalityMax(Critter&player,Critter@follower)
{
	return(follower.FollowerVar[(937)]==100);
}

bool d_IsNotLoyalityMax(Critter&player,Critter@follower)
{
	return(follower.FollowerVar[(937)]!=100);
}

bool d_IsOwner(Critter&player,Critter@follower,int val)
{
	return(player.Id==uint(follower.FollowerVar[(933)]));
}

bool d_IsClaimable(Critter&player,Critter@follower,int val)
{
	return(follower.FollowerVar[(927)]==1);
}

bool d_IsGuarding(Critter&player,Critter@follower,int val)
{
	return(follower.FollowerVar[(925)]==(2));
}

bool d_IsFollowing(Critter&player,Critter@follower,int val)
{
	return IsFollowing(follower);
}

int d_SpawnMap(Critter&player,Critter@follower,int val)
{
	return follower.FollowerVar[(931)];
}

bool d_IsNotMode(Critter&player,Critter@follower,int val)
{
	return(follower.FollowerVar[(925)]!=val);
}

bool d_CanMine(Critter&player,Critter@follower)
{
	return(IsMine(player.GetMap())&&(player.GetMap().GetLocation().GetProtoId()!=(30)));
}

bool d_CanStay(Critter&player,Critter@follower)
{
	Map@map=player.GetMap();
	return(IsTent(map)||IsBase(map));
}

bool d_HasFollowerOfBaseType(Critter&player,Critter@npc,int val)
{
	return HasFollowerOfBaseType(player,val);
}

void r_RemoveFollowerOfBaseType(Critter&player,Critter@npc,int val)
{
	RemoveFollowerByBaseType(player,val);
}

bool d_HasBrahmin(Critter&player,Critter@npc,int val)
{
	return HasFollowerOfBaseType(player,(15));
}

bool d_HasNoBrahmin(Critter&player,Critter@npc,int val)
{
	return!HasFollowerOfBaseType(player,(15));
} 

bool d_CanLeadMoreFollowers(Critter&player,Critter@npc)
{
	return true;
} 

bool d_CanHaveMoreFollowers(Critter&player,Critter@npc,int FollowerType)
{
	return CanHaveMoreFollowers(player,uint(FollowerType));
}

void r_RemoveBrahmin(Critter&player,Critter@npc,int val)
{
	RemoveFollowerByBaseType(player,(15));
}

bool d_IsSpawnPlaceAvailable(Critter&player,Critter@npc,int place)
{
	uint16 hx,hy;
	if(place==(1))
	return((@GetNearestTentLocation(npc.FollowerVar[(933)],player.WorldX,player.WorldY)!=null));
	else if(place==(2))
	return(@GetRoomPosition(npc.FollowerVar[(933)],hx,hy)!=null);
	else if(place==(3))
	{
		array<IFactionBase@>bases;
		uint baseNum=GetFactionBases(npc.FollowerVar[(929)],bases);
		return(baseNum>0);
	}
	return false;
}

void r_RemoveArmor(Critter&player,Critter@follower)
{
	Item@item=follower.GetItem(0,(3));
	if(!(@item!=null))
	return;
	follower.MoveItem(item.Id,item.GetCount(),(0));
	follower.SetFavoriteItem((3),0);
}

void r_SetArmor(Critter&player,Critter@follower,int pid)
{
	r_RemoveArmor(player,follower);
	Item@item=follower.GetItem(pid,-1);
	follower.MoveItem(item.Id,item.GetCount(),(3));
	follower.SetFavoriteItem((3),item.GetProtoId());
}

void r_RemoveHelmet(Critter&player,Critter@follower)
{
	Item@item=follower.GetItem(0,(4));
	if(!(@item!=null))
	return;
	follower.MoveItem(item.Id,item.GetCount(),(0));
}

void r_SetHelmet(Critter&player,Critter@follower,int pid)
{
	r_RemoveHelmet(player,follower);
	Item@item=follower.GetItem(pid,-1);
	follower.MoveItem(item.Id,item.GetCount(),(4));
}

void r_SetSpawnPlace(Critter&player,Critter@follower,int place)
{
	follower.FollowerVarBase[(936)]=place;
}

void r_SetFaction(Critter&player,Critter@follower)
{
	follower.FollowerVarBase[(929)]=GetGroupIndex(player);
}

bool d_CanPayMerc(Critter&player,Critter@follower)
{
	IMerc@merc=GetMerc(follower.FollowerVar[(930)]);
	if(!(@merc!=null))
	return false;
	
	return(GetMercLoyalityCost(merc.GetCost())<=player.CountItem((41)));
}

void r_PayMerc(Critter&player,Critter@follower)
{
	IMerc@merc=GetMerc(follower.FollowerVar[(930)]);
	if(!(@merc!=null))
	{
		Log("Error finding merc proto "+follower.FollowerVar[(930)]+". Can't pay merc "+follower.Id);
		return;
	}
	
	if(!BanksTransferFromCritter(player,GetMercLoyalityCost(merc.GetCost()),(4),false))
	{
		Log("Couldn't remove money from player "+player.Id+" to banks.");
		return;
	}
	
	ModifyLoyality(follower,10,10);
} 

uint GetMercLoyalityCost(uint basecost)
{
	return basecost/4;
} 

void SetMode(Critter&master,Critter&follower,uint mode)
{
	follower.FollowerVarBase[(925)]=mode;
	follower.SetEvent((0),"_Idle");
	follower.ParamBase[(517)]=0;
	
	if(mode==(3))
	{
		follower.ParamBase[(212)]=40;
		follower.SetEvent((0),"prospect_miner@_Idle");
		return;
	}  
	
	if(mode==(0))
	follower.ParamBase[(518)]=1;
	else
	follower.ParamBase[(518)]=0;
	
	if(mode==(2))
	follower.SetHomePos(follower.HexX,follower.HexY,follower.Dir);
} 

void SetEvents(Critter&critter)
{
	critter.SetEvent((28),"_SomeoneAttacked");
	critter.SetEvent((15),"_Attack");
	critter.SetEvent((16),"_Attacked");
	critter.SetEvent((0),"_Idle");
	critter.SetEvent((4),"_ShowCritter");
	critter.SetEvent((2),"_Dead");
	critter.SetEvent((37),"_PlaneRun");
	critter.SetEvent((36),"_PlaneEnd");
}

void FollowerBaseInit(Critter&follower,bool firstTime)
{
	SetEvents(follower); 
	
	if(firstTime)
	{
		follower.FollowerVarBase[(926)]=(0);
		follower.FollowerVarBase[(925)]=(0);
		follower.FollowerVarBase[(928)]=(1);
		follower.FollowerVarBase[(931)]=follower.GetMapId();
		follower.FollowerVarBase[(937)]=100;
		follower.ParamBase[(518)]=1;
		follower.AddTimeEvent("cte_UpdateLoyality",(((7)*__TimeMultiplier*86400)),(6));
	}
	
	Critter@master=GetCritter(follower.FollowerVar[(933)]);
	if((@master!=null))
	follower.FollowerVarBase[(929)]=GetGroupIndex(master);
	
	follower.ParamBase[(512)]=0;
	follower.ParamBase[(523)]=0;
	(follower.ParamBase[(534)]=(follower.Param[(534)]|((0x00000200)))^((0x00000200)));
	follower.ParamBase[(513)]=1;
	(follower.ParamBase[(534)]=follower.Param[(534)]|((0x00000020)));
	follower.ParamBase[(521)]=1; 
	
	follower.ParamBase[(84)]=(-2);
	
	SetGroupInfo(follower,(1),1,(1));
	
	if(follower.FollowerVar[(925)]==(3))
	{
		follower.ParamBase[(212)]=40;
		follower.SetEvent((0),"prospect_miner@_Idle");
	}
	
	if(follower.FollowerVar[(932)]==(1))
	{
		follower.ParamBase[(84)]=(((10)*60));
		follower.ParamBase[(518)]=1;
	}
}

void critter_init(Critter&follower,bool firstTime)
{
	FollowerBaseInit(follower,firstTime);
}

int _PlaneRun(Critter&follower,NpcPlane&plane,int reason,uint&result0,uint&result1,uint&result2)
{
	if(plane.Type==(1)&&reason==(51))
	{
		uint percentage=100-follower.FollowerVar[(937)];
		if(percentage==100)
		{
			if(!Flee(follower))
			return(0);
			return(2);
		}
		int thresholdhp=(follower.Param[(7)]*percentage)/100;
		if(follower.Param[(72)]>=thresholdhp)
		{
			{};
			return(0);
		}
		else
		{
			if(!Flee(follower))
			return(0);
			return(2);
		}
	}
	return(0);
}

int _PlaneEnd(Critter&follower,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(plane.Identifier==(29))
	{
		follower.TransitToGlobal(false);
		((follower.FollowerVarBase[(941)])=(follower.FollowerVarBase[(941)])|((0x2)));
		return(2);
	}
	else if(plane.Type==(2)&&plane.Identifier==(37))
	{
		Critter@master=GetCritter(follower.FollowerVar[(933)]);
		if((@master!=null)&&IsOnSameMap(master,follower)&&(GetCrittersDistantion(master,follower)>GetDistance(follower)))
		{
			GoToMaster(master,follower);
			return(2);
		}
	}
	return(0);
}

void _Slave(Critter&cr,bool firstTime)
{
	FollowerBaseInit(cr,firstTime);
	(cr.ParamBase[(534)]=cr.Param[(534)]|((0x00004000)));
	cr.FollowerVarBase[(932)]=(2);
} 

void _Dead(Critter&cr,Critter@killer)
{
	if(cr.FollowerVar[(932)]==(1)&&IsDungeon(cr.GetMap()))                            
	
	DropItems(cr);
	
	if(cr.FollowerVar[(932)]!=(1))
	cr.ParamBase[(518)]=0;
}

void _ShowCritter(Critter&follower,Critter&critter)
{
	if(IsOnBufferMap(follower))
	return;
	
	int attack=follower.FollowerVar[(926)];
	int faction=follower.FollowerVar[(929)];
	
	Map@map=follower.GetMap(); 
	
	if(IsFriend(follower,critter))
	return;
	
	if(attack==(0))
	return;
	
	else if(attack==(6)&&!IsTown(map)&&GetGroupIndex(critter)==0)
	{
		Flee(follower);
		return;
	}
	
	else if(attack==(7))
	{
		if((@map!=null))
		{
			if(IsTent(map)&&(map.GetData((20))==follower.FollowerVar[(933)]))
			{
				
				if(critter.IsPlayer())
				if(critter.IsKnownLoc(true,map.GetLocation().Id))
				return;
				
				AttackCritter(follower,critter,__DeadHitPoints);
			}
			else if(IsBase(map)&&(map.GetData((0))==faction))
			{
				AttackCritter(follower,critter,__DeadHitPoints);
			}
		}
	} 
	
	else if(attack==(2))
	{  
		
		AttackCritter(follower,critter,__DeadHitPoints);
	}
	else if(attack==(1))
	{
		if(!critter.IsPlayer())
		return;
		
		AttackCritter(follower,critter,__DeadHitPoints);
	}
	else if(attack==(3))
	{
		
		AttackCritter(follower,critter,__DeadHitPoints);
	}
	else if(attack==(4))
	{
		if(!critter.IsPlayer())
		{
			if(!(((critter.Param[(534)]&((0x00000020)))!=0)))
			return;
			int status=GetStatus(faction,critter.FollowerVar[(933)]);
			
			if(status==(3))
			AttackCritter(follower,critter,__DeadHitPoints);
			return;
		}
		
		int status=GetStatus(faction,critter.Id);
		
		if(status==(3))
		AttackCritter(follower,critter,__DeadHitPoints);
	}
	else if(attack==(5))
	{
		if(!critter.IsPlayer())
		{
			if(!(((critter.Param[(534)]&((0x00000020)))!=0)))
			return;
			int status=GetStatus(faction,critter.FollowerVar[(933)]);
			
			if((uint(faction)!=GetGroupIndex(critter))&&(status!=(4))&&(status!=(1)))
			AttackCritter(follower,critter,__DeadHitPoints);
			return;
		}
		
		int status=GetStatus(faction,critter.Id);
		
		if((uint(faction)!=GetGroupIndex(critter))&&(status!=(4))&&(status!=(1)))
		AttackCritter(follower,critter,__DeadHitPoints);
	}
}

Critter@GetMaster(Critter&follower)
{
	return GetCritter(follower.FollowerVar[(933)]);
}

bool IsAwayFromMaster(Critter&master,Critter&follower)
{
	if(!(@master!=null)||!(@follower!=null))
	return true;
	return(GetCrittersDistantion(master,follower)>GetDistance(follower));
}

bool IsAwayFromMaster(Critter&follower)
{
	return IsAwayFromMaster(GetMaster(follower),follower);
}

void GoToMaster(Critter&master,Critter&follower)
{
	if(!(@master!=null)||!(@follower!=null))
	return;
	
	uint distance=GetDistance(follower);
	bool run=false;
	if(GetCrittersDistantion(master,follower)>(distance+3))
	run=true;
	
	uint16 hx=master.HexX-1+2*Random(0,1);
	uint16 hy=master.HexY-1+2*Random(0,1);
	Map@map=master.GetMap();
	if(!(@map!=null))
	return;
	if(!FindNearestFreeHex(map,hx,hy,hx,hy))
	return;
	
	int cut=GetDistantion(follower.HexX,follower.HexY,hx,hy)-1;
	if(cut<0)
	cut=0;
	
	AddWalkPlane(follower,0,(37),0,hx,hy,master.Dir,run,cut);
	follower.SetHomePos(hx,hy,master.Dir);
}

void _Idle(Critter&follower)
{
	if(Random(0,(5000/(75)))==0)
	ReloadWeapon(follower);
	
	Critter@master=GetMaster(follower);
	if(!(@master!=null))
	{
		follower.Wait((15000));
		return;
	}
	
	Map@map=follower.GetMap();
	if((@map!=null)&&map.GetLocation().IsEncounter()&&!IsOnSameMap(master,follower))
	{
		Flee(follower,false);
	} 
	
	if(follower.FollowerVar[(925)]!=(0))
	{
		follower.Wait((250));
		return;
	}
	
	if(IsOnSameMap(master,follower)&&IsAwayFromMaster(master,follower))
	{
		GoToMaster(master,follower);
		return;
	}
	
	follower.Wait((75));
}

bool _Attacked(Critter&follower,Critter&attacker)
{
	
	if(IsFriend(follower,attacker))
	{
		if(IsMaster(follower,attacker)&&(((follower.Param[(534)]&((0x00000020)))!=0)&&follower.Param[(104)]==(9314)))
		{
			{;};
			ModifyLoyality(follower,0,1);
		}
		return true;
	}
	
	if(follower.FollowerVar[(926)]==(6))
	{
		Flee(follower);
		return false;
	}
	
	return false;
}

bool _Attack(Critter&follower,Critter&target)
{
	if(follower.FollowerVar[(926)]==(6))
	{
		Flee(follower);
		return true;
	}
	
	if(IsTown(follower.GetMap())&&!IsFlaggedAsIllegal(target))
	{
		Critter@owner=GetCritter(follower.FollowerVar[(933)]);
		if(!(@owner!=null))
		return false;
		
		array<Critter@>guards;
		uint n=follower.GetMap().GetCritters(0,(0x0F)|(0x20),guards);
		for(uint i=0;i<n;i++)
		{
			if(((guards[i].Param[(534)]&((0x00000008)))!=0)&&owner.IsSeenBy(guards[i]))
			AttackCritter(guards[i],owner);
		}
	}
	
	return false;
}

void _SomeoneAttacked(Critter&follower,Critter&fromCrit,Critter&target)
{
	if(IsNonAggressive(follower)||follower.FollowerVar[(926)]==(6))
	{
		follower.ErasePlane((1),true);
		
		if(follower.FollowerVar[(926)]==(6))
		Flee(follower);
		return;
	} 
	
	if(IsSquadMember(follower,fromCrit)&&!(IsFriend(follower,target)))
	{
		AttackCritter(follower,target,__DeadHitPoints);
	} 
	
	if(IsSquadMember(follower,target)&&!IsFriend(follower,fromCrit))
	{
		AttackCritter(follower,fromCrit,__DeadHitPoints);
	}
} 

uint GetDistance(Critter&follower)
{
	uint dist=follower.FollowerVar[(928)];
	
	if(dist==(0))
	return 3;
	else if(dist==(1))
	return 7;
	else if(dist==(2))
	return 15;
	else
	return(0);
}

bool IsMaster(Critter&follower,Critter&critter)
{
	if(!critter.IsPlayer())
	return false;
	
	return(critter.Id==uint(follower.FollowerVar[(933)]));
}

bool IsOnBufferMap(Critter&follower)
{
	return(follower.GetMap().GetProtoId()==228);
}

bool IsOnSameMap(Critter&critter1,Critter&critter2)
{
	return(critter1.GetMapId()==critter2.GetMapId());
}

bool IsOnWorldmap(Critter&critter)
{
	return(critter.GetMapId()==0);
} 

bool IsFriend(Critter&follower,Critter&critter)
{
	
	if(follower.FollowerVar[(933)]==0)
	return true;
	
	uint myMasterFaction=GetPlayerFaction(follower.FollowerVar[(933)]);
	if(critter.IsPlayer())
	{
		if(IsMaster(follower,critter))
		return true;
		if(myMasterFaction>1)
		{
			if(int(myMasterFaction)==(critter.Param[(106)]))
			return true;
			uint status=GetStatus(myMasterFaction,critter.Id);
			if(status==(1)||status==(4))
			return true;
		}
	}
	else
	{
		if(follower.FollowerVar[(933)]==critter.FollowerVar[(933)])
		return true;
		if(myMasterFaction>1)
		{
			if(int(myMasterFaction)==(critter.Param[(106)]))
			return true;
			
			if(critter.FollowerVar[(933)]>0)
			{
				uint hisMasterFaction=GetPlayerFaction(critter.FollowerVar[(933)]);
				if(hisMasterFaction>1)
				{
					if(myMasterFaction==hisMasterFaction)
					return true;
					uint status=GetStatus(myMasterFaction,critter.FollowerVar[(933)]);
					if(status==(1)||status==(4))
					return true;
				}
			}
		}
	}
	return false;
} 

bool IsSquadMember(Critter&follower,Critter&critter)
{
	return(IsMaster(follower,critter)||critter.FollowerVar[(933)]==follower.FollowerVar[(933)]);
}

bool IsNonAggressive(Critter&follower)
{
	return(follower.CrType==(15));
}                                                                                                                                                                                                                                                                                                                                                                

array<uint>flags=
{
	
	(26695),(26695),(9250),(26683),(26690),(9252),(26696),(26685),(26695),
	
	(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),
	(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),
	(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),
	(26695),(26695),(26695),(26695),(26682), 
	
	9253,(26694),(26691),(26690),(26697),
	
	(26697),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26690),9254,(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),
	(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),(26695),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26690),27499,(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),27143,27143,(26694),
	
	(26696),(26684),(26693),(26692),27143,27143,(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),26699,
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694),
	
	(26696),(26684),(26693),(26692),(26691),(26690),(26688),(26696),(26684),(26694)
};

array<uint>we_flags=
{
	
	(9604),(9609),(9607),(9606),(9608),(9612)
};
import bool GodOfTheRealm(uint)from"cheats";
import bool GuardNotLegit(Critter@cr,Item@item,bool deleteItem)from"cheats";
import void GuardMultihexMove(Item&item,uint8 fromSlot,uint8 toSlot)from"multihex";
import void hunting(Critter&player,Critter@trainer)from"perks";
import void killer(Critter&player,Critter@trainer)from"perks";
import void assasin(Critter&player,Critter@trainer)from"perks";
import void allstatup(Critter&player,Critter@trainer)from"perks";
import void czosnek(Critter&player,Critter@trainer)from"perks";
import void faith(Critter&player,Critter@trainer)from"perks";
import void CallMobs(Critter&cr,int howmany,int whatkind,int whattype)from"mob_dynamic";          

bool critter_check_move_item(Critter&cr,Item&item,uint8 toSlot,Item@itemSwap)
{
	uint8 fromSlot=item.CritSlot;
	if(!(@item!=null))
	return false; 
	
	if(GuardNotLegit(cr,item,true))
	return true;
	if((toSlot==(1)||toSlot==(2))&&(fromSlot==(3)||fromSlot==(4)))
	return false;
	if((@itemSwap!=null))
	{
		if(fromSlot==(2)&&toSlot==(1)&&(item.Proto.ProtoId==(208)||itemSwap.Proto.ProtoId==(208)))
		return false;
		if(fromSlot==(1)&&toSlot==(2)&&(item.Proto.ProtoId==(208)||itemSwap.Proto.ProtoId==(208)))
		return false;
		if(fromSlot==(2)&&toSlot==(1)&&(item.Proto.ProtoId==(25700)||itemSwap.Proto.ProtoId==(25700)))
		return false;
		if(fromSlot==(1)&&toSlot==(2)&&(item.Proto.ProtoId==(25700)||itemSwap.Proto.ProtoId==(25700)))
		return false;
	}                                         
	
	if(toSlot==(255))
	{ 
		
		if(item.GetType()==(8))
		{
			Location@loc=GetLocationOf(cr);
			if((@loc!=null)&&!loc.IsBase()&&!loc.IsEncounter()&&!loc.IsTent())
			{
				cr.Say((11),"You can't drop this here.");
				return false;
			}
		}
		
		return true;
	}
	
	bool handsSwap=((fromSlot==(1)&&toSlot==(2))||(fromSlot==(2)&&toSlot==(1)));
	if((@itemSwap!=null)&&!handsSwap)
	return false; 
	
	if(toSlot==(1))
	{
		if(item.GetType()==(3)&&!IsCritterAnim1(cr.CrType,item.Proto.Weapon_Anim1))
		return false;
	} 
	
	if(toSlot==(3))
	{
		bool can=true;
		if(item.GetType()!=(1)||item.Proto.Slot!=(3))
		{
			if(cr.ParamBase[(420)]==1337)
			{
				
				if(GodOfTheRealm(cr.Id))
				
				can=true;
			}
			else
			can=false;
		}
		
		if(can&&!IsCritterCanArmor(cr.CrType))
		can=false;   
		
		uint armor=item.GetProtoId();
		
		if((armor==(3)||armor==(232)
		||armor==(348)||armor==(349))&&item.BrokenFlags==(0x40))       
		
		can=false;
		
		return(can);
	} 
	
	if(toSlot==(4))
	{
		bool can=true;
		
		if(item.GetType()!=(1)||item.Proto.Slot!=(4))
		{
			if(cr.ParamBase[(420)]==1337)
			{
				
				if(GodOfTheRealm(cr.Id))
				
				can=true;
			}
			else
			can=false;
		}
		
		uint armor=item.GetProtoId();
		
		if((armor==(741)
		||armor==(727)||armor==(738)||armor==(739)
		||armor==(721)||armor==(737)
		||armor==(735)||armor==(736))&&item.BrokenFlags==(0x40))
		
		can=false;
		
		return(can);
	}  
	
	if(toSlot>(3))
	{
		if(toSlot!=item.Proto.Slot)
		{
			if(cr.ParamBase[(420)]==1337)
			{
				
				if(GodOfTheRealm(cr.Id))
				
				return(true);
			}
			return(false);
		}
		
		if(toSlot==(5)&&cr.IsPlayer())
		return(false);
	} 
	
	return true;
}

const int[][]armorRedirect=
{    
	
	{
		(106),(0),-1,
		(13),(108),
		(12),(107),
		(14),(109),
	},
	
	{
		(123),(0),-1,
		(13),(122),
		(12),(124),
		(14),(125),
	}, 
	
	{
		(137),(1),-1,
		(5),(137),
	}
	
};    

void critter_move_item(Critter&cr,Item&item,uint8 fromSlot)
{
	uint8 toSlot=item.CritSlot;
	if(cr.Param[(1169)]>0)
	return;
	GuardMultihexMove(item,fromSlot,toSlot); 
	
	if(item.GetType()==(1)&&(fromSlot==(3)||toSlot==(3)))
	{
		cr.ParamBase[(75)]-=500;
		if(GetCritterAnimType(cr.CrType)!=(1))
		{
			
			bool isMale=(cr.Param[(71)]==(0));
			uint crType=cr.Param[(112)];
			if(crType==0)
			crType=(isMale?((69)):((4)));
			
			if(toSlot==(3))
			{
				if(cr.Param[(143)]==0)
				crType=(isMale?item.Proto.Armor_CrTypeMale:item.Proto.Armor_CrTypeFemale);
				else
				{
					uint over=cr.Param[(143)];
					if(isMale)
					{
						if(over==item.Proto.Armor_CrTypeMale2||
						over==item.Proto.Armor_CrTypeMale3||
						over==item.Proto.Armor_CrTypeMale4)
						crType=over;
					}
					else
					{
						if(over==item.Proto.Armor_CrTypeFemale2||
						over==item.Proto.Armor_CrTypeFemale3||
						over==item.Proto.Armor_CrTypeFemale4)
						crType=over;
					}
				}
			} 
			
			if(cr.Param[(112)]==(106)&&isMale)
			{
				crType=(106);
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=(107);
					else if(crType==(13))
					crType=(108);
					else if(crType==(14))
					crType=(109);
				}
			} 
			
			if(cr.Param[(112)]==(21))
			{
				crType=(21);
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=(20);
					else if(crType==(13))
					crType=(20);
					else if(crType==(14))
					crType=(120);
					else if(crType==(1))
					crType=(85);
					else if(crType==(71))
					crType=(85);
					else if(crType==(144))
					crType=(85);
					else
					{
						DeleteItem(item);
						cr.Say((11),"That armor was too small...It broken while you was trying wear it");
					}
					
				}
			}
			if(cr.Param[(112)]==435)
			{
				crType=435;
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=435;
					else if(crType==(13))
					crType=435;
					else if(crType==(14))
					crType=435;
					else if(crType==(1))
					crType=(85);
					else if(crType==(71))
					crType=(85);
					else if(crType==(144))
					crType=(85);
					else
					{
						DeleteItem(item);
						cr.Say((11),"That armor was too small...It broken while you was trying wear it");
					}
					
				}
			}
			if(cr.Param[(112)]==489)
			{
				crType=489;
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=489;
					else if(crType==(13))
					crType=489;
					else if(crType==(14))
					crType=489;
					else if(crType==(1))
					crType=(85);
					else if(crType==(71))
					crType=(85);
					else if(crType==(144))
					crType=(85);
					else
					{
						DeleteItem(item);
						cr.Say((11),"That armor was too small...It broken while you was trying wear it");
					}
					
				}
			}
			if(cr.Param[(112)]==490)
			{
				crType=490;
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=490;
					else if(crType==(13))
					crType=490;
					else if(crType==(14))
					crType=490;
					else if(crType==(1))
					crType=(85);
					else if(crType==(71))
					crType=(85);
					else if(crType==(144))
					crType=(85);
					else
					{
						DeleteItem(item);
						cr.Say((11),"That armor was too small...It broken while you was trying wear it");
					}
					
				}
			}
			if(cr.Param[(112)]==491)
			{
				crType=491;
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=491;
					else if(crType==(13))
					crType=491;
					else if(crType==(14))
					crType=491;
					else if(crType==(1))
					crType=(85);
					else if(crType==(71))
					crType=(85);
					else if(crType==(144))
					crType=(85);
					else
					{
						DeleteItem(item);
						cr.Say((11),"That armor was too small...It broken while you was trying wear it");
					}
					
				}
			}
			if(cr.Param[(112)]==492)
			{
				crType=492;
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=492;
					else if(crType==(13))
					crType=492;
					else if(crType==(14))
					crType=492;
					else if(crType==(1))
					crType=(85);
					else if(crType==(71))
					crType=(85);
					else if(crType==(144))
					crType=(85);
					else
					{
						DeleteItem(item);
						cr.Say((11),"That armor was too small...It broken while you was trying wear it");
					}
					
				}
			}
			
			if(cr.Param[(112)]==(123)&&isMale)
			{
				crType=(123);
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=(124);
					else if(crType==(13))
					crType=(122);
					else if(crType==(14))
					crType=(125);
				}
			} 
			
			if(cr.Param[(112)]==(137)&&!isMale)
			{
				crType=(137);
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeFemale;
					if(crType==(5))
					crType=(134);
					else if(crType==(7))
					crType=(136);
					else if(crType==(6))
					crType=(34); 
					
				}
			} 
			
			if(cr.Param[(112)]==(45)&&isMale)
			{
				crType=(45);
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=(107);
					else if(crType==(13))
					crType=(108);
					else if(crType==(14))
					crType=(109);
				}
			} 
			
			if(cr.Param[(112)]==(128)&&isMale)
			{
				crType=(128);
				if(toSlot==(3))
				{
					crType=item.Proto.Armor_CrTypeMale;
					if(crType==(12))
					crType=(107);
					else if(crType==(13))
					crType=(108);
					else if(crType==(14))
					crType=(109);
				}
			}
			if(cr.Param[(112)]>399)
			crType=cr.Param[(112)];            
			
			if(cr.CrType!=crType)
			cr.ChangeCrType(crType);
		} 
		
		if(toSlot==(3))
		EnableItemPerk(cr,item,(1));
		else if(fromSlot==(3))
		DisableItemPerk(cr,item,(1));
		
	}
	if(fromSlot==(4)||toSlot==(4))
	{
		
		if(toSlot==(4))
		EnableItemPerk(cr,item,(2));
		else if(fromSlot==(4))
		DisableItemPerk(cr,item,(2));
	}     
	
	if(item.Proto.ProtoId==(209)||
	item.Proto.ProtoId==(206)||
	item.Proto.ProtoId==(545))
	{
		if(fromSlot==(255))
		{
			((cr.ParamBase[(137)])=(cr.ParamBase[(137)])|(0x1));
			{};
		}
		else
		{
			if(!(@cr.GetItem((209),-1)!=null)&&
			!(@cr.GetItem((206),-1)!=null)&&
			!(@cr.GetItem((545),-1)!=null))
			{
				(cr.ParamBase[(137)]=((cr.ParamBase[(137)])&(~(0x1))));
				{};
			}
		}
	} 
	
}

bool isFlag(Item&flag)
{
	uint16[]flages=
	{
		(26681),
		(26682),
		(26683),
		(26684),
		(26685),
		(26695),
		(26696),
		(26688),
		(26689),
		(26690),
		(26691),
		(26692),
		(26693),
		(26694),
		(26697),
		26698,
		27143,
		26699
	};
	
	if((@flag!=null)&&Present(flag.GetProtoId(),flages))
	return(true);
	else
	return(false);
} 

void speedboost(Critter&cr)
{
	Map@map=cr.GetMap();
	int val=50;
	val+=cr.Param[(12)];
	val+=cr.Param[(5)];
	val+=cr.Param[(557)]*5;
	val+=cr.Param[(325)]*5;
	val+=cr.Param[(328)]*5;
	if(cr.Param[(562)]!=0&&cr.Param[(246)]>0)val+=10;
	
	if((@cr.GetItem((1),0)!=null))
	if((((cr.GetItem((1),0).Flags)&((0x00000080)))!=0))
	val+=cr.Param[(350)]*30;
	if(cr.Param[(350)]>0&&cr.Param[(307)]>0&&cr.Param[(407)]>0&&cr.Param[(349)]>0)
	val+=15;
	if((@cr.GetItem((1),0)!=null))
	{
		if(cr.GetItem((1),0).Val3==(67))
		val+=5;
		if(cr.GetItem((1),0).Val4==(67))
		val+=5;
		if(cr.GetItem((1),0).Val5==(67))
		val+=5;
		if(cr.GetItem((1),0).Val6==(67))
		val+=5;
		if(cr.GetItem((1),0).Val7==(67))
		val+=5;
		if(cr.GetItem((1),0).Val8==(67))
		val+=5;
		
	}
	if((@cr.GetItem((1),0)!=null))
	if(cr.GetItem((1),0).Proto.Weapon_Skill_0==(203)||cr.GetItem((1),0).Proto.Weapon_Skill_0==(210))
	if(cr.Param[(385)]>0&&cr.Param[(444)]>0&&cr.Param[(443)]>0)
	val/=2; 
	
	int realval=500000/1700;
	cr.ParamBase[(1108)]=1700; 
	
	if(!(@map!=null))
	return;
	if(cr.Param[(106)]>1)
	{
		IFaction@faction=GetFaction(cr.Param[(106)]);
		if((@faction!=null))
		{
			cr.ParamBase[(1070)]=faction.get_tag(1);
			cr.ParamBase[(1071)]=faction.get_tag(2);
			cr.ParamBase[(1072)]=faction.get_tag(3);
			cr.ParamBase[(1073)]=faction.get_tag(4);
			cr.ParamBase[(1074)]=faction.get_tag(5);
			cr.ParamBase[(1075)]=faction.get_r(1);
			cr.ParamBase[(1076)]=faction.get_r(2);
			cr.ParamBase[(1077)]=faction.get_r(3);
			cr.ParamBase[(1078)]=faction.get_r(4);
			cr.ParamBase[(1079)]=faction.get_r(5);
			cr.ParamBase[(1080)]=faction.get_g(1);
			cr.ParamBase[(1081)]=faction.get_g(2);
			cr.ParamBase[(1082)]=faction.get_g(3);
			cr.ParamBase[(1083)]=faction.get_g(4);
			cr.ParamBase[(1084)]=faction.get_g(5);
			cr.ParamBase[(1085)]=faction.get_b(1);
			cr.ParamBase[(1086)]=faction.get_b(2);
			cr.ParamBase[(1087)]=faction.get_b(3);
			cr.ParamBase[(1088)]=faction.get_b(4);
			cr.ParamBase[(1089)]=faction.get_b(5);
		}
	}
	if(IsCompanion(cr)&&(@cr!=null))
	{
		cr.ParamBase[(538)]=1;
		cr.TraitBase[(557)]=1;
	}
	if((((cr.Param[(534)]&((0x00000020)))!=0)&&cr.Param[(104)]==(9314))&&(@cr!=null))
	{
		cr.ParamBase[(538)]=1;
		cr.TraitBase[(557)]=1;
	}
	if(cr.Param[(195)]>0)
	summoner(cr);
	if(cr.Param[(395)]>0)
	cr.ParamBase[(138)]=3;
	if(cr.Param[(345)]>0)
	cr.ParamBase[(138)]=2;
	if(cr.Param[(384)]>0)
	cr.ParamBase[(138)]=4;
	if(cr.Param[(382)]>0)
	cr.ParamBase[(138)]=5;
	
	if(cr.Param[(352)]>0)
	cr.ParamBase[(138)]=7;
	if(cr.Param[(353)]>0)
	cr.ParamBase[(138)]=6;
	if(cr.Param[(347)]>0)
	cr.ParamBase[(138)]=8;
	if(cr.Param[(404)]>0)
	cr.ParamBase[(138)]=9;
	if(cr.Param[(408)]>0)
	cr.ParamBase[(138)]=10;
	if(cr.Param[(441)]>0)
	cr.ParamBase[(138)]=11;
	if(cr.Param[(450)]>0)
	cr.ParamBase[(138)]=12;
	if(cr.Param[(418)]>0)
	cr.ParamBase[(138)]=13;
	if(cr.Param[(419)]>0)
	cr.ParamBase[(138)]=14;
	if(cr.Param[(357)]>0)
	cr.ParamBase[(138)]=15;
	if(cr.Param[(358)]>0)
	cr.ParamBase[(138)]=16;
	if(cr.Param[(359)]>0)
	cr.ParamBase[(138)]=17;
	if(cr.Param[(360)]>0)
	cr.ParamBase[(138)]=18;
	if(cr.Param[(393)]>0)
	{
		cr.ParamBase[(138)]=1;
		rollstats(cr);
	}
	if(cr.Param[(408)]!=0&&cr.Param[(510)]==0&&Random(1,10)==10)
	cr.ParamBase[(510)]=1;
	if(cr.IsPlayer())
	{
		int ap=30;
		ap-=cr.Param[(0)];
		if(cr.Param[(403)]>0)
		ap=ap/2;
		if(cr.Param[(395)]>0&&Random(1,100)==1)
		cr.ToKnockout(((Random(0,1)==0)?(82):(83)),((Random(0,1)==0)?(86):(87)),((Random(0,1)==0)?(88):(89)),ap,cr.HexX,cr.HexY);
		
		if(cr.ParamBase[(200)]>=300+cr.ParamBase[(1109)]+cr.Param[(4)])cr.ParamBase[(200)]=300+cr.ParamBase[(1109)]+cr.Param[(4)];
		if(cr.ParamBase[(201)]>=300+cr.ParamBase[(1110)]+cr.Param[(4)])cr.ParamBase[(201)]=300+cr.ParamBase[(1110)];
		if(cr.ParamBase[(202)]>=300+cr.ParamBase[(1111)])cr.ParamBase[(202)]=300+cr.ParamBase[(1111)]+cr.Param[(4)];
		if(cr.ParamBase[(203)]>=300+cr.ParamBase[(1112)]+cr.Param[(4)])cr.ParamBase[(203)]=300+cr.ParamBase[(1112)]+cr.Param[(4)];
		if(cr.ParamBase[(205)]>=300+cr.ParamBase[(1114)]+cr.Param[(4)])cr.ParamBase[(205)]=300+cr.ParamBase[(1114)]+cr.Param[(4)];
		if(cr.ParamBase[(208)]>=300+cr.ParamBase[(1117)]+cr.Param[(4)])cr.ParamBase[(208)]=300+cr.ParamBase[(1117)]+cr.Param[(4)];
		if(cr.ParamBase[(214)]>=300+cr.ParamBase[(1123)]+cr.Param[(4)])cr.ParamBase[(214)]=300+cr.ParamBase[(1123)]+cr.Param[(4)];
		if(cr.ParamBase[(204)]>=200+cr.ParamBase[(1113)])cr.ParamBase[(204)]=200+cr.ParamBase[(1113)];
		if(cr.ParamBase[(206)]>=200+cr.ParamBase[(1115)]+cr.Param[(4)])cr.ParamBase[(206)]=200+cr.ParamBase[(1115)]+cr.Param[(4)];
		if(cr.ParamBase[(207)]>=200+cr.ParamBase[(1116)]+cr.Param[(4)])cr.ParamBase[(207)]=200+cr.ParamBase[(1116)]+cr.Param[(4)];
		if(cr.ParamBase[(209)]>=200+cr.ParamBase[(1118)]+cr.Param[(4)])cr.ParamBase[(209)]=200+cr.ParamBase[(1118)]+cr.Param[(4)];
		if(cr.ParamBase[(210)]>=200+cr.ParamBase[(1119)]+cr.Param[(4)])cr.ParamBase[(210)]=200+cr.ParamBase[(1119)]+cr.Param[(4)];
		if(cr.ParamBase[(217)]>=200+cr.ParamBase[(1126)]+cr.Param[(4)])cr.ParamBase[(217)]=200+cr.ParamBase[(1126)]+cr.Param[(4)];
		if(cr.ParamBase[(213)]>=200+cr.ParamBase[(1122)]+cr.Param[(4)])cr.ParamBase[(213)]=200+cr.ParamBase[(1122)]+cr.Param[(4)];
		if(cr.ParamBase[(212)]>=200+cr.ParamBase[(1121)]+cr.Param[(4)])cr.ParamBase[(212)]=200+cr.ParamBase[(1121)]+cr.Param[(4)];
		if(cr.ParamBase[(211)]>=150+cr.ParamBase[(1120)]+cr.Param[(4)])cr.ParamBase[(211)]=150+cr.ParamBase[(1120)]+cr.Param[(4)];
		if(cr.ParamBase[(215)]>=150+cr.ParamBase[(1124)]+cr.Param[(4)])cr.ParamBase[(215)]=150+cr.ParamBase[(1124)]+cr.Param[(4)];
		if(cr.ParamBase[(216)]>=150+cr.ParamBase[(1125)]+cr.Param[(4)])cr.ParamBase[(216)]=150+cr.ParamBase[(1125)]+cr.Param[(4)]+cr.Param[(357)]*50;
		uint current_weight;
		uint skill=cr.Param[(203)];
		uint bonus=0;
		current_weight=cr.ItemsWeight();
		uint penalty=0;
		Item@CritterArmor=cr.GetItem(0,(3));
		Item@CritterHelmet=cr.GetItem(0,(4));
		uint8 mode=0;
		uint8 use=((mode)&0xF);
		ProtoItem@weapon1=cr.GetSlotProto((1),mode);
		ProtoItem@weapon2=cr.GetSlotProto((2),mode);
		int skillNum1=((use)==0?weapon1.Weapon_Skill_0:((use)==1?weapon1.Weapon_Skill_1:((use)==2?weapon1.Weapon_Skill_2:0)));
		int skillNum2=((use)==0?weapon2.Weapon_Skill_0:((use)==1?weapon2.Weapon_Skill_1:((use)==2?weapon2.Weapon_Skill_2:0)));
		if(cr.Trait[(551)]!=0)penalty+=20;
		if((cr.Param[(302)]!=0)&&(cr.Param[(303)]!=0)&&(cr.Param[(410)]!=0))bonus+=50;
		if((@weapon1!=null))
		{
			if((skillNum1==(200))||(skillNum1==(201))||(skillNum1==(202)))bonus/=2;
		}
		if((@weapon2!=null))
		{
			if((skillNum2==(200))||(skillNum2==(201))||(skillNum2==(202)))bonus/=2;
		}
		
		if(cr.Trait[(562)]!=0&&cr.Timeout[(250)]>0)bonus+=10;
		if((cr.Param[(304)]!=0))bonus+=20;
		if((cr.Param[(352)]!=0))bonus+=20;
		if((@CritterArmor!=null))
		{
			if(CritterArmor.Val3==(40))bonus+=20;
			if(CritterArmor.Val4==(40))bonus+=20;
			if(CritterArmor.Val5==(40))bonus+=20;
			if(CritterArmor.Val6==(40))bonus+=20;
			if(CritterArmor.Val7==(40))bonus+=20;
			if(CritterArmor.Val8==(40))bonus+=20;
		}
		if((cr.Param[(324)]>0))bonus+=20;
		if((@CritterArmor!=null))
		{
			if((CritterArmor.GetProtoId()==(74))||
			(CritterArmor.GetProtoId()==(265))||
			(CritterArmor.GetProtoId()==(1))||
			(CritterArmor.GetProtoId()==(379)))
			{
				bonus+=4;
			}
			
		}
		if(cr.Param[(149)]>0)
		bonus-=1000;
		else if(bonus<0)
		bonus=0;
		bonus-=cr.Param[(197)];
		bonus-=cr.Param[(197)];
		array<Critter@>teammates;
		uint k=cr.GetMap().GetCritters(0,(0x10)|(0x0F),teammates);
		if(cr.Param[(441)]>0&&cr.Param[(89)]<2)
		{
			for(uint i=0;i<k;i++)
			{
				if(teammates[i].Param[(106)]!=cr.Param[(106)])
				continue;
				if(teammates[i].Id==cr.Id)
				continue;
				bonus+=8;
			}
		}
		if(cr.Param[(431)]==3)
		bonus-=60;
		cr.ParamBase[(118)]=(((200-bonus+penalty)>(14414))?(14414):(((200-bonus+penalty)<(100))?(100):(200-bonus+penalty)));
		if(cr.Param[(197)]>0)
		cr.ParamBase[(197)]-=1;
		if(cr.Param[(803)]>0&&Random(1,2)==2)
		cr.ParamBase[(803)]-=1;
		if(cr.Param[(345)]>0)
		cr.ParamBase[(117)]=350-cr.Param[(2)];
		
		cr.ParamBase[(192)]=0;
		cr.ParamBase[(193)]=0;     
		
		if(cr.IsPlayer()&&cr.Param[(106)]>1&&cr.Param[(89)]<2)
		{
			array<Item@>items;
			uint n=map.GetItems(9200+cr.Param[(106)],items);
			if(n==0)return;
			if((@items[0]!=null))
			{
				for(uint i=0;i<n;i++)
				{
					if(items[i].Val8==cr.Param[(106)])
					{
						cr.ParamBase[(192)]=items[i].Val9;
						cr.ParamBase[(193)]=n;
					}
				}
				
			}
			if(!(@items[0]!=null))
			{
				cr.ParamBase[(192)]=0;
				cr.ParamBase[(193)]=0;
			}
		}
		if(cr.IsPlayer()&&cr.Param[(89)]>1)
		{
			array<Item@>items;
			uint n=map.GetItems(9000+cr.Param[(89)],items);
			if(n==0)return;
			if((@items[0]!=null))
			{
				for(uint i=0;i<n;i++)
				{
					if(items[i].Val6==cr.Param[(89)])
					{
						cr.ParamBase[(192)]=items[i].Val9;
						cr.ParamBase[(193)]=n;
					}
				}
				
			}
			if(!(@items[0]!=null))
			{
				cr.ParamBase[(192)]=0;
				cr.ParamBase[(193)]=0;
			}
		}
	}
	if(Random(1,100)<cr.ParamBase[(5)])
	speedboost(cr);
}

void rollstats(Critter&player)
{
	if(Random(1,5)==1)
	{
		for(int i=0;i<9;i++)
		{
			player.ParamBase[(1172)+i]=Random(1,34);
			if(Random(1,25)<player.Param[(6)]&&player.Param[(1172)+i]%2==0)
			player.ParamBase[(1172)+i]++;
			
		}
		player.Say((11),"You got a rolled");
	}
}

void summoner(Critter&cr)
{
	uint numMobs=cr.GetMap().GetNpcCount((203),(0x20)|(0x01));
	if(numMobs>19)
	return;
	CallMobs(cr,Random(1,3),cr.Param[(195)],Random(1,3));
	
}

