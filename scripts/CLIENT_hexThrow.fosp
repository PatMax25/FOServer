

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

shared interface IPolygon
{
	IPolygon@AddVertex(uint16 x,uint16 y);
	IPolygon@AddVertices(array<uint16>&hexes);
	
	void GetTriangulation(array<uint16>&triangles);      
	
	bool IsWithin(uint16 x,uint16 y);
};  

import IPolygon@NewPolygon()from"polygon";     

import void GetDrawHexAreaData(array<uint16>&area,bool triangles,int color,array<int>&data)from"polygon";
import void DrawHexArea(array<uint16>&area,bool triangles,int color)from"polygon";               

shared class Sprite
{
	Sprite()
	{
		Id=0;
		Width=0;
		Height=0;
		FrmCount=0;
	}
	
	bool Load(string&name,int path)
	{
		if(name.length()>0)
		{
			Id=LoadSprite(name,path);
			Filename=name;
		}
		else
		Id=0;
		RefreshData();
		return Id!=0;
	}
	
	void LoadHash(uint nameHash,uint8 dir)
	{
		Id=LoadSprite(nameHash,dir);
		RefreshData();
	}
	
	void LoadByIni(string&iniKey,int path)
	{
		string@name=GetIfaceIniStr(iniKey);
		if(@name!=null&&name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Draw(int x,int y)
	{
		if(Id!=0)
		DrawSprite(Id,-1,x,y,0);
	}
	
	private void RefreshData()
	{
		if(Id!=0)
		{
			Width=GetSpriteWidth(Id,0);
			Height=GetSpriteHeight(Id,0);
			FrmCount=GetSpriteCount(Id);
		}
		else
		{
			Width=0;
			Height=0;
			FrmCount=0;
			Filename="";
		}
	}
	
	uint Id;
	int Width;
	int Height;
	uint FrmCount;
	string Filename;
};                    

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

bool IsHexThrowingWeapon(ItemCl@item)
{
	if(!(@item!=null))
	return false;
	if(item.GetType()!=(3))
	return false;
	uint8 use=((item.Mode)&0xF);
	return((use)==0?item.Proto.Weapon_Skill_0:((use)==1?item.Proto.Weapon_Skill_1:((use)==2?item.Proto.Weapon_Skill_2:0)))==(205);
}

uint HexThrowGetMaxRange(CritterCl&cr,ItemCl@item)
{
	if(!(@item!=null))
	return 0;
	
	uint bonus=6*(cr.Param[(336)]);
	uint max=0;
	max=5+cr.Param[(0)];
	max+=6*(cr.Param[(336)]);
	if(cr.Param[(336)]>0&&cr.Param[(315)]>0)
	max+=5;
	if(IsGrenade(item))
	{
		uint8 use=((item.Mode)&0xF);
		return max;
	}
	else
	{
		return 0;
	}
}

bool IsHexThrowable(ProtoItem&weapon)
{
	if(!(@weapon!=null))
	false;
	return!(weapon.Type==(3)&&weapon.Weapon_IsUnarmed);
}

int HexThrowingToHit(CritterCl&cr,uint16 tx,uint16 ty,ProtoItem&weapon)
{
	if(!(@weapon!=null))
	return 0;
	if(weapon.Type==(3)&&weapon.Weapon_IsUnarmed)
	return 0;
	if(!cr.IsLife())
	return 0;
	
	int dist=GetDistantion(cr.HexX,cr.HexY,tx,ty);
	
	int toHit=int(cr.Param[(205)]);
	int weaponPerk=weapon.Weapon_Perk;
	int blockers=0;  
	
	int distmod1=2;
	int distmod2=0;
	
	int perception=cr.Param[(1)];
	int acc=dist;
	
	if(dist<distmod2)
	acc+=distmod2;
	else
	{
		if(cr.IsPlayer())
		acc-=(perception-2)*distmod1;
		else
		acc-=perception*distmod1;
	}
	
	if(-2*perception>acc)
	acc=-2*perception;
	
	acc-=2*cr.Param[(315)];
	
	if(acc>=0)
	{
		if(cr.Damage[(502)]!=0)
		acc*=-12;
		else
		acc*=-4;
	}
	else
	acc*=-4;
	
	toHit+=acc;     
	
	blockers=GetCrittersPath(cr.HexX,cr.HexY,tx,ty,0.0f,dist,(0x01),null); 
	
	toHit-=10*blockers;
	
	if(cr.Damage[(502)]!=0)
	toHit-=25;
	toHit=(((toHit)>(95))?(95):(((toHit)<(5))?(5):(toHit)));
	
	return toHit;
}

int HexThrowActionPointsCost(ItemCl&item,CritterCl&cr)
{
	if(IsGrenade(item))
	{
		uint8 use=((item.Mode)&0xF);
		int apCost=(cr.Param[(306)]>0)?-1:0;
		apCost+=((use)==0?item.Proto.Weapon_ApCost_0:((use)==1?item.Proto.Weapon_ApCost_1:((use)==2?item.Proto.Weapon_ApCost_2:0)));
		apCost-=cr.Param[(395)];
		
		return apCost;
	}
	return 0;
}

bool IsHexThrowableThere(CritterCl&cr,ItemCl@item,uint16 tx,uint16 ty)
{
	if(!(@item!=null)||!IsHexThrowable(item.Proto)||!cr.IsLife())
	return false;     
	
	if(cr.Damage[(503)]!=0&&cr.Damage[(504)]!=0)
	return false;
	if(HexThrowGetMaxRange(cr,item)==0||GetDistantion(cr.HexX,cr.HexY,tx,ty)==0)
	return false; 
	
	uint16 pbx=tx;
	uint16 pby=ty;
	uint16 bx=tx;
	uint16 by=ty;     
	
	GetCrittersPath(cr.HexX,cr.HexY,tx,ty,0.0f,0,0,null,pbx,pby,bx,by); 
	
	if(bx!=tx||by!=ty)
	return false; 
	
	return HexThrowGetMaxRange(cr,item)>=GetDistantion(cr.HexX,cr.HexY,tx,ty);
	
}

bool IsGrenade(ItemCl&item)
{
	switch(item.Proto.ProtoId)
	{
		case(1834):
		case(159):
		case(26):
		case(25):
		case(421):
		case(27):
		case(25570):
		case(9675):
		return true;
		
	}
	return false;
}                                                                                                                                   

bool Active=false;
int LastCursor=0;
int itemPos=0;
uint availableCnt=0;
array<ItemCl@>availableItems;
bool isPlasma,isFrag,isDynacord,isMolotov,isPulse,isShock;
uint16 lastH=0,lastM=0,lastS=0,lastMS=0;

void _UpdateWeapons(int param1,int param2,int param3,string@param4,array<int>@param5)
{
	if(Active)
	Active=FindAvailableWeapons();
	else
	FindAvailableWeapons();
}

bool FindAvailableWeapons()
{
	CritterCl@chosen=GetChosen();
	array<ItemCl@>allItems;
	
	int count=chosen.GetItems(-1,allItems);
	
	isPlasma=isFrag=isDynacord=isMolotov=isPulse=isShock=false;
	availableCnt=0;
	availableItems.resize(0);
	
	availableItems.resize(6);
	for(int i=0;i<count;++i)
	{
		if((@allItems[i]!=null))
		{
			switch(allItems[i].GetProtoId())
			{
				case(9675):
				case(26):
				isPlasma=true;
				availableItems.removeAt(0);
				availableItems.insertAt(0,allItems[i]);
				++availableCnt;
				break;
				case(9674):
				case(25):
				isFrag=true;
				availableItems.removeAt(1);
				availableItems.insertAt(1,allItems[i]);
				++availableCnt;
				break;
				case(1834):
				isDynacord=true;
				availableItems.removeAt(2);
				availableItems.insertAt(2,allItems[i]);
				++availableCnt;
				break;
				case(159):
				isMolotov=true;
				availableItems.removeAt(3);
				availableItems.insertAt(3,allItems[i]);
				++availableCnt;
				break;
				case(27):
				case(25570):
				isPulse=true;
				availableItems.removeAt(4);
				availableItems.insertAt(4,allItems[i]);
				++availableCnt;
				break;
			}
			if(allItems[i].GetProtoId()==(26)&&chosen.Param[(402)]>1)
			{
				isMolotov=true;
				isPlasma=false;
				availableItems.removeAt(3);
				availableItems.insertAt(3,allItems[i]);
				++availableCnt;
			}
		}
	} 
	
	if(availableCnt>0)
	{
		bool next=false;
		do
		{
			switch(itemPos)
			{
				case 0:
				next=isPlasma;
				break;
				case 1:
				next=isFrag;
				break;
				case 2:
				next=isDynacord;
				break;
				case 3:
				next=isMolotov;
				break;
				case 4:
				next=isPulse;
				break;
			}
			if(!next)
			itemPos=(itemPos+1)%5;
		}while(!next);
		return true;
	}
	else
	return false;
}

bool HexThrowingMouseDown(int click)
{
	if(!IsHexThrowingActive())
	return false;
	if(click==(1))
	{
		if(availableCnt>0)
		{
			bool next=false;
			do
			{
				itemPos=(itemPos+1)%5;
				switch(itemPos)
				{
					case 0:
					next=isPlasma;
					break;
					case 1:
					next=isFrag;
					break;
					case 2:
					next=isDynacord;
					break;
					case 3:
					next=isMolotov;
					break;
					case 4:
					next=isPulse;
					break;
				}
			}while(!next);
		}
		else
		itemPos=0;
		
	}
	else
	{
		CritterCl@chosen=GetChosen();
		
		array<uint>actions;
		uint cnt=GetChosenActions(actions);
		
		if(actions.length()>0)
		{
			if(actions[0]==1)
			TryHexThrow();
		}
		else
		{
			if(!chosen.IsAnimPlaying())
			TryHexThrow();
		}
	}
	
	return true;
}

bool IsHexThrowingActive()
{
	return Active;
}

void HexThrowingKeyDown(uint8 key,string&keyText)
{
	if(key==0x38&&!__ConsoleActive)
	SetHexThrowing(true);
}

void HexThrowingKeyUp(uint8 key,string&keyText)
{
	if(key==0x38)
	SetHexThrowing(false);
}

void HexThrowingInputLost()
{
	SetHexThrowing(false);
}

void SetHexThrowing(bool enabled)
{
	if(enabled)
	{
		
		LastCursor=::GetCurrentCursor();
		if(LastCursor==(3))
		{
			if(FindAvailableWeapons())
			Active=true;
			else
			Active=false;
		} 
		
	}
	else
	{
		Active=false;
		
	}
}

void RenderHexThrowing()
{
	if(!IsHexThrowingActive())
	return;
	CritterCl@chosen=GetChosen();
	if(!(@chosen!=null))
	return;
	
	if(!Active)
	return;
	
	uint16 hx=0,hy=0;
	if(!GetMonitorHex(__MouseX,__MouseY,hx,hy))
	return;  
	
	ItemCl@item=availableItems[itemPos];
	if(!(@item!=null))
	return;
	int radius=HexThrowGetMaxRange(chosen,item);
	
	array<uint16>radiusVert=
	{
		chosen.HexX,chosen.HexY,
		chosen.HexX,chosen.HexY,
		chosen.HexX,chosen.HexY,
		chosen.HexX,chosen.HexY,
		chosen.HexX,chosen.HexY,
		chosen.HexX,chosen.HexY
	};
	MoveHexByDir(radiusVert[0],radiusVert[1],0,radius);
	MoveHexByDir(radiusVert[2],radiusVert[3],1,radius);
	MoveHexByDir(radiusVert[4],radiusVert[5],2,radius);
	MoveHexByDir(radiusVert[6],radiusVert[7],3,radius);
	MoveHexByDir(radiusVert[8],radiusVert[9],4,radius);
	MoveHexByDir(radiusVert[10],radiusVert[11],5,radius);  
	
	DrawHexArea(radiusVert,false,(0x77FF7777));
	
	if(!IsHexThrowableThere(chosen,item,hx,hy))
	return; 
	
	uint splashRadius=2;
	if(item.GetProtoId()==(1834))
	splashRadius=4;
	
	CritterCl@crTarget=GetMonitorCritter(__MouseX,__MouseY);
	
	if((@crTarget!=null)&&crTarget.IsLife()&&crTarget.Id!=chosen.Id)
	{
		hx=crTarget.HexX;
		hy=crTarget.HexY;
	}
	
	array<uint16>splashRadiusVert=
	{
		hx,hy,
		hx,hy,
		hx,hy,
		hx,hy,
		hx,hy,
		hx,hy
	};
	MoveHexByDir(splashRadiusVert[0],splashRadiusVert[1],0,splashRadius);
	MoveHexByDir(splashRadiusVert[2],splashRadiusVert[3],1,splashRadius);
	MoveHexByDir(splashRadiusVert[4],splashRadiusVert[5],2,splashRadius);
	MoveHexByDir(splashRadiusVert[6],splashRadiusVert[7],3,splashRadius);
	MoveHexByDir(splashRadiusVert[8],splashRadiusVert[9],4,splashRadius);
	MoveHexByDir(splashRadiusVert[10],splashRadiusVert[11],5,splashRadius);  
	
	DrawHexArea(splashRadiusVert,false,(0x77FF0000)); 
	
	int x=0,y=0;
	if(!GetHexPos(hx,hy,x,y))
	return;
	
	uint tohit=::HexThrowingToHit(chosen,hx,hy,item.Proto);
	int ap=::HexThrowActionPointsCost(item,chosen);
	bool hasAp=ap<=chosen.Param[(75)]; 
	
	int sprite=LoadSprite(item.Proto.PicInv,0);
	::DrawSprite(sprite,-1,x-50,y-15,30,30,false,false,((uint((0xFF<<24)|(((0xFF)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0xFF)&0xFF)))));
	DrawText(tohit+"%",x+20,y-10,40,20,hasAp?((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))):((uint((0xFF<<24)|(((0xC8)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),(5),(0x0200));
	DrawText(ap+" AP",x+20,y,40,20,hasAp?((uint((0xFF<<24)|(((0xAB)&0xFF)<<16)|(((0xAB)&0xFF)<<8)|((0xAB)&0xFF)))):((uint((0xFF<<24)|(((0xC8)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),(5),(0x0200));
	DrawText(item.GetCount()+"",x-30,y-10,40,20,hasAp?((uint((0xFF<<24)|(((0xAB)&0xFF)<<16)|(((0xAB)&0xFF)<<8)|((0xAB)&0xFF)))):((uint((0xFF<<24)|(((0xC8)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),(5),(0x0200));
	
}

void TryHexThrow()
{
	
	if(!IsHexThrowingActive())
	return;
	CritterCl@chosen=GetChosen();
	if(!(@chosen!=null))
	return;
	
	uint16 hx=0,hy=0;
	if(!GetMonitorHex(__MouseX,__MouseY,hx,hy))
	return; 
	
	ItemCl@item=availableItems[itemPos];
	if(!(@item!=null))
	return;
	CritterCl@crTarget=GetMonitorCritter(__MouseX,__MouseY);
	if((@crTarget!=null))
	{
		hx=crTarget.HexX;
		hy=crTarget.HexY;
	} 
	
	if(!IsHexThrowableThere(chosen,item,hx,hy))
	return;
	
	if(::HexThrowActionPointsCost(item,chosen)>chosen.Param[(75)])
	{
		array<uint>actions;
		uint cnt=GetChosenActions(actions);
		if(actions.length()>0&&actions[0]==(1))
		{
			uint[]action={(0),0,0,0,0,0,0};
			SetChosenActions(action);
		}
		return;
	} 
	
	if(CheckTimeDiff(lastH,lastM,lastS,lastMS))
	RunServerScriptUnsafe("hexThrow@unsafe_HexThrow",hx,hy,item.Id,null,null);
}

bool CheckTimeDiff(uint16 lh,uint16 lm,uint16 ls,uint16 lms)
{
	uint16 undef;
	uint16 hour=0;
	uint16 second=0;
	uint16 msecond=0;
	uint16 minute=0;
	
	GetTime(undef,undef,undef,undef,hour,minute,second,msecond);
	
	lastH=hour;
	lastM=minute;
	lastS=second;
	lastMS=msecond;
	
	if(lh>hour)
	hour+=24;
	if(lm>minute)
	{
		minute+=60;
		hour--;
	}
	if(ls>second)
	{
		second+=60;
		minute--;
	}
	if(lms>msecond)
	{
		msecond+=1000;
		second--;
	}
	
	uint td=(second-ls)*1000;
	td=(msecond-lms+td);
	
	if(td>=__Breaktime||lh!=hour||lm!=minute)
	return true;
	else
	{
		lastH=lh;
		lastM=lm;
		lastS=ls;
		lastMS=lms;
		return false;
	}
} 

