

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                     

import bool AddAchievement(Critter&cr,uint8 achievement)from"achievements";
import bool HaveAchievement(Critter&cr,uint8 achievement)from"achievements";                         

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}               

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                           

import Critter@GetMaster(Critter&follower)from"follower";
import void PerkUp(Critter&cr,uint perk,int from)from"perks";
import void PerkDown(Critter&cr,uint perk,int tolevel)from"perks";
import bool IsHumanoid(Critter@cr)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

int getParamDialog_Reputation(Critter@master,Critter@slave,uint index)
{
	if(!(@master!=null))
	return 0; 
	
	return master.Param[index];
}

void changedParam_Hp(Critter&cr,uint,int oldValue)
{
	int curHp=cr.Param[(72)];
	if(curHp<=0&&cr.IsLife())
	cr.ParamBase[(72)]=1;
	if(cr.Param[(461)]!=0)
	{
		if(curHp<__DeadHitPoints&&!cr.IsDead())
		cr.ParamBase[(72)]=__DeadHitPoints+1;
	}
	else if(curHp<__DeadHitPoints&&!cr.IsDead())
	cr.ParamBase[(72)]=__DeadHitPoints/2+1;
	int maxHp=cr.Param[(7)];
	if(curHp>maxHp)
	{
		cr.ParamBase[(72)]=maxHp;
		curHp=maxHp;
	} 
	
	if(cr.IsDead())
	cr.ParamBase[(136)]=-1024;
	else if(curHp==maxHp)
	cr.ParamBase[(136)]=4;
	else
	cr.ParamBase[(136)]=(3*curHp)/maxHp+1;
	
}
int chbonus(Critter&cr)
{
	int real_ch=cr.ParamBase[(3)];
	if(cr.Param[(388)]>0)real_ch+=cr.Param[(388)]*2;
	if(cr.Param[(564)]>0)real_ch+=1;
	if(cr.Param[(466)]>0)real_ch+=cr.Param[(466)];
	if(cr.Param[(384)]>0)real_ch+=3;
	if(cr.Param[(395)]>0)real_ch+=1;
	
	switch(real_ch)
	{
		case 1:
		case 2:
		case 3:
		case 4:
		return 0;
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		return 1;
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		return 2;
		case 15:
		case 16:
		case 17:
		case 18:
		case 19:
		return 3;
		case 20:
		return 4;
	}
	
	return 0;
}
void changedParam_Experience(Critter&cr,uint,int oldValue)
{
	int exp=cr.ParamBase[(76)]-oldValue;
	int levelDiff=0;
	int expk=0;
	int chbonuse=0;
	for(int i=0;i<cr.ParamBase[(3)];i++)
	if(i%5==0)
	chbonuse++;
	if(exp>0)
	{
		if(cr.Param[(802)]==0)
		{
			exp+=exp*(((cr.Param[(351)]+cr.Trait[(565)])*(10-cr.Param[(395)]))+(cr.Param[(3)]*2))/100;
			
		}
		if(cr.Param[(802)]>0&&cr.Param[(384)]>0||cr.Param[(352)]>0||cr.Param[(345)]>0||cr.Param[(404)]>0||cr.Param[(382)]>0||cr.Param[(353)]>0||cr.Param[(408)]>0||cr.Param[(395)]>0||cr.Param[(393)]>0||cr.Param[(418)]>0||cr.Param[(419)]>0||cr.Param[(347)]>0||cr.Param[(450)]>0||cr.Param[(441)]>0)
		cr.ParamBase[(802)]=0;
		LogExperience(cr,exp,-2);
		uint level=cr.Param[(77)],oldLevel=level;  
		
		cr.ParamBase[(76)]=oldValue+exp;
		
		if(level>=__LevelCap)
		{
			if((((cr.Param[(534)]&((0x00000020)))!=0)))
			{
				VerboseExperience(cr,exp,0);
				return;
			}
		}
		
		if(level>=2000)
		{
			if(cr.Param[(76)]>1001000001)
			cr.ParamBase[(76)]=0;
			if(cr.Param[(76)]>9999&&cr.Param[(76)]<2000000000)
			{
				expk=(cr.Param[(76)]/10000);
				cr.ParamBase[(800)]+=expk;
				cr.ParamBase[(76)]=cr.Param[(76)]%10000;
				cr.Say((11),"|-1 Seki, you have "+cr.Param[(800)]+"0000 Experience points, You need "+cr.Param[(77)]+"0000 to Level Up");
			}
			if(cr.Param[(800)]>int(level))
			{
				level++;
				cr.ParamBase[(800)]=0;
				cr.ParamBase[(77)]++;
				
				if(cr.Trait[(564)]!=0)
				cr.ParamBase[(78)]+=cr.ParamBase[(4)]-cr.Param[(395)];
				else cr.ParamBase[(78)]+=5+cr.ParamBase[(4)]*3-cr.Param[(395)];
				cr.ParamBase[(78)]+=cr.Param[(319)]*2-cr.Param[(395)];
				if((level%5)==0&&(level>=55))
				cr.ParamBase[(79)]+=(1+chbonuse); 
				
			}
			return;
		}
		int perkUp=3;
		while(true)
		{
			if(cr.Param[(76)]>=NextLevelNeedExp(cr))
			{
				level++;
				cr.ParamBase[(77)]++;     
				
				if(cr.Trait[(564)]!=0)
				cr.ParamBase[(78)]+=cr.Param[(4)]-cr.Param[(395)];
				else cr.ParamBase[(78)]+=5+cr.Param[(4)]*3-cr.Param[(395)];
				cr.ParamBase[(78)]+=cr.Param[(319)]*2-cr.Param[(395)];   
				
				if(level<30)
				{
					cr.ParamBase[(7)]+=cr.ParamBase[(2)]/2;
					if((cr.Param[(2)]%2==1)&&cr.Param[(77)]%2==0)cr.ParamBase[(7)]+=1;
					
					if((level%perkUp)==0&&(level<=__LevelCap))
					cr.ParamBase[(79)]=1;  
					
				}
				else if(level<=99)
				{
					if(cr.Param[(77)]%2==0)cr.ParamBase[(7)]+=1;
				}
				if((level%5)==0&&(level>=55))
				cr.ParamBase[(79)]+=1+chbonus(cr);
				if((level>24)&&(level<30)&&cr.Param[(79)]!=0)
				cr.Say((11),"|0xCC0000 Remember to choose your Perk! If you don't do that until level 30, it will be lost!");
				if(level==30)cr.ParamBase[(79)]=0;
			}
			else
			break;
		}
		levelDiff=level-oldLevel;
	}
}

void changedParam_Level(Critter&cr,uint a,int oldLevel)
{
	if(cr.IsPlayer())
	{
		if(cr.Param[(77)]==int(__LevelCap)&&cr.GetScore((5))==0)
		AddAchievement(cr,(0));
		return;
	}
	
	if(!(((cr.Param[(534)]&((0x00000020)))!=0)))
	return;
	else
	{
		Critter@master=GetMaster(cr);
		if((@master!=null)&&IsLexem(cr,"$name"))
		master.SayMsg((11),(3),(4099),"$name"+GetLexem(cr,"$name"));
	}
	
	if(cr.Param[(104)]==0)
	return;
	
	cr.SayMsg((9),(1),(1000000000+(cr.Param[(104)])*100000+((1))));
}

void changedParam_Perks(Critter&cr,uint perk,int oldValue)
{
	int curValue=cr.Param[perk];
	if(curValue>oldValue)
	for(int i=oldValue;i<curValue;i++)
	PerkUp(cr,perk,i);
	else if(curValue<oldValue)
	for(int i=oldValue-1;i>=curValue;i--)
	PerkDown(cr,perk,i);
	
	if(oldValue!=curValue&&cr.IsPlayer())
	FLog((12),cr.Name+"("+cr.Id+") changing perk "+perk+" value: "+oldValue+" -> "+curValue);
}

void changedParam_Hide(Critter&cr,uint,int oldValue)
{
	cr.RefreshVisible();
}

void changedParam_FastShot(Critter&cr,uint,int oldValue)
{
	cr.ParamBase[(538)]=(cr.Trait[(557)]!=0?1:0);
} 

int NextLevelNeedExp(Critter&cr)
{
	int level=cr.Param[(77)];
	return((level)*((level)+1)/2)*1000;
}                                            

int GetMaxLife(Critter&cr)
{
	int val=cr.ParamBase[(7)]+cr.ParamBase[(39)]+cr.ParamBase[(0)]+cr.ParamBase[(2)]*2;
	return(((val)>(9999))?(9999):(((val)<(1))?(1):(val)));
}         

void CritterGenerate(Critter&cr)    

{
	if(cr.ParamBase[(77)]==0)
	cr.ParamBase[(77)]=1;
	
	if(cr.ParamBase[(552)]!=0)
	cr.ParamBase[(8)]+=1;                   
	
	int blodymess=0;
	if(cr.ParamBase[(558)]!=0)
	blodymess=20;
	cr.ParamBase[(200)]+=5+4*cr.ParamBase[(5)]-blodymess;
	cr.ParamBase[(201)]+=0+2*cr.ParamBase[(5)]-blodymess;
	cr.ParamBase[(202)]+=0+2*cr.ParamBase[(5)]-blodymess;
	cr.ParamBase[(203)]+=30+2*(cr.ParamBase[(5)]+cr.ParamBase[(0)])-blodymess;
	cr.ParamBase[(204)]=0+6*cr.ParamBase[(4)]-blodymess;
	cr.ParamBase[(205)]+=0+4*cr.ParamBase[(5)]-blodymess;
	cr.ParamBase[(206)]+=0+2*(cr.ParamBase[(1)]+cr.ParamBase[(4)])-blodymess;
	cr.ParamBase[(207)]+=5+cr.ParamBase[(1)]+cr.ParamBase[(4)]-blodymess;
	cr.ParamBase[(208)]+=5+3*cr.ParamBase[(5)]-blodymess;
	cr.ParamBase[(209)]+=10+cr.ParamBase[(1)]+cr.ParamBase[(5)]-blodymess;
	cr.ParamBase[(210)]+=0+4*cr.ParamBase[(4)]-blodymess;
	cr.ParamBase[(211)]+=10+cr.ParamBase[(1)]+cr.ParamBase[(5)]-blodymess;
	cr.ParamBase[(212)]+=0+4*cr.ParamBase[(4)]-blodymess;
	cr.ParamBase[(213)]+=0+3*cr.ParamBase[(4)]-blodymess;
	cr.ParamBase[(214)]+=0+5*cr.ParamBase[(3)]-blodymess;
	cr.ParamBase[(215)]+=0+4*cr.ParamBase[(3)]-blodymess;
	cr.ParamBase[(216)]+=5+3*cr.ParamBase[(4)]-blodymess;
	cr.ParamBase[(217)]+=0+2*(cr.ParamBase[(2)]+cr.ParamBase[(4)])-blodymess;       
	
	if(cr.ParamBase[(555)]!=0)
	{
		
		for(uint i=(23);i<=(29);i++)
		cr.ParamBase[i]-=10;
	}
	if(cr.ParamBase[(554)]!=0)
	cr.ParamBase[(14)]+=15;
	if(cr.ParamBase[(557)]!=0)
	cr.ParamBase[(538)]=1;                                                               
	
	cr.ParamBase[(72)]=cr.ParamBase[(7)];
	cr.ParamBase[(75)]=cr.ParamBase[(8)]*100;
	
	cr.ParamBase[(136)]=4;
}                                        

void NpcProcessLevel(Critter&npc)
{
	int level=npc.Param[(77)];
	if(level==0)
	return;
	level--;
	npc.ParamBase[(7)]+=(GetMaxLife(npc)*level)/20;
	npc.ParamBase[(72)]=npc.Param[(7)];
	for(uint i=(__SkillBegin);i<=(__SkillEnd);i++)
	npc.ParamBase[i]+=(npc.Param[i]*level)/20;
}

void NpcSetLevel(Critter&npc,int level)
{
	int oldlevel=npc.Param[(77)];
	npc.ParamBase[(77)]=level;
	level-=oldlevel;
	npc.ParamBase[(7)]+=(2+(npc.Param[(2)]>>1))*level;
	npc.ParamBase[(72)]=npc.Param[(7)];
	for(uint i=(__SkillBegin);i<=(__SkillEnd);i++)
	npc.ParamBase[i]+=5*level;
}  

uint CheckPlayerName(const string&name)
{
	
	if(name.length()<__MinNameLength||name.length()>__MaxNameLength)
	return(1009); 
	
	string allLetters=__ValidNameLettersCommon+__ValidNameLettersCulture1+__ValidNameLettersCulture2;
	for(uint i=0,j=name.length();i<j;i++)
	if(findFirst(allLetters,name[i])==-1)
	return(1036); 
	
	if(name[0]==" "||name[-1]==" ")
	return(1032);
	for(int i=0,j=name.length()-1;i<j;i++)
	if(name[i]==" "&&name[i+1]==" ")
	return(1033); 
	
	uint letters1=0;
	uint letters2=0;
	for(int i=0,j=name.length()-1;i<j;i++)
	{
		if(findFirst(__ValidNameLettersCulture1,name[i])!=-1)
		letters1++;
		else if(findFirst(__ValidNameLettersCulture2,name[i])!=-1)
		letters2++;
	}
	if(letters1>0&&letters2>0)
	return(1030); 
	
	if((letters1+letters2)*100/name.length()<70)
	return(1031); 
	
	return 0;
}
