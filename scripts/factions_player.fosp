

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                         

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";          

import void InitEconomy()from"economy";
import void SendLevelThresholds(Critter&)from"economy"; 

import bool BankAccountExists(uint bankid,uint account)from"economy";
import bool BankAccountRemoveMoney(uint bankid,uint account,uint amount)from"economy";
import bool BankHasAccess(uint bankid,uint account,uint playerid)from"economy";
import int BankGetAccountBalance(uint bankid,uint account)from"economy";
import int BankGetAccountID(uint bankid,uint playerid)from"economy";
import uint BankAddAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankCreateAccount(uint bankid,uint playerid)from"economy";
import uint BankDepositMoney(uint bankid,uint playerid,uint account,int amount)from"economy";
import uint BankGetAccessCount(uint bankid,uint account)from"economy";
import uint BankGetAccountOwner(uint bankid,uint account)from"economy";
import uint BankGetAccountType(uint bankid,uint account)from"economy";
import uint BankGetCreditRating(uint bankid,uint account)from"economy";
import uint BankGetLoan(uint bankid,uint account)from"economy";
import uint BankRemoveAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankSetAccountType(uint bankid,uint account,uint accounttype)from"economy";
import uint BankSetCreditRating(uint bankid,uint account,uint rating)from"economy";
import uint BankSetLoan(uint bankid,uint account,uint loan)from"economy";
import uint BankTakeLoan(uint bankid,uint account,uint amount)from"economy";
import uint BankTransferMoney(uint bankid,uint fromaccount,uint toaccount,uint amount)from"economy";
import uint BankWithdrawMoney(uint bankid,uint playerid,uint account,int amount)from"economy"; 

import bool BanksTransferFromCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import bool BanksTransferToCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import uint BanksGetTotalMoney()from"economy";
import void BanksAddMoney(uint amount)from"economy";
import void BanksRemoveMoney(uint amount)from"economy"; 

import bool BankAddMoney(uint bankid,uint amount)from"economy";
import bool BankRemoveMoney(uint bankid,uint amount)from"economy";
import bool BankSetMoney(uint bankid,uint amount)from"economy";
import uint BankGetLoanInterest(uint bankid)from"economy";
import uint BankGetNumberOfAccounts(uint bankid)from"economy";
import float BankGetSaveInterest(uint bankid)from"economy";
import uint BankGetTotalMoney(uint bankid)from"economy";
import uint BankGetTotalBalance(uint bankid)from"economy";
import float BankGetReserveRatio(uint bankid)from"economy";
import uint BankSetLoanInterest(uint bankid,uint interest)from"economy";
import uint BankSetSaveInterest(uint bankid,float interest)from"economy";
import bool BankTransferFromCritter(uint bankId,Critter&critter,uint amount,uint type,bool virtual)from"economy";

import void SaveBankData()from"economy";   

import int GetItemSellModifier(Critter&player,Critter&trader)from"economy";
import int GetItemBuyModifier(Critter&player,Critter&trader)from"economy";
import uint GetItemCost(Item&item,Critter&cr,Critter&trader,bool sell)from"economy";
import uint GetItemCostPlain(Item&item,Critter&cr,Critter&trader)from"economy";

import array<int>GetTraderLevels(Critter@npc)from"economy";
import uint GetTraderLevel(Critter@npc,uint type)from"economy";

import uint ItemLevel(Item&item)from"economy";
import uint ItemLevel(uint pid)from"economy";
import uint TraderCapacity(Critter@npc)from"economy";
import uint TraderCapacity(Critter@npc,uint type,uint level)from"economy";
import uint TraderMoneyCapacity(Critter@npc)from"economy";
import uint TradingItemType(Item&item)from"economy";
import uint TradingItemType(uint pid)from"economy";                                                                                                          

const string@FD_Bank_Result2String(uint res)
{
	if(res==(1))
	return"FD_BANK_RESULT_SUCCESS";
	else if(res==(2))
	return"FD_BANK_RESULT_UNKNOWN";
	else if(res==(3))
	return"FD_BANK_RESULT_TOO_MANY_ACCOUNTS";
	else if(res==(4))
	return"FD_BANK_RESULT_ALREADY_HAS_ACCOUNT";
	else if(res==(5))
	return"FD_BANK_RESULT_NOT_ENOUGH_MONEY";
	else if(res==(6))
	return"FD_BANK_RESULT_BANK_FULL";
	else if(res==(7))
	return"FD_BANK_RESULT_BANK_EMPTY";
	else if(res==(8))
	return"FD_BANK_RESULT_DATA_ERROR";
	else if(res==(9))
	return"FD_BANK_RESULT_INVALID_PLAYER";
	else if(res==(10))
	return"FD_BANK_RESULT_NO_ACCOUNT";
	else
	return"FD_Result: Unknown error code";
}

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                      

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}      

import bool IsBigFaction(uint faction)from"factions";
import bool IsTheSameFaction(uint player1Id,uint player2Id)from"factions";
import void _Resign(uint playerId)from"factions"; 

import int RegisterFaction(uint id,const string@name,bool playerDriven)from"factions";
import int RegisterFaction(const string@name,bool playerDriven,uint&out id)from"factions";

import bool RemoveFaction(uint faction)from"factions"; 

import bool GetFactionNameStr(uint faction,string&out name)from"factions";
import bool GetFactionId(const string@name,uint&out id)from"factions"; 

import bool IsFactionNameFree(const string&)from"factions";
import bool IsFactionNameValid(const string&)from"factions";

import bool IsGang(uint faction)from"factions";

import uint16 GetFactionRadioChannel(uint faction)from"factions";
import void SetFactionRadioChannel(uint faction,uint16 channel)from"factions"; 

import int AddPlayer(uint faction,uint id)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)from"factions";
import int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)from"factions"; 

import int RemovePlayer(uint faction,uint id)from"factions"; 

import int GetFaction(uint faction,uint id)from"factions";
import int GetStatus(uint faction,uint id)from"factions";
import int GetRank(uint faction,uint id)from"factions";
import bool IsMember(uint faction,Critter&cr)from"factions";
import bool IsMemberOffline(uint faction,uint id)from"factions";
import bool StoredInDB(uint faction,uint id)from"factions";
import uint GetRecordsCount(uint faction)from"factions";
import uint GetMembersCount(uint faction)from"factions";
import uint GetMembers(uint faction,array<uint>&ids)from"factions";
import uint GetLeaderId(uint faction)from"factions";
import void SetLeaderId(uint faction,uint id)from"factions";
import uint GetClaimId(uint faction)from"factions";
import void SetClaimId(uint faction,uint id)from"factions";
import uint GetLeaderTime(uint faction)from"factions";
import void SetLeaderTime(uint faction,uint time)from"factions";
import uint GetClaimTime(uint faction)from"factions";
import void SetClaimTime(uint faction,uint time)from"factions";
import uint GetFactionLocationId(uint faction)from"factions";
import bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)from"factions";

import void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)from"factions";

import uint GetFactionScore(uint faction)from"factions";
import void ModifyFactionScore(uint faction,int amount)from"factions";
import void UpdateLastUsed(uint faction)from"factions";
import uint GetFactionsCount()from"factions"; 

import int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)from"factions";
import int GetNextId(uint faction,uint currId,bool members,uint&out nextId)from"factions";
import int GetFirstId(uint faction,bool members,uint&out id)from"factions"; 

import int ModifyRank(uint faction,uint id,uint newRank)from"factions";
import int ModifyStatus(uint faction,uint id,uint newStatus)from"factions";
import int ModifyFaction(uint faction,uint id,uint newFaction)from"factions"; 

import int InvitePlayer(uint faction,uint playerId)from"factions";
import int ConfirmInvitation(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId)from"factions";
import int AddMember(uint faction,uint playerId,bool applyModifiers)from"factions";
import int ChangeRank(uint faction,uint playerId,uint newRank)from"factions";
import int ExpelMember(uint faction,uint playerId)from"factions";
import int ExpelMember(uint faction,uint playerId,bool applyModifiers)from"factions";

import uint GetPlayerFaction(uint playerId)from"factions";
import uint GetPlayerRank(uint playerId)from"factions"; 

import void AddFactionNews(uint faction,uint master,uint slave,uint type)from"factions";
import bool GetFactionNews(uint faction,uint index,uint&out master,uint&out slave,uint&out type,uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)from"factions";
import uint GetFactionNewsCount(uint faction)from"factions"; 

import uint CheckFactionBaseCoords(uint x,uint y)from"factions";

import bool SaveFactionData(uint faction)from"factions";
import bool FactionExists(uint faction)from"factions"; 

import uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)from"factions";   

import void InitFactions()from"factions";
import void UpdateFactionsInfo(Critter&cr)from"factions";
import IFaction@GetFaction(int)from"factions";
import IFaction@GetFaction(const string&)from"factions";
import IFaction@GetFactionByIdx(int idx)from"factions";
import void UpdateGroupVars(Critter&player)from"factions";     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);
	void settag(int index,int tag,int r,int g,int b);
	int get_tag(int index);
	int get_b(int index);
	int get_r(int index);
	int get_g(int index);  
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
};                                                                                                                                                                                                            

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}

shared interface IFactionBase
{
	
	uint get_Id()const;
	
	uint get_FactionId()const;
	
	const string&get_Name()const;
	
	uint get_LocationId()const; 
	
	void Show(Critter&cr)const;
	
	void Hide(Critter&cr)const; 
	
	bool IsRankAllowed(int rank)const;
	
	void AllowRank(int rank,bool allow);
	
	bool IsStatusAllowed(int status)const;
	
	void AllowStatus(int status,bool allow); 
	
	void Remove();
};  

import IFactionBase@GetFactionBase(uint faction_id,const string&faction_name)from"factions_bases";
import IFactionBase@GetFactionBase(uint id)from"factions_bases";
import IFactionBase@GetFactionBaseByLocId(uint id)from"factions_bases";
import uint GetFactionBases(uint faction_id,array<IFactionBase@>@)from"factions_bases";
import bool AddFactionBase(IFactionBase&)from"factions_bases";
import void AddFactionBase(uint)from"factions_bases";
import IFactionBase@CreateFactionBase(uint faction_id,const string&name,uint location_id)from"factions_bases";
import void RemoveFactionBase(uint,const string&)from"factions_bases";
import void RemoveFactionBase(IFactionBase&)from"factions_bases

import string GetCritterLexems(Critter&critter)from"lexems";
import string GetItemLexems(Item&item)from"lexems";

import bool IsLexem(Critter&critter,string&lex)from"lexems";
import bool IsLexem(Item&it,string&lex)from"lexems";
import bool IsLexem(string&lexems,string&lex)from"lexems";

import string GetLexem(Critter&critter,string&lex)from"lexems";
import string GetLexem(Item&item,string&lex)from"lexems";
import string GetLexem(string&lexems,string&lex)from"lexems"; 

import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
import void SetLexem(Item&item,string&lex,string&value)from"lexems";
import string SetLexem(string&lexems,string&lex,string&value)from"lexems";

import void UnsetLexem(Critter&critter,string&lex)from"lexems";
import void UnsetLexem(Item&item,string&lex)from"lexems";
import string UnsetLexem(string&lexems,string&lex)from"lexems";                                                                                                                                                                                                                                                                                                                                                                                        

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";                  

import string GetRandomFirstName(uint gender)from"npc_names";
import string GetRandomFirstName(uint gender,int&index)from"npc_names";

import string GetRandomNick(uint gender)from"npc_names";

import string GetRandomSurname()from"npc_names";

import string GetRandomFullName(uint gender)from"npc_names";
import string GetRandomFullName(uint gender,int&firstName,bool&genderNick,int&nick,int&surname)from"npc_names"; 

import string GetFirstName(uint gender,uint index)from"npc_names";
import string GetNick(uint gender,uint index,bool genderNick)from"npc_names";
import string GetSurname(uint index)from"npc_names";  

import void LogNames(bool printNames)from"npc_names

shared class Serializator
{
	Serializator()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator(uint approxSize)
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
		GrowBuffer(approxSize);
	}
	
	void GrowBuffer()
	{
		BufSize+=(128);
		Array.resize(BufSize);
	}
	
	void GrowBuffer(uint length)
	{
		BufSize+=length;
		Array.resize(BufSize);
	}
	
	bool Save(string&name)
	{
		if(DataSize==0)
		return false;
		bool result=SetAnyData(name,Array,DataSize);
		Clear();
		return result;
	}
	
	bool Load(string&name)
	{
		Clear();
		if(!IsAnyData(name))
		return false;
		if(!GetAnyData(name,Array))
		return false;
		BufSize=Array.length();
		DataSize=BufSize;
		return true;
	}
	
	void Clear()
	{
		CurPos=0;
		BufSize=0;
		DataSize=0;
	}
	
	Serializator@SetCurPos(uint pos)
	{
		if(pos>BufSize)
		GrowBuffer(pos-BufSize+(128));
		CurPos=pos;
		return this;
	}
	
	Serializator@Fill(uint8 value,uint length)
	{
		if(CurPos+length>BufSize)
		GrowBuffer(CurPos+length-BufSize+(128));
		for(uint i=0;i<length;i++)
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@Set(const int64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const int8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const int8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint64&value)
	{
		if(CurPos+8>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>56)&0xFF;
		Array[CurPos++]=(value>>48)&0xFF;
		Array[CurPos++]=(value>>40)&0xFF;
		Array[CurPos++]=(value>>32)&0xFF;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint64&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint32&value)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint32&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint16&value)
	{
		if(CurPos+2>BufSize)
		GrowBuffer();
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint16&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const uint8&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const uint8&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const bool&value)
	{
		if(CurPos+1>BufSize)
		GrowBuffer();
		Array[CurPos++]=value?1:0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const bool&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const string&value)
	{
		uint len=value.rawLength();
		if(CurPos+len+1>BufSize)
		GrowBuffer(CurPos+len+1-BufSize+(128));
		for(uint i=0;i<len;i++)
		Array[CurPos++]=value.rawGet(i);
		Array[CurPos++]=0;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const string&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const float&value)
	{
		int dummy=FloatToInt(value);
		return Set(dummy);
	}
	
	Serializator@opShl(const float&value)
	{
		return Set(value);
	}
	
	Serializator@Set(const array<int64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<int8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<int8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint64>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*8;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint64>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint32>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint32>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint16>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*2;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint16>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<uint8>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<uint8>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<bool>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<bool>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<string>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen;
		for(uint i=0,j=valuesLen;i<j;i++)
		len+=values[i].length();
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(values[i]);
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<string>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const array<float>&values)
	{
		uint valuesLen=values.length();
		uint len=4+valuesLen*4;
		if(CurPos+len>BufSize)
		GrowBuffer(CurPos+len-BufSize);
		Set(valuesLen);
		for(uint i=0,j=valuesLen;i<j;i++)
		Set(FloatToInt(values[i]));
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const array<float>&values)
	{
		return Set(values);
	}
	
	Serializator@Set(const Critter&cr)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=cr.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Critter&cr)
	{
		return Set(cr);
	}
	
	Serializator@Set(const Item&item)
	{
		if(CurPos+4>BufSize)
		GrowBuffer();
		uint value=item.Id;
		Array[CurPos++]=(value>>24)&0xFF;
		Array[CurPos++]=(value>>16)&0xFF;
		Array[CurPos++]=(value>>8)&0xFF;
		Array[CurPos++]=value&0xFF;
		if(CurPos>DataSize)
		DataSize=CurPos;
		return this;
	}
	
	Serializator@opShl(const Item&item)
	{
		return Set(item);
	}
	
	Serializator@Get(int64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(int8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(int8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint64&value)
	{
		value=0;
		if(CurPos+8>DataSize)
		return this;
		value|=Array[CurPos++]<<56;
		value|=Array[CurPos++]<<48;
		value|=Array[CurPos++]<<40;
		value|=Array[CurPos++]<<32;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint64&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint32&value)
	{
		value=0;
		if(CurPos+4>DataSize)
		return this;
		value|=Array[CurPos++]<<24;
		value|=Array[CurPos++]<<16;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint32&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint16&value)
	{
		value=0;
		if(CurPos+2>DataSize)
		return this;
		value|=Array[CurPos++]<<8;
		value|=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint16&value)
	{
		return Get(value);
	}
	
	Serializator@Get(uint8&value)
	{
		value=0;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++];
		return this;
	}
	
	Serializator@opShr(uint8&value)
	{
		return Get(value);
	}
	
	Serializator@Get(bool&value)
	{
		value=false;
		if(CurPos+1>DataSize)
		return this;
		value=Array[CurPos++]==1?true:false;
		return this;
	}
	
	Serializator@opShr(bool&value)
	{
		return Get(value);
	}
	
	Serializator@Get(string&str)
	{
		uint len=0;
		for(uint i=CurPos;;i++)
		{
			if(i==DataSize)
			{
				str="";
				return this;
			}
			if(Array[i]==0)
			{
				len=i-CurPos;
				break;
			}
		}
		str.rawResize(len);
		for(uint i=0;i<len;i++)
		str.rawSet(i,Array[CurPos++]);
		CurPos++;
		return this;
	}
	
	Serializator@opShr(string&str)
	{
		return Get(str);
	}
	
	Serializator@Get(float&value)
	{
		int dummy=0;
		Get(dummy);
		value=IntToFloat(dummy);
		return this;
	}
	
	Serializator@opShr(float&value)
	{
		return Get(value);
	}
	
	Serializator@Get(array<int64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<float>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		{
			int dummy=0;
			Get(dummy);
			values[i]=IntToFloat(dummy);
		}
		return this;
	}
	
	Serializator@opShr(array<float>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<int8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<int8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint64>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint64>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint32>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint32>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint16>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint16>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<uint8>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<uint8>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<bool>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<bool>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(array<string>&values)
	{
		uint valuesLen=0;
		Get(valuesLen);
		values.resize(valuesLen);
		for(uint i=0;i<valuesLen;i++)
		Get(values[i]);
		return this;
	}
	
	Serializator@opShr(array<string>&values)
	{
		return Get(values);
	}
	
	Serializator@Get(Critter@&cr)
	{
		@cr=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@cr=::GetCritter(id);
		return this;
	}
	
	Serializator@opShr(Critter@&cr)
	{
		return Get(cr);
	}
	
	Serializator@Get(Item@&item)
	{
		@item=null;
		if(CurPos+4>DataSize)
		return this;
		uint id=0;
		id|=Array[CurPos++]<<24;
		id|=Array[CurPos++]<<16;
		id|=Array[CurPos++]<<8;
		id|=Array[CurPos++];
		@item=::GetItem(id);
		return this;
	}
	
	Serializator@opShr(Item@&item)
	{
		return Get(item);
	}
	
	array<uint8>Array;
	uint CurPos;
	uint BufSize;
	uint DataSize;
};   

import bool AddToFollowerlist(Critter&master,Critter&follower)from"follower_common";  

uint e_DisableBagRefresh(array<uint>@values)
{
	Critter@cr=GetCritter(values[0]);
	if((@cr!=null))
	{
		cr.SetBagRefreshTime((uint(-1)));
		{;};
	}
	return 0;
}

void NerfWeaponSkills(Critter&cr,uint primary,uint secondary)
{
	for(uint i=(200);i<=(205);i++)
	{
		if(i!=primary&&i!=secondary)
		{
			if(i==(201))
			cr.ParamBase[i]=-80;
			else
			cr.ParamBase[i]=-30;
		}
	}
}

shared interface IMerc
{
	IMerc@Dialog(int dialogid);
	IMerc@Script(string&script);
	IMerc@AI(int aipack);
	IMerc@Bag(int bagid);
	IMerc@Team(int teamid);
	IMerc@Level(int level);
	IMerc@PID(int pid);
	IMerc@PID(array<int>npcpids);
	IMerc@Type(int type);
	IMerc@ID(int id);
	IMerc@Cost(int cost);
	IMerc@StartCost(int cost);
	IMerc@SellPrice(int price);
	IMerc@DynamicPrice();
	
	bool IsDynamicPrice();
	int GetDialog();
	string@GetScript();
	int GetAIPack();
	int GetBagID();
	int GetBagValue();
	int GetTeamID();
	int GetLevel();
	int GetLastPID();
	array<int>GetPIDs();
	uint GetType();
	int8 GetBaseType();
	int GetCost();
	int GetSellPrice();
	uint GetID();
	string@GetName();
	
	bool Spawn(Critter&master);
}; 

class CMerc:IMerc
{
	bool dynamicprice;
	int dir;
	int dialogid;
	string script;
	int aipack;
	int8 basetype;
	int bagid;
	int teamid;
	int level;
	int respawnTime;
	array<int>npcpids;
	int npcpid;
	int cost;
	int bagvalue;
	int startcost;
	uint type;
	int sellprice;
	uint id;
	string name;
	
	Serializator serializer;
	
	CMerc()
	{
		dir=Random(0,6);
		dialogid=(9310);
		script="follower@critter_init";
		basetype=-1;
		aipack=0;
		bagid=0;
		teamid=0;
		level=1;
		respawnTime=(-2);
		cost=0;
		sellprice=0;
		id=0;
		type=0;
		dynamicprice=false;
	}
	
	bool Spawn(Critter&master)
	{
		npcpid=(npcpids[Random(0,npcpids.length()-1)]);
		
		Critter@SpawnedNpc=AddNpc(master.GetMap(),npcpid,master.HexX,master.HexY,dir,dialogid,script,aipack,bagid,teamid,false,level);
		if((@SpawnedNpc!=null))
		{
			SpawnedNpc.FollowerVarBase[(929)]=(master.Param[(106)]);
			SpawnedNpc.FollowerVarBase[(932)]=type;
			SpawnedNpc.FollowerVarBase[(930)]=id;
			basetype=SpawnedNpc.CrType;
			SpawnedNpc.FollowerVarBase[(933)]=master.Id;
			SpawnedNpc.ParamBase[(84)]=respawnTime;
			
			if(type==(3)||type==(4)||type==(2))
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			switch(type)
			{
				case(6):
				case(12):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(7):
				case(13):
				NerfWeaponSkills(SpawnedNpc,(200),0);
				break;
				case(8):
				case(11):
				NerfWeaponSkills(SpawnedNpc,(201),0);
				break;
				case(5):
				case(10):
				NerfWeaponSkills(SpawnedNpc,(203),0);
				break;
				case(9):
				NerfWeaponSkills(SpawnedNpc,(202),0);
				break;
				default:
				break;
			}
			
			SpawnedNpc.ChangeCrType(SpawnedNpc.ParamBase[(112)]);
			
			CreateTimeEvent(((__FullSecond)+(((3)*60))),"e_DisableBagRefresh",SpawnedNpc.Id,true);
			ArmBestWeapon(SpawnedNpc);
			
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(306)]+=1;
			if(Random(0,24)==0)SpawnedNpc.ParamBase[(315)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(405)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(309)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(313)]+=1;
			if(Random(0,14)==0)SpawnedNpc.ParamBase[(330)]+=1;
			
			for(uint i=0;i<=6;i++)SpawnedNpc.ParamBase[i]+=Random(-1,1);   
			
			SpawnedNpc.ParamBase[(7)]+=(Random(0,20));
			SpawnedNpc.ParamBase[(7)]-=10;
			
			SpawnedNpc.ParamBase[(72)]=SpawnedNpc.Param[(7)];
			SpawnedNpc.ParamBase[(103)]=master.Id;
			
			if(!AddToFollowerlist(master,SpawnedNpc))
			Log("Failed to assign merc's id to master("+master.Id+") followerlist");
			
			this.name=GenerateNewName(SpawnedNpc);
			
			if(this.name.length()>0)
			SetLexem(SpawnedNpc,"$name",this.name);
			
			return true;
		}
		else
		{
			Log("Failed to create mercenary of PID "+npcpid+" with mercid "+id+" on map id "+master.GetMapId());
			master.Say((11),"Failed to create mercenary, report this error immediately");
		} 
		
		return false;
	}
	
	IMerc@Dialog(int dialogid)
	{
		this.dialogid=dialogid;
		return this;
	}
	
	IMerc@Script(string&script)
	{
		this.script=script;
		return this;
	}
	
	IMerc@AI(int aipack)
	{
		this.aipack=aipack;
		return this;
	}
	
	IMerc@Bag(int bagid)
	{
		this.bagid=bagid;
		
		bagvalue=0;
		array<uint>mincounts,maxcounts;
		array<int>slots;
		array<uint16>pids;
		uint num=GetBagItems(bagid,pids,mincounts,maxcounts,slots);
		uint cost=0;
		for(uint i=0;i<num;i++)
		{
			bagvalue+=BaseItemValue(pids[i],7,80,true)*(mincounts[i]+maxcounts[i])/2;
		}
		
		return this;
	}
	
	IMerc@Team(int teamid)
	{
		this.teamid=teamid;
		return this;
	}
	
	IMerc@Level(int level)
	{
		this.level=level;
		return this;
	}
	
	IMerc@PID(int npcpid)
	{
		this.npcpids.insertLast(npcpid);
		return this;
	}
	
	IMerc@PID(array<int>npcpids)
	{
		for(uint i=0;i<npcpids.length();i++)
		{
			this.npcpids.insertLast(npcpids[i]);
		}
		return this;
	}
	
	IMerc@Type(int type)
	{
		this.type=type;
		return this;
	}
	
	IMerc@ID(int id)
	{
		this.id=id;
		return this;
	}
	
	IMerc@DynamicPrice()
	{
		dynamicprice=true;
		return this;
	}
	
	bool IsDynamicPrice()
	{
		return dynamicprice;
	}
	
	IMerc@StartCost(int cost)
	{
		serializer.Clear();
		if(!serializer.Load("merc_"+id)||GetGvar((12000))==0)
		{
			this.cost=cost;
			serializer.Clear();
			serializer.Set(this.cost).Save("merc_"+id);
		}
		else
		serializer.Get(this.cost);
		
		return this;
	}
	
	IMerc@Cost(int cost)
	{
		{;};
		this.cost=cost;
		
		serializer.Clear();
		serializer.Set(this.cost).Save("merc_"+id);
		
		return this;
	}
	
	IMerc@SellPrice(int sellprice)
	{
		this.sellprice=sellprice;
		return this;
	}
	
	int GetDialog(){return dialogid;}
	string@GetScript(){return script;}
	int8 GetBaseType(){return basetype;}
	int GetAIPack(){return aipack;}
	int GetBagID(){return bagid;}
	int GetTeamID(){return teamid;}
	int GetLevel(){return level;}
	int GetLastPID(){return npcpid;}
	array<int>GetPIDs(){return npcpids;}
	int GetCost(){return cost;}
	int GetBagValue(){return bagvalue;}
	int GetSellPrice(){return sellprice;}
	uint GetID(){return id;}
	uint GetType(){return type;}
	string@GetName(){return name;}
}; 

import bool IsFollowing(Critter&critter)from"follower_common";
import bool IsOwnersFollower(Critter&owner,Critter&critter)from"follower_common";
import bool CanHaveMoreFollowers(Critter&player,uint FollowerType)from"follower_common";
import Critter@GetFollowersOwner(Critter&critter)from"follower_common";
import bool RightDistance(Critter&follower,Critter&owner)from"follower_common";
import bool HasFollowerOfBaseType(Critter&owner,uint basetype)from"follower_common";
import Critter@GetFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import bool RemoveFollowerByBaseType(Critter&owner,uint basetype)from"follower_common";
import int GetNumberOfFollowingFollowersOfPlayer(Critter&player)from"follower_common";
import int GetNumberOfFollowersOfPlayer(Critter&player)from"follower_common";
import uint GetSlaveTypes(Critter&player)from"follower_common";
import void ClearFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import void AddFollowersEnemy(Critter&player,Critter&target)from"follower_common";
import uint NumberOfFollowersOnMap(Map@map)from"follower_common";
import uint GetFollowerType(Critter&critter)from"follower_common";
import bool DisbandFollower(Critter&player,Critter&cr,bool reset)from"follower_common";
import bool MakeFollower(Critter&critter,uint type,string&script,uint dialogid,Critter&owner,bool FreeBarter)from"follower_common";
import Critter@LocateFollowerByType(IMerc@merc,Critter&owner)from"follower_common";
import Critter@LocateFollowerByID(uint id,Critter&owner)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers,bool OnlyIsSeen)from"follower_common";
import int GetFollowers(Critter&player,Map@map,array<Critter@>&followers)from"follower_common";
import int GetFollowers(Critter&player,bool all,array<Critter@>&followers)from"follower_common";
import uint CountFollowers(Critter&player,bool all)from"follower_common";
import uint CountFollowers(Critter&player,Map@map)from"follower_common";
import uint GetPartyPointsMax(Critter&player)from"follower_common";
import uint GetPartyPointsUsed(Critter&player)from"follower_common";
import bool IsMerc(Critter&follower)from"follower_common";                                                         

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}                                             

import void MoveCars(Map&,Map&)from"car";               

dictionary EnteredNames;

uint ChooseLocation(Critter&player,Critter@npc,int value)
{
	(player.ParamBase[(91)])=value; 
	
	if(player.Param[(106)]!=(1)&&player.Param[(106)]!=(0))
	return(4);
	else
	return 0;
}
uint r_ChooseCave(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(207));
}
uint r_ChooseCave2(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(33000);
	return ChooseLocation(player,npc,(75));
}

uint r_ChooseCamp(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(130000);
	return ChooseLocation(player,npc,(202));
}
uint r_ChooseTents(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(50000);
	return ChooseLocation(player,npc,(246));
}
uint r_ChooseDepot(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(210));
}
uint r_ChooseShelter(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(475));
}
uint r_ChoosePatt41(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(440));
}
uint r_ChoosePatt410(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(480));
}

uint r_ChoosePatt412(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(518));
}

uint r_ChoosePatt413(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(518));
}

uint r_ChoosePatt42(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(463));
}
uint r_ChoosePatt43(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(464));
}
uint r_ChoosePatt44(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(467));
}
uint r_ChoosePatt45(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(468));
}

uint r_ChoosePatt46(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(469));
} 

uint r_ChoosePatt47(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(470));
}

uint r_ChoosePatt48(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(471));
}

uint r_ChoosePatt49(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(472));
}

uint r_ChoosePatt411(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(482));
}

uint r_ChooseSkytower(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(373));
}
uint r_ChooseFakevautl(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(30000);
	return ChooseLocation(player,npc,(374));
}
uint r_ChooseScrapheap(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(205));
}
uint r_Choosepat01(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(435));
}
uint r_Choosepat02(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(436));
}
uint r_Choosepat03(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(437));
}
uint r_Choosepat04(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(438));
}
uint r_Choosepat05(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(439));
}
uint r_Choosepat06(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(481));
}
uint r_Choosepat07(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(506));
}
uint r_Choosepat08(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(521));
}
uint r_Choosepat09(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(528));
}
uint r_Choosebasement(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(520));
}
uint r_Choosechurch(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(523));
}
uint r_Choosecabin(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(524));
}
uint r_Chooselib(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(70000);
	return ChooseLocation(player,npc,(529));
} 

uint r_ChooseGasStation(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(50000);
	return ChooseLocation(player,npc,(245));
}
uint r_ChooseBunker(Critter&player,Critter@npc)
{
	(player.ParamBase[(92)])=(350000);
	return ChooseLocation(player,npc,(208));
}
uint Addpropermoney(Critter@npc)
{
	switch(npc.Param[(139)])
	{
		case 0:return(41);
		case 1:return(1212);
		case 2:return(1211);
		case 3:return(1214);
		case 4:return(1213);
		case 5:return(1215);
	}
	return(41);
	
}
bool d_HasMoneyForCave(Critter&player,Critter@)
{
	return player.CountItem(Addpropermoney(player))>=(30000);
}
bool d_HasMoneyForCave2(Critter&player,Critter@)
{
	return player.CountItem(Addpropermoney(player))>=(33000);
}
bool d_HasMoneyForTents(Critter&player,Critter@)
{
	return player.CountItem(Addpropermoney(player))>=(50000);
}
bool d_HasMoneyForCamp(Critter&player,Critter@)
{
	return player.CountItem(Addpropermoney(player))>=(130000);
}
bool d_HasMoneyForDepot(Critter&player,Critter@)
{
	return player.CountItem(Addpropermoney(player))>=(30000);
}
bool d_HasMoneyForGasStation(Critter&player,Critter@)
{
	return player.CountItem(Addpropermoney(player))>=(50000);
}
bool d_HasMoneyForScrapheap(Critter&player,Critter@)
{
	return player.CountItem(Addpropermoney(player))>=(70000);
}
bool d_HasMoneyForBunker(Critter&player,Critter@)
{
	return player.CountItem(Addpropermoney(player))>=(350000);
}

uint r_Blades(Critter&player,Critter@npc,int value)
{
	
	return(11);
}

void RemoveMoneyForBase(Critter&player)
{
	BanksTransferFromCritter(player,(player.ParamBase[(92)]),(5),false);
}

void addmember(Critter&cr,int id,int,int)
{
	AddMember(id,cr.Id);
}

void registerfaction(Critter&cr,int num,int,int)
{
	string name="";
	if(num==0)
	name="The Critical Failure Gang";
	else if(num==1)
	name="The Vipers";
	else
	name="The Rippers";
	
	uint id;
	if(RegisterFaction(name,true,id)==(0))
	{
		AddMember(id,cr.Id);
		cr.Say((11),"Faction created and joined.");
	}
	else
	cr.Say((11),"Error.");
}    

bool _Talk(Critter&cr,Critter&talkCr,bool attach,uint talkCount)
{
	Log("Talk");
	if(!attach)
	{
		if(EnteredNames.exists(talkCr.Name))
		{
			EnteredNames.delete(talkCr.Name);
		}
	}
	return true;
}
void _BaseSeller(Critter&cr,bool)
{
	cr.SetEvent((39),"_Talk");
}
uint dlg_EnterNameOfFaction(Critter&player,Critter@npc,string@say)
{
	if(!((@say!=null)&&say.length()>0))
	return 0;
	
	if(GetGroupIndex(player)>(1))
	return(11);
	
	if(!IsFactionNameValid(say))
	{
		
		InitFactions();
	}  
	
	array<string@>keys;
	for(uint i=0,j=EnteredNames.keys(keys);i<j;i++)
	{
		string name;
		if(EnteredNames.get(keys[i],name))
		if(name==say)
		return(9);
	}
	if(!IsFactionNameFree(say))
	return(9);
	
	EnteredNames.set(player.Name,say);
	
	return(4);
}

void RefreshNames(Critter&cr,int,int,int)
{
	cr.Say((11),"Refreshing faction names...");
	InitFactions();
	cr.Say((11),"Refreshed from FOTEXT.MSG");
}

uint CreateFaction(Critter&player)
{
	string name;
	if(!EnteredNames.get(player.Name,name))
	return(11);
	else
	EnteredNames.delete(player.Name);
	
	uint factionid=0;
	uint result=RegisterFaction(name,true,factionid);
	
	if(result==(1))
	{
		Log("Faction already taken");
		return(9);
	}
	if(result==(2))
	{
		Log("Wrong faction name entered");
		return(5);
	}
	if(result==(3))
	{
		Log("Maximum number of factions already registered");
		return(10);
	}
	if(result==(4))
	{
		Log("Unknown exception occured when registering faction");
		return(11);
	}
	
	{;};
	AddMember(factionid,player.Id);
	ChangeRank(factionid,player.Id,(5));
	
	AddFactionNews(factionid,player.Id,0,(10));
	
	array<Critter@>followers;
	uint number=player.GetFollowGroup((0x0F),followers);
	array<Critter@>members;
	members.insertLast(player);
	
	for(uint i=0;i<followers.length();i++)
	{
		if(GetGroupIndex(followers[i])==(1))
		{
			members.insertLast(followers[i]);
			{;};
			AddMember(factionid,followers[i].Id);
			
			AddFactionNews(factionid,followers[i].Id,0,(1));
		}
		else
		{
			Log("Player with id "+followers[i].Id+" is already a member of another faction. He will not be able to join this one.");
		}
	}
	
	Log("Faction with id "+factionid+" created successfully.");
	return 0;
}
uint dlg_CreateFactionBase(Critter&player,Critter@npc,string@say)
{
	if(!((@say!=null)&&say.length()>0))
	return 0;
	uint fid=player.Param[(106)];
	if(player.CountItem(Addpropermoney(player))<uint((player.ParamBase[(92)])))
	return(12);
	
	if(fid==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	
	if(fid==(1))
	fid=player.Param[(106)];
	
	if((@GetFactionBase(fid,say)!=null))
	{
		player.Say((12),"Hideout with given name exists, give new one");
		return 0;
	}
	uint x=0;
	uint y=0;
	uint currentlocation=player.GetMap().GetProtoId();
	
	if(currentlocation==(9))
	{
		x=Random(163,676);
		y=Random(9,604);
	}
	else if(currentlocation==(62))
	{
		x=Random(690,1563);
		y=Random(284,797);
	}
	else if(currentlocation==(70))
	{
		x=Random(1323,1968);
		y=Random(1179,1940);
	}
	else if(currentlocation==(141))
	{
		x=Random(850,1150);
		y=Random(550,800);
	}
	array<Critter@>players;
	players.insertLast(player);
	
	uint locId=CreateLocation((player.ParamBase[(91)]),x,y,players);
	
	if(locId!=0)
	Log("Player location created with the id "+locId);
	
	Location@loc=GetLocation(locId);
	
	FLog((14),"BASE "+loc.Id+" "+loc.GetProtoId()+" "+loc.WorldX+" "+loc.WorldY);
	
	loc.Color=((uint(((120)<<24)|(((40)&0xFF)<<16)|(((200)&0xFF)<<8)|((255)&0xFF))));
	loc.Update();
	
	array<Map@>maps;
	loc.GetMaps(maps);
	for(uint i=0;i<maps.length();i++)
	{
		maps[i].SetData((0),fid);
		if(!maps[i].SetScript("map_playerfaction_hq@map_init"))
		{
			Log("ERR: Couldn't assign map script for player faction hq map");
			return(11);
		}
	}
	
	if(!AddFactionBase(CreateFactionBase(player.Param[(106)],say,locId)))
	return(11);
	RemoveMoneyForBase(player);
	return(8);
}

bool d_HasRequiredFollowers(Critter&player,Critter@npc,int num)
{                 
	
	return true;
}
bool d_HasNotRequiredFollowers(Critter&player,Critter@npc,int num)
{
	return!d_HasRequiredFollowers(player,npc,num);
}      

bool FindBaseEncounter(array<Critter@>&group,Item@car,uint x,uint y,uint&encounterDescriptor,bool&waitForAnswer)
{
	encounterDescriptor=0;
	waitForAnswer=false;
	
	if(!(@group!=null)||group.length()==0)
	{
		Log("Invalid critters argument.");
		return false;
	}
	
	uint faction=CheckFactionBaseCoords(x,y);
	
	if(faction!=0)
	return false;
	
	Critter@leader=group[0];
	
	leader.Say((11),"In faction base area"); 
	
	uint chance=100;
	
	if(uint(Random(1,100))>chance)
	return false;       
	
	waitForAnswer=true;
	
	for(uint i=0,j=group.length();i<j;i++)
	group[i].Say((41),"");
	encounterDescriptor=2500;
	return true;
}    

const array<int>Requirements=
{
	(210),(286),250,(98),250,(1804),15,(1801),10,-1,
	(246),(1803),30,(286),30,(1804),15,(1801),10,-1,
	(205),(98),350,(1804),50,(1801),10,-1,
	(202),(286),250,(98),300,(1804),15,(1801),10,-1,
	(435),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(436),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(437),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(438),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(439),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(481),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(506),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(521),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(528),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(374),(286),99999,(41),15000,(1804),99999,(1801),99999,-1,
	(373),(286),1,(41),1,(1804),1,(1801),1,-1,
	(440),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(480),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(482),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(518),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(525),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(458),(1803),10,(286),30,(1804),10,(9653),10,-1,
	(459),(98),250,(286),30,(1804),250,(1801),30,-1,
	(460),(98),50,(286),300,(1801),50,-1,
	(520),(98),50,(286),300,(1801),50,-1,
	(523),(98),50,(286),800,(9653),50,-1,
	(524),(98),50,(286),800,(9653),50,-1,
	(529),(286),1000,(1803),20,(98),100,-1,
	(461),(286),25000,(9628),10000,(9653),10000,(22089),15,-1,
	(462),(286),25000,(9628),10000,(9653),10000,(22089),15,-1,
	(463),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(464),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(467),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(468),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(469),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(470),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(471),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(472),(286),250,(41),15000,(1804),15,(1801),10,-1,
	(475),(286),250,(9653),100,(1804),500,(98),350,-1
};    

bool s_ProgressInfo(Critter&player,Scenery&,int skill,Item@)
{
	if(skill!=-1)
	return false;
	array<int>info;
	CalcRequirements(player.GetMap(),info);
	player.RunClientScript("_ShowBaseConstructionProgress",0,0,0,null,info);
	return true;
}
bool CalcRequirements(Map&map,array<int>&info)
{
	int basetype=GetRootMapData(map,(20));
	
	int idx=-1;
	for(int i=0,j=Requirements.length();i<j;i++)
	{
		if(i>0&&Requirements[i-1]!=-1)
		continue;
		if(Requirements[i]==basetype)
		{
			idx=i;
			break;
		}
	}
	if(idx==-1)
	{
		Log("Wrong base type: "+basetype);
		return false;
	}
	bool ret=true;
	for(int i=idx+1,j=Requirements.length();i<j;i+=2)
	{
		if(Requirements[i]==-1)
		break;
		info.insertLast(Requirements[i]);
		array<Item@>resources;
		uint count=0;
		for(uint r=0;r<map.GetItems(uint16(Requirements[i]),resources);r++)
		count+=resources[r].GetCount();
		if(int(count)<Requirements[i+1])
		ret=false;
		info.insertLast(count);
		info.insertLast(Requirements[i+1]);
	}
	return ret;
}

void CreateBuilder(Critter&player,int base)
{
	Map@map=player.GetMap();
	Critter@builder=AddNpc(map,449,player.HexX,player.HexY,Random(0,5),0,"",0,0,0,false,10);
	MakeFollower(builder,(5),"",(10151),player,false);
	builder.FollowerVarBase[(926)]=(6);
	builder.FollowerVarBase[(925)]=(0);
	GameVar@var=GetLocalVar((4110),builder.Id);
	var=base;
}

uint r_SiteDepot(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(210));
		return 0;
	}
	else return 0;
}

uint r_SitePatt1(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(440));
		return 0;
	}
	else return 0;
}
uint r_SitePatt10(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(480));
		return 0;
	}
	else return 0;
}
uint r_SitePatt12(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(518));
		return 0;
	}
	else return 0;
}
uint r_SitePatt14(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(525));
		return 0;
	}
	else return 0;
}
uint r_SiteSkytower(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(373));
		return 0;
	}
	else return 0;
}
uint r_Sitefakevault(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(374));
		return 0;
	}
	else return 0;
}
uint r_SitePat01(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(435));
		return 0;
	}
	else return 0;
}
uint r_SitePat02(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(436));
		return 0;
	}
	else return 0;
}
uint r_SitePat03(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(437));
		return 0;
	}
	else return 0;
}
uint r_SitePat04(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(438));
		return 0;
	}
	else return 0;
}
uint r_SitePat05(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(439));
		return 0;
	}
	else return 0;
}
uint r_SitePat06(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(481));
		return 0;
	}
	else return 0;
}
uint r_sitePat07(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(506));
		return 0;
	}
	else return 0;
}
uint r_sitePat08(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(521));
		return 0;
	}
	else return 0;
}
uint r_sitePat09(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(528));
		return 0;
	}
	else return 0;
}
uint r_sitebasement(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(520));
		return 0;
	}
	else return 0;
}
uint r_sitechurch(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(523));
		return 0;
	}
	else return 0;
}
uint r_sitecabin(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(524));
		return 0;
	}
	else return 0;
}

uint r_sitelib(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(529));
		return 0;
	}
	else return 0;
}
uint r_SiteScrapheap(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(205));
		return 0;
	}
	else return 0;
}
uint r_SiteCamp(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(246));
		return 0;
	}
	else return 0;
}
uint r_SiteOutpost(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(202));
		return 0;
	}
	return 0;
}

uint r_SitePatt2(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(463));
		return 0;
	}
	return 0;
}

uint r_SitePatt3(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(464));
		return 0;
	}
	return 0;
}

uint r_SitePatt4(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(467));
		return 0;
	}
	return 0;
}

uint r_SitePatt5(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(468));
		return 0;
	}
	return 0;
}

uint r_SitePatt6(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(469));
		return 0;
	}
	return 0;
}

uint r_SitePatt7(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(470));
		return 0;
	}
	return 0;
}

uint r_SitePatt8(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(471));
		return 0;
	}
	return 0;
}

uint r_SitePatt9(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(472));
		return 0;
	}
	return 0;
}

uint r_SitePatt11(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(482));
		return 0;
	}
	return 0;
}

uint r_SiteShelter(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(475));
		return 0;
	}
	return 0;
}

uint r_SiteParking(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(458));
		return 0;
	}
	else return 0;
}

uint r_SiteStorage(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(459));
		return 0;
	}
	else return 0;
}

uint r_SiteNuka(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(460));
		return 0;
	}
	else return 0;
}

uint r_SiteFarm(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(461));
		return 0;
	}
	else return 0;
}

uint r_SiteRancho(Critter&player,Critter@,int cost)
{
	if(player.CountItem(Addpropermoney(player))<uint(cost))
	return(12);
	if(player.Param[(106)]==(1))
	{
		uint res=CreateFaction(player);
		if(res!=0)
		return res;
	}
	if(GetPartyPointsUsed(player)<GetPartyPointsMax(player))
	{
		player.DeleteItem(Addpropermoney(player),cost);
		CreateBuilder(player,(462));
		return 0;
	}
	else return 0;
}

uint r_CreateSite(Critter&player,Critter@builder)
{
	if(!IsEncounterMap(player.GetMap()))
	{
		return(8);
	}
	DisbandFollower(player,builder,true);
	DeleteNpc(builder);
	array<Critter@>group;
	uint locId=CreateLocationForGroup(player,(76),player.WorldX,player.WorldY,group);
	if(locId==0)
	return(7);
	
	Location@loc=GetLocation(locId);
	
	FLog((14),"BASE2 "+loc.Id+" "+loc.GetProtoId()+" "+loc.WorldX+" "+loc.WorldY);
	
	loc.Color=0x307CFF22;
	loc.Update();
	
	array<Map@>maps;
	loc.GetMaps(maps);
	for(uint i=0;i<maps.length();i++)
	{
		maps[i].SetData((0),player.Param[(106)]);
		GameVar@var=GetLocalVar((4110),builder.Id);
		maps[i].SetData((20),var.GetValue());
		if(!maps[i].SetScript("map_playerfaction_hq@map_init"))
		{
			Log("ERR: Couldn't assign map script for player faction hq map");
			return(11);
		}
	}
	MoveCars(player.GetMap(),maps[0]);
	for(uint i=0;i<group.length();i++)
	group[i].TransitToMap(maps[0].Id,0);
	
	int i=1;
	while(!AddFactionBase(CreateFactionBase(player.Param[(106)],"Construction site"+(i>1?(" "+i):""),locId)))
	{
		i++;
	}
	
	return 0;
}
bool d_OnSite(Critter&player,Critter@)
{
	Map@map=player.GetMap();
	return(@map!=null)&&map.GetProtoId()==(96);
}
bool d_CanTalkWithBuilder(Critter&player,Critter@)
{
	Map@map=player.GetMap();
	bool faction=player.Param[(106)]==GetRootMapData(map,(0));
	bool rank=player.Param[(121)]==(5);
	return faction&&rank;
}
bool d_ConstructionReady(Critter&player,Critter@)
{
	Map@map=player.GetMap();
	array<int>info;
	return CalcRequirements(map,info);
}
uint dlg_FinishConstruction(Critter&player,Critter@builder,string@say)
{
	
	if(!d_ConstructionReady(player,builder))
	{
		player.Say((12),"It looks like someone stole parts of the base while we were talking.");
		return 0;
	}
	
	if(!((@say!=null)&&say.length()>0))
	return 0;
	uint fid=player.Param[(106)];
	if((@GetFactionBase(fid,say)!=null))
	{
		player.Say((12),"Hideout with given name exists, give new one");
		return 0;
	}
	Map@site=player.GetMap();
	int basetype=GetRootMapData(site,(20));
	array<Critter@>group;
	uint locId=CreateLocationForGroup(player,basetype,player.WorldX,player.WorldY,group);
	if(locId==0)
	{
		Log("Unable to spawn location: "+basetype);
		return 0;
	}
	Location@loc=GetLocation(locId);
	loc.Color=((uint(((120)<<24)|(((40)&0xFF)<<16)|(((200)&0xFF)<<8)|((255)&0xFF))));
	loc.Update();
	
	Map@entrance=loc.GetMapByIndex(0);
	MoveCars(site,entrance);
	for(uint i=0,j=group.length();i<j;i++)
	group[i].TransitToMap(entrance.Id,0);
	
	DeleteLocation(site.GetLocation().Id);
	
	array<Map@>maps;
	loc.GetMaps(maps);
	for(uint i=0;i<maps.length();i++)
	{
		maps[i].SetData((0),fid);
		if(!maps[i].SetScript("map_playerfaction_hq@map_init"))
		{
			Log("ERR: Couldn't assign map script for player faction hq map");
			return(11);
		}
	}
	
	if(!AddFactionBase(CreateFactionBase(fid,say,locId)))
	return(11);
	
	return 0;
}
void foreworker_dialog(Critter&player,int,int,int)
{
	RunDialog(player,(10150),player.HexX,player.HexY,true);
}

