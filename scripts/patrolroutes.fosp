

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";                                                                                                                                                                                                                                                                                                                                                                                                                       

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
}

shared interface INode
{
	uint GetX();
	uint GetY();
	uint GetDir();
	uint GetWait();
};

class CNode:INode
{
	uint x;
	uint y;
	uint dir;
	uint map;
	uint wait;
	uint waitmin;
	uint waitmax;
	bool minmax;
	uint GetX(){return x;}
	uint GetY(){return y;}
	uint GetDir(){return dir;}
	uint GetWait()
	{
		if(minmax)
		{
			uint time=Random(waitmin,waitmax);
			{;};
			return time;
		}
		
		return wait;
	}
}; 

import uint AddPNode(INode@node)from"patrolnodes";
import INode@GetNode(uint id)from"patrolnodes";

shared interface IPatrolRoute
{
	IPatrolRoute@AddNode(int entireid,uint dir,uint wait);
	IPatrolRoute@AddNode(int x,int y,uint dir,uint wait);
	INode@GetNextNode(Critter&critter);
	INode@GetRandomNode(Critter&critter);
};

CPosition@FindItemNode(Map@map,int nodeid)
{
	array<Item@>items;
	uint num=map.GetItems((1851),items);
	
	int index=-1;
	
	for(uint i=0;i<num;i++)
	{
		if(items[i].Val1==nodeid)
		{
			index=i;
			break;
		}
	}
	
	if(index==-1)
	return null;
	
	CPosition item;
	item.x=items[index].HexX;
	item.y=items[index].HexY;
	return item;
}

class CPatrolRoute:IPatrolRoute
{
	Map@map;
	array<uint>nodes;
	uint current;
	uint nodetime;
	
	CPatrolRoute(uint mapid)
	{
		@map=GetMapByPid(mapid,0);
		current=0;
		if(!(@map!=null))
		Log("Warning: map object is invalid");
	}
	
	IPatrolRoute@AddNode(int nodeid,uint dir,uint wait)
	{
		CPosition@node;
		@node=FindItemNode(map,nodeid);
		
		if(!(@node!=null))
		Log("NodeID "+nodeid+" not found!");
		else
		AddNode(node.x,node.y,dir,wait);
		
		return this;
	}
	
	IPatrolRoute@AddNode(int x,int y,uint dir,uint waitmin,uint waitmax)
	{
		
		CNode node;
		node.x=x;
		node.y=y;
		node.dir=dir;
		node.waitmin=waitmin;
		node.waitmin=waitmax;
		node.minmax=true;
		node.map=map.Id;
		uint id=AddPNode(node);
		WLog("patrolling","Adding node, "+"received id "+id);
		nodes.insertLast(id);
		
		return this;
	}
	
	IPatrolRoute@AddNode(int x,int y,uint dir,uint wait)
	{
		
		CNode node;
		node.x=x;
		node.y=y;
		node.dir=dir;
		node.wait=wait;
		node.minmax=false;
		node.map=map.Id;
		uint id=AddPNode(node);
		WLog("patrolling","Adding node, "+"received id "+id);
		nodes.insertLast(id);
		
		return this;
	}
	INode@GetNextNode(Critter&critter)
	{
		if(nodes.length()==0)
		{
			WLog("patrolling","Couldn't find node",10);
			return null;
		}
		
		current=GetLvar(critter,(10100));
		
		if(current+1>=nodes.length())
		current=0;
		else
		current+=1; 
		
		SetLvar(critter,(10100),current);
		return GetNode(nodes[current]);
	}
	
	INode@GetRandomNode(Critter&critter)
	{
		if(nodes.length()==0)
		{
			WLog("patrolling","Couldn't find node",10);
			return null;
		}
		
		current=Random(0,nodes.length()-1);
		SetLvar(critter,(10100),current);
		return GetNode(nodes[current]);
	}
	
};    

array<IPatrolRoute@>PatrolRoutes;

IPatrolRoute@GetPatrolRoute(uint id)
{
	if(PatrolRoutes.length()>id-1)
	return PatrolRoutes[id-1];
	else
	return null;
}

void AddPatrolRoute(CPatrolRoute&route)
{
	PatrolRoutes.insertLast(route);
}      

void InitRoutes()
{
	Log("Initializing patrol routes");     
	
	CPatrolRoute@junktown_gate_patrol;@junktown_gate_patrol=CPatrolRoute((70));junktown_gate_patrol.AddNode(123,123,1,5000).AddNode(123,123,3,5000);AddPatrolRoute(junktown_gate_patrol);   
	
	CPatrolRoute@adytum_patrol;@adytum_patrol=CPatrolRoute((280));adytum_patrol.AddNode(133,85,3,27000)
	.AddNode(140,111,1,25000)
	.AddNode(130,141,0,23000)
	.AddNode(100,116,5,31000)
	.AddNode(91,82,5,27000)
	.AddNode(107,80,3,25000);AddPatrolRoute(adytum_patrol);   
	
	CPatrolRoute@hub_guard1_patrol;@hub_guard1_patrol=CPatrolRoute((221));hub_guard1_patrol.AddNode(30,5,39960).AddNode(31,5,40000);AddPatrolRoute(hub_guard1_patrol);
	CPatrolRoute@hub_guard2_patrol;@hub_guard2_patrol=CPatrolRoute((221));hub_guard2_patrol.AddNode(32,5,39980).AddNode(33,5,40000);AddPatrolRoute(hub_guard2_patrol);
	CPatrolRoute@hub_guard3_patrol;@hub_guard3_patrol=CPatrolRoute((221));hub_guard3_patrol.AddNode(34,5,40000).AddNode(35,5,40000);AddPatrolRoute(hub_guard3_patrol);
	
	CPatrolRoute@hub_guard4_patrol;@hub_guard4_patrol=CPatrolRoute((221));hub_guard4_patrol.AddNode(22,3,105000).AddNode(20,3,80000).AddNode(21,0,80000);AddPatrolRoute(hub_guard4_patrol);
	CPatrolRoute@hub_brahminguard1_patrol;@hub_brahminguard1_patrol=CPatrolRoute((221));hub_brahminguard1_patrol.AddNode(23,3,150000).AddNode(24,0,150000);AddPatrolRoute(hub_brahminguard1_patrol);
	CPatrolRoute@hub_metro1_patrol;@hub_metro1_patrol=CPatrolRoute((221));hub_metro1_patrol.AddNode(1,4,80000)
	.AddNode(2,3,45000)
	.AddNode(3,2,45000)
	.AddNode(4,3,45000)
	.AddNode(5,3,45000)
	.AddNode(6,4,60000)
	.AddNode(7,5,55000)
	.AddNode(8,5,50000)
	.AddNode(9,1,65000)
	.AddNode(3,4,65000)
	.AddNode(2,5,55000);AddPatrolRoute(hub_metro1_patrol);
	
	CPatrolRoute@hub_metro2_patrol;@hub_metro2_patrol=CPatrolRoute((221));hub_metro2_patrol.AddNode(11,5,80000)
	.AddNode(10,2,45000)
	.AddNode(12,1,45000)
	.AddNode(13,2,45000)
	.AddNode(14,2,45000)
	.AddNode(15,3,60000)
	.AddNode(16,3,55000)
	.AddNode(17,5,50000)
	.AddNode(18,0,65000)
	.AddNode(12,5,65000)
	.AddNode(10,5,55000);AddPatrolRoute(hub_metro2_patrol);   
	
	CPatrolRoute@junktown_guard1_patrol;@junktown_guard1_patrol=CPatrolRoute((70));junktown_guard1_patrol.AddNode(1,5,60000)
	.AddNode(2,2,60000)
	.AddNode(3,2,80000)
	.AddNode(4,2,40000)
	.AddNode(5,2,60000)
	.AddNode(6,2,50000)
	.AddNode(7,2,60000)
	.AddNode(8,2,50000)
	.AddNode(9,2,40000)
	.AddNode(10,2,60000)
	.AddNode(11,2,60000)
	.AddNode(12,2,60000)
	.AddNode(13,2,80000)
	.AddNode(14,2,40000)
	.AddNode(15,2,60000);AddPatrolRoute(junktown_guard1_patrol);   
	
	CPatrolRoute@VC_GUARD_PATROL1;@VC_GUARD_PATROL1=CPatrolRoute((16));VC_GUARD_PATROL1.AddNode(1,3,60000)
	.AddNode(2,2,60000)
	.AddNode(3,4,60000)
	.AddNode(4,3,30000)
	.AddNode(5,2,60000)
	.AddNode(6,1,60000)
	.AddNode(2,2,60000)
	.AddNode(7,2,60000)
	.AddNode(8,5,60000)
	.AddNode(7,5,20000)
	.AddNode(4,4,30000)
	.AddNode(3,1,40000)
	.AddNode(2,5,30000)
	.AddNode(1,1,60000);AddPatrolRoute(VC_GUARD_PATROL1);
	
	CPatrolRoute@VC_GUARD_PATROL2;@VC_GUARD_PATROL2=CPatrolRoute((16));VC_GUARD_PATROL2.AddNode(10,4,60000)
	.AddNode(11,5,60000)
	.AddNode(12,1,60000)
	.AddNode(13,2,60000)
	.AddNode(14,3,60000);AddPatrolRoute(VC_GUARD_PATROL2);   
	
	CPatrolRoute@NCR_GUARD_PATROL1;@NCR_GUARD_PATROL1=CPatrolRoute((45));NCR_GUARD_PATROL1.AddNode(1,0,60000)
	.AddNode(2,5,30000)
	.AddNode(3,0,30000)
	.AddNode(4,4,40000)
	.AddNode(5,3,40000)
	.AddNode(6,2,40000)
	.AddNode(7,2,40000)
	.AddNode(8,3,30000)
	.AddNode(9,2,10000)
	.AddNode(10,2,50000);AddPatrolRoute(NCR_GUARD_PATROL1);   
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL1;@NCR_GUARD_PRISON_PATROL1=CPatrolRoute((65));NCR_GUARD_PRISON_PATROL1.AddNode(1,2,40000)
	.AddNode(2,2,40000)
	.AddNode(3,3,60000)
	.AddNode(4,3,50000)
	.AddNode(3,3,50000)
	.AddNode(2,2,40000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL1);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL2;@NCR_GUARD_PRISON_PATROL2=CPatrolRoute((65));NCR_GUARD_PRISON_PATROL2.AddNode(4,3,40000)
	.AddNode(5,3,60000)
	.AddNode(6,5,40000)
	.AddNode(5,3,60000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL2);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL3;@NCR_GUARD_PRISON_PATROL3=CPatrolRoute((65));NCR_GUARD_PRISON_PATROL3.AddNode(6,5,50000)
	.AddNode(7,5,60000)
	.AddNode(8,5,40000)
	.AddNode(9,5,50000)
	.AddNode(8,5,50000)
	.AddNode(7,5,60000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL3);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL4;@NCR_GUARD_PRISON_PATROL4=CPatrolRoute((65));NCR_GUARD_PRISON_PATROL4.AddNode(9,5,40000)
	.AddNode(8,5,60000)
	.AddNode(7,5,40000)
	.AddNode(6,5,40000)
	.AddNode(7,5,40000)
	.AddNode(8,5,60000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL4);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL5;@NCR_GUARD_PRISON_PATROL5=CPatrolRoute((65));NCR_GUARD_PRISON_PATROL5.AddNode(10,0,40000)
	.AddNode(11,0,60000)
	.AddNode(12,1,40000)
	.AddNode(11,0,60000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL5);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL6;@NCR_GUARD_PRISON_PATROL6=CPatrolRoute((65));NCR_GUARD_PRISON_PATROL6.AddNode(13,1,50000)
	.AddNode(14,2,60000)
	.AddNode(15,2,40000)
	.AddNode(14,2,60000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL6);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL7;@NCR_GUARD_PRISON_PATROL7=CPatrolRoute((65));NCR_GUARD_PRISON_PATROL7.AddNode(16,3,50000)
	.AddNode(17,4,50000)
	.AddNode(18,5,50000)
	.AddNode(19,0,50000)
	.AddNode(20,0,60000)
	.AddNode(21,1,50000)
	.AddNode(22,3,50000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL7);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL8;@NCR_GUARD_PRISON_PATROL8=CPatrolRoute((65));NCR_GUARD_PRISON_PATROL8.AddNode(1,3,50000)
	.AddNode(2,2,50000)
	.AddNode(3,3,50000)
	.AddNode(4,3,50000)
	.AddNode(5,4,50000)
	.AddNode(6,5,50000)
	.AddNode(7,5,50000)
	.AddNode(8,5,50000)
	.AddNode(9,5,50000)
	.AddNode(10,0,50000)
	.AddNode(11,0,50000)
	.AddNode(12,0,50000)
	.AddNode(13,2,50000)
	.AddNode(14,2,50000)
	.AddNode(15,2,50000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL8);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL9;@NCR_GUARD_PRISON_PATROL9=CPatrolRoute((66));NCR_GUARD_PRISON_PATROL9.AddNode(16,0,50000)
	.AddNode(17,0,50000)
	.AddNode(18,5,50000)
	.AddNode(17,2,50000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL9);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL10;@NCR_GUARD_PRISON_PATROL10=CPatrolRoute((66));NCR_GUARD_PRISON_PATROL10.AddNode(11,4,50000)
	.AddNode(18,3,50000)
	.AddNode(17,0,50000)
	.AddNode(16,4,50000)
	.AddNode(17,2,60000)
	.AddNode(18,3,50000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL10);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL11;@NCR_GUARD_PRISON_PATROL11=CPatrolRoute((66));NCR_GUARD_PRISON_PATROL11.AddNode(1,1,50000)
	.AddNode(2,1,50000)
	.AddNode(3,0,50000)
	.AddNode(4,0,50000)
	.AddNode(3,0,60000)
	.AddNode(2,1,50000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL11);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL12;@NCR_GUARD_PRISON_PATROL12=CPatrolRoute((66));NCR_GUARD_PRISON_PATROL12.AddNode(15,3,50000)
	.AddNode(14,3,50000)
	.AddNode(13,3,50000)
	.AddNode(12,3,50000)
	.AddNode(11,3,60000)
	.AddNode(10,4,50000)
	.AddNode(11,3,50000)
	.AddNode(12,3,50000)
	.AddNode(13,3,50000)
	.AddNode(14,3,50000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL12);
	
	CPatrolRoute@NCR_GUARD_PRISON_PATROL13;@NCR_GUARD_PRISON_PATROL13=CPatrolRoute((66));NCR_GUARD_PRISON_PATROL13.AddNode(9,5,60000)
	.AddNode(8,0,50000)
	.AddNode(7,0,60000)
	.AddNode(6,0,50000)
	.AddNode(5,0,60000)
	.AddNode(6,0,60000)
	.AddNode(7,0,50000)
	.AddNode(8,0,50000);AddPatrolRoute(NCR_GUARD_PRISON_PATROL13);  
	
	Log("Patrol routes initialized successfully");
}
