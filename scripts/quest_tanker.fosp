                        

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                   

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}                                                                                                                                                                                                                                                                                                                                                                                                                        

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
}

void r_SpawnTanker(Critter&player,Critter@npc)
{
	Critter@[]crits={player};
	int loc=CreateLocation((221),122,223,crits);
	if(loc==0)
	return;
	GameVar@locidv=GetLocalVar((7037),player.Id);
	locidv=loc;
	
	Location@location=GetLocation(loc);
	location.Color=((uint(((120)<<24)|(((255)&0xFF)<<16)|(((128)&0xFF)<<8)|((0)&0xFF))));
	location.Update();
	Map@map=location.GetMapByIndex(0);
	if(player.Param[(516)]==(2))
	SetTurnBasedAvailability(location);
	SetQuestGarbager(0,player.Id,loc,(7036),4);
	
}

void r_DeleteTanker(Critter&player,Critter@npc)
{
	GameVar@var=GetLocalVar((7037),player.Id);
	DeleteLocation(var.GetValue());
}

void _Hole(Item&item,bool firstTime)
{
	item.SetEvent((3),"_UseRopeOnHole");
}

bool _UseRopeOnHole(Item&item,Critter&crit,Item@usedItem)
{
	if(!crit.IsPlayer())
	return false;
	if(!(@usedItem!=null))
	return false;
	if(usedItem.GetProtoId()!=(127))
	return false;
	Map@map=crit.GetMap();
	Map@lowermap=map.GetLocation().GetMap((304));
	array<Entire>ropespawns;
	if(ParseEntires(lowermap,ropespawns,(150))==0)
	return false;
	
	Item@newRope=lowermap.AddItem(ropespawns[0].HexX,ropespawns[0].HexY,(9624),1);
	Item@newHole=map.AddItem(item.HexX,item.HexY,(704),1);
	newHole.SetEvent((4),"_UseRopeHole");
	newRope.SetEvent((4),"_UseRope");
	DeleteItem(item);
	crit.ParamBase[(76)]+=50*(GetGvar((62001)));
	LogQuestExperience(crit,50*(GetGvar((62001))),"tanker");
	crit.Say((11),"You've dropped a rope down the hole.");
	return true;
}

bool _UseRopeHole(Item&item,Critter&crit,int skill)
{
	if(skill!=-1)
	return false;
	crit.TransitToMap(GetMap(item.MapId).GetLocation().GetMap((304)).Id,6);
	return true;
}

bool _UseRope(Item&item,Critter&crit,int skill)
{
	if(skill!=-1)
	return false;
	crit.TransitToMap(GetMap(item.MapId).GetLocation().GetMap((303)).Id,7);
	return true;
}

bool s_Valve1(Critter&player,Scenery&valve,int skill,Item@item)
{
	if((@item!=null))
	return false;
	
	if(skill!=-1)
	return false;
	
	Map@map=player.GetMap().GetLocation().GetMap((301));
	uint flags=map.GetData((20));
	
	if((((flags)&((0x10)))!=0))
	{
		player.Say((11),"The valve is stuck and you can't rotate it anymore.");
		return true;
	}
	
	if((((flags)&((0x1)))!=0))
	{
		player.Say((11),"The valve is stuck. It looks like the compressure is too high.");
		return true;
	}
	
	if(!(((flags)&((0x8)))!=0))
	{
		player.Say((11),"You try to use the valve, but nothing happens.");
		return true;
	}
	
	((flags)=(flags)|((0x1)));
	if(flags&((0x1)|(0x2))==((0x1)|(0x2)))
	{
		RemoveSteam(map.GetLocation());
		((flags)=(flags)|((0x10)));
		map.SetData((20),flags);
		player.Say((11),"You rotate the valve and the noise of the machines can be heard. Looks like you've redirected the compressure.");
		player.ParamBase[(76)]+=100*(GetGvar((62001)));
		LogQuestExperience(player,100*(GetGvar((62001))),"tanker");
		return true;
	}
	
	map.SetData((20),flags);
	player.Say((11),"You rotate the valve, the compressure is pending.");
	uint[]values={map.GetLocation().Id,(0x1)};
	CreateTimeEvent(((__FullSecond)+(((1)*__TimeMultiplier))),"e_shutvalve",values,true);
	return true;
} 

bool s_Valve2(Critter&player,Scenery&valve,int skill,Item@item)
{
	if((@item!=null))
	{
		if(item.GetProtoId()!=(412))
		return false;
		Map@map=player.GetMap().GetLocation().GetMap((301));
		uint flags=map.GetData((20));
		if((((flags)&((0x4)))!=0))
		{
			player.Say((11),"You've already poured oil on this valve.");
			return true;
		}
		DeleteItem(item);
		map.SetData((20),flags|(0x4));
		player.ParamBase[(76)]+=100*(GetGvar((62001)));
		LogQuestExperience(player,100*(GetGvar((62001))),"tanker");
		player.Say((11),"You've poured some oil on this old valve.");
		return true;
	}
	else
	{
		if(skill!=-1)
		return false;
		Map@map=player.GetMap().GetLocation().GetMap((301));
		uint flags=map.GetData((20));
		
		if((((flags)&((0x10)))!=0))
		{
			player.Say((11),"You rotate the valve but nothing happens.");
			return true;
		}
		
		if((((flags)&((0x2)))!=0))
		{
			player.Say((11),"You try as hard as possible, but can't rotate the valve.");
			return true;
		}
		
		if(!(((flags)&((0x4)))!=0))
		{
			player.Say((11),"It won't budge.");
			return true;
		}
		
		if(!(((flags)&((0x8)))!=0))
		{
			player.Say((11),"You can now use the valve, but after you tried to open the ventile, a big noise came out of the generator machine behind you. Seems like it is broken now. You have to fix it first, before you can use the valve.");
			return true;
		}
		
		((flags)=(flags)|((0x2)));
		if(flags&((0x1)|(0x2))==((0x1)|(0x2)))
		{
			RemoveSteam(map.GetLocation());
			((flags)=(flags)|((0x10)));
			map.SetData((20),flags);
			player.Say((11),"You rotate the valve and the noise of the machines can be heard. Seems like you've redirected the compressure.");
			LogQuestExperience(player,100*(GetGvar((62001))),"tanker");
			player.ParamBase[(76)]+=100*(GetGvar((62001)));
			return true;
		}
		
		map.SetData((20),flags);
		player.Say((11),"This valve works, now you have to find and use the other valve fast.");
		uint[]values={map.GetLocation().Id,(0x2)};
		CreateTimeEvent(((__FullSecond)+(((1)*__TimeMultiplier))),"e_shutvalve",values,true);
		return true;
	}
}

bool s_Machine(Critter&player,Scenery&valve,int skill,Item@item)
{
	if(!player.IsPlayer())
	return false;
	if(!(@item!=null))
	return false;
	if(item.GetProtoId()!=(706))
	return false;
	Map@map=player.GetMap().GetLocation().GetMap((301));
	uint flags=map.GetData((20));
	if((((flags)&((0x8)))!=0))
	{
		player.Say((11),"This does nothing. The machine is already repaired.");
		return true;
	}
	
	if(player.Timeout[(232)]>0)
	{
		player.SayMsg((11),(3),(3401));
		return true;
	}
	
	player.TimeoutBase[(232)]=player.Timeout[(232)]+((2)*__TimeMultiplier*60);
	
	if(player.Param[(213)]<Random(1,100)+100)
	{
		player.Say((11),"You try to fix the machine, but failed in doing this.");
		return true;
	}
	
	((flags)=(flags)|((0x8)));
	map.SetData((20),flags);
	DeleteItem(item);
	player.Say((11),"You successfully repaired the rusty machine with the spares.");
	player.ParamBase[(76)]+=500*(GetGvar((62001)));
	LogQuestExperience(player,500*(GetGvar((62001))),(213),"tanker");
	return true;
}

bool s_Terminal(Critter&player,Scenery&terminal,int skill,Item@item)
{
	if(!player.IsPlayer()||skill!=-1||(@item!=null))
	return false;
	RunDialog(player,(10262),terminal.HexX,terminal.HexY,false);
	return true;
}

void RemoveSteam(Location@loc)
{
	Map@map=loc.GetMap((304));
	array<Item@>steams;
	map.GetItems((615),steams);
	DeleteItems(steams);
}

uint e_shutvalve(array<uint>@values)
{
	Map@map=GetLocation(values[0]).GetMap((301));
	uint flags=map.GetData((20));
	(flags=((flags)&(~(values[1]))));
	map.SetData((20),flags);
	return 0;
}

bool d_HandysHostile(Critter&player,Critter@npc)
{
	return!(((player.GetMap().GetData((21)))&((0x1)))!=0);
}

bool d_NotHandysHostile(Critter&player,Critter@npc)
{
	return(((player.GetMap().GetData((21)))&((0x1)))!=0);
}

uint r_ToggleHandys(Critter&player,Critter@npc,int successnode)
{
	if(player.Param[(212)]-75<Random(1,100))
	return 0;
	
	Map@map=player.GetMap();
	uint flags=map.GetData((21));
	
	if(!(((flags)&((0x1)))!=0))
	{
		((flags)=(flags)|((0x1)));
		if(!(((flags)&((0x2)))!=0))
		{
			((flags)=(flags)|((0x2)));
			player.ParamBase[(76)]+=200*(GetGvar((62001)));
			LogQuestExperience(player,200*(GetGvar((62001))),(212),"tanker");
		}
		array<Critter@>handys;
		uint n=map.GetCritters((73),(0x03)|(0x20),handys);
		for(uint i=0;i<n;i++)
		{
			handys[i].SetScript(null);
			handys[i].ClearEnemyStack();
			handys[i].DropPlanes();
		}
		map.SetData((21),flags);
	}
	else
	{
		(flags=((flags)&(~((0x1)))));
		if(!(((flags)&((0x4)))!=0))
		{
			((flags)=(flags)|((0x4)));
			player.ParamBase[(76)]+=75*(GetGvar((62001)));
			LogQuestExperience(player,75*(GetGvar((62001))),(212),"tanker");
		}
		array<Critter@>handys;
		uint n=map.GetCritters((73),(0x03)|(0x20),handys);
		for(uint i=0;i<n;i++)
		handys[i].SetScript(("mob@critter_init"));
		map.SetData((21),flags);
	}
	
	return successnode;
} 

bool d_QuestTimeoutReady(Critter&player,Critter@npc)
{
	GameVar@var=GetLocalVar((7054),player.Id);
	{;};
	return var.GetValue()==0||uint(var.GetValue())<=(__FullSecond);
}

bool d_QuestTimeoutNotReady(Critter&player,Critter@npc)
{
	GameVar@var=GetLocalVar((7054),player.Id);
	return var.GetValue()!=0&&uint(var.GetValue())>(__FullSecond);
}

void r_QuestTimeout(Critter&player,Critter@npc,int timeout)
{
	GameVar@var=GetLocalVar((7054),player.Id);
	var=(__FullSecond)+((timeout)*3600);
}   

void r_QuestCD(Critter&player,Critter@npc)
{
	GameVar@var=GetLocalVar((7036),player.Id);
	var=3;
	uint[]values={player.Id,npc.Id};
	CreateTimeEvent(((__FullSecond)+(((Random(6,9))*__TimeMultiplier*3600))),"e_reset_quest_var",values,true);
}

uint e_reset_quest_var(array<uint>@values)
{
	Critter@player=GetCritter(values[0]);
	
	if(!(@player!=null))
	return 0;
	
	if(player.IsPlayer())
	{
		GameVar@var=GetLocalVar((7036),player.Id);
		var=0;
	}
	else
	return 0;
	
	return 0;
}  

