

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                   

bool dbInitTable(string@,string@){return true;}
bool dbLog(string@,string@){return true;}                   

void InitDBLogs(){}

void LogExperience(Critter&cr,int amount){}
void LogExperience(Critter&cr,int amount,string@info){}
void LogExperience(Critter&cr,int amount,int skill){}
void LogExperience(Critter&cr,int amount,int skill,string@info){}
void LogExperience(Critter&cr,int amount,int skill,int param){}
void LogExperience(Critter&cr,int amount,int skill,string@info,int param){}
void LogQuestExperience(Critter&cr,int amount,string@info){}
void LogQuestExperience(Critter&cr,int amount,int skill,string@info){}
void LogAttack(Map@map,Critter&cr,Critter&target,ProtoItem&weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint ammoRound,uint weaponRound,bool isHit,bool isCritical,uint critfailFlags){}
void LogDamage(Map@map,Critter@attacker,Critter&target,Item@weapon,ProtoItem@ammo,uint8 aim,bool isBurst,uint damage,bool isCritical,uint eff,uint rounds){}
void LogGathering(Critter&,uint16,int){}

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                      

const string@FD_Result2String(int res)
{
	if(res==(0))
	return"FD_RESULT_SUCCESS";
	else if(res==(1))
	return"FD_RESULT_ALREADY_EXISTS";
	else if(res==(2))
	return"FD_RESULT_NOT_FOUND";
	else if(res==(3))
	return"FD_RESULT_ANY_DATA_ERROR";
	else if(res==(4))
	return"FD_RESULT_INVALID_ARGUMENT";
	else if(res==(5))
	return"FD_RESULT_LVAR_ERROR";
	else if(res==(6))
	return"FD_RESULT_DB_NOT_FOUND";
	else if(res==(7))
	return"FD_RESULT_DB_FULL";
	else if(res==(8))
	return"FD_RESULT_DB_EMPTY";
	else
	return"FD_Result: Unknown error code";
}                                                                                                                     

shared interface IFaction
{
	int get_Id()const;
	string get_Name()const;
	int get_StringId()const;
	string get_Database()const;
	int get_UpdateSeq()const;
	void set_UpdateSeq(int);
	
	int GetStatus(int id)const;
	void SetStatus(int id,int status);
	int GetRank(int id)const;
	void SetRank(int id,int rank);
	void settag(int index,int tag,int r,int g,int b);
	int get_tag(int index);
	int get_b(int index);
	int get_r(int index);
	int get_g(int index);  
	
	int GetMembers(array<uint>&)const;
	int GetRecords(array<uint>&)const;  
	
	void AddKnownFaction(int);   
	
	int GetKnownFactions(array<int>&)const;
	void Remove();
}

shared interface IFactionBase
{
	
	uint get_Id()const;
	
	uint get_FactionId()const;
	
	const string&get_Name()const;
	
	uint get_LocationId()const; 
	
	void Show(Critter&cr)const;
	
	void Hide(Critter&cr)const; 
	
	bool IsRankAllowed(int rank)const;
	
	void AllowRank(int rank,bool allow);
	
	bool IsStatusAllowed(int status)const;
	
	void AllowStatus(int status,bool allow); 
	
	void Remove();
};  

import IFactionBase@GetFactionBase(uint faction_id,const string&faction_name)from"factions_bases";
import IFactionBase@GetFactionBase(uint id)from"factions_bases";
import IFactionBase@GetFactionBaseByLocId(uint id)from"factions_bases";
import uint GetFactionBases(uint faction_id,array<IFactionBase@>@)from"factions_bases";
import bool AddFactionBase(IFactionBase&)from"factions_bases";
import void AddFactionBase(uint)from"factions_bases";
import IFactionBase@CreateFactionBase(uint faction_id,const string&name,uint location_id)from"factions_bases";
import void RemoveFactionBase(uint,const string&)from"factions_bases";
import void RemoveFactionBase(IFactionBase&)from"factions_bases

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";    

dictionary NameAliases;

array<string>FactionNames;   

dictionary@AssignedNames;

array<int>UnassignedNames;       

bool GetFactionNameStringId(const string@name,uint&out id)
{
	return NameAliases.get(name,id);
}   

bool GetFactionName(uint stringId,string&out name)
{
	if(stringId>=FactionNames.length())
	return false;
	if(!(@FactionNames[stringId]!=null))
	return false;
	name=FactionNames[stringId];
	return true;
}      

bool GetFactionId(const string@name,uint&out id)
{
	uint stringId=0;
	if(!NameAliases.get(name,stringId))
	return false;
	
	return AssignedNames.get(FactionNames[stringId],id);
}         

int AssignFactionName(const string@name,uint faction,uint&out stringId)
{
	if(AssignedNames.exists(name))
	{
		NameAliases.get(name,stringId);
		return(1);
	}
	else
	{
		if(!NameAliases.get(name,stringId))
		return(2);
		
		if(AssignedNames.exists(FactionNames[stringId]))
		return(1);
		
		AssignedNames.set(FactionNames[stringId],faction);
		WLog("factions","Unassigned remove: "+stringId+"/"+UnassignedNames.find(stringId));
		UnassignedNames.removeAt(UnassignedNames.find(stringId));
		return(0);
	}
}
void UnassignFactionName(int stringId,const string&name)
{
	AssignedNames.delete(name);
	UnassignedNames.insertLast(stringId);
}   

void AssignFactionNameByStringId(uint faction,uint stringId)
{       
	
}    

uint GetUnassignedFactionNames(array<int>&res)
{
	for(int i=0,j=UnassignedNames.length();i<j;i++)
	{
		int stringId=UnassignedNames[i];
		res.insertLast(1000000+stringId*2);
	}
	return UnassignedNames.length();
}   

bool IsFactionNameFree(const string&name)
{
	int stringId;
	if(!NameAliases.get(name,stringId))
	return false;
	return!AssignedNames.exists(FactionNames[stringId]);
}  

bool IsFactionNameValid(const string&name)
{
	return NameAliases.exists(name);
}   

void InitFactionsNames()
{
	@AssignedNames=@dictionary();
	Log("Initializing factions names lookup");
	ReadMsgStrings("text/engl/fotext.msg",1000000,1004000);
}       

void ReadMsgStrings(string@fileName,int min,int max)
{
	file f;
	Log("Reading strings from file"+fileName);
	
	if(f.open(fileName,"r")>=0)
	{
		
		string str;
		int l=f.readString(f.getSize(),str);
		f.close(); 
		
		array<string@>@lines=split(str,"\n");
		Log("Read "+lines.length()+" lines");
		
		int stringId=0; 
		
		for(uint i=0;i<lines.length();i++)
		{
			string msgStr;
			int num; 
			
			if(lines[i].length()<=2)
			continue;
			
			if(ParseMsgString(lines[i],min,max,num,msgStr))
			{
				if(num%2==0)
				{
					WLog("factions","Faction name("+(stringId+1)+"): "+msgStr);
					FactionNames.insertLast(msgStr);
					UnassignedNames.insertLast(stringId);
					stringId++;
				}
				else
				{
					WLog("factions","with Alias: "+msgStr);
					NameAliases.set(msgStr,stringId-1);
				}
			}
		}
	}
}     

bool ParseMsgString(const string&in line,int min,int max,int&out num,string&out msgStr)
{
	array<string@>@parts=split(line,"{");
		if(parts.length()!=4)
		{
			
			return false;
		}  
		
		string number=substring(parts[1],0,parts[1].length()-1);
		
		if(!StrToInt(number,num))
		{
			Log("ERR: Incorrect number string: "+number);
			return false;
		} 
		
		if(num>=min&&num<=max)
		{
			msgStr=substring(parts[3],0,parts[3].length()-2);
			return true;
		}
		else
		return false;
	}
	
	shared class Serializator
	{
		Serializator()
		{
			CurPos=0;
			BufSize=0;
			DataSize=0;
		}
		
		Serializator(uint approxSize)
		{
			CurPos=0;
			BufSize=0;
			DataSize=0;
			GrowBuffer(approxSize);
		}
		
		void GrowBuffer()
		{
			BufSize+=(128);
			Array.resize(BufSize);
		}
		
		void GrowBuffer(uint length)
		{
			BufSize+=length;
			Array.resize(BufSize);
		}
		
		bool Save(string&name)
		{
			if(DataSize==0)
			return false;
			bool result=SetAnyData(name,Array,DataSize);
			Clear();
			return result;
		}
		
		bool Load(string&name)
		{
			Clear();
			if(!IsAnyData(name))
			return false;
			if(!GetAnyData(name,Array))
			return false;
			BufSize=Array.length();
			DataSize=BufSize;
			return true;
		}
		
		void Clear()
		{
			CurPos=0;
			BufSize=0;
			DataSize=0;
		}
		
		Serializator@SetCurPos(uint pos)
		{
			if(pos>BufSize)
			GrowBuffer(pos-BufSize+(128));
			CurPos=pos;
			return this;
		}
		
		Serializator@Fill(uint8 value,uint length)
		{
			if(CurPos+length>BufSize)
			GrowBuffer(CurPos+length-BufSize+(128));
			for(uint i=0;i<length;i++)
			Array[CurPos++]=value;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@Set(const int64&value)
		{
			if(CurPos+8>BufSize)
			GrowBuffer();
			Array[CurPos++]=(value>>56)&0xFF;
			Array[CurPos++]=(value>>48)&0xFF;
			Array[CurPos++]=(value>>40)&0xFF;
			Array[CurPos++]=(value>>32)&0xFF;
			Array[CurPos++]=(value>>24)&0xFF;
			Array[CurPos++]=(value>>16)&0xFF;
			Array[CurPos++]=(value>>8)&0xFF;
			Array[CurPos++]=value&0xFF;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const int64&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const int32&value)
		{
			if(CurPos+4>BufSize)
			GrowBuffer();
			Array[CurPos++]=(value>>24)&0xFF;
			Array[CurPos++]=(value>>16)&0xFF;
			Array[CurPos++]=(value>>8)&0xFF;
			Array[CurPos++]=value&0xFF;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const int32&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const int16&value)
		{
			if(CurPos+2>BufSize)
			GrowBuffer();
			Array[CurPos++]=(value>>8)&0xFF;
			Array[CurPos++]=value&0xFF;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const int16&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const int8&value)
		{
			if(CurPos+1>BufSize)
			GrowBuffer();
			Array[CurPos++]=value;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const int8&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const uint64&value)
		{
			if(CurPos+8>BufSize)
			GrowBuffer();
			Array[CurPos++]=(value>>56)&0xFF;
			Array[CurPos++]=(value>>48)&0xFF;
			Array[CurPos++]=(value>>40)&0xFF;
			Array[CurPos++]=(value>>32)&0xFF;
			Array[CurPos++]=(value>>24)&0xFF;
			Array[CurPos++]=(value>>16)&0xFF;
			Array[CurPos++]=(value>>8)&0xFF;
			Array[CurPos++]=value&0xFF;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const uint64&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const uint32&value)
		{
			if(CurPos+4>BufSize)
			GrowBuffer();
			Array[CurPos++]=(value>>24)&0xFF;
			Array[CurPos++]=(value>>16)&0xFF;
			Array[CurPos++]=(value>>8)&0xFF;
			Array[CurPos++]=value&0xFF;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const uint32&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const uint16&value)
		{
			if(CurPos+2>BufSize)
			GrowBuffer();
			Array[CurPos++]=(value>>8)&0xFF;
			Array[CurPos++]=value&0xFF;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const uint16&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const uint8&value)
		{
			if(CurPos+1>BufSize)
			GrowBuffer();
			Array[CurPos++]=value;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const uint8&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const bool&value)
		{
			if(CurPos+1>BufSize)
			GrowBuffer();
			Array[CurPos++]=value?1:0;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const bool&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const string&value)
		{
			uint len=value.rawLength();
			if(CurPos+len+1>BufSize)
			GrowBuffer(CurPos+len+1-BufSize+(128));
			for(uint i=0;i<len;i++)
			Array[CurPos++]=value.rawGet(i);
			Array[CurPos++]=0;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const string&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const float&value)
		{
			int dummy=FloatToInt(value);
			return Set(dummy);
		}
		
		Serializator@opShl(const float&value)
		{
			return Set(value);
		}
		
		Serializator@Set(const array<int64>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen*8;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<int64>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<int32>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen*4;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<int32>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<int16>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen*2;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<int16>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<int8>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<int8>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<uint64>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen*8;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<uint64>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<uint32>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen*4;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<uint32>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<uint16>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen*2;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<uint16>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<uint8>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<uint8>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<bool>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<bool>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<string>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen;
			for(uint i=0,j=valuesLen;i<j;i++)
			len+=values[i].length();
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(values[i]);
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<string>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const array<float>&values)
		{
			uint valuesLen=values.length();
			uint len=4+valuesLen*4;
			if(CurPos+len>BufSize)
			GrowBuffer(CurPos+len-BufSize);
			Set(valuesLen);
			for(uint i=0,j=valuesLen;i<j;i++)
			Set(FloatToInt(values[i]));
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const array<float>&values)
		{
			return Set(values);
		}
		
		Serializator@Set(const Critter&cr)
		{
			if(CurPos+4>BufSize)
			GrowBuffer();
			uint value=cr.Id;
			Array[CurPos++]=(value>>24)&0xFF;
			Array[CurPos++]=(value>>16)&0xFF;
			Array[CurPos++]=(value>>8)&0xFF;
			Array[CurPos++]=value&0xFF;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const Critter&cr)
		{
			return Set(cr);
		}
		
		Serializator@Set(const Item&item)
		{
			if(CurPos+4>BufSize)
			GrowBuffer();
			uint value=item.Id;
			Array[CurPos++]=(value>>24)&0xFF;
			Array[CurPos++]=(value>>16)&0xFF;
			Array[CurPos++]=(value>>8)&0xFF;
			Array[CurPos++]=value&0xFF;
			if(CurPos>DataSize)
			DataSize=CurPos;
			return this;
		}
		
		Serializator@opShl(const Item&item)
		{
			return Set(item);
		}
		
		Serializator@Get(int64&value)
		{
			value=0;
			if(CurPos+8>DataSize)
			return this;
			value|=Array[CurPos++]<<56;
			value|=Array[CurPos++]<<48;
			value|=Array[CurPos++]<<40;
			value|=Array[CurPos++]<<32;
			value|=Array[CurPos++]<<24;
			value|=Array[CurPos++]<<16;
			value|=Array[CurPos++]<<8;
			value|=Array[CurPos++];
			return this;
		}
		
		Serializator@opShr(int64&value)
		{
			return Get(value);
		}
		
		Serializator@Get(int32&value)
		{
			value=0;
			if(CurPos+4>DataSize)
			return this;
			value|=Array[CurPos++]<<24;
			value|=Array[CurPos++]<<16;
			value|=Array[CurPos++]<<8;
			value|=Array[CurPos++];
			return this;
		}
		
		Serializator@opShr(int32&value)
		{
			return Get(value);
		}
		
		Serializator@Get(int16&value)
		{
			value=0;
			if(CurPos+2>DataSize)
			return this;
			value|=Array[CurPos++]<<8;
			value|=Array[CurPos++];
			return this;
		}
		
		Serializator@opShr(int16&value)
		{
			return Get(value);
		}
		
		Serializator@Get(int8&value)
		{
			value=0;
			if(CurPos+1>DataSize)
			return this;
			value=Array[CurPos++];
			return this;
		}
		
		Serializator@opShr(int8&value)
		{
			return Get(value);
		}
		
		Serializator@Get(uint64&value)
		{
			value=0;
			if(CurPos+8>DataSize)
			return this;
			value|=Array[CurPos++]<<56;
			value|=Array[CurPos++]<<48;
			value|=Array[CurPos++]<<40;
			value|=Array[CurPos++]<<32;
			value|=Array[CurPos++]<<24;
			value|=Array[CurPos++]<<16;
			value|=Array[CurPos++]<<8;
			value|=Array[CurPos++];
			return this;
		}
		
		Serializator@opShr(uint64&value)
		{
			return Get(value);
		}
		
		Serializator@Get(uint32&value)
		{
			value=0;
			if(CurPos+4>DataSize)
			return this;
			value|=Array[CurPos++]<<24;
			value|=Array[CurPos++]<<16;
			value|=Array[CurPos++]<<8;
			value|=Array[CurPos++];
			return this;
		}
		
		Serializator@opShr(uint32&value)
		{
			return Get(value);
		}
		
		Serializator@Get(uint16&value)
		{
			value=0;
			if(CurPos+2>DataSize)
			return this;
			value|=Array[CurPos++]<<8;
			value|=Array[CurPos++];
			return this;
		}
		
		Serializator@opShr(uint16&value)
		{
			return Get(value);
		}
		
		Serializator@Get(uint8&value)
		{
			value=0;
			if(CurPos+1>DataSize)
			return this;
			value=Array[CurPos++];
			return this;
		}
		
		Serializator@opShr(uint8&value)
		{
			return Get(value);
		}
		
		Serializator@Get(bool&value)
		{
			value=false;
			if(CurPos+1>DataSize)
			return this;
			value=Array[CurPos++]==1?true:false;
			return this;
		}
		
		Serializator@opShr(bool&value)
		{
			return Get(value);
		}
		
		Serializator@Get(string&str)
		{
			uint len=0;
			for(uint i=CurPos;;i++)
			{
				if(i==DataSize)
				{
					str="";
					return this;
				}
				if(Array[i]==0)
				{
					len=i-CurPos;
					break;
				}
			}
			str.rawResize(len);
			for(uint i=0;i<len;i++)
			str.rawSet(i,Array[CurPos++]);
			CurPos++;
			return this;
		}
		
		Serializator@opShr(string&str)
		{
			return Get(str);
		}
		
		Serializator@Get(float&value)
		{
			int dummy=0;
			Get(dummy);
			value=IntToFloat(dummy);
			return this;
		}
		
		Serializator@opShr(float&value)
		{
			return Get(value);
		}
		
		Serializator@Get(array<int64>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<int64>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<int32>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<int32>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<float>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			{
				int dummy=0;
				Get(dummy);
				values[i]=IntToFloat(dummy);
			}
			return this;
		}
		
		Serializator@opShr(array<float>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<int16>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<int16>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<int8>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<int8>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<uint64>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<uint64>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<uint32>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<uint32>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<uint16>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<uint16>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<uint8>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<uint8>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<bool>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<bool>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(array<string>&values)
		{
			uint valuesLen=0;
			Get(valuesLen);
			values.resize(valuesLen);
			for(uint i=0;i<valuesLen;i++)
			Get(values[i]);
			return this;
		}
		
		Serializator@opShr(array<string>&values)
		{
			return Get(values);
		}
		
		Serializator@Get(Critter@&cr)
		{
			@cr=null;
			if(CurPos+4>DataSize)
			return this;
			uint id=0;
			id|=Array[CurPos++]<<24;
			id|=Array[CurPos++]<<16;
			id|=Array[CurPos++]<<8;
			id|=Array[CurPos++];
			@cr=::GetCritter(id);
			return this;
		}
		
		Serializator@opShr(Critter@&cr)
		{
			return Get(cr);
		}
		
		Serializator@Get(Item@&item)
		{
			@item=null;
			if(CurPos+4>DataSize)
			return this;
			uint id=0;
			id|=Array[CurPos++]<<24;
			id|=Array[CurPos++]<<16;
			id|=Array[CurPos++]<<8;
			id|=Array[CurPos++];
			@item=::GetItem(id);
			return this;
		}
		
		Serializator@opShr(Item@&item)
		{
			return Get(item);
		}
		
		array<uint8>Array;
		uint CurPos;
		uint BufSize;
		uint DataSize;
	};       
	
	class FactionNews
	{ 
		
		array<uint>news;
		Serializator serialiser;
		
		string factionName;
		
		FactionNews(const string&factionName)
		{
			WLog("factions","Instantiating FactionNews object for "+factionName);
			this.factionName=factionName;
			if(IsAnyData("FactionNews: "+factionName))
			{
				if(!GetAnyData("FactionNews: "+factionName,news))
				{
					Log("ERR: Couldn't read faction news from array: FactionNews: "+factionName);
					return;
				}
			}
			else
			{
				
				UpdateData();
			}
		}   
		
		uint GetCount()
		{
			return news.length()/5;
		}   
		
		void AddNews(uint master,uint slave,uint type)
		{
			news.insertLast(master);
			news.insertLast(slave);
			news.insertLast(type);
			news.insertLast(uint(__Year));
			news.insertLast(uint(
			(__Month<<24)|(__Day<<16)|(__Hour<<8)|__Minute));
		}   
		
		bool GetNews(uint index,uint&out master,uint&out slave,uint&out type,
		uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)
		
		{
			if(index*5+4<news.length())
			{
				master=news[index*5];
				slave=news[index*5+1];
				type=news[index*5+2];
				year=uint16(news[index*5+3]);
				uint dt=news[index*5+4];
				month=uint8(dt>>24);
				day=uint8(dt>>16);
				hour=uint8(dt>>8);
				minute=uint8(dt);
				return true;
			}
			else
			return false;
		}  
		
		bool UpdateData()
		{
			return SetAnyData("FactionNews: "+factionName,news);
		}
	};                                                                                                                                                                                                                                                                                                                 
	
	int GetRootMapData(Map&map,uint index)
	{
		return map.GetLocation().GetMapByIndex(0).GetData(index);
	}  
	
	void SetRootMapData(Map&map,uint index,int val)
	{
		map.GetLocation().GetMapByIndex(0).SetData(index,val);
	}   
	
	int GetRootMapData(Location&loc,uint index)
	{
		return loc.GetMapByIndex(0).GetData(index);
	}  
	
	void SetRootMapData(Location&loc,uint index,int val)
	{
		loc.GetMapByIndex(0).SetData(index,val);
	}
	
	import string GetCritterLexems(Critter&critter)from"lexems";
	import string GetItemLexems(Item&item)from"lexems";
	
	import bool IsLexem(Critter&critter,string&lex)from"lexems";
	import bool IsLexem(Item&it,string&lex)from"lexems";
	import bool IsLexem(string&lexems,string&lex)from"lexems";
	
	import string GetLexem(Critter&critter,string&lex)from"lexems";
	import string GetLexem(Item&item,string&lex)from"lexems";
	import string GetLexem(string&lexems,string&lex)from"lexems"; 
	
	import void SetLexem(Critter&critter,string&lex,string&value)from"lexems";
	import void SetLexem(Item&item,string&lex,string&value)from"lexems";
	import string SetLexem(string&lexems,string&lex,string&value)from"lexems";
	
	import void UnsetLexem(Critter&critter,string&lex)from"lexems";
	import void UnsetLexem(Item&item,string&lex)from"lexems";
	import string UnsetLexem(string&lexems,string&lex)from"lexems";       
	
	import void ApplyReputationModifiers(Critter&cr,uint index,int num,int den)from"reputations_modifiers";
	import void ApplyReputationModifiers(Critter&cr,uint index)from"reputations_modifiers";
	import int GetFollowers(Critter&player,bool all,array<Critter@>&followers)from"follower_common";     
	
	class FactionData
	{
		
		string factionName;
		dictionary@_assignednames;
		
		Serializator serialiser; 
		
		array<uint>players;
		
		array<int>factions; 
		
		uint faction;
		
		uint stringId;
		
		uint freq;  
		
		uint locationId;
		
		uint locationPid;
		
		uint leaderId;
		
		uint claimId; 
		
		uint leaderTime; 
		
		uint claimTime;
		
		uint newsId;
		
		FactionNews news;
		
		uint score;
		
		uint locX;
		
		uint locY;
		
		bool playerDriven;
		
		uint lastUsed;
		
		uint update_seq;   
		
		FactionData(uint nfaction,uint stringId,bool playerDriven)
		{
			@_assignednames=AssignedNames;
			GetFactionName(stringId,factionName);
			WLog("factions","Creating new FactionData object for faction "+nfaction+": "+factionName+"("+stringId+")");
			
			this.faction=nfaction;
			this.stringId=stringId;
			this.score=0;
			this.freq=Random(1,65535);
			initRecognition(); 
			
			this.locationId=0;
			this.locationPid=0;
			this.locX=this.locY=0;
			
			this.leaderId=0;
			this.claimId=0;
			this.leaderTime=0;
			this.claimTime=0;
			
			this.playerDriven=playerDriven;
			this.lastUsed=(__FullSecond);
			this.update_seq=0;
			
			this.news=FactionNews(factionName);
			
			UpdateData();
		}  
		
		FactionData(const string&name)
		{
			@_assignednames=AssignedNames;
			WLog("factions","Creating new FactionData object for existing faction",0);
			
			if(!serialiser.Load("Faction: "+name))
			{
				WLog("factions","ERR: Couldn't load array for faction: "+name,20);
				return;
			} 
			
			serialiser.Get(faction).Get(stringId).Get(score).Get(freq)
			.Get(locationId).Get(locationPid).Get(locX).Get(locY)
			.Get(leaderId).Get(claimId).Get(leaderTime).Get(claimTime)
			.Get(playerDriven).Get(lastUsed).Get(update_seq);
			GetFactionName(stringId,factionName); 
			
			if(IsAnyData("FactionPlayers: "+name))
			GetAnyData("FactionPlayers: "+name,players);
			else
			SetAnyData("FactionPlayers: "+name,players);
			
			if(IsAnyData("FactionFactions: "+name))
			GetAnyData("FactionFactions: "+name,factions);
			else
			SetAnyData("FactionFactions: "+name,factions); 
			
			this.news=FactionNews(factionName); 
			
			if(this.locationId!=0&&!(@GetLocation(this.locationId)!=null))
			{
				uint pid=this.locationPid;
				WLog("factions","Recreating location, pid: "+pid,0);
				this.locationId=CreateLocation(pid,this.locX,this.locY,null);
				Location@loc=GetLocation(this.locationId);
				if(this.locationId!=0)
				{
					SetLocation(this.locationId,pid,this.locX,this.locY);
					array<Map@>maps;
					loc.GetMaps(maps);
					for(uint i=0;i<maps.length();i++)
					maps[i].SetData((0),this.faction);
					WLog("factions","Recreated location for faction: "+this.faction,0);
				}
				else
				WLog("factions","ERR: Couldn't recreate faction location",20);
			}
			initRecognition();
			WLog("factions","Read AnyData for faction "+factionName,0);
			AssignFactionNameByStringId(faction,stringId);
		}   
		
		void initRecognition()
		{
			if(AddTextListener((10),"order recognition",this.freq,"factions_recognition@listen_Recognition"))
			WLog("factions","Radio listener at: "+this.freq);
			else
			WLog("factions","Couldn't create recognition listener",20);
		}       
		
		bool IsPlayerDriven()
		{
			return playerDriven;
		}  
		
		void SetRadioChannel(uint16 newFreq)
		{
			
			if(!AddTextListener((10),"order recognition",newFreq,"factions_recognition@listen_Recognition"))
			{
				Log("Err: Couldn't create recognition listener");
				return;
			}
			
			EraseTextListener((10),"order recognition",this.freq);
			this.freq=newFreq;
		}   
		
		void SetLocation(uint locId,uint pid,uint x,uint y)
		{
			this.locationId=locId;
			this.locationPid=pid;
			
			this.locX=x;
			this.locY=y;   
			
		}   
		
		bool GetFactionLocation(uint&out locId,uint&out pid,uint&out x,uint&out y)
		{
			if(this.locationId==0)
			return false;
			
			locId=this.locationId;
			pid=this.locationPid;
			x=this.locX;
			y=this.locY;
			
			return true;
		}                
		
		void SetLeaderId(uint id)
		{
			this.leaderId=id;
		}   
		
		void SetClaimId(uint id)
		{
			this.claimId=id;
		}   
		
		void SetLeaderTime(uint time)
		{
			this.leaderTime=time;
		}   
		
		void SetClaimTime(uint time)
		{
			this.claimTime=time;
		}   
		
		void SetScore(uint score)
		{
			this.score=score;
		}   
		
		uint GetRecordsCount()
		{
			return players.length();
		}  
		
		uint GetMembersCount()
		{
			uint ret=0;
			for(uint i=0,iend=players.length();i<iend;i++)
			{
				if(players[i]==0)
				continue;
				if(GetPlayerFaction(players[i])==this.faction)
				ret++;
			}
			return ret;
		}  
		
		uint GetMembers(array<uint>&members)
		{
			uint count=0;
			uint start=members.length();
			members.grow(players.length());
			for(uint i=0,iend=players.length();i<iend;i++)
			{
				if(players[i]==0)
				continue;
				if(GetPlayerFaction(players[i])==this.faction)
				members[start+count++]=players[i];
			}
			members.resize(start+count);
			return count;
			
		}  
		
		uint GetRecords(array<uint>&records)
		{
			uint count=0;
			uint start=records.length();
			records.grow(players.length());
			for(uint i=0,iend=players.length();i<iend;i++)
			{
				if(players[i]!=0)
				records[start+count++]=players[i];
			}
			records.resize(start+count);
			return count;
		}  
		
		uint GetFactions(array<int>&factions)
		{
			uint count=0;
			for(uint i=0,iend=this.factions.length();i<iend;i++)
			{
				if(this.factions[i]==0)
				continue;
				factions.insertLast(this.factions[i]);
				count++;
			}
			return count;
		}  
		
		uint GetLastUsed()
		{
			return lastUsed;
		}        
		
		bool Exists(uint key)
		{
			for(uint i=0,iend=players.length();i<iend;i++)
			{
				if(players[i]==0)
				continue;
				if(players[i]==key)
				return true;
			}
			return false;
		}  
		
		bool FactionExists(int faction_id)
		{
			for(uint i=0,iend=factions.length();i<iend;i++)
			{
				if(factions[i]==0)
				continue;
				if(factions[i]==faction_id)
				return true;
			}
			return false;
		}  
		
		int UpdateData()
		{
			
			serialiser.Clear();
			serialiser.Set(faction).Set(stringId).Set(score).Set(freq)
			.Set(locationId).Set(locationPid).Set(locX).Set(locY)
			.Set(leaderId).Set(claimId).Set(leaderTime).Set(claimTime)
			.Set(playerDriven).Set(lastUsed).Set(update_seq);
			
			if(!serialiser.Save("Faction: "+factionName))
			return(3);
			
			if(!SetAnyData("FactionPlayers: "+factionName,players))
			return(3);
			
			if(!SetAnyData("FactionFactions: "+factionName,factions))
			return(3); 
			
			return(0);
		}  
		
		int RemoveData()
		{
			EraseAnyData("Faction: "+factionName);
			EraseAnyData("FactionPlayers: "+factionName);
			EraseAnyData("FactionFactions: "+factionName);
			UnassignFactionName(stringId,factionName);
			if(IsPlayerDriven()&&locationId!=0)
			DeleteLocation(locationId);
			return(0);
		}  
		
		void UpdateNewsData()
		{
			news.UpdateData();
		}  
		
		void UpdateLastUsed()
		{
			lastUsed=(__FullSecond);
		}  
		
		uint LogData(bool fullLog,array<string>&strings)
		{
			strings.insertLast("\nFaction: "+faction);
			string name;
			GetFactionName(stringId,name);
			strings.insertLast("Name: "+name);
			if(this.locationId!=0)
			{
				Location@loc=GetLocation(this.locationId);
				Map@map=loc.GetMapByIndex(0);
				if(!(@map!=null))
				{
					strings.insertLast("Location: "+this.locationId);
				}
				else
				{
					strings.insertLast("Location: "+this.locationId+"<"+map.Id+">");
				}
				strings.insertLast("Coords: "+this.locX+", "+this.locY);
			}
			strings.insertLast("Score: "+this.score);
			strings.insertLast("Freq: "+this.freq);
			if(IsPlayerDriven())
			{
				int ttl=__FactionGarbagerTime-(__FullSecond)+this.GetLastUsed();
				strings.insertLast("TTL: "+(((0)>(ttl))?(0):(ttl)));
			}
			if(fullLog)
			{
				for(uint i=0,iend=players.length();i<iend;i++)
				{
					if(players[i]==0)
					{
						strings.insertLast("Empty record");
						continue;
					}
					strings.insertLast("Name: "+GetSafePlayerName(players[i])+"<"+players[i]+">");   
					
					strings.insertLast("------");
				}
			}
			strings.insertLast("--------------");
			return strings.length();
		}             
		
		int GetPrevNextId(uint id,int dir,bool members,
		uint&out newId)
		{
			if(players.length()==0)
			{
				Log("Database empty");
				return(8);
			}
			if(members&&GetMembersCount()==0)
			{
				Log("Database doesn't contain any member records");
				return(8);
			}
			int start=0;
			int curr=start; 
			
			dir=(((dir)>(1))?(1):(((dir)<(-1))?(-1):(dir))); 
			
			while(true)
			{
				{;};
				curr+=(dir);
				
				if(curr<0)
				{
					curr=players.length()-1;
					{;};
				}
				else if(curr>int(players.length()-1))
				{
					curr=0;
					{;};
				}
				if(curr==start)
				break;
				if(!members)
				break;
				if(members&&GetPlayerFaction(players[curr])==this.faction)
				break;
				
				if(dir==0)
				dir=1;
			}
			
			newId=players[curr];
			return(0);
		}
		
		int ModifyRank(uint id,uint newRank)
		{
			if(Exists(id))
			{
				GameVar@var=GetUnicumVar((21),id,faction);
				var=newRank;
				return(0);
			}
			else
			return(2);
		}
		int ModifyStatus(uint id,uint newStatus)
		{
			if(Exists(id))
			{
				GameVar@var=GetUnicumVar((22),id,faction);
				var=newStatus;
				return(0);
			}
			else
			return(2);
		}
		int ModifyFaction(uint id,uint newFaction)
		{
			if(Exists(id))
			{
				GameVar@var=GetUnicumVar((23),id,faction);
				var=newFaction;
				return(0);
			}
			else
			return(2);
		}    
		
		int AddPlayer(uint id)
		{
			if(players.length()+1>(16000))
			
			return(7);
			if(Exists(id))
			return(1); 
			
			for(uint i=0,iend=players.length();i<iend;i++)
			{
				if(players[i]==0)
				{
					players[i]=id;
					return(0);
				}
			}
			
			players.insertLast(id);
			return(0);
		}     
		
		int RemovePlayer(uint id)
		{
			for(uint i=0,iend=players.length();i<iend;i++)
			{
				if(players[i]==id)
				{
					players[i]=0;
					return(0);
				}
			}
			return(2);
		}  
		
		int AddFaction(int faction_id)
		{
			if(factions.length()+1>(16000))
			
			return(7);
			if(FactionExists(faction_id))
			return(1); 
			
			for(uint i=0,iend=factions.length();i<iend;i++)
			{
				if(factions[i]==0)
				{
					factions[i]=faction_id;
					return(0);
				}
			}
			
			factions.insertLast(faction_id);
			return(0);
		}
		int RemoveFaction(int id)
		{
			for(uint i=0,iend=factions.length();i<iend;i++)
			{
				if(factions[i]==id)
				{
					factions[i]=0;
					return(0);
				}
			}
			return(2);
		}
	};                        
	
	int RegisterFaction(uint id,const string@name,bool playerDriven)
	{
		WLog("factions","Registering faction with desired id: "+id+", and name "+name);
		if((@GetFaction(name)!=null))
		{
			
			WLog("factions","Faction already registered");
			return(1);
		}
		uint stringId=0;
		int res=AssignFactionName(name,id,stringId);
		if(res==(1))
		{
			WLog("factions","Faction name: "+FactionNames[stringId]+" is already assigned",10);
			return res;
		}
		else if(res==(2))
		{
			WLog("factions","Faction name: "+name+" has got no associated msg string number",10);
			
			return res;
			
		}
		else if(res!=(0))
		{
			WLog("factions","ERR: Couldn't register faction with given name",20);
			return res;
		} 
		
		Faction@faction=Faction(id,name,"",0);
		FactionData data(id,stringId,playerDriven);
		@faction.data=data;
		AddFaction(faction); 
		
		Serializator@list=@Serializator();
		
		if(!list.Load("FactionsList"))
		{
			list.Set(name);
			list.Set(id);
			return list.Save("FactionsList")?(0):(4);
		}
		else
		{
			
			return RebuildList()?(0):(4);
		}
	}
	bool RebuildList()
	{
		Serializator@list=@Serializator();
		list.Load("FactionsList");
		list.Clear();
		string name;
		for(uint i=0,j=Factions.length();i<j;i++)
		{
			if((@Factions[i]!=null))
			{
				GetFactionName(Factions[i].StringId,name);
				list.Set(name).Set(Factions[i].Id);
			}
		}
		return list.Save("FactionsList");
	}    
	
	int RegisterFaction(const string@name,bool playerDriven,uint&out id)
	{
		
		uint i;
		for(i=playerDriven?(0):0;i<(4096);i++)
		{
			if(!(@GetFaction(i)!=null))
			break;
		}
		
		id=i;
		
		return RegisterFaction(i,name,playerDriven);
	}     
	
	FactionData@GetDatabase(uint faction_id)
	{
		IFaction@ifaction=GetFaction(faction_id);
		if(!(@ifaction!=null))
		{
			
			return null;
		}
		Faction@faction=cast<Faction@>(ifaction); 
		
		return faction.data;
	}                          
	
	int AddPlayer(uint faction,uint id)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		
		return data.AddPlayer(id);
	}        
	
	int AddPlayer(uint faction,uint id,uint playerFaction)
	{
		return AddPlayer(id,playerFaction,(0),(0));
	}         
	
	int AddPlayer(uint faction,uint id,uint playerFaction,uint rank)
	{
		return AddPlayer(id,playerFaction,rank,(0));
	}          
	
	int AddPlayer(uint faction,uint id,uint playerFaction,uint rank,uint status)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		int res=data.AddPlayer(id);
		if(res==(0))
		{
			data.ModifyFaction(id,playerFaction);
			data.ModifyRank(id,rank);
			data.ModifyStatus(id,status);
		}
		return res;
	}        
	
	int RemovePlayer(uint faction,uint id)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		return data.RemovePlayer(id);
	}            
	
	uint GetMembers(uint faction,array<uint>&ids)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		data.GetMembers(ids);
		{;};
		return ids.length();
	}   
	
	uint GetRecordsCount(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.GetRecordsCount();
	}   
	
	uint GetMembersCount(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.GetMembersCount();
	}     
	
	int GetNextId(uint faction,uint currId,bool members,uint&out nextId)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return currId;
		}
		return data.GetPrevNextId(currId,1,members,nextId);
	}      
	
	int GetPrevId(uint faction,uint currId,bool members,uint&out prevId)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return currId;
		}
		return data.GetPrevNextId(currId,-1,members,prevId);
	}      
	
	int GetFirstId(uint faction,bool members,uint&out id)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.GetPrevNextId(0,0,members,id);
	}      
	
	int GetFaction(uint faction,uint id)
	{
		GameVar@var=GetUnicumVar((23),id,faction);
		return var.GetValue();
	}      
	
	int GetStatus(uint faction,uint id)
	{
		GameVar@var=GetUnicumVar((22),id,faction);
		return var.GetValue();
	}        
	
	int GetRank(uint faction,uint id)
	{
		GameVar@var=GetUnicumVar((21),id,faction);
		return var.GetValue();
	}        
	
	bool IsMember(uint faction,Critter&cr)
	{
		return int(faction)==(cr.Param[(106)]);
	}
	bool IsMemberOffline(uint faction,uint id)
	{
		return faction==GetPlayerFaction(id);
	}        
	
	bool StoredInDB(uint faction,uint id)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return false;
		}
		return data.Exists(id);
	}   
	
	uint GetLeaderId(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.leaderId;
	}   
	
	void SetLeaderId(uint faction,uint id)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		data.SetLeaderId(id);
	}   
	
	uint GetClaimId(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.claimId;
	}   
	
	void SetClaimId(uint faction,uint id)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		data.SetClaimId(id);
	}   
	
	uint GetLeaderTime(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.leaderTime;
	}    
	
	void SetLeaderTime(uint faction,uint time)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		data.SetLeaderTime(time);
	}   
	
	uint GetClaimTime(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.claimTime;
	}    
	
	void SetClaimTime(uint faction,uint time)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		data.SetClaimTime(time);
	}   
	
	uint16 GetFactionRadioChannel(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.freq;
	}   
	
	void SetFactionRadioChannel(uint faction,uint16 channel)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		data.SetRadioChannel(channel);
	}       
	
	uint GetFactionLocationId(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.locationId;
	}   
	
	void SetFactionLocation(uint faction,uint locId,uint pid,uint x,uint y)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		data.SetLocation(locId,pid,x,y);
	}   
	
	bool GetFactionLocation(uint faction,uint&out locId,uint&out pid,uint&out x,uint&out y)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return false;
		}
		
		if(data.locationId==0)
		return false;
		
		locId=data.locationId;
		pid=data.locationPid;
		x=data.locX;
		y=data.locY;
		
		return true;
	}   
	
	void GetFactionLocationCoords(uint faction,uint&out x,uint&out y)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		x=data.locX;
		y=data.locY;
	}   
	
	uint GetFactionScore(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.score;
	}   
	
	void ModifyFactionScore(uint faction,int amount)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		data.SetScore(data.score+amount);
	}               
	
	int ModifyStatus(uint faction,uint id,uint newStatus)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		data.ModifyStatus(id,newStatus);
		return(0);
	}         
	
	int ModifyRank(uint faction,uint id,uint newRank)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		data.ModifyRank(id,newRank);
		return(0);
	}         
	
	int ModifyFaction(uint faction,uint id,uint newFaction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		data.ModifyFaction(id,newFaction);
		return(0);
	}               
	
	int InvitePlayer(uint faction,uint playerId)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Faction database couldn't be retrieved.");
			return(6);
		}
		
		if(!data.Exists(playerId))
		{
			
			return AddPlayer(faction,playerId,(0),(0),(4));
		}
		else
		{
			
			return data.ModifyStatus(playerId,(4));
		}
	}            
	
	int ConfirmInvitation(uint faction,uint playerId)
	{
		
		return AddMember(faction,playerId);
	}        
	
	int AddMember(uint faction,uint playerId,bool applyModifiers)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Faction database couldn't be retrieved.");
			return(6);
		}
		Critter@player=GetCritter(playerId);
		int res=data.AddPlayer(playerId); 
		
		if(res==(0)||res==(1))
		{
			GameVar@var=GetLocalVar((4101),playerId);
			if(!(@var!=null))
			{
				Log("ERR: Couldn't retrieve LVAR_factions_player_faction variable");
				
				data.ModifyFaction(playerId,(0));
				return(5);
			}
			
			var=faction;
			{;};
			data.ModifyFaction(playerId,faction);
			
			if((@player!=null))
			{
				SetGroupIndex(player,faction);
				if(faction>=0)
				{
					string factionname;
					GetFactionNameStr(faction,factionname);
					SetLexem(player,"$faction",factionname);
				}
			} 
			
			@var=GetLocalVar((4102),playerId);
			if(!(@var!=null))
			{
				Log("ERR: Couldn't retrieve LVAR_factions_player_faction variable");
				
				data.ModifyRank(playerId,(0));
				return(5);
			}
			
			var=(1);
			data.ModifyRank(playerId,(1));
			
			if((@player!=null))
			SetGroupRank(player,(1)); 
			
			data.ModifyStatus(playerId,(0));
			
			if(data.locationId!=0)
			{
				if(!(@player!=null))
				{
					Log("ERR: Adding new member when member is offline. Couldn't call SetKnownLoc");
				}
				else
				{
					player.SetKnownLoc(true,data.locationId);
					{;};
				}
			} 
			
			if(applyModifiers)
			ApplyReputationModifiers(player,faction); 
			
			array<Critter@>followers;
			uint n=GetFollowers(player,true,followers);
			for(uint i=0;i<n;i++)
			followers[i].FollowerVarBase[(929)]=faction;
			
			return(0);
		}
		else
		{
			if(res==(7))
			Log("ERR: Database full");
			else
			Log("ERR: An error occured "+FD_Result2String(res));
			return res;
		}
	}
	
	int AddMember(uint faction,uint playerId)
	{
		return AddMember(faction,playerId,true);
	}           
	
	int ChangeRank(uint faction,uint playerId,uint newRank)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		Critter@player=GetCritter(playerId);
		
		if(GetPlayerFaction(playerId)!=faction)
		{
			Log("ERR: Given player is not a member of the faction you want to change the rank within.");
			return(4);
		}
		
		int res=data.ModifyRank(playerId,newRank);
		
		if(res==(0))
		{
			GameVar@var=GetLocalVar((4101),playerId);
			if(!(@var!=null))
			{
				Log("ERR: Couldn't retrieve local variable LVAR_factions_player_faction");
				return(5);
			} 
			
			if(!(newRank<=5))
			{
				Log("ERR: Invalid rank ("+newRank+") for faction: "+faction);
				return(4);
			}
			@var=GetLocalVar((4102),playerId);
			if(!(@var!=null))
			{
				Log("ERR: Couldn't retrieve local variable LVAR_factions_player_faction");
				return(5);
			}
			if(var.GetValue()==(5)&&newRank!=(5))
			{
				{;};
				SetLeaderId(faction,0);
			}
			
			var=newRank;
			
			if((@player!=null))
			SetGroupRank(player,newRank); 
			
			if(newRank==(5))
			{
				SetLeaderId(faction,playerId);
				{;};
			}
			return(0);
		}
		else
		{
			Log("ERR: Error occured while modifying rank: "+FD_Result2String(res));
			return res;
		}
	}            
	
	int ExpelMember(uint faction,uint playerId,bool applyModifiers)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		Critter@player=GetCritter(playerId);
		
		if(GetPlayerFaction(playerId)!=faction)
		{
			Log("ERR: Given player is not a member of the faction from which you wan't him to be expelled.");
			return(4);
		}
		
		int res=data.ModifyFaction(playerId,(1));
		
		if(res==(0))
		{
			
			GameVar@var=GetLocalVar((4101),playerId);
			if(!(@var!=null))
			{
				Log("ERR: Couldn't retrieve local variable LVAR_factions_player_faction");
				
				data.ModifyFaction(playerId,(0));
				return(5);
			} 
			
			var=(1);
			
			if((@player!=null))
			{
				SetGroupIndex(player,(1));
				UnsetLexem(player,"$faction");
			}
			
			@var=GetLocalVar((4102),playerId);
			if(!(@var!=null))
			{
				Log("ERR: Couldn't retrieve LVAR_factions_player_faction variable");
				
				data.ModifyRank(playerId,(0));
				return(5);
			}
			
			if(var.GetValue()==(5))
			{
				{;};
				SetLeaderId(faction,0);
			}
			if(GetClaimId(faction)==playerId)
			{
				{;};
				SetClaimId(faction,0);
			}
			
			var=(1);
			
			if((@player!=null))
			SetGroupRank(player,(1));
			
			data.ModifyRank(playerId,(0)); 
			
			data.ModifyStatus(playerId,(0));
			
			if(applyModifiers)
			{
				
				if(faction<(0))
				{ 
					
					ApplyReputationModifiers(player,faction,-1,2);
					player.ReputationBase[faction]=-int((2000));
					
				}
			}
			return(0);
		}
		else
		{
			Log("ERR: "+FD_Result2String(res));
			return res;
		}
	}
	
	int ExpelMember(uint faction,uint playerId)
	{
		return ExpelMember(faction,playerId,true);
	}            
	
	void AddFactionNews(uint faction,uint master,uint slave,uint type)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		data.news.AddNews(master,slave,type);
		
	}   
	
	bool GetFactionNews(uint faction,uint index,
	uint&out master,uint&out slave,uint&out type,
	uint16&out year,uint8&out month,uint8&out day,uint8&out hour,uint8&out minute)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return false;
		}
		return data.news.GetNews(index,master,slave,type,year,month,day,hour,minute);
	}   
	
	uint GetFactionNewsCount(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return 0;
		}
		return data.news.GetCount();
	}        
	
	uint GetPlayerFaction(uint playerId)
	{
		Critter@player=GetCritter(playerId);
		if((@player!=null))
		return(player.Param[(106)]);
		
		GameVar@var=GetLocalVar((4101),playerId);
		if(!(@var!=null))
		{
			Log("Err: couldn't retrieve LVAR_factions_player_faction variable");
			return(0);
		}
		return var.GetValue();
	}    
	
	uint GetPlayerRank(uint playerId)
	{
		GameVar@var=GetLocalVar((4102),playerId);
		if(!(@var!=null))
		{
			Log("Err: couldn't retrieve LVAR_factions_player_rank variable");
			return(0);
		}
		return var.GetValue();
	}   
	
	int GetFactionNameMsg(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		return 1000000+data.stringId*2;
	}  
	
	int GetFactionAliasNameMsg(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return(6);
		}
		return 1000000+data.stringId*2+1;
	}    
	
	uint CheckFactionBaseCoords(uint x,uint y)
	{
		for(uint i=0;i<(4096);i++)
		{
			FactionData@data=GetDatabase(i);
			if(!(@data!=null))
			return 0;
			if(data.locationId==0)
			continue;
			
			if(GetDistantion(x,y,data.locX,data.locY)<=12)
			return i;
		}
		return 0;
	}   
	
	bool IsGang(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return false;
		}
		return data.playerDriven;
	}   
	
	bool IsBigFaction(uint faction)
	{
		return!IsGang(faction);
	}   
	
	bool IsTheSameFaction(uint player1Id,uint player2Id)
	{
		return GetPlayerFaction(player1Id)==GetPlayerFaction(player2Id);
	}   
	
	void _Resign(uint playerId)
	{
		uint faction=GetPlayerFaction(playerId);
		
		int res=ExpelMember(faction,playerId);
		if(res!=(0))
		{
			Log("ERR: "+FD_Result2String(res));
		}
		
		AddFactionNews(faction,playerId,0,(2));
	}    
	
	void UpdateLastUsed(uint faction)
	{
		FactionData@data=GetDatabase(faction);
		if(!(@data!=null))
		{
			Log("ERR: Couldn't retrieve faction database object");
			return;
		}
		data.UpdateLastUsed();
	}         
	
	uint GetFactionLog(uint faction,bool fullLog,array<string>&strings,uint begin,uint end)
	{
		FactionData@data;
		
		uint num=0;
		
		if(begin==0)
		begin=2;
		if(end==0)
		end=(4096);
		
		if(faction==0)
		{
			for(uint i=begin;i<end;i++)
			{
				@data=GetDatabase(i);
				if(!(@data!=null))
				continue;
				num+=data.LogData(fullLog,strings);
			}
			return num;
		}
		else
		{
			@data=GetDatabase(faction);
			if(!(@data!=null))
			return 0;
			return data.LogData(fullLog,strings);
		}
		
	}
	
	bool SaveFactionData(uint faction)
	{
		FactionData@data;
		@data=GetDatabase(faction);
		if(!(@data!=null))
		return false;
		data.UpdateData();
		if((@data.news!=null))
		data.news.UpdateData();
		return true;
	}
	
	bool FactionExists(uint faction)
	{
		FactionData@data;
		@data=GetDatabase(faction);
		if(!(@data!=null))
		return false;
		return true;
	}  
	
	void test(Critter&cr,int p0,int p1,int p2)
	{
		FactionData@data=GetDatabase((cr.Param[(106)]));
		cr.Say((11),"String: "+data.stringId);
	} 
	
	void fix(Critter&cr,int p0,int p1,int p2)
	{
		FactionData@data=GetDatabase(p0);
		data.stringId=p1;
		data.UpdateData();
	}             
	
	import void InitLogs()from"logging";
	import void FLog(uint logindex,string&text)from"logging";
	import void ILog(string&section,string&text)from"logging";
	import void GMLog(Critter&cr,string&text)from"logging";
	import void CloseLogs()from"logging";
	import uint AddLog(string&filename)from"logging";
	import uint AddLog(string&filename,uint index)from"logging";                               
	
	dictionary NameIndices;
	
	dictionary IdIndices; 
	
	array<IFaction@>Factions;
	
	int LastId; 
	
	bool GettingFactions=false; 
	
	class Faction:IFaction
	{
		int id;
		string name;
		string database;
		int tagcolor_r;
		int tagcolor_g;
		int tagcolor_b;
		int tagname_1;
		
		int tagcolor_r2;
		int tagcolor_g2;
		int tagcolor_b2;
		int tagname_2;
		
		int tagcolor_r3;
		int tagcolor_g3;
		int tagcolor_b3;
		int tagname_3;
		
		int tagcolor_r4;
		int tagcolor_g4;
		int tagcolor_b4;
		int tagname_4;
		
		int tagcolor_r5;
		int tagcolor_g5;
		int tagcolor_b5;
		int tagname_5; 
		
		int update_seq; 
		
		FactionData@data;
		
		Faction(int id,const string&name,const string&database_name,int update_seq)
		{
			this.id=id;
			this.name=name;
			this.database=database_name;
			this.update_seq=update_seq;
			@this.data=null;
		}
		int get_r(int index)
		{
			switch(index)
			{
				case 1:return this.tagcolor_r;
				case 2:return this.tagcolor_r2;
				case 3:return this.tagcolor_r3;
				case 4:return this.tagcolor_r4;
				case 5:return this.tagcolor_r5;
			}
			
			return this.tagcolor_r;
		}
		int get_g(int index)
		{
			switch(index)
			{
				case 1:return this.tagcolor_g;
				case 2:return this.tagcolor_g2;
				case 3:return this.tagcolor_g3;
				case 4:return this.tagcolor_g4;
				case 5:return this.tagcolor_g5;
			}
			
			return this.tagcolor_g;
		}
		int get_b(int index)
		{
			switch(index)
			{
				case 1:return this.tagcolor_b;
				case 2:return this.tagcolor_b2;
				case 3:return this.tagcolor_b3;
				case 4:return this.tagcolor_b4;
				case 5:return this.tagcolor_b5;
			}
			
			return this.tagcolor_b;
		}
		int get_tag(int index)
		{
			
			switch(index)
			{
				case 1:return this.tagname_1;
				case 2:return this.tagname_2;
				case 3:return this.tagname_3;
				case 4:return this.tagname_4;
				case 5:return this.tagname_5;
			}
			
			return this.tagname_1;
		}
		void settag(int index,int tag,int r,int g,int b)
		{
			switch(index)
			{
				case 1:
				this.tagname_1=tag;
				this.tagcolor_r=r;
				this.tagcolor_g=g;
				this.tagcolor_b=b;
				break;
				case 2:
				this.tagname_2=tag;
				this.tagcolor_r2=r;
				this.tagcolor_g2=g;
				this.tagcolor_b2=b;
				break;
				case 3:
				this.tagname_3=tag;
				this.tagcolor_r3=r;
				this.tagcolor_g3=g;
				this.tagcolor_b3=b;
				break;
				case 4:
				this.tagname_4=tag;
				this.tagcolor_r4=r;
				this.tagcolor_g4=g;
				this.tagcolor_b4=b;
				break;
				case 5:
				this.tagname_5=tag;
				this.tagcolor_r5=r;
				this.tagcolor_g5=g;
				this.tagcolor_b5=b;
				break;
				
			}
			
		}
		int get_Id()const{return this.id;}
		string get_Name()const{return this.name;}
		int get_StringId()const{return this.data.stringId;}
		string get_Database()const{return this.database;} 
		
		int get_UpdateSeq()const{return this.data.update_seq;}
		void set_UpdateSeq(int val){this.data.update_seq=val;}
		
		int GetRank(int cr_id)const
		{
			GameVar@var=GetUnicumVar((21),cr_id,this.id);
			if(!(@var!=null))
			return((0));
			else
			return var.GetValue();
		}
		void SetRank(int cr_id,int rank)
		{
			GameVar@var=GetUnicumVar((21),cr_id,this.id);
			var=rank;
		}
		int GetStatus(int cr_id)const
		{
			GameVar@var=GetUnicumVar((22),cr_id,this.id);
			if(!(@var!=null))
			return((0));
			else
			return var.GetValue();
		}
		void SetStatus(int cr_id,int status)
		{
			GameVar@var=GetUnicumVar((22),cr_id,this.id);
			var=status;
		}
		
		int GetMembers(array<uint>&members)const
		{
			return data.GetMembers(members);
		}
		int GetRecords(array<uint>&records)const
		{
			return data.GetRecords(records);
		}
		
		void AddKnownFaction(int faction_id)
		{
			data.AddFaction(faction_id);
		}
		int GetKnownFactions(array<int>&factions)const
		{
			return data.GetFactions(factions);
		}
		
		void Remove()
		{
			
			array<uint>members;
			data.GetMembers(members);
			for(uint i=0,j=members.length();i<j;i++)
			ExpelMember(id,members[i]);
			data.RemoveData();
		}
	};  
	
	IFaction@GetFaction(int id)
	{
		int idx=0;
		if(IdIndices.get(""+id,idx))
		return Factions[idx];
		else
		return null;
	}
	IFaction@GetFaction(const string&name)
	{
		int idx=0;
		if(NameIndices.get(name,idx))
		return Factions[idx];
		else
		return null;
	}
	IFaction@GetFactionByIdx(int idx)
	{
		if(idx<0||idx>int(Factions.length()-1))
		return(null);
		else
		return(Factions[idx]);
	}
	void AddFaction(IFaction&faction)
	{
		Factions.resize(Factions.length()+1);
		int idx=Factions.length()-1;
		@Factions[idx]=faction;
		NameIndices.set(faction.Name,idx);
		IdIndices.set(""+faction.Id,idx);
		FLog((13),"Added faction: "+faction.Name+"("+faction.Id+", "+faction.Database+", "+faction.UpdateSeq+")");
	}  
	
	bool RemoveFaction(uint faction_id)
	{
		IFaction@faction=GetFaction(faction_id);
		if(!(@faction!=null))
		return false;
		faction.Remove();
		int idx;
		NameIndices.get(faction.Name,idx);
		NameIndices.delete(faction.Name);
		IdIndices.delete(faction.Name);
		Factions.removeAt(idx);
		return RebuildList();
	}    
	
	uint GetFactionsCount()
	{
		return(Factions.length());
	}  
	
	void InitFactions()
	{
		InitFactionData();
	}
	void reloadnames(Critter&player,int p,int r,int)
	{
		InitFactionsNames();
		
		WLog("factions","### Initializing faction data objects ###");
	}  
	
	void InitFactionData()
	{
		InitFactionsNames();
		
		WLog("factions","### Initializing faction data objects ###");
		
		Serializator@list=@Serializator(); 
		
		Factions.resize(0);
		
		if(list.Load("FactionsList"))
		{
			
			string name;
			for(uint i=0;i<(4096);i++)
			{
				@list=list.Get(name);
				int id=-1;
				list.Get(id);
				
				WLog("factions","DEBUG: faction "+i+": '"+name+"'");
				if(name==""||id==-1)
				continue;
				else
				{
					if(IsAnyData("Faction: "+name))
					{
						WLog("factions","Faction: "+name);
						Faction@faction=Faction(id,name,"",0);
						@faction.data=FactionData(name);
						AddFaction(faction);         
						
					}
					else
					{
						WLog("factions","ERR: Couldn't read faction "+id+": "+name,20);
					}
				}
			}
		} 
		
		RegisterFaction(0,"Unknown",false);
		RegisterFaction(1,"None",false);
		
	}   
	
	void UpdateFactionsInfo(Critter&player)
	{
		
		if(uint(player.Param[(146)])<(__FullSecond))
		{
			
			for(uint i=2,j=Factions.length();i<j;i++)
			{
				if((@Factions[i]!=null))
				{    
					
					IFaction@faction=Factions[i];
					
					UpdateBasesVisibility(faction,player);
					
				}
			}
			player.ParamBase[(146)]=(__FullSecond)+((30)*__TimeMultiplier);
		}
	}
	
	void UpdateBasesVisibility(IFaction@faction,Critter&player)
	{
		if(!(@faction!=null))
		return;
		
		GameVar@var=GetLocalVar((4101),player.Id);
		if(player.Param[(106)]!=var.GetValue())
		FLog((13),"Membership not in sync: "+player.Param[(106)]+" vs "+var.GetValue()+", for: "+player.Id);
		if(faction.Id==0)
		FLog((13),"Faction with id 0: "+faction.Name);
		array<IFactionBase@>bases;
		uint num=GetFactionBases(faction.Id,bases);
		for(uint b=0;b<num;b++)
		{
			IFactionBase@base=bases[b];
			
			UpdateOneBaseVisibility(faction,player,base);
		}
	}
	
	void UpdateOneBaseVisibility(IFaction@faction,Critter&player,IFactionBase@base)
	{
		if((@base!=null)&&(@faction!=null))
		{
			
			if(player.Param[(106)]==faction.Id)
			{
				
				int rank=faction.GetRank(player.Id);
				if(base.IsRankAllowed(rank))
				base.Show(player);
				else
				base.Hide(player);
			}
			else
			{
				
				int status=faction.GetStatus(player.Id);
				if(base.IsStatusAllowed(status))
				base.Show(player);
				else
				base.Hide(player);
			}
		}
	}   
	
	void UpdateGroupVars(Critter&player)
	{
		if(!(@player!=null))
		return;
		
		GameVar@var=GetLocalVar((4101),player.Id);
		if(GetGroupIndex(player)!=uint(var.GetValue()))
		SetGroupIndex(player,uint(var.GetValue()));
		@var=GetLocalVar((4102),player.Id);
		if(GetGroupRank(player)!=uint(var.GetValue()))
		SetGroupRank(player,uint(var.GetValue()));
	}         
	
	bool GetFactionNameStr(uint faction_id,string&out name)
	{
		IFaction@faction=GetFaction(faction_id);
		if(!(@faction!=null))
		return false;
		name=faction.Name;
		return true;
	}
