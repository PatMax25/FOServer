//
// FOnline: 2238
// Rotators
//
// mine.fos
//

#include "_ai.fos"
#include "_macros.fos"
#include "_npc_pids.fos"
#include "economy_h.fos"
#include "mapdata_h.fos"
#include "mine_h.fos"
#include "npc_roles_h.fos"
#include "production_h.fos"
#include "utils_h.fos"


import void SetAmountOfResources(array<Item@>&, int value) from "production";
uint Addpropermoney(Critter@ npc)
{
	switch(npc.Param[ST_DESCRIPTION2])
	{
	case 0: return PID_BOTTLE_CAPS;
	case 1: return PID_ENCLAVE_MONEY; 
	case 2: return PID_BOS_MONEY;
	case 3: return PID_NCR_MONEY; 
	case 4: return PID_VC_MONEY; 
	case 5: return PID_MA_MONEY;
	}
	return PID_BOTTLE_CAPS;

}

uint r_CheckCanBuy(Critter& player, Critter@ npc)
{
/*
    uint lastTime = uint(GetLvar(player, LVAR_mine_bought_time));

    if(GetLvar(player, LVAR_mine_id) == 0 || (ELAPSED_TIME > (lastTime + MINE_TIME)))
        return FORCE_DIALOG_MINE_CAN_BUY;

    return FORCE_DIALOG_MINE_ALREADY_HAS_MINE;
	*/
	return FORCE_DIALOG_MINE_CAN_BUY;
}

bool d_CanAfford(Critter& player, Critter@ npc)
{
    return(player.CountItem(Addpropermoney(npc)) >= MINE_COST);
}
void createmine(Critter& cr, int, int, int)
{
    cr.AddItem(Addpropermoney(cr), MINE_COST);
    r_PurchaseMine(cr, null);
}

void r_PurchaseMine(Critter& player, Critter@ npc)
{
    // Check existing mine
    uint oldMineId = GetLvar(player, LVAR_mine_id);
    if(oldMineId > 0)
    {
        Location@ oldMine = GetLocation(oldMineId);
        if(valid(oldMine))
        {
            DeleteLocation(oldMine.Id);
        }
    }

    Critter@[] players = { player };
    uint x, y = 0;

    if(player.GetMap().GetLocation().GetProtoId() == LOCATION_MiningSiteKlamath)
    {
        x = Random(130, 250);
        y = Random(100, 250);
    }
    else
    {
        x = Random(500, 695);
        y = Random(500, 672);
    }

    uint      locId = CreateLocation(LOCATION_MiningSitePlayer, x, y, players);
    Location@ loc = GetLocation(locId);
    loc.Color = 0xFFC72E00;
    loc.Update();

    if(!valid(loc))
    {
        Log("ERR: Can't find mining location.");
        return;
    }
    Map@ map = loc.GetMapByIndex(1);
    if(!valid(map))
    {
        Log("ERR: Can't find mining map");
        return;
    }

    SetRootMapData(loc, MAP_DATA_OWNER, uint(player.Id));

    // Spawn nasty creatures
    array<Item@> spots;
    uint         num = map.GetItems(PID_SPOT_GENERIC, spots);



    BanksTransferFromCritter(player, MINE_COST, TRANSACTION_MINE, false);
    SetLvar(player, LVAR_mine_id, loc.Id);
    SetLvar(player, LVAR_mine_bought_time, int(ELAPSED_TIME));
}
