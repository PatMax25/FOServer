

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                             

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";                                                                                                                                                         

int GetRootMapData(Map&map,uint index)
{
	return map.GetLocation().GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Map&map,uint index,int val)
{
	map.GetLocation().GetMapByIndex(0).SetData(index,val);
}   

int GetRootMapData(Location&loc,uint index)
{
	return loc.GetMapByIndex(0).GetData(index);
}  

void SetRootMapData(Location&loc,uint index,int val)
{
	loc.GetMapByIndex(0).SetData(index,val);
}                                                     

shared enum RecyclerType
{
	ENCOUNTER_RECYCLER,
	TENT_RECYCLER
};                                        

array<uint>Recycler=
{
	0,
	0
};

array<array<uint>>RecyclerTargets=
{
	{},
	{}
};    

void _InitEncounterRecycler(Item&item,bool firstTime)
{
	((item.Flags)=(item.Flags)|((0x00000200)));
	
	item.Val0=ENCOUNTER_RECYCLER;
	if(item.Val1==0)
	{
		item.Val1=(((10)*__TimeMultiplier*60));
	}
	
	Recycler[ENCOUNTER_RECYCLER]=item.Id;
	
	array<uint>values={item.Id};
	CreateTimeEvent(((__FullSecond)+(item.Val1)),"e_Recycle",values,false);
}

void RecycleEncounter(Location@loc)
{
	if(!(@loc!=null))
	{
		return;
	}
	
	array<int>itemTypes=
	{
		(1),
		(2),
		(3),
		(4),
		(7),
		(20)
	};
	RecycleLocation(loc,ENCOUNTER_RECYCLER,itemTypes,(0x1)|(0x4));
	PurgeRecycler(ENCOUNTER_RECYCLER,500,25);
}   

void _InitTentRecycler(Item&item,bool firstTime)
{
	((item.Flags)=(item.Flags)|((0x00000200)));
	
	item.Val0=TENT_RECYCLER;
	if(item.Val1==0)
	{
		item.Val1=(((10)*__TimeMultiplier*60));
	}
	
	Recycler[TENT_RECYCLER]=item.Id;
	
	array<uint>values={item.Id};
	CreateTimeEvent(((__FullSecond)+(item.Val1)),"e_Recycle",values,false);
}

void RecycleTent(Location@loc)
{
	if(!(@loc!=null))
	{
		return;
	}
	array<int>itemTypes=
	{
		(1),
		(2),
		(3),
		(4),
		(7),
		(20),
		(5)
	};
	RecycleLocation(loc,TENT_RECYCLER,itemTypes,(0x1)|(0x2)|(0x4));
	PurgeRecycler(TENT_RECYCLER,1000,50);
}      

uint e_Recycle(array<uint>@data)
{
	Item@recycler=GetItem(data[0]);
	if(!(@recycler!=null))
	{
		return 0;
	}
	
	array<Item@>recycledItems;
	uint recycledItemsNum=recycler.GetItems(uint(-1),recycledItems);
	
	uint targetsNum=RecyclerTargets[recycler.Val0].length();
	
	if(recycledItemsNum>0&&targetsNum>0)
	{ 
		
		Item@recycledItem=recycledItems[Random(0,recycledItemsNum-1)];
		if(recycledItem.Val9==0&&recycledItem.Val8!=(1337)&&((((recycledItem.Flags)&((0x08000000)))!=0)))
		{
			uint recycledItemCount=recycledItem.GetCount();
			recycledItemCount=(recycledItemCount>50)?Random(1,50):Random(1,recycledItemCount);  
			
			uint offset=Random(0,targetsNum-1);
			for(uint i=offset,j=offset+targetsNum;i<j;i++)
			{
				Item@target=GetItem(RecyclerTargets[recycler.Val0][i%targetsNum]);
				if((@target!=null)&&target.GetType()==(8)&&(not((target.LockerCondition&(0x01))!=0)))
				{
					Item@targetItemSameProto=target.GetItem(recycledItem.Proto.ProtoId,0);
					if((@targetItemSameProto!=null)&&targetItemSameProto.GetCount()>300)
					{
						continue;
					}
					array<Item@>targetItems;
					if(target.GetItems(uint(-1),targetItems)<3)
					{
						WLog("recycler","Moved item "+recycledItem.Id+" [PID: "+recycledItem.Proto.ProtoId+"] (x"+recycledItemCount+") from encounter recycler to container "+target.Id,0);
						MoveItem(recycledItem,recycledItemCount,target,0);
						Map@map=GetMap(recycler.MapId);
						if((@map!=null))
						{
							map.SetText(recycler.HexX,recycler.HexY,0,"sent "+recycledItemCount+" item"+(recycledItemCount!=1?"s":"")+" to target "+target.Id);
						}
						break;
					}
				}
			}
		}
		else
		{
			DeleteItem(recycledItem);
			return((10)*__TimeMultiplier);
		}
	}
	return recycler.Val1;
}      

void ConnectRecycler(Item@item,uint recyclerIndex)
{
	if(!(@item!=null)||recyclerIndex>=RecyclerTargets.length())
	{
		return;
	}
	RecyclerTargets[recyclerIndex].insertLast(item.Id);
}    

void DisconnectRecycler(Item@item,uint recyclerIndex)
{
	if(!(@item!=null)||recyclerIndex>=RecyclerTargets.length())
	{
		return;
	}
	for(uint i=0,j=RecyclerTargets[recyclerIndex].length();i<j;i++)
	{
		if(item.Id==RecyclerTargets[recyclerIndex][i])
		{
			RecyclerTargets[recyclerIndex].removeAt(i);
			return;
		}
	}
}    

void PurgeRecycler(uint recyclerType,uint maxLevel,uint minLevel)
{
	Item@recycler=GetRecycler(recyclerType);
	if(!(@recycler!=null)||(minLevel>maxLevel))
	{
		return;
	}
	
	array<Item@>recyclerItems;
	uint recyclerItemsNum=recycler.GetItems(uint(-1),recyclerItems);
	if(recyclerItemsNum>maxLevel)
	{
		recyclerItems.resize(recyclerItemsNum-minLevel);
		DeleteItems(recyclerItems);
	}
}  

void RecycleMap(Map@map,uint recyclerType,array<int>&itemTypes,int recycle)
{
	
	Item@recycler=GetRecycler(recyclerType);
	if(!(@recycler!=null)||!(@map!=null)||(map.GetData((9))>0))
	{
		return;
	}
	
	array<Item@>items;
	
	if((((recycle)&((0x1)))!=0))
	{
		for(uint i=0,j=itemTypes.length();i<j;i++)
		{
			map.GetItemsByType(itemTypes[i],items);
		}
	}            
	
	if((((recycle)&((0x4)))!=0))
	{
		array<Critter@>critters;
		map.GetCritters(0,(0x04),critters);
		for(uint i=0,j=critters.length();i<j;i++)
		{
			if((critters[i].IsPlayer()&&critters[i].GetAccess()==(0))||(critters[i].IsNpc()&&critters[i].SpawnedBy==0))
			{
				if((not(critters[i].Param[(511)]>0)&&not(critters[i].Param[(523)]>0)&&not(critters[i].Param[(532)]>0)))
				{
					for(uint ii=0,jj=itemTypes.length();ii<jj;ii++)
					{
						critters[i].GetItemsByType(itemTypes[ii],items);
					}
				}
			}
		}
	}
	
	uint itemsNum=items.length();
	
	if(itemsNum>0)
	{
		MoveItems(items,recycler,0);
		WLog("recycler","Recycler "+recyclerType+" ["+recycler.Id+"] "+"received "+itemsNum+" item"+(itemsNum>1?"s ":" ")+"from map "+map.Id,0);
	}
} 

void RecycleLocation(Location@loc,uint recyclerType,array<int>&itemTypes,int recycle)
{
	if(!(@loc!=null))
	{
		return;
	}
	array<Map@>maps;
	loc.GetMaps(maps);
	
	for(uint i=0,j=maps.length();i<j;i++)
	{
		RecycleMap(maps[i],recyclerType,itemTypes,recycle);
	}
}         

bool ValidRecyclerType(int type)
{
	if(EnumContains("RecyclerType",type))
	{
		array<string@>names;
		array<int>values;
		uint count=GetEnum("RecyclerType",names,values);
		for(uint e=0;e<count;e++)
		{
			if(values[e]==type&&type>=0)
			return(true);
		}
	} 
	
	return(false);
}

Item@GetRecycler(int recyclerType)
{
	if(!ValidRecyclerType(recyclerType))
	{
		
		return(null);
	}
	
	if(uint(recyclerType)>=Recycler.length())
	{
		
		return(null);
	}
	
	Item@recycler=GetItem(Recycler[recyclerType]);
	if((@recycler!=null))
	{
		return(recycler);
	}
	return(null);
}

uint GetRecyclers(array<int>recyclersTypes,array<Item@>&recyclers)
{
	uint count=0;
	
	for(uint t=0,tLen=recyclersTypes.length();t<tLen;t++)
	{
		Item@newRecycler=GetRecycler(recyclersTypes[t]);
		if((@newRecycler!=null))
		{
			recyclers.insertLast(newRecycler);
			count++;
		}
	}
	
	return(count);
}

uint GetRecyclers(array<Item@>&recyclers)
{
	uint count=0;
	
	array<string@>names;
	array<int>values;
	uint ecount=GetEnum("RecyclerType",names,values);
	for(uint e=0;e<ecount;e++)
	{
		Item@newRecycler=GetRecycler(values[e]);
		if((@newRecycler!=null))
		{
			recyclers.insertLast(newRecycler);
			count++;
		}
	}
	
	return(count);
}

Item@GetRecycledItem(int recyclerType,uint16 pid)
{
	if(!ValidRecyclerType(recyclerType))
	{
		
		return(null);
	}
	
	array<Item@>items;
	uint count=GetRecycledItems(recyclerType,pid,items);
	if(count>0)
	{
		Item@item=items[Random(count,count-1)];
		if((@item!=null))
		return(item);
	}
	
	return(null);
}

uint GetRecycledItems(int recyclerType,uint16 pid,array<Item@>&items)
{
	uint count=0;
	Item@recycler=GetRecycler(recyclerType);
	if((@recycler!=null))
	{
		count+=recycler.GetItems(pid,items);
	}
	
	return(count);
}

uint GetRecycledItems(int recyclerType,array<uint16>pids,array<bool>&pidFound,array<Item@>&items)
{
	uint count=0;
	Item@recycler=GetRecycler(recyclerType);
	if((@recycler!=null))
	{
		for(uint p=0,pLen=pids.length();p<pLen;p++)
		{
			uint ccount=recycler.GetItems(pids[p],items);
			count+=ccount;
			
			if(ccount>0)
			pidFound.insertLast(true);
			else
			pidFound.insertLast(false);
		}
	}
	
	return(count);
}  

void encounter_recycler(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	if((@map!=null))
	{
		Item@recycler=map.AddItem(cr.HexX,cr.HexY,(435),1);
		recycler.SetScript("_InitEncounterRecycler");
	}
}  

void tent_recycler(Critter&cr,int,int,int)
{
	Map@map=cr.GetMap();
	if((@map!=null))
	{
		Item@recycler=map.AddItem(cr.HexX,cr.HexY,(9933),1);
		recycler.SetScript("_InitTentRecycler");
		recycler.OffsetX=75;
		recycler.OffsetY=-35;
		recycler.Update();
	}
}

void info(Critter&cr,int,int,int)
{
	for(uint i=0,j=Recycler.length();i<j;i++)
	{
		cr.Say((11),"Recycler "+i+": "+Recycler[i]);
	}
}

