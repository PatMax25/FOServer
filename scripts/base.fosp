

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}

const uint16[]Pids_AllWeapon={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332),(11),(400),(13),(12),(389),(395),(350),(355),(387),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397),(159),(25),(26),(27),(79),(205),(365),(45),(19),(572),(426),(486),(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116),(292),(293),(496),(497),(235),(21),(234),(407),(573)};
const uint16[]Pids_WeaponSmallGuns={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394),(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392),(94),(385),(242),(268),(354),(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponPistols={(300),(122),(8),(22),(18),(404),(241),(313),(398),(388),(394)};
const uint16[]Pids_WeaponRifles={(10),(287),(299),(23),(405),(143),(351),(403),(500),(161),(162),(261),(353),(392)};
const uint16[]Pids_WeaponShotguns={(94),(385),(242),(268),(354)};
const uint16[]Pids_WeaponPistolMachineGun={(9),(296),(283),(352),(391),(332)};
const uint16[]Pids_WeaponBigGuns={(11),(400),(13),(12),(389),(395),(350),(355),(387)};
const uint16[]Pids_WeaponEnergo={(16),(402),(390),(118),(401),(28),(120),(24),(406),(15),(233),(396),(397)};
const uint16[]Pids_WeaponLaser={(16),(402),(390),(118),(401),(28),(120)};
const uint16[]Pids_WeaponPlasma={(24),(406),(15),(233)};
const uint16[]Pids_WeaponPulse={(396),(397)};
const uint16[]Pids_WeaponThrowing={(159),(25),(26),(27),(79),(205),(365),(45),(19),(572),(426),(486),(573)};
const uint16[]Pids_WeaponGrenade={(159),(25),(26),(27),(1834)};
const uint16[]Pids_WeaponThrowingOther={(79),(205),(365),(45),(19),(572),(426),(486),(573)};
const uint16[]Pids_WeaponMelee={(4),(236),(517),(383),(319),(522),(7),(280),(320),(5),(20),(384),(6),(386),(115),(160),(399),(116)};
const uint16[]Pids_WeaponCutting={(4),(236),(517),(383),(319),(522)};
const uint16[]Pids_WeaponPricking={(7),(280),(320)};
const uint16[]Pids_WeaponShock={(5),(20),(384),(6),(386),(115)};
const uint16[]Pids_WeaponElectric={(160),(399),(116)};
const uint16[]Pids_WeaponUnarmed={(292),(293),(496),(497),(235),(21),(234),(407)};
const uint16[]Pids_WeaponSpecial={(270),(393),(371),(372),(427),(489),(498),(290),(291),(518),(520),(530),(531),(421)};

const uint16[]Pids_AllArmor={(74),(1),(379),(265),(2),(380),(240),(17),(381),(239),(3),(232),(348),(349),(113),(524),(761),(25548),(25549),(25547),(25548),(25551),(25550)};
const uint16[]Pids_ArmorLight={(74),(1),(379),(265),(25548),(25548),(25551),(25550),(524)};
const uint16[]Pids_ArmorMedium={(2),(380),(22095),(240),(17),(381),(239),(761),(25549)};
const uint16[]Pids_ArmorHeavy={(3),(232),(348),(349)};
const uint16[]Pids_ArmorRobes={(113)};
const uint16[]Pids_ArmorSpecial={(524)};

const uint16[]Pids_AllAmmo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358),(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_Ammo={(359),(35),(36),(363),(360),(121),(29),(30),(33),(31),(111),(357),(34),(95),(358)};
const uint16[]Pids_AmmoOther={(14),(37),(32),(382),(38),(39),(163),(361),(362)};
const uint16[]Pids_AmmoSpecial={(274)};

const uint16[]Pids_AllDrugs={(40),(48),(49),(109),(144),(260),(273),(525),(106),(124),(125),(310),(311),(469),(53),(87),(110),(259),(71),(81),(103),(378),(424)};
const uint16[]Pids_DrugsPreparations={(40),(48),(49),(109),(144),(260),(273),(525)};
const uint16[]Pids_DrugsAlcohol={(106),(124),(125),(310),(311),(469)};
const uint16[]Pids_Drugs={(53),(87),(110),(259)};
const uint16[]Pids_DrugsOther={(71),(81),(103),(378)};
const uint16[]Pids_DrugsSpecial={(334),(473),(480),(481),(482),(424)};

const uint16[]Pids_MiscExplosions={(51),(85),(544)};
const uint16[]Pids_MiscActiveExplosions={(206),(209),(545),(222)};
const uint16[]Pids_MiscPartsBasic={(98),(92),(127),(271),(272),(276),(277),(278),(284),(285),(286),(318),(416),(542),(532),(534),(475),(535),(536),(537),(538),(50),(1803),(539),(541),(22061),(22062),(22063),(22064),(22065),(22066),(22067),(22068),(22069),(22070),(22071),(22072)};
const uint16[]Pids_MiscPartsSelfSpecial={(89),(222),(229),(307),(419),(454),(364),(422),(479),(488)};
const uint16[]Pids_MiscPartsSpecial={(55),(253),(254),(258),(269),(356),(377)};
const uint16[]Pids_MiscPartsBody={(114),(251),(281),(282),(321),(322),(323),(324),(429),(484),(485),(507)};
const uint16[]Pids_MiscAllTools={(75),(77),(84),(308),(410),(411),(412),(47),(91),(408),(409),(428),(440),(289),(297),(543)};
const uint16[]Pids_MiscToolsTech={(75),(77),(84),(308),(410),(411),(412)};
const uint16[]Pids_MiscToolsMediacal={(47),(91),(408),(409),(428),(440)};
const uint16[]Pids_MiscToolsOther={(289),(297),(543)};
const uint16[]Pids_MiscToolsSpecial={(52),(207),(54),(210),(59),(208)};
const uint16[]Pids_MiscOther={(101),(117),(226),(227),(262),(295),(314),(315),(316),(317),(325),(326),(436),(437)};

const uint16[]Pids_Base_NormalGuns={(241),(143),(620),(354),(296),(400),(13),(389),(355),(401),(15),(396)};

const uint16[]Pids_Base_GoodGuns={(394),(391),(233),(28),(120)};

const uint16[]Pids_Base_TopWeapons={(392),(395),(350),(397)};

const uint16[]Pids_Base_MeleeWeapons={(517),(522),(115),(386),(399),(407)};

const uint16[]Pids_Base_ThrowingWeapons={(159),(25),(26),(27),(45),(1834)};

const uint16[]Pids_Base_NormalBurstAmmo={(36),(363),(30),(34),(850),(574),(575),(38),(39)};

const uint16[]Pids_Base_NormalSingleAmmo={(33),(621),(37),(382),(362),(576)};

const uint16[]Pids_Base_Drugs={(106),(124),(53),(87),(110),(259),(101),(541),(109),(48)};

const uint16[]Pids_Base_Explosives={(85),(544),(51)};

const uint16[]Pids_Base_Misc={(79),(9721),(9723),(9725),(378),(260),(253),(308),(412),(408),(409),(54),(59),(415),(433),(430)};

const uint16[]Pids_Base_Blueprints={(9750),(9751),(9752),(9753),(9754),(9755),(9756),(9757),(9758),(9759),(9760),(9761),(9762),(9763),(9764),(9765),(9766),(9767),(9768),(9769),(9770),(9771),(9772),(9780),(9781),(9782),(9790),(9791),(9792),(9793),(9794),(9795),(9796),(9797)};                                                                                                                                                                                                                                                                                                                                                                                                                     

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                                                                                                       

enum MobType
{
	MOB_TYPE_SUPER_MUTANT_LASER,
	MOB_TYPE_SUPER_MUTANT_PLASMA,
	MOB_TYPE_TOUGH_NIGHTKIN_ROCKET
}; 

array<array<uint>>MobWaves=
{
	
	{119,307}, 
	
	{119,308}, 
	
	{257,276}
};                                                                                              

shared interface IBroadcastBuffer
{
	string GetString();
	
	void SetType(int type);
	int GetType();
	void SetTime(int time);
	int GetTime();
	void SetSetup(int setup);
	int GetSetup();
	void SetMessage(string message);
	void AppendMessage(string message);
	string GetMessage();
	void SetData(array<int>data);
	
	void SetStart(int time);
	void ResetStart();
	
	void SetLifetime(int lifetime);
	
	void SetFilters(int filters);
	void SetFilter(int filter);
	void SetFilter(int filter,int data);
	void UnsetFilter(int filter);
	bool Filter(int filter);
	bool CheckFilters(Critter@player);
	
	bool Send(Critter@player);
	uint SendToAll();
	
	void SetGM(int id);
	void UnsetGM();
	
	void ToDelete();
};  

import void UpdateBroadcast()from"broadcast";

import IBroadcastBuffer@AddBroadcastBuffer(int type,int time,int setup,string&message,array<int>&data,int lifetime,int flags)from"broadcast";
import void DumpBroadcastBuffer(Critter@player)from"broadcast";
import uint FindBroadcastBufferByType(int type,array<IBroadcastBuffer@>&buf)from"broadcast";
import uint FindBroadcastBufferByGM(int id,array<IBroadcastBuffer@>&buf)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int time,int filters)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,int&time)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message,bool send)from"broadcast";
import IBroadcastBuffer@Broadcast_Message(string&message)from"broadcast"; 

import void Broadcast_TownControl_Set(string&message,int location,int time,int faction)from"broadcast";
import void Broadcast_TownControl_Set(int location,int time,int faction,Critter&player)from"broadcast";
import void Broadcast_TownControl_Stop(int location)from"broadcast"; 

import IBroadcastBuffer@Broadcast_Influence(int location,int time,string&message)from"broadcast"; 

import uint Broadcast_RequestHelp(Critter@player,string&message)from"broadcast";
import void Broadcast_CheckRequestHelpBuffer(Critter@gm)from"broadcast";
import void Broadcast_DumpRequestHelpBuffer(Critter@gm)from"broadcast"; 

import void baseControl(string msg,int mapId,uint time)from"broadcast";
import void baseControlRadio(string msg,uint time,int mapId,uint factionId)from"broadcast"; 

import void ServerEventMSG(uint time,string msg)from"broadcast"; 

import IBroadcastBuffer@GetEventCountDownBuffer(int location,int type)from"broadcast";
import void ServerEventCNTSet(string message,uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTSet(uint location,uint type,uint time)from"broadcast";
import void ServerEventCNTStop(uint location,uint type)from"broadcast";                          

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool GetFactionNameStr(uint faction,string&out name)from"factions";

const uint16[]CarMaps={(75),(25),(49)};
const uint[]TerminalMaps={(76),(27),(50)};

const uint[]GvarController={(102),
	(100),
	(101)};

const uint[]GvarOrganisation={(105),
	(103),
	(104)};

const uint[]GvarRefreshTimeEvent={(110),
	(108),
	(109)};

const uint[]GvarMobWaveTimeEvent={(113),
	(111),
	(112)};

const uint[]GvarCheckTimeEvent={(116),
	(114),
	(115)};

const int[]ScoreCur={(47),
	(49),
	(48)};

const string[]baseName={"Catherdral","Sierra","Mariposa"};
const string[]orgName={"","Enclave","Brotherhood"};     

uint e_BaseMobWave(uint[]@values)
{
	MobWaveBase(values[0],values[1]);
	return 0;
}      

void MobWaveBase(int base,int wave)
{
	Map@map=GetMapByPid(CarMaps[base],0);
	if(not(@map!=null))
	return;
	
	if(!ForceBaseCheck(base))
	return;
	
	GameVar@varController=GetGlobalVar(GvarController[base]);
	if(varController.GetValue()<0)
	return;
	
	GameVar@varOrg=GetGlobalVar(GvarOrganisation[base]);
	if(varOrg==0)
	return;
	
	string msg="<"+orgName[varOrg.GetValue()]+" radio> : We spotted big group of enemies approaching your direction. Expect contact in 30 seconds.";
	baseControlRadio(msg,10,map.Id,varController.GetValue());
	
	array<uint>dataSpawn={base,wave};
	GameVar@varMobWaveTimeEvent=GetGlobalVar(GvarMobWaveTimeEvent[base]);
	varMobWaveTimeEvent=CreateTimeEvent(__FullSecond+(((30)*__TimeMultiplier)),"e_BaseMobWaveSpawn",dataSpawn,true);
}

uint e_BaseMobWaveSpawn(uint[]@values)
{
	SpawnMobWaveBase(values[0],values[1]);
	return 0;
}      

void SpawnMobWaveBase(int base,int wave)
{
	if(!ForceBaseCheck(base))
	return;  
	
	Map@map=GetMapByPid(CarMaps[base],0);
	if(not(@map!=null))
	return;
	
	GameVar@varOrg=GetGlobalVar(GvarOrganisation[base]);
	if(varOrg==0)
	return;                                                
	
	SpawnMobs(map,MOB_TYPE_SUPER_MUTANT_LASER,5+wave,4*wave,true);
	SpawnMobs(map,MOB_TYPE_SUPER_MUTANT_PLASMA,5+wave,4*wave,true);
	SpawnMobs(map,MOB_TYPE_TOUGH_NIGHTKIN_ROCKET,5+wave,4*wave,true);
	
	array<uint>data={base,(wave+1)};
	GameVar@varMobWaveTimeEvent=GetGlobalVar(GvarMobWaveTimeEvent[base]);
	varMobWaveTimeEvent=CreateTimeEvent(__FullSecond+(((Random(1,2))*__TimeMultiplier*60)),"e_BaseMobWave",data,true);
}         

void SpawnMobs(Map@map,uint mobType,uint size,uint lvl,bool randomized)
{
	if(not(@map!=null))
	return;
	
	int pid=MobWaves[mobType][0];
	int bagId=MobWaves[mobType][1];
	uint16 hx,hy;
	
	if(!randomized)
	{
		Entire[]entires;
		ParseEntires(map,entires,(77));
		if(entires.length()==0)
		return;
		
		uint i=Random(0,entires.length()-1);
		hx=entires[i].HexX;
		hy=entires[i].HexY;
	}
	
	for(uint i=0;i<size;++i)
	{
		if(randomized)
		{
			Entire[]entires;
			ParseEntires(map,entires,(77));
			if(entires.length()==0)
			return;
			
			uint i=Random(0,entires.length()-1);
			hx=entires[i].HexX;
			hy=entires[i].HexY;
		}
		
		Critter@SpawnedNpc=AddNpc(map,pid,hx,hy,Random(0,6),0,"mob@critter_init_aggr",0,bagId,0,true,lvl);
		if(!(@SpawnedNpc!=null))
		{
			
			return;
		}
		SpawnedNpc.ParamBase[(532)]=1;
		SpawnedNpc.ParamBase[(523)]=1;
		SpawnedNpc.ParamBase[(511)]=1;
		SpawnedNpc.ParamBase[(522)]=1;
		SpawnedNpc.ParamBase[(89)]=(90);
		SpawnedNpc.ParamBase[(84)]=(-3);
		
		Critter@[]players;
		uint playersCnt=map.GetCritters(0,(0x03)|(0x10),players);
		if(playersCnt>0)
		{
			AddAttackPlane(SpawnedNpc,0,players[Random(0,players.length()-1)]);
			AddAttackPlane(SpawnedNpc,0,players[Random(0,players.length()-1)]);
			AddAttackPlane(SpawnedNpc,0,players[Random(0,players.length()-1)]);
		}
	}
}      

uint e_BaseCheck(uint[]@values)
{
	CheckBase(values[0]);
	return 0;
} 

void CheckBase(int base)
{
	bool validControl=false;
	if(base>=(3))
	return;
	
	GameVar@varController=GetGlobalVar(GvarController[base]);
	if(varController.GetValue()<0)
	return;
	string factionname;
	GetFactionNameStr(varController.GetValue(),factionname); 
	
	Map@map=GetMapByPid(CarMaps[base],0);
	if(not(@map!=null))
	return;
	
	array<Critter@>critters;
	uint n=map.GetCritters(0,(0x10)|(0x03),critters); 
	
	if(n>0)
	{
		
		for(uint i=0;i<n;++i)
		{
			if(critters[i].ParamBase[(106)]!=varController.GetValue()||critters[i].Param[(510)]!=0)
			{
				critters.removeAt(i);
				--i;
				--n;
			}
		}
	}
	if(n>0)
	validControl=true;
	
	if(validControl)
	{
		GameVar@varCheckTimeEvent=GetGlobalVar(GvarCheckTimeEvent[base]);
		varCheckTimeEvent=CreateTimeEvent(__FullSecond+(((1)*__TimeMultiplier*60)),"e_BaseCheck",base,true);
	}
	else
	{
		
		TerminateTimeEvents(base);
		CreateTimeEvent(__FullSecond+(((1)*__TimeMultiplier*60)),"e_BaseDeleteWaveMobs",base,true);
		SetBestScore(ScoreCur[base],null,"---");
		
		string broadcastMsg=factionname+" have lost controll over "+baseName[base]+".";
		baseControl(broadcastMsg,base,(((20)*__TimeMultiplier)));
	}
} 

bool ForceBaseCheck(int base)
{
	bool validControl=false;
	if(base>=(3))
	return validControl;
	
	GameVar@varController=GetGlobalVar(GvarController[base]);
	if(varController.GetValue()<0)
	return validControl;
	string factionname;
	GetFactionNameStr(varController.GetValue(),factionname);
	
	Map@map=GetMapByPid(CarMaps[base],0);
	if(not(@map!=null))
	return validControl;
	
	array<Critter@>critters;
	uint n=map.GetCritters(0,(0x10)|(0x03),critters);
	
	if(n>0)
	{
		for(uint i=0;i<n;++i)
		{
			if(critters[i].ParamBase[(106)]!=varController.GetValue()||critters[i].Param[(510)]!=0)
			{
				critters.removeAt(i);
				--i;
				--n;
			}
		}
	}
	if(n>0)
	validControl=true;
	
	if(!validControl)
	{
		
		TerminateTimeEvents(base);
		CreateTimeEvent(__FullSecond+(((1)*__TimeMultiplier*60)),"e_BaseDeleteWaveMobs",base,true);
		SetBestScore(ScoreCur[base],null,"---");
		
		string broadcastMsg=factionname+" have lost controll over "+baseName[base]+".";
		baseControl(broadcastMsg,base,(((20)*__TimeMultiplier)));
	}
	
	return validControl;
}      

uint e_BaseDeleteWaveMobs(uint[]@values)
{
	DeleteWaveMobs(values[0]);
	return 0;
} 

void DeleteWaveMobs(int base)
{
	if(base>=(3))
	return;
	
	Map@map=GetMapByPid(CarMaps[base],0);
	if(not(@map!=null))
	return;
	
	uint mobsNum=map.GetNpcCount((90),(0x20)|(0x0F));
	for(uint j=0;j<mobsNum;j++)
	{
		Critter@mob=map.GetNpc((90),(0x20)|(0x0F),j);
		DeleteNpc(mob);
	} 
	
} 

void TerminateTimeEvents(int base)
{
	
	GameVar@varRefreshTimeEvent=GetGlobalVar(GvarRefreshTimeEvent[base]);
	if(varRefreshTimeEvent!=0)
	{
		EraseTimeEvent(varRefreshTimeEvent.GetValue());
		varRefreshTimeEvent=0;
	} 
	
	GameVar@varCheckTimeEvent=GetGlobalVar(GvarCheckTimeEvent[base]);
	if(varCheckTimeEvent!=0)
	{
		EraseTimeEvent(varCheckTimeEvent.GetValue());
		varCheckTimeEvent=0;
	} 
	
	GameVar@varMobWaveTimeEvent=GetGlobalVar(GvarMobWaveTimeEvent[base]);
	if(varMobWaveTimeEvent!=0)
	{
		EraseTimeEvent(varMobWaveTimeEvent.GetValue());
		varMobWaveTimeEvent=0;
	}
}      

uint e_BaseRefresh(uint[]@values)
{
	RefreshBase(values[0],values[1]);
	return 0;
} 

void RefreshBase(int base,int wave)
{
	if(!ForceBaseCheck(base))
	return; 
	
	if(base>=(3))
	return; 
	
	GameVar@varController=GetGlobalVar(GvarController[base]);
	if(varController.GetValue()<0)
	return; 
	
	GameVar@varOrg=GetGlobalVar(GvarOrganisation[base]);
	if(varOrg==0)
	return; 
	
	Map@map=GetMapByPid(CarMaps[base],0);
	if(not(@map!=null))
	return;
	
	array<uint>carData={map.GetProtoId(),base,varOrg.GetValue(),wave,varController.GetValue()};
	GameVar@varRefreshTimeEvent=GetGlobalVar(GvarRefreshTimeEvent[base]);
	varRefreshTimeEvent=CreateTimeEvent(__FullSecond+(((30)*__TimeMultiplier)),"e_SupplyCar",carData,true);
	
	string msg="<"+orgName[varOrg.GetValue()]+" radio> : supply car will arrive in 30 seconds. You will have 1 minute to unload the trunk.";
	baseControlRadio(msg,10,map.Id,varController.GetValue());
}      

uint e_SupplyCar(uint[]@values)
{
	CreateSupplyCar(values[0],values[1],values[2],values[3],values[4]);
	return 0;
}        

void CreateSupplyCar(int mapPid,int base,int org,int wave,int factionId)
{
	if(!ForceBaseCheck(base))
	return;
	
	Map@map=GetMapByPid(mapPid,0);
	if(not(@map!=null))
	return;
	
	Entire[]entires;
	ParseEntires(map,entires,(50));
	
	uint16 carPid=(org==(2)?(800):(805));
	
	uint16 hx,hy;
	for(int i=0,j=entires.length();i<=j;i++)
	{
		if(i==j)
		return;
		
		Entire@ent=entires[i];
		if(map.CheckPlaceForItem(ent.HexX,ent.HexY,carPid))
		{
			hx=ent.HexX;
			hy=ent.HexY;
			break;
		}
	}
	
	Item@car=map.AddItem(hx,hy,carPid,1);
	if(not(@car!=null))
	return;
	
	car.LockerId=1;
	car.LockerComplexity=Random(100,150);
	car.Charge=Random(0,car.Proto.Car_TankVolume);
	car.Deterioration=Random(0,car.Proto.Car_MaxDeterioration);
	
	Item@bag=car.GetChild(0);
	if((@bag!=null))
	{             
		
		if(org==(1))
		{
			if(Random(1,100)<=10*wave)
			{
				bag.AddItem((752),1,0);
				bag.AddItem((738),1,0);
			}
			if(Random(1,100)<=10*wave)
			{
				bag.AddItem((524),1,0);
				bag.AddItem((739),1,0);
			}
		}
		else
		{
			if(Random(1,100)<=10*wave)
			{
				bag.AddItem((239),1,0);
				bag.AddItem((727),1,0);
			}
			if(Random(1,100)<=10*wave)
			{
				bag.AddItem((9654),1,0);
				bag.AddItem((741),1,0);
			}
		} 
		
		if(Random(1,100)<=wave)
		{
			bag.AddItem((3),1,0);
			bag.AddItem((721),1,0);
		}
		if(Random(1,200)<=wave)
		{
			bag.AddItem((232),1,0);
			bag.AddItem((737),1,0);
		}
		if(Random(1,100)<=15*wave)
		{
			bag.AddItem((778),1,0);
			bag.AddItem((740),1,0);
		}
		if(Random(1,100)<=20*wave)
		{
			bag.AddItem((381),1,0);
			bag.AddItem((726),1,0);
		} 
		
		FillBag(bag,Pids_Base_NormalGuns,Random(2,3),1,1,90);
		FillBag(bag,Pids_Base_GoodGuns,Random(1,2),1,1,60);
		FillBag(bag,Pids_Base_MeleeWeapons,Random(1,3),1,1,80);
		FillBag(bag,Pids_Base_ThrowingWeapons,Random(1,3),5,20,80);
		if(Random(1,200)<=wave)
		FillBag(bag,Pids_Base_TopWeapons,1,1,1,100); 
		
		FillBag(bag,Pids_Base_NormalBurstAmmo,0,350,700,100);
		FillBag(bag,Pids_Base_NormalSingleAmmo,0,40,80,100);
		if(Random(1,100)<=2*wave)
		bag.AddItem((359),Random(250,500),0);
		if(Random(1,100)<=2*wave)
		bag.AddItem((358),Random(50,100),0); 
		
		bag.AddItem((41),Random(1000,10000),0);
		bag.AddItem((144),Random(10,50),0);
		bag.AddItem((40),Random(10,50),0);
		FillBag(bag,Pids_Base_Drugs,0,5,10,100);
		FillBag(bag,Pids_Base_Explosives,1,1,5,100);
		FillBag(bag,Pids_Base_Misc,3,1,1,100);
		FillBag(bag,Pids_Base_Blueprints,2,1,1,100);
		if(Random(1,100)<=2*wave)
		bag.AddItem((525),Random(1,5),0);
	}  
	
	array<uint>data={base,(wave+1)};
	GameVar@varRefreshTimeEvent=GetGlobalVar(GvarRefreshTimeEvent[base]);
	varRefreshTimeEvent=CreateTimeEvent(__FullSecond+(((Random(3,4))*__TimeMultiplier*60)),"e_BaseRefresh",data,true);
	
	CreateTimeEvent(__FullSecond+(((1)*__TimeMultiplier*60)),"e_DeleteCar",car.Id,true);
	
	string factionname;
	GetFactionNameStr(factionId,factionname);
	SetBestScore(ScoreCur[base],null,factionname);
	string broadcastMsg=factionname+" are still controlling "+baseName[base]+".";
	baseControl(broadcastMsg,base,(((20)*__TimeMultiplier)));
}          

void FillBag(Item@bag,uint16[]&pids,uint cnt,uint min,uint max,int chance)
{
	if(cnt==0)
	{
		for(uint i=0;i<pids.length();++i)
		{
			if(Random(1,100)<=chance)
			bag.AddItem(pids[i],Random(min,max),0);
		}
	}
	else
	{
		for(uint i=0;i<cnt;++i)
		{
			if(Random(1,100)<=chance)
			bag.AddItem(pids[Random(0,pids.length()-1)],Random(min,max),0);
		}
	}
}

uint e_DeleteCar(uint[]@values)
{
	Item@car=GetItem(values[0]);
	if((@car!=null))
	DeleteItem(car);
	return 0;
}       

bool s_Terminal(Critter&player,Scenery&terminal,int skill,Item@item)
{
	if(player.IsPlayer()&&skill==-1&&not(@item!=null))
	RunDialog(player,(22200),terminal.HexX,terminal.HexY,false);
	return true;
} 

void r_BaseToEnclave(Critter&player,Critter@terminal,int val)
{
	BaseTo(player,(1));
} 

void r_BaseToBos(Critter&player,Critter@terminal,int val)
{
	BaseTo(player,(2));
} 

void BaseTo(Critter@player,int org)
{
	int base=GetBaseByMap(player.GetMap());
	if(base==-1)
	return;
	
	GameVar@varController=GetGlobalVar(GvarController[base]);
	varController=player.ParamBase[(106)];
	
	GameVar@varOrg=GetGlobalVar(GvarOrganisation[base]);
	varOrg=org;
	
	string factionname;
	GetFactionNameStr(varController.GetValue(),factionname);
	SetBestScore(ScoreCur[base],null,factionname); 
	
	TerminateTimeEvents(base);
	CreateTimeEvent(__FullSecond+(((1)*__TimeMultiplier*60)),"e_BaseDeleteWaveMobs",base,true);
	
	array<uint>data={base,1};
	GameVar@varRefreshTimeEvent=GetGlobalVar(GvarRefreshTimeEvent[base]);
	varRefreshTimeEvent=CreateTimeEvent(__FullSecond+(((Random(3,4))*__TimeMultiplier*60)),"e_BaseRefresh",data,true);
	
	GameVar@varCheckTimeEvent=GetGlobalVar(GvarCheckTimeEvent[base]);
	varCheckTimeEvent=CreateTimeEvent(__FullSecond+(((1)*__TimeMultiplier*60)),"e_BaseCheck",base,true);
	
	GameVar@varMobWaveTimeEvent=GetGlobalVar(GvarMobWaveTimeEvent[base]);
	varMobWaveTimeEvent=CreateTimeEvent(__FullSecond+(((Random(1,2))*__TimeMultiplier*60)),"e_BaseMobWave",data,true); 
	
	string broadcastMsg=factionname+" are now controlling "+baseName[base]+".";
	baseControl(broadcastMsg,base,(((20)*__TimeMultiplier)));
}

int GetBaseByMap(Map@map)
{
	if(not(@map!=null))
	return-1;
	uint16 mapPid=map.GetProtoId();
	for(int i=0,j=TerminalMaps.length();i<j;i++)
	if(TerminalMaps[i]==mapPid)
	return i;
	return-1;
}

bool d_CheckTerminalLock(Critter&player,Critter@terminal,int val)
{
	return true;
} 

bool d_CheckPlayerNotInFaction(Critter&player,Critter@terminal)
{
	if(player.ParamBase[(106)]>=0)
	return false;
	return true;
}        

uint place(Critter&player,Critter@trainer,int itemID)
{
	if(player.Param[(210)]<1)
	{
		player.Say((11),"Raise Engineer skill to continue.");
		return 18;
	}
	player.ParamBase[(210)]-=1;
	Item@it=player.GetMap().AddItem(player.HexX,player.HexY,itemID,0);
	((it.Flags)=(it.Flags)|((0x00000004)));
	((it.Flags)=(it.Flags)|((0x00000008)));
	((it.Flags)=(it.Flags)|((0x00000010)));
	((it.Flags)=(it.Flags)|((0x00000200)));
	((it.Flags)=(it.Flags)|((0x00001000)));
	((it.Flags)=(it.Flags)|((0x00080000)));
	((it.Flags)=(it.Flags)|((0x00100000)));
	(it.Flags=((it.Flags)&(~((0x08000000)))));
	it.SetScript("base@_Init");
	it.Update();
	player.ParamBase[(129)]=it.Id;
	return 10;
}

uint placemine(Critter&player,Critter@trainer,int itemID,int mine)
{
	if(player.Param[(210)]<10)
	{
		player.Say((11),"Raise Engineer skill to continue.");
		return 18;
	}
	if(player.Param[(1186)]<1&&mine>0)
	{
		player.Say((11),"Buy a mine machine first, you can do it in Broken Hills and Hub");
		return 18;
	}
	if(player.Param[(1187)]<1&&mine==0)
	{
		player.Say((11),"Buy a junk machine first, you can do it in Glow and Gecko");
		return 18;
	}
	player.ParamBase[(210)]-=10;
	Item@it=player.GetMap().AddItem(player.HexX,player.HexY,itemID,0);
	it.Update();
	
	player.ParamBase[(129)]=it.Id;
	if(mine>0)
	{player.ParamBase[(1186)]-=1;it.SetScript("utils@warspawner");it.Val0=4;it.Val1=-30;it.Update();}
	else{player.ParamBase[(1187)]-=1;it.SetScript("utils@warspawner");it.Val0=5;it.Val1=-30;it.Update();}
	return 10;
}

void _Init(Item&item,bool firstTime)
{
	item.SetEvent((4),"_Use");
}

bool _Use(Item&item,Critter&cr,int skill)
{
	if(skill==(210))
	{
		DeleteItem(item);
		return true;
	}
	return false;
}

void setMode(Critter&player,Critter@trainer,int mode)
{
	Item@it=GetItem(player.Param[(129)]);
	
	switch(mode)
	{
		case 1:(it.Flags=((it.Flags)&(~((0x00000004)))));break;
		case 2:(it.Flags=((it.Flags)&(~((0x00000008)))));break;
		case 3:it.SetScript("personal_base@map_scenery");((it.Flags)=(it.Flags)|((0x10000000)));break;
		
	}
	
	it.Update();
}
