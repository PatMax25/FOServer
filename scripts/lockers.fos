//
// FOnline: 2238
// Rotators
//
// lockers.fos
//

// Doors and keys stuff.
#include "_macros.fos"
#include "MsgStr.h"
#include "backend_h.fos"
#include "multihex_h.fos"
#include "utils_h.fos"
#include "_vals.fos"
#include "mapdata_h.fos"

#define LOCKER_SOUND_RADIUS    (15)

import void TryPickupContainer(Critter& cr, Item& locker) from "movable_container";
import void TryRotateContainer(Critter& cr, Item& locker) from "movable_container";
import bool IsCarTrunk(Item@ item) from "car";

bool UseItemOnLocker(Critter& cr, Item& locker, Item& item)   // Export
{
    return true;
}

bool UseSkillOnLocker(Critter& cr, Item& locker, int skill)   // Export
{
    Map@ map = cr.GetMap();
    if(!valid(map))
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING);
        return true;
    }
	//cr.Param[ST_LAST_LOOT] == int(locker.Id);
    if(skill == SKILL_PICK_ON_GROUND)
    {
        return HandleLocker(cr, map, locker, false);
    }
    else if(skill == SK_ENGINE)
    {
        if(locker.GetType() == ITEM_TYPE_CONTAINER && FLAG(locker.LockerCondition, LOCKER_ISOPEN))
		{
		    LockerClose(locker);
            OnClose(locker);
            //cr.ShowContainer(null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP);
		}
        else
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING);
    }
    else if(skill == SK_LOCKPICK)
    {
        // NoOpen
        /*if(!locker.Proto.Container_Changeble)
           {
                cr.SayMsg(SAY_NETMSG,TEXTMSG_GAME,STR_USE_NOTHING);
                return true;
           }*/
		Map@ map = cr.GetMap();
		//if(map.GetLocation().GetProtoId()==LOCATION_BarterGround)
		if(map.GetProtoId() == MAP_HubDowntown && IsCarTrunk(locker))
		{
			cr.Say(SAY_NETMSG, "You can't lockpick car trunk here.");
			return true;
		}
		
		if(IsCarTrunk(locker) && _MapHasMode(map, MAP_MODE_EVENT_WITH_CAR))
		{
			cr.Say(SAY_NETMSG, "Find the key!");
			return true;
		}

        if(cr.Timeout[TO_SK_LOCKPICK] > 0)
        {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS);
            return true;
        }

        if(locker.LockerId == 0 || FLAG(locker.LockerCondition, LOCKER_ISOPEN))
        {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING);
            return true;
        }
		
		if(locker.GetType() == ITEM_TYPE_CONTAINER && locker.GetScriptId() > 0)
			if(GetScriptName(locker.GetScriptId()) == "item_spawner_container@item_init")
				if(locker.LockerComplexity > 100)
					locker.LockerComplexity = 100;
					
		
        int    base = cr.Param[SK_LOCKPICK] - locker.LockerComplexity;
        uint8  mode = 0;
        uint16 activePid = cr.GetSlotProto(SLOT_HAND1, mode).ProtoId;
        Item@  lockpicks = _CritGetItemHand(cr);
        if(valid(lockpicks) && lockpicks.Proto.Misc_ToolSkillNum == SK_LOCKPICK)
        {
            base += lockpicks.Proto.Misc_ToolSkillBonus;
            if(Random(0, 30) == 0)
                cr.DeleteItem(lockpicks.GetProtoId(), 1);
        }
        // Todo: PID_ELECTRONIC_LOCKPICKS, PID_ELEC_LOCKPICK_MKII
		
		//bool IsTypicalSpawner = false;
		
        base = CLAMP(base, 0, 95);
		
        
		//if(IsTypicalSpawner ? base >= Random(0, 100) : base >= Random(1, 100))
		if(base >= Random(1, 100))
        {
            if(locker.Proto.Container_Changeble && !LockerOpen(locker))
                Log("ERR: something wrong with this locker: " + locker.MapId + "," + locker.HexX + "," + locker.HexY + " pid " + locker.GetProtoId());
            locker.LockerId = 0;
            locker.LockerComplexity = 0;
            // TODO: OnOpen ??
            if(locker.GetType() == ITEM_TYPE_CONTAINER)
                cr.ShowContainer(null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP);
            cr.ParamBase[ST_EXPERIENCE] += 50*(GetGvar(GVAR_experience_multipler));
            LogExperience(cr, 50*(GetGvar(GVAR_experience_multipler)), SK_LOCKPICK, "Locker", locker.GetProtoId());
            AddScore(cr, SCORE_CRACKER, 1);
        }
		
		/*if(IsTypicalSpawner && locker.LockerComplexity > 210)
		{
			uint16 complex = locker.LockerComplexity;
			//if(complex >= 200)
			//{
				complex--;
				locker.LockerComplexity = complex;
				locker.Update();
			//}
		}*/
		
        else
        {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_LOCKPICK_FAIL);
        }
		
        _SetTimeout(cr, TO_SK_LOCKPICK, LOCKPICK_TIMEOUT(cr));
    }
    else if(skill == SK_SCIENCE)
    {
        if(cr.IsPlayer() && cr.GetAccess() >= ACCESS_MODER)
            cr.Say(SAY_NETMSG, "Complexity: " + locker.LockerComplexity + ", id: " + locker.LockerId);

        TryPickupContainer(cr, locker);
    }
    else if(skill == SK_REPAIR)
    {
        TryRotateContainer(cr, locker);
    }
    else
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING);
    }
    return true;
}

bool HandleLocker(Critter& cr, Map@ map, Item& locker, bool disregardKey)   // export
{
    if(locker.GetType() == ITEM_TYPE_DOOR)
    {
        bool not_auto_door = false; // w Special Enco Ruined Military Base wyłączone autozamykanie sie drzwi - zabezpiecza przed zatrzasnieciem się drzwi, ktorych po ewentualnej utracie klucza, nie mozna byloby otworzyc
    
        uint mapProtoId = map.GetProtoId();
        if( // Start of exception desc
		((mapProtoId == MAP_RuinedMilitaryBunkerLevel2 || mapProtoId == MAP_RuinedMilitaryBunkerSurface) && // mapy, na ktorych ponizsze drzwi beda miec wylaczone auto-zamykanie
		(locker.HexX == 192 && locker.HexY == 210) || // MAP_RuinedMilitaryBunkerLevel2
		(locker.HexX == 202 && locker.HexY == 188)) || // MAP_RuinedMilitaryBunkerLevel2
		// Talchem
		((mapProtoId == MAP_Talchem_1) && // Talchem level 1 map
		(locker.HexX == 201 && locker.HexY == 278) || // Main Gate
		(locker.HexX == 204 && locker.HexY == 291) || // Small door on left side
		(locker.HexX == 198 && locker.HexY == 291))   // Small door on right side
		) // End of exception desc

            {
                not_auto_door = true;
                //Log("not_auto_door = true" + " mapProtoId " + mapProtoId + " locker.HexX " + locker.HexX + ", " + locker.HexY);
            }
            else
            {
                not_auto_door = false;
                //Log("not_auto_door = false" + " mapProtoId " + mapProtoId + " locker.HexX " + locker.HexX + ", " + locker.HexY);
            }
        

        // NoOpen
        if(!locker.Proto.Container_Changeble)
        {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING);
            return true;
        }

        // Check if something is blocking the door
        if(FLAG(locker.LockerCondition, LOCKER_ISOPEN))
        {
            if(DoorIsBlocked(locker))
            {
                cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_DOORWAY_BLOCKED);
                return true;
            }
        }

        // Check key
        if(!FLAG(locker.LockerCondition, LOCKER_ISOPEN) && locker.LockerId != 0 &&
           !FLAG(locker.LockerCondition, LOCKER_BROKEN) && !IsKeyAviable(cr, locker.LockerId) && !_CritHasExtMode(cr, MODE_EXT_TC_LEADER) && !disregardKey)
        {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_KEY);
            LockerBudge(locker);
            return true;
        }

        // Change state
        if(FLAG(locker.LockerCondition, LOCKER_ISOPEN))
        {
            LockerClose(locker);
            OnClose(locker);
        }
        else
        {
            if(IsMultihex(locker))
            {
                if(IsMultihexBlocked(locker))
                {
                    cr.Say(SAY_NETMSG, "Something or someone is blocking the door.");
                    LockerBudge(locker);
                    return true;
                }
                ;
            }


            LockerOpen(locker);         
            if(IsAutoDoor(locker))
                OnOpenAutoDoor(locker, not_auto_door);
            else
                OnOpenDoor(locker, not_auto_door);
        }
    }
    else if(locker.GetType() == ITEM_TYPE_CONTAINER)
    {
        // Check key
        if(!FLAG(locker.LockerCondition, LOCKER_ISOPEN) && locker.LockerId != 0 &&
           !FLAG(locker.LockerCondition, LOCKER_BROKEN) && !IsKeyAviable(cr, locker.LockerId) && !disregardKey)
        {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_ITEM_LOCKER_NEED_KEY);
            LockerBudge(locker);
            return true;
        }

        // Is changeble
        if(locker.Proto.Container_Changeble)
        {
            // Change state
            if(FLAG(locker.LockerCondition, LOCKER_ISOPEN))
            {
                //LockerClose(locker);
                //OnClose(locker);
				cr.ShowContainer(null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP);
            }
            else
            {
                LockerOpen(locker);
                OnOpenContainer(locker);
                cr.ShowContainer(null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP);
            }
        }
        // No changeble
        else
        {
            cr.ShowContainer(null, locker, locker.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP);
        }
    }
    return true;
}

bool IsKeyAviable(Critter& cr, uint lockerId)   // Export
{
    if(lockerId == 0)
        return true;
    if(_CritFingersDoorId(cr.Id) == lockerId || _CritEyesDoorId(cr.Id) == lockerId)
        return true;
    array<Item@> keys;
    for(uint i = 0, j = cr.GetItemsByType(ITEM_TYPE_KEY, keys); i < j; i++)
        if(keys[i].LockerId == lockerId)
            return true;
    if(_CritHasExtMode(cr, MODE_EXT_TC_LEADER))
        return true;
    return false;
}

uint GetKeyId(Critter& cr, uint lockerId)   // Export
{
    if(lockerId == 0 || _CritFingersDoorId(cr.Id) == lockerId || _CritEyesDoorId(cr.Id) == lockerId)
        return 0;
    array<Item@> keys;
    for(uint i = 0, j = cr.GetItemsByType(ITEM_TYPE_KEY, keys); i < j; i++)
        if(keys[i].LockerId == lockerId)
            return keys[i].Id;
    return 0;
}

void SwitchState(Item& locker)   // Export
{
    // Todo: show messages

    if(locker.GetType() == ITEM_TYPE_DOOR || locker.GetType() == ITEM_TYPE_CONTAINER)
    {
        // Check open aviability
        if(locker.Proto.Container_Changeble)
        {
            // Change state
            if(FLAG(locker.LockerCondition, LOCKER_ISOPEN))
                LockerClose(locker);
            else
                LockerOpen(locker);
        }
    }
}

// Automatic door handling

//
// Checks whether door with given pid should be closed automatically
//
// TODO: fill this list with others
bool IsAutoDoor(Item& door)
{
    uint pid = door.GetProtoId();
	
    // VC doors
    return(pid == 3387 || pid == 3388 || pid == 3389 || pid == 3390 || pid == 3391 || pid == 3392
           // VC gate
           || pid == 3337
           // Vault doors
           || pid == 2018 || pid == 2019
           // bos doors
           || pid == 2151 || pid == 2152 || pid == 2153
           // elevator doors
           || pid == 2421 || pid == 2470
           // wall-secret door
           || pid == 2195);

}

//
// Checks if item is container with doors
//
bool IsOpenableContainer(uint pid)
{
    /*return pid == 42 || pid == 43 || pid == 44 ||
           (pid >= 128 && pid <= 139) ||
           (pid >= 188 && pid <= 189) ||
		   (pid >= 197 && pid <= 204) ||			//animated containers
           pid == 245 ||
           (pid >= 367 && pid <= 370) ||
           pid == 501 || pid == 502 ||
		   pid == 22139 || pid == 22140 ||
		   pid == 22442 || pid == 22447 ||
		   pid == 22567 || pid == 22568 ||
		   pid == 22990 || pid == 22399 ||
		   pid == 22400;*/
		   
	ProtoItem@ proto = GetProtoItem(pid);
	return proto.Container_Changeble;
}

//
// Checks if item is container which can be locked on key
//
bool IsLockableContainer(uint pid)
{
    ProtoItem@ proto = GetProtoItem(pid);
	return proto.Container_Changeble || pid == 42 || pid == 43 || pid == 44 ||
			(pid >= 128 && pid <= 139) ||
			(pid >= 188 && pid <= 189) ||
			pid == 245 ||
			(pid >= 367 && pid <= 370) ||
			pid == 501 || pid == 502 ||
			(pid >= 197 && pid <= 204) ||			//animated containers
			
	
			pid == 22139 || pid == 22140 ||
			pid == 22442 || pid == 22447 ||
			pid == 22567 || pid == 22568 ||
			pid == 22990 || pid == 22121 ||
			(pid >= 197 && pid <= 204) ||
			(pid >= 66 && pid <= 70) ||
			(pid >= 181 && pid <= 187) ||
			(pid >= 22142 && pid <= 22146) ||
			(pid >= 22148 && pid <= 22150) ||
			pid == 22174 || pid == 22262 ||
			pid == 22312 || pid == 22313 ||
			pid == 22399 || pid == 22400 ||
			pid == 22413 || pid == 22634 ||
			(pid >= 22829 && pid <= 22832) ||
			pid == 25197;
			
	
}


// Returns true if the door is blocked by something (typically a critter)
//
bool DoorIsBlocked(Item@ door)
{
    if(!valid(door))
        return false;

    uint16 doorX = 0;
    uint16 doorY = 0;
    Map@   doorMap = door.GetMapPosition(doorX, doorY);

    if(!valid(doorMap))
        return false;

    if(IsMultihex(door))
    {
        return IsMultihexBlocked(door);
    }
    else
    {
        if(!doorMap.IsHexPassed(doorX, doorY))
            return true;
    }
    return false;
}

//
// Spawns event that will close door
//
void OnOpenAutoDoor(Item@ targetItem, bool not_auto_door)
{
    if(targetItem.Val5 != 0)
        EraseTimeEvent(targetItem.Val5);
    // // we don't store info about this event for now,
    // // server can't load event handler, don't know why)
    if(not_auto_door == false)
        targetItem.Val5 = CreateTimeEvent(AFTER(REAL_SECOND(Random(10, 20))), "e_CloseDoor", targetItem.Id, true);
}

//
// Spawns event that will close normal door (long time)
//
void OnOpenDoor(Item@ targetItem, bool not_auto_door)
{
    if(targetItem.Val5 != 0)
        EraseTimeEvent(targetItem.Val5);

    Map@ map = GetMap(targetItem.MapId);
    if(valid(map) &&
       (map.GetLocation().IsTown() ||
		map.GetLocation().IsDungeon() ||
        map.GetLocation().IsTCTown() ||
        map.GetLocation().IsReplication()))
    {
        if(not_auto_door == false)
            targetItem.Val5 = CreateTimeEvent(AFTER(REAL_MINUTE(Random(3, 6))), "e_CloseDoor", targetItem.Id, true);
    }
}

//
// Removes event
//
void OnClose(Item@ targetItem)
{
    if(targetItem.Val5 != 0)
        EraseTimeEvent(targetItem.Val5);
}

void OnOpenContainer(Item@ targetItem)
{
    if(targetItem.Val5 != 0)
        EraseTimeEvent(targetItem.Val5);
    targetItem.Val5 = CreateTimeEvent(AFTER(REAL_MINUTE(Random(3, 6))),
                                      "e_CloseDoor", targetItem.Id, true);
}

//
// Event handler that closes automatic doors
//
uint e_CloseDoor(array<uint>@ values)
{
    _TIMEBEGIN;
    Item@ item = GetItem(values[0]);
    if(!valid(item))
        return 0;
    uint16 x = 0, y = 0;
    Map@   map = item.GetMapPosition(x, y);
    if(!valid(map))
        return 0;

    // Door are blocked by something
    //
    if(item.GetType() == ITEM_TYPE_DOOR && DoorIsBlocked(item))
        return REAL_SECOND(3);
		
	// Exception for autolock for door
	if(item.GetScriptId() > 0)
		if(GetScriptName(item.GetScriptId()) == "lockers@lockthedoor")
			lockthedoor(item, true); //called true for firstTime bcs there can be a server restart.

    LockerClose(item);
    item.Val5 = 0;
    _TIMEEND;
    return 0;
}

bool LockerClose(Item& item)   // export
{
    if(!item.LockerClose())
        return false;
	if(!item.Proto.Container_Changeble)
		return false;
    if(IsMultihex(item))
        MultihexClose(item);
    Map@ map = GetMap(item.MapId);
    if(!valid(map))
        return true;
    string sound = item.GetType() == ITEM_TYPE_DOOR ? "SCDOORSA.ACM" : "ICCNTNRA.ACM";
    sound.rawSet(7, item.Proto.SoundId );
    map.PlaySound(sound, item.HexX, item.HexY, LOCKER_SOUND_RADIUS);
    return true;
}

bool LockerOpen(Item& item)   // export
{
    if(!item.LockerOpen())
        return false;
	if(!item.Proto.Container_Changeble)
		return false;
    if(IsMultihex(item))
        MultihexOpen(item);
    Map@ map = GetMap(item.MapId);
    if(!valid(map))
        return true;
    string sound = item.GetType() == ITEM_TYPE_DOOR ? "SODOORSA.ACM" : "IOCNTNRA.ACM";
    sound.rawSet(7, item.Proto.SoundId );
    map.PlaySound(sound, item.HexX, item.HexY, LOCKER_SOUND_RADIUS);
    return true;
}

void LockerBudge(Item& item)   // export
{
    Map@ map = GetMap(item.MapId);
    if(!valid(map))
        return;
    string sound = item.GetType() == ITEM_TYPE_DOOR ? "SLDOORSA.ACM" : "ILCNTNRA.ACM";
    sound.rawSet(7, item.Proto.SoundId );
    map.PlaySound(sound, item.HexX, item.HexY, LOCKER_SOUND_RADIUS);
}

void lockthedoor(Item& door, bool firstTime)
{
	uint16 lockerComplex;
	
	door.Val8 = SPECIAL_ITEM_DOOR_NPC_SCRIPT; //door will be openable by npcs, when locker is taken of
	
	if(firstTime) //Generatiing the map, regen command
	{
		if(door.Val0 <= 0 || door.Val1 <= 0 //when val is too low
		|| door.Val0 > 250 || door.Val1 > 250 //when val is too high
		|| door.Val0 > door.Val1) //when min value is higher than max value
		{
			lockerComplex = Random(150, 200); // default LockerComplexity is here
		}
		else
		{
			lockerComplex = Random(door.Val0, door.Val1); // precized LockerComplexity is here
		}
		door.LockerId = Random(98989, 989898);
		door.LockerComplexity = lockerComplex;
	}
}

bool IsMovableLocker(uint16 pid)
{
	return pid == PID_MOVABLE_AMMO_BOX_L1 || pid == PID_MOVABLE_AMMO_BOX_S1
		|| pid == PID_MOVABLE_POOR_BOX || pid == PID_MOVABLE_CHEST
		|| pid == PID_MOVABLE_CRATE || pid == PID_MOVABLE_FOOTLOCKER1
		|| pid == PID_MOVABLE_LOCKER1 || pid == PID_MOVABLE_SAFE
		|| pid == PID_MOVABLE_FRIDGE ;
}
