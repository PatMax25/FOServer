//
// FOnline: 2238
// Rotators
//
// dialog_altruist.fos
//

#include "_macros.fos"

import void DropDrugEffects(Critter& cr) from "drugs";
import bool SupportPerkCheck(Critter& cr, uint perk) from "perks";
import void PerkUp(Critter& cr, uint perk, int fromlevel) from "perks";

void init_altruist(Critter& altruist, bool firstTime)
{
	//Set SPECIAL
	altruist.ParamBase[ST_AGILITY] = 10;
	altruist.ParamBase[ST_LUCK] = 10;
	altruist.ParamBase[ST_CRITICAL_CHANCE] = 95;
	altruist.ParamBase[ST_ACTION_POINTS] = 1000;
	
	//Set combat skills
	altruist.ParamBase[SK_SMALL_GUNS] = 300;
	altruist.ParamBase[SK_BIG_GUNS] = 300;
	altruist.ParamBase[SK_ENERGY_WEAPONS] = 300;
	altruist.ParamBase[SK_UNARMED] = 300;
	//Set support skills
	altruist.ParamBase[SK_DOCTOR] = 300;
	altruist.ParamBase[SK_FIRST_AID] = 300;
	//Other params
	altruist.ParamBase[ST_NORMAL_RESIST] = 95;
	altruist.ParamBase[ST_LASER_RESIST] = 95;
	altruist.ParamBase[ST_FIRE_RESIST] = 95;
	altruist.ParamBase[ST_PLASMA_RESIST] = 95;
	altruist.ParamBase[ST_ELECTRO_RESIST] = 95;
	altruist.ParamBase[ST_EXPLODE_RESIST] = 95;
	//Modes
	_CritSetMode(altruist, MODE_NO_STEAL);
    _CritSetMode(altruist, MODE_NO_DROP);
    _CritSetMode(altruist, MODE_NO_LOOT);
	_CritSetMode(altruist, MODE_UNLIMITED_AMMO);
    _CritSetMode(altruist, MODE_NO_BARTER);
	//Replication
	/*altruist.Wait(1000);
	altruist.ParamBase[ST_REPLICATION_TIME] = 15;*/
	CreateTimeEvent(AFTER(REAL_SECOND(2)), "e_ChangeReplication", altruist.Id, false);
}

uint e_ChangeReplication(array<uint>@ values)
{
	Critter@ altruist = GetCritter(values[0]);
	if(!valid(altruist)) return 0;
	
	altruist.ParamBase[ST_REPLICATION_TIME] = 15;
	
	return 0;
}

bool d_CanTakePerk(Critter& cr, Critter@ npc, int val)
{
    return SupportPerkCheck(cr, val);
}

void r_GivePerk(Critter& cr, Critter@ npc, int val)
{
    if(SupportPerkCheck(cr, val))
        cr.ParamBase[val] += 1;
}

void r_Give(Critter& player, Critter@ npc, int val)
{
    switch(val)
    {
    case 0:
    {
        int level = player.Param[ST_LEVEL];
		if(level > 149 && player.GetAccess() == ACCESS_CLIENT)
        {
            player.Say(SAY_NORM_ON_HEAD, "Wait, it can't be that good.");
            return;
        }
        level++;
        int exp = level * (level - 1) * 500;
        player.ParamBase[ST_EXPERIENCE] += (exp - player.ParamBase[ST_EXPERIENCE]);
        return;
    }
    case 1:
    {
        int level = player.Param[ST_LEVEL];
		if(level > 147 && player.GetAccess() == ACCESS_CLIENT)
        {
            player.Say(SAY_NORM_ON_HEAD, "No, wait.");
            return;
        }
        level += 3;
        int exp = level * (level - 1) * 500;
        player.ParamBase[ST_EXPERIENCE] += (exp - player.ParamBase[ST_EXPERIENCE]);
        return;
    }
    case 2:
        player.AddItem(41, 100000);
        break;
    case 3:
	{
        for(uint i = 0; i < REPUTATION_COUNT; i++)
            if(player.Reputation[i] != 0)
                player.ReputationBase[i] = 0;
		if(player.Param[KARMA_GRAVE_DIGGER] != 0) player.ParamBase[KARMA_GRAVE_DIGGER] = 0;
		if(player.Param[KARMA_CHILDKILLER] != 0) player.ParamBase[KARMA_CHILDKILLER] = 0;		
        break;
	}
    case 4:
        DropDrugEffects(player);
        break;
    default:
    }
}
