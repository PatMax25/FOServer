

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;  

import void HideVolumeIndicator()from"client_container_addons";
import void SetVolumeIndicator(uint pid)from"client_container_addons";
import void SetContainerBodyId(uint cId,uint bId)from"client_container_addons";

uint8 lastMode=0;

void SetLastMode(uint8 mode)
{
	lastMode=mode;
}  

void critter_action(bool localCall,CritterCl&cr,int action,int actionExt,ItemCl@item)
{
	if(cr.IsChosen()&&cr.IsBusy())
	return;
	
	if(cr.IsChosen())
	{
		array<uint>actions;
		uint cnt=GetChosenActions(actions);
		if(cnt!=0)
		{
			if(actions[0]==10)
			{
				HideVolumeIndicator();
				SetContainerBodyId(0,0);
			}
			else if(actions[0]==14)
			{
				SetVolumeIndicator(actions[1]);
				
				if((@item!=null))
				SetContainerBodyId(item.Id,0);
				else
				SetContainerBodyId(0,0);
			}
			else if(actions[0]==11&&actions[2]==((210)))
			{
				ItemCl@item=GetItem(actions[3]);
				if((@item!=null))
				{
					SetVolumeIndicator(item.GetProtoId());
					SetContainerBodyId(item.Id,0);
				}
				else
				SetContainerBodyId(0,0);
			}
			else if(actions[0]==11&&actions[2]==(209))
			{
				ItemCl@item=GetItem(actions[3]);
				if((@item!=null))
				{
					SetVolumeIndicator(item.GetProtoId());
					SetContainerBodyId(item.Id,0);
				}
				else
				SetContainerBodyId(0,0);
			}
			else if(actions[0]==15&&actions[2]==0)
			{
				HideVolumeIndicator();
				SetContainerBodyId(0,actions[1]);
			}
		}
		
		if((7)==action)
		{
			ItemCl@item=cr.GetItem(0,(1));
			if((@item!=null)&&lastMode!=0)
			{
				item.SetMode(lastMode);
				lastMode=0;
			}
		}
	}
	if(cr.IsChosen())
	{
		if(cr.IsAnimPlaying())
		{
			array<uint>actions;
			uint cnt=GetChosenActions(actions);
			if(actions.length()>0)
			{
				uint[]action={0,0,0,0,0,0,0};
				SetChosenActions(action);
			}
			
		}
		
	}
	
	if((7)==action)
	{
		ItemCl@item=cr.GetItem(0,(1));
		if((@item!=null)&&lastMode!=0)
		{
			item.SetMode(lastMode);
			lastMode=0;
		}
	}    
	
	if(cr.IsChosen()&&!localCall)
	{
		switch(action)
		{
			case(2):
			case(3):
			case(4):
			case(5):
			case(6):
			case(7):
			case(8):
			case(9):
			case(10):
			case(11):
			return;
			default:
			break;
		}
	}
	
	uint8 mode=0;
	const ProtoItem@proto=((@item!=null)?item.Proto:cr.GetSlotProto((1),mode));
	
	if((action>=(2)&&action<=(11))||action==(17))
	cr.Wait(__Breaktime);
	
	switch(action)
	{
		case(0): 
		
		break;
		case(1): 
		
		break;
		case(2):
		if(cr.IsLife())
		{
			uint8 fromSlot=actionExt;
			uint8 toSlot=item.CritSlot;
			
			cr.ClearAnim();
			
			if(toSlot==(1))
			cr.Animate(0,(20),item);
			else if(fromSlot==(1))
			cr.Animate(0,(21),item);
			else
			cr.Animate(0,(29));
		}
		break;
		case(3):
		break;
		case(4):
		if(cr.IsLife()&&(@proto!=null))
		{
			cr.ClearAnim();
			
			if(proto.Type==(3)&&(((proto.Flags)&((0x01000000)))!=0)&&cr.IsAnimAviable(proto.Weapon_Anim1,proto.Weapon_Anim2_0))
			cr.Animate(proto.Weapon_Anim1,proto.Weapon_Anim2_0,item);
			else
			cr.Animate(0,(28),item);
		}
		break;
		case(5):
		if(cr.IsLife())
		{
			cr.ClearAnim();
			cr.Animate(0,(27));
		}
		break;
		case(6):
		if(cr.IsLife()&&(@proto!=null))
		{
			int use=actionExt&0xF;
			int aim=(actionExt>>4)&0xF;
			bool fail=((actionExt>>8)&1)!=0;
			
			cr.ClearAnim();
			cr.Animate(0,(22));
			
			PlaySound('W','A',((use)==0?proto.Weapon_SoundId_0:((use)==1?proto.Weapon_SoundId_1:((use)==2?proto.Weapon_SoundId_2:0))),use!=1?'1':'2');
			
			cr.Animate(0,((use)==0?proto.Weapon_Anim2_0:((use)==1?proto.Weapon_Anim2_1:((use)==2?proto.Weapon_Anim2_2:0))),item);
			
			if(fail)
			cr.Animate(0,(72),item);
			else
			cr.Animate(0,(23));
		}
		break;
		case(7):
		if(cr.IsLife()&&(@proto!=null))
		{
			cr.ClearAnim();
			PlaySound('W','R',proto.Weapon_SoundId_0,'1');
			cr.Animate(item.Proto.Weapon_Anim1,(30),item);
		}
		break;
		case(8):
		if(cr.IsLife()&&actionExt!=(208))
		{
			cr.ClearAnim();
			cr.Animate(0,(28));
		}
		break;
		case(9):
		if(cr.IsLife()&&(@proto!=null))
		{
			bool isGround=(proto.Type>=(1)&&proto.Type<=(7)&&item.GetType()!=(13));
			if(proto.Type==(8))
			isGround=proto.GroundLevel;
			cr.ClearAnim();
			cr.Animate(0,isGround?(27):(28));
		}
		break;
		case(10):
		if(cr.IsLife())
		{
			cr.ClearAnim();
			switch(actionExt)
			{
				case 0:
				cr.Animate(0,(35));
				break;
				case 1:
				cr.Animate(0,(36));
				break;
				case 2:
				cr.Animate(0,(37));
				break;
				default:
				break;
			}
		}
		break;
		case(11):
		if(cr.IsLife())
		{
			cr.ClearAnim();
			int transferType=actionExt/10;
			int directionType=actionExt%10;
			
			if(transferType==(2)||transferType==(4))
			cr.Animate(0,(27));
			else
			cr.Animate(0,(28));
		}
		break;
		case(13):
		if(!cr.IsAnimPlaying()&&cr.IsLife())
		{
			cr.Animate(0,actionExt==0?(70):(71));
		}
		break;
		case(14):
		if(!cr.IsAnimPlaying())
		{
			if(cr.IsLife())
			cr.Animate(0,actionExt==0?(72):(73));
			else if(cr.IsKnockout())
			cr.Animate(0,actionExt==0?(90):(91));
		}
		else
		{      
			
		}
		break;
		case(15):
		if(cr.IsLife())
		{
			cr.ClearAnim();
			cr.Animate(0,actionExt==0?(72):(73));
		}
		else if(cr.IsKnockout())
		{
			cr.ClearAnim();
			cr.Animate(0,actionExt==0?(90):(91));
		}
		break;
		case(16):
		if(!cr.IsKnockout())
		{
			cr.ClearAnim();
			cr.Animate(0,actionExt);
		}
		break;
		case(17):
		if(cr.IsKnockout())
		{
			cr.ClearAnim();
			cr.Animate(0,actionExt);
		}
		break;
		case(18):
		if(cr.IsLife()&&!cr.IsAnimPlaying())
		{
			cr.Animate(0,(24));
		}
		break;
		case(19):
		if(!cr.IsDead())
		{
			cr.ClearAnim();
			cr.Animate(0,actionExt);
		}
		break;
		case(20):
		break;
		case(21):
		break;
		case(22):
		if(!cr.IsChosen())
		{
			cr.ClearAnim();
			cr.Animate(0,(88));
		}
		break;
		case(23):
		break;
		default:
		break;
	}
} 

void animation2d_process(bool animateStay,CritterCl&cr,uint anim1,uint anim2,ItemCl@item)
{
	if(!animateStay)
	PlayAnimSound(cr.CrType,cr.Param[(71)],anim1,anim2);
}  

void animation3d_process(bool animateStay,CritterCl&cr,uint anim1,uint anim2,ItemCl@item)
{
	if(!animateStay)
	PlayAnimSound(cr.CrType,cr.Param[(71)],anim1,anim2);                                                                                                                                                                                                                                                   
	
}                                                                                                                                                                                                                                                                                                                                                                                                   

string@_disguise999=null;
string@critter_animation(int animType,uint crType,uint anim1,uint anim2,uint&pass,uint&flags,int&ox,int&oy)
{
	if(crType==999)
	return(_disguise999);
	return null;
}  

void disguise999(int,int,int,string@str,array<int>@)
{
	if((@str!=null)&&str.length()>0)
	{
		@_disguise999="art\\"+str;
		Message("disguise999=<"+_disguise999+">");
	}
	else
	{
		@_disguise999=null;
		Message("disguise999=<<removed>>");
	}
	uint zerro=0;
	int zero=0;
	critter_animation(int(4),999,0,0,zerro,zerro,zero,zero);
}    

bool critter_animation_substitute(int animType,uint crTypeBase,uint anim1Base,uint anim2Base,uint&crType,uint&anim1,uint&anim2)
{
	
	if((anim1&(0x1000))!=0)
	{
		anim1^=(0x1000);
		return true;
	} 
	
	if(crTypeBase!=0)
	{
		uint crTypeAlias=GetCritterAlias(crTypeBase);
		if(crType==crTypeBase&&crType!=crTypeAlias)
		{
			switch(anim2)
			{
				case(113):
				case(114):
				case(118):
				case(119):
				crType=crTypeAlias;
				return true;
				default:
				break;
			}
		}
	}
	crType=crTypeBase; 
	
	if((anim1&(0x000000FF))==(1))
	{
		bool swapped=true;
		switch(anim2)
		{
			case(4):
			anim2=(3);
			break;
			case(5):
			anim2=(3);
			break;
			case(6):
			anim2=(5);
			break;
			case(7):
			anim2=(3);
			break;
			case(8):
			anim2=(7);
			break;
			case(27):
			anim2=(28);
			break;
			case(29):
			anim2=(28);
			break;
			default:
			swapped=false;
			break;
		}
		if(swapped)
		return true;
	} 
	
	bool swapped=true;
	switch(anim2)
	{
		case(2):
		anim2=(1);
		break;
		case(41):
		anim2=(1);
		break;
		case(26):
		anim2=(28);
		break;
		case(44):
		anim2=(43);
		break;
		case(45):
		anim2=(44);
		break;
		case(46):
		anim2=(43);
		break;
		case(47):
		anim2=(46);
		break;
		case(48):
		anim2=(46);
		break;
		case(51):
		anim2=(49);
		break;
		case(50):
		anim2=(49);
		break;
		case(52):
		anim2=(51);
		break;
		case(56):
		anim2=(55);
		break;
		case(55):
		anim2=(54);
		break;
		case(57):
		anim2=(43);
		break;
		case(58):
		anim2=(54);
		break;
		case(59):
		anim2=(28);
		break;
		case(53):
		anim2=(43);
		break;
		case(30):
		anim2=(28);
		break;
		case(31):
		anim2=(30);
		break;
		case(71):
		anim2=(70);
		break;
		case(73):
		anim2=(72);
		break;
		case(75):
		anim2=(74);
		break;
		case(77):
		anim2=(76);
		break;
		case(79):
		anim2=(78);
		break;
		case(81):
		anim2=(80);
		break;
		case(35):
		anim2=(27);
		break;
		case(36):
		anim2=(28);
		break;
		case(37):
		anim2=(43);
		break;
		case(20):
		anim2=(28);
		break;
		case(21):
		anim2=(28);
		break;
		
		case(83):
		anim2=(82);
		break;
		case(85):
		anim2=(84);
		break;
		case(87):
		anim2=(86);
		break;
		case(89):
		anim2=(88);
		break;
		case(101):
		anim2=(100);
		break;
		case(91):
		anim2=(90);
		break;
		case(93):
		anim2=(92);
		break;
		case(95):
		anim2=(94);
		break;
		
		case(102):
		anim2=(82);
		break;
		case(103):
		anim2=(83);
		break;
		case(110):
		case(111):
		case(112):
		case(113):
		case(114):
		case(115):
		case(116):
		case(117):
		case(118):
		anim2=(102);
		break;
		case(119):
		anim2=(118);
		break;
		
		default:
		swapped=false;
		break;
	}
	if(swapped)
	return true; 
	
	anim2=anim2Base; 
	
	uint flags=anim1&(0xFFFFFF00);
	anim1&=(0x000000FF);
	switch(anim1)
	{
		case(4):
		anim1=(1);
		break;
		case(5):
		anim1=(4);
		break;
		case(6):
		anim1=(5);
		break;
		case(7):
		anim1=(4);
		break;
		case(8):
		anim1=(1);
		break;
		case(9):
		anim1=(8);
		break;
		case(10):
		anim1=(9);
		break;
		case(15):
		anim1=(10);
		break;
		case(12):
		anim1=(15);
		break;
		case(13):
		anim1=(12);
		break;
		case(14):
		anim1=(13);
		break;
		case(11):
		anim1=(15);
		break;
		case(16):
		anim1=(4);
		break;
		case(17):
		anim1=(4);
		break;
		case(18):
		anim1=(6);
		break;
		case(19):
		anim1=(4);
		break;
		default:
		return false;
	}
	anim1|=flags;
	
	return true;
}                                                          

bool critter_animation_fallout(uint crType,uint&anim1,uint&anim2,uint&anim1ex,uint&anim2ex,uint&flags)
{
	
	anim1&=(0x000000FF); 
	
	switch(anim1)
	{
		case(1):
		anim1=(1);
		break;
		case(4):
		anim1=(4);
		break;
		case(5):
		anim1=(5);
		break;
		case(6):
		anim1=(6);
		break;
		case(7):
		anim1=(7);
		break;
		case(8):
		anim1=(8);
		break;
		case(9):
		anim1=(9);
		break;
		case(10):
		anim1=(10);
		break;
		case(11):
		anim1=(11);
		break;
		case(12):
		anim1=(12);
		break;
		case(13):
		anim1=(13);
		break;
		case(14):
		anim1=(11);
		break;
		case(15):
		anim1=(11);
		break;
		case(16):
		anim1=(4);
		break;
		case(17):
		anim1=(4);
		break;
		case(18):
		anim1=(5);
		break;
		case(19):
		anim1=(1);
		break;
		default:
		anim1=(1);
		break;
	} 
	
	switch(anim2)
	{
		case(1):
		anim2=(1);
		flags|=(0x01);
		break;
		case(2):
		anim2=(1);
		flags|=(0x01);
		break;
		case(3):
		anim2=(2);
		break;
		case(4):
		anim2=(2);
		break;
		case(5):
		anim2=(20);
		anim1=(1);
		break;
		case(6):
		anim2=(20);
		anim1=(1);
		break;
		case(20):
		anim2=(3);
		break;
		case(21):
		anim2=(4);
		break;
		case(22):
		anim2=(8);
		break;
		case(23):
		anim2=(9);
		break;
		case(24):
		anim2=(1);
		break;
		
		case(27):
		anim2=(11);
		anim1=(1);
		break;
		case(28):
		anim2=(12);
		anim1=(1);
		break;
		case(29):
		anim2=(12);
		anim1=(1);
		break;
		case(35):
		anim2=(11);
		anim1=(1);
		break;
		case(36):
		anim2=(12);
		anim1=(1);
		break;
		case(37):
		anim2=(17);
		anim1=(1);
		break;
		case(41):
		anim2=(1);
		flags|=(0x01);
		break;
		case(43):
		anim2=(17);
		anim1=(1);
		break;
		case(46):
		anim2=(18);
		anim1=(1);
		break;
		case(49):
		anim2=(6);
		break;
		case(50):
		anim2=(6);
		break;
		case(51):
		anim2=(7);
		break;
		case(52):
		anim2=(7);
		break;
		case(54):
		anim2=(10);
		break;
		case(55):
		anim2=(11);
		break;
		case(56):
		anim2=(11);
		break;
		case(58):
		anim2=(12);
		break;
		case(57):
		anim2=(17);
		anim1=(1);
		break;
		case(53):
		anim2=(anim1==(1)?(19):(13));
		break;
		case(70):
		anim2=(anim1==(1)?(14):(5));
		break;
		case(71):
		anim2=(anim1==(1)?(14):(5));
		break;
		case(72):
		anim2=(15);
		break;
		case(73):
		anim2=(16);
		break;
		case(74):
		anim2=(15);
		break;
		case(75):
		anim2=(16);
		break;
		case(82):
		anim2=(1);
		anim1=(2);
		break;
		case(83):
		anim2=(2);
		anim1=(2);
		break;
		case(88):
		anim2=(10);
		anim1=(3);
		break;
		case(89):
		anim2=(8);
		anim1=(3);
		break;
		case(100):
		anim2=(15);
		anim1=(2);
		break;
		case(101):
		anim2=(16);
		anim1=(2);
		break;
		case(110):
		anim2=(4);
		anim1=(2);
		break;
		case(111):
		anim2=(6);
		anim1=(2);
		break;
		case(112):
		anim2=(7);
		anim1=(2);
		break;
		case(113):
		anim2=(8);
		anim1=(2);
		break;
		case(114):
		anim2=(11);
		anim1=(2);
		break;
		case(115):
		anim2=(9);
		anim1=(2);
		break;
		case(116):
		anim2=(13);
		anim1=(2);
		break;
		case(117):
		anim2=(12);
		anim1=(2);
		break;
		
		case(86):
		anim2=(1);
		anim1=(2);
		flags|=(0x02);
		break;
		case(87):
		anim2=(2);
		anim1=(2);
		flags|=(0x02);
		break;
		
		case(118):
		anim2=(5);
		anim1=(2);
		break;
		case(119):
		anim2=(14);
		anim1=(2);
		anim2ex=(5);
		anim1ex=(2);
		break;
		
		case(102):
		anim1=(2);
		anim1ex=(2);
		anim2=(1);
		anim2ex=(15);
		break;
		case(103):
		anim1=(2);
		anim1ex=(2);
		anim2=(2);
		anim2ex=(16);
		break;
		case(59):
		case(30):
		case(31):
		anim1ex=anim1;
		anim2=(8);
		anim2ex=(9);
		break;                    
		
		default:
		return false;
	}
	return true;
} 

void PlayAnimSound(uint crType,int gender,uint anim1,uint anim2)
{
	if(anim2==(3)||anim2==(4)||anim2==(5)||
	anim2==(6)||anim2==(7)||anim2==(8))
	return;
	
	bool isFemale=gender==(1);
	int animType=GetCritterAnimType(crType);
	string crTypeSound=GetCritterSoundName(crType); 
	
	anim1&=(0x000000FF);
	
	if(animType==(0))
	{
		
		uint fAnim1=anim1,fAnim2=anim2,fAnim1ex=0,fAnim2ex=0,fFlags=0;
		if(!critter_animation_fallout(crType,fAnim1,fAnim2,fAnim1ex,fAnim2ex,fFlags)||fFlags!=0)
		return; 
		
		const string abc="_abcdefghijklmnopqrstuvwxyz0123456789";
		string sound=crTypeSound;
		sound.rawResize(sound.rawLength()+1);
		sound.rawSet(sound.rawLength()-1,abc.rawGet(fAnim1));
		sound.rawResize(sound.rawLength()+1);
		sound.rawSet(sound.rawLength()-1,abc.rawGet(fAnim2));
		sound+=".acm"; 
		
		if(sound.rawGet(0)=='h'&&sound.rawGet(1)=='a')
		sound.rawSet(1,(isFemale?'f':'m')); 
		
		if(PlaySound(sound))
		return; 
		
		if(sound.rawGet(0)=='h')
		{
			
			for(uint i=2,j=crTypeSound.rawLength();i<j;i++)
			sound.rawSet(i,'x');
			if(PlaySound(sound))
			return; 
			
			if(sound.rawGet(1)=='f')
			{
				sound.rawSet(1,'m');
				if(PlaySound(sound))
				return;
			}
		}
	}
	else
	{
		uint sexPos=crTypeSound.rawLength()-1;
		if(crTypeSound.rawGet(sexPos)=='U')
		crTypeSound.rawSet(sexPos,(isFemale?'F':'M'));
		
		for(uint pass=0;pass<4;pass++)
		{
			if(pass==2)
			{
				if(crTypeSound.rawGet(sexPos)=='I')
				break;
				crTypeSound.rawSet(sexPos,'U');
			}
			
			string sound=crTypeSound+"_";
			
			if(pass==0||pass==2)
			{
				switch(anim1)
				{
					case(1):
					sound+="Unarmed";
					break;
					case(4):
					sound+="Knife";
					break;
					case(5):
					sound+="Club";
					break;
					case(6):
					sound+="Hammer";
					break;
					case(7):
					sound+="Spear";
					break;
					case(8):
					sound+="Pistol";
					break;
					case(9):
					sound+="SMG";
					break;
					case(10):
					sound+="Shootgun";
					break;
					case(11):
					sound+="HeavyRifle";
					break;
					case(12):
					sound+="Minigun";
					break;
					case(13):
					sound+="RocketLauncher";
					break;
					case(14):
					sound+="Flamer";
					break;
					case(15):
					sound+="Rifle";
					break;
					case(16):
					sound+="Sword";
					break;
					case(17):
					sound+="LongSword";
					break;
					case(18):
					sound+="Axe";
					break;
					case(19):
					sound+="Bow";
					break;
					default:
					break;
				}
			}
			
			switch(anim2)
			{
				case(1):
				sound+="Idle";
				break;
				case(2):
				sound+="IdleStunned";
				break;
				case(3):
				sound+="Walk";
				break;
				case(4):
				sound+="Limp";
				break;
				case(5):
				sound+="Run";
				break;
				case(6):
				sound+="PanicRun";
				break;
				case(7):
				sound+="SneakWalk";
				break;
				case(8):
				sound+="SneakRun";
				break;
				case(10):
				sound+="Stand";
				break;
				case(11):
				sound+="Crouch";
				break;
				case(12):
				sound+="Prone";
				break;
				case(20):
				sound+="ShowWeapon";
				break;
				case(21):
				sound+="HideWeapon";
				break;
				case(22):
				sound+="PrepareWeapon";
				break;
				case(23):
				sound+="TurnoffWeapon";
				break;
				case(24):
				sound+="Fidget";
				break;
				case(26):
				sound+="Climbing";
				break;
				case(27):
				sound+="Pickup";
				break;
				case(28):
				sound+="Use";
				break;
				case(29):
				sound+="SwitchItems";
				break;
				case(30):
				sound+="Reload";
				break;
				case(31):
				sound+="Repair";
				break;
				case(35):
				sound+="Loot";
				break;
				case(36):
				sound+="Steal";
				break;
				case(37):
				sound+="Push";
				break;
				case(40):
				sound+="BeginCombat";
				break;
				case(41):
				sound+="IdleCombat";
				break;
				case(42):
				sound+="EndCombat";
				break;
				case(43):
				sound+="PunchRight";
				break;
				case(44):
				sound+="PunchLeft";
				break;
				case(45):
				sound+="PunchCombo";
				break;
				case(46):
				sound+="KickHi";
				break;
				case(47):
				sound+="KickLo";
				break;
				case(48):
				sound+="KickCombo";
				break;
				case(49):
				sound+="Thrust1H";
				break;
				case(50):
				sound+="Thrust2H";
				break;
				case(51):
				sound+="Swing1H";
				break;
				case(52):
				sound+="Swing2H";
				break;
				case(53):
				sound+="Throw";
				break;
				case(54):
				sound+="Single";
				break;
				case(55):
				sound+="Burst";
				break;
				case(56):
				sound+="Sweep";
				break;
				case(57):
				sound+="Butt";
				break;
				case(58):
				sound+="Flame";
				break;
				case(59):
				sound+="NoRecoil";
				break;
				case(70):
				sound+="DodgeFront";
				break;
				case(71):
				sound+="DodgeBack";
				break;
				case(72):
				sound+="DamageFront";
				break;
				case(73):
				sound+="DamageBack";
				break;
				case(74):
				sound+="DamageMulFront";
				break;
				case(75):
				sound+="DamageMulBack";
				break;
				case(76):
				sound+="WalkDamageFront";
				break;
				case(77):
				sound+="WalkDamageBack";
				break;
				case(78):
				sound+="LimpDamageFront";
				break;
				case(79):
				sound+="LimpDamageBack";
				break;
				case(80):
				sound+="RunDamageFront";
				break;
				case(81):
				sound+="RunDamageBack";
				break;
				case(82):
				sound+="KnockFront";
				break;
				case(83):
				sound+="KnockBack";
				break;
				case(84):
				sound+="LaydownFront";
				break;
				case(85):
				sound+="LaydownBack";
				break;
				case(86):
				sound+="IdleProneFront";
				break;
				case(87):
				sound+="IdleProneBack";
				break;
				case(88):
				sound+="StandupFront";
				break;
				case(89):
				sound+="StandupBack";
				break;
				case(90):
				sound+="DamageProneFront";
				break;
				case(91):
				sound+="DamageProneBack";
				break;
				case(92):
				sound+="DamageMulProneFront";
				break;
				case(93):
				sound+="DamageMulProneBack";
				break;
				case(94):
				sound+="TwitchProneFront";
				break;
				case(95):
				sound+="TwitchProneBack";
				break;
				case(100):
				sound+="DeadProneFront";
				break;
				case(101):
				sound+="DeadProneBack";
				break;
				case(102):
				sound+="DeadFront";
				break;
				case(103):
				sound+="DeadBack";
				break;
				case(110):
				sound+="DeadBloodySingle";
				break;
				case(111):
				sound+="DeadBloodyBack";
				break;
				case(112):
				sound+="DeadBurst";
				break;
				case(113):
				sound+="DeadPulse";
				break;
				case(114):
				sound+="DeadPulseDust";
				break;
				case(115):
				sound+="DeadLaser";
				break;
				case(116):
				sound+="DeadFused";
				break;
				case(117):
				sound+="DeadExplode";
				break;
				case(118):
				sound+="DeadBurn";
				break;
				case(119):
				sound+="DeadBurnRun";
				break;
				default:
				break;
			} 
			
			if(PlaySound(sound+".wav"))
			return; 
			
			uint len=0;
			int pos=findLast(sound,"Front");
			if(pos!=-1)
			len=5;
			else
			{
				pos=findLast(sound,"Back");
				if(pos!=-1)
				len=4;
				else
				continue;
			}
			sound.rawResize(sound.rawLength()-len);
			
			if(PlaySound(sound+".wav"))
			return;
		}
	}
}
