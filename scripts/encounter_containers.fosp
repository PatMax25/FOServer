

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

shared class Entire
{
	int Number;
	uint16 HexX;
	uint16 HexY;
	uint8 Direction;
};

uint ParseEntires(Map&map,array<Entire>&entires,int number)
{
	uint oldCount=entires.length();
	uint count=map.CountEntire(number);
	entires.resize(oldCount+count);
	
	for(uint i=0;i<count;i++)
	{
		Entire@ent=entires[oldCount+i];
		if(map.GetEntireCoords(number,i,ent.HexX,ent.HexY,ent.Direction)==false)
		return 0;
		ent.Number=number;
	}
	
	return count;
}

bool IsEntireFree(uint mappid,int number)
{
	Map@map=GetMapByPid(mappid,0);
	return IsEntireFree(map,number);
}

bool IsEntireFree(Map&map,int number)
{
	uint16 x,y;
	x=0;
	y=0;
	return GetEntireFreeHex(map,number,x,y);
}

bool GetEntireFreeHex(Map&map,int number,uint16&hx,uint16&hy,uint skip=0)
{
	uint count=map.CountEntire(number); 
	
	for(uint i=skip;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy)&&map.IsHexPassed(hx,hy))
		return true;
	}
	
	if(hx==0||hy==0||hx>=map.GetWidth()-1||hy>=map.GetHeight()-1)
	return false; 
	
	for(uint i=0;i<count;i++)
	{
		if(map.GetEntireCoords(number,i,hx,hy))
		{
			for(int x=-1;x<=1;x++)
			{
				for(int y=-1;y<=1;y++)
				{
					if(x==0&&y==0)
					continue;
					if(__MapHexagonal)
					{
						if((hx%2)==1&&((x==-1&&y==1)||(x==1&&y==1)))
						continue;
						if((hx%2)==0&&((x==-1&&y==-1)||(x==1&&y==-1)))
						continue;
					}
					
					if(map.IsHexPassed(hx+x,hy+y))
					{
						hx+=x;
						hy+=y;
						return true;
					}
				}
			}
		}
	}
	return false;
}

bool GetNearEntire(Map&map,int number,uint16&hx,uint16&hy)
{
	uint16 hxBase=hx;
	uint16 hyBase=hy;
	
	array<Entire>entires;
	uint count=ParseEntires(map,entires,number);
	if(count==0)
	return false;
	
	hx=entires[0].HexX;
	hy=entires[0].HexY;
	for(uint i=1;i<count;i++)
	{
		Entire@ent=entires[i];
		if(GetDistantion(hxBase,hyBase,ent.HexX,ent.HexY)<GetDistantion(hxBase,hyBase,hx,hy))
		{
			hx=ent.HexX;
			hy=ent.HexY;
		}
	}
	
	return true;
}                                                                                                                                                        

shared interface IItemSpawner
{
	IItemSpawner@Lock(uint16 min,uint16 max);
	IItemSpawner@SpawnTime(uint min,uint max);
	IItemSpawner@AddItem(uint16 pid,uint chance,uint min,uint max);
	IItemSpawner@AddItem(uint16 pid,uint chance);
	IItemSpawner@SetSeparate(bool separate);
	IItemSpawner@SetBonus(bool bonus);
	IItemSpawner@SetBonusLow(bool bonus);
	IItemSpawner@SetBonusOrNot(bool bonus);
	IItemSpawner@SetClearAtSpawn(bool clearSpawn);
	IItemSpawner@Clear();
}; 

import void MakeSpawnerContainer(Item&item,uint type)from"spawner_container";
import IItemSpawner@GetSpawner(uint num)from"spawner_container";
import IItemSpawner@MakeSpawner(uint num)from"spawner_container";                                                  

import void MakeMine(Item&mine,uint explodeOwner,uint complexity,uint hideSkill,uint bonusDamage,uint bonusRadius)from"explode";
import void MakeSpearTrap(Item&trap,uint complexity,uint hideSkill,uint spearcount)from"traps";
import void MakeGenericShotTrap(Item&trap,uint complexity,uint hideSkill,uint16 pid,uint dmgmin,uint dmgmax)from"traps";
import void MakeBearTrap(Item&trap,uint complexity,uint hideSkill,uint bonusDamage)from"traps";
import void MakeAlarmTrap(Item&trap,uint complexity,uint hideSkill,uint16 pid,uint8 min,uint8 max,uint16 bag,uint8 level,uint8 entire)from"traps";
import void ClearWalkTrap(Item&item)from"traps";   

import void SetWear(Item&item,int wearProcent)from"repair";
import void SetMinWear(Item&item,int wearProcent)from"repair";                  

uint GetContainerType(Map&map)
{
	return(1);
}

Entire@GetEntire(Map&map,uint type)
{
	array<Entire>entires;
	uint n=0;
	switch(type)
	{
		case(1):
		{
			n=ParseEntires(map,entires,(70));
			n+=ParseEntires(map,entires,(71));
			break;
		}
		case(2):
		{
			n=ParseEntires(map,entires,(70));
			break;
		}
	}
	if(n==0)
	return null;
	uint i=Random(0,n-1);
	return entires[i];
}

uint16 GetContainerPid(uint cont)
{
	switch(cont)
	{
		case(70):
		return(128);
		case(71):
		return(130);
		case(72):
		return Random((344),(345));
		default:
	}
	return 0;
}

uint GetSpawnerType(uint type)
{
	switch(type)
	{
		case(1):
		{
			uint n=Random(1,(10));
			if(n>(9))
			return(12);
			if(n>(7))
			return(11);
			return(10);
		}
		case(2):
		{
			uint n=Random(1,(10));
			if(n>(8))
			return(14);
			return(13);
		}
	}
	return(10);
}

uint GetTrapsLevel(uint spawner)
{
	switch(spawner)
	{
		case(10):
		return 15;
		case(11):
		return 30;
		case(12):
		return 60;
		case(13):
		case(14):
		default:
		return 0;
	}
	return 0;
}

uint RollFlags(uint type)
{
	uint ret=0;
	switch(type)
	{
		case(1):
		{
			if(Random(1,100)<=(40))
			{
				((ret)=(ret)|((0x1)));
				((ret)=(ret)|((0x2)));
			}
			break;
		}
		case(2):
		{
			if(Random(1,100)<=(40)/4)
			{
				((ret)=(ret)|((0x1)));
				((ret)=(ret)|((0x2)));
			}
		}
		default:
	}
	return ret;
}

void MakeTraps(Map&map,uint16 hx,uint16 hy,int trapslevel)
{
	trapslevel+=100;
	trapslevel>>=1;
	uint pid=(9850);
	Item@item=null;
	for(int i=-(5);i<=(5);i++)
	for(int j=-(5);j<=(5);j++)
	{
		if(i==0&&j==0)
		continue;
		int nx=hx+i;
		int ny=hy+j;
		if(!map.IsHexPassed(nx,ny))
		continue;
		if(GetDistantion(hx,hy,nx,ny)>(5))
		continue;
		if(Random(1,100)<=trapslevel)
		@item=map.AddItem(nx,ny,pid,1);
		else
		continue;
		((item.Flags)=(item.Flags)|((0x00020000)));
		
		(item.Val3)=Random(0,trapslevel*0.7);
		if(pid==(545))
		item.Val4=(Random(0,trapslevel));
		else
		(item.Val4)=Random(0,trapslevel);
	}
	
}  

void AddEncounterContainers(Map@map,array<Critter@>@critters)
{
	if(!(@map!=null))
	return;
	uint type=GetContainerType(map);
	if(type==(0))
	return;
	uint flags=RollFlags(type);
	if(!(((flags)&((0x1)))!=0))
	return; 
	
	Entire@ent=GetEntire(map,type);
	if(!(@ent!=null))
	{
		
		return;
	}
	
	uint16 pid=GetContainerPid(ent.Number);
	if(pid==0)
	{
		Log("ERR: map pid "+map.GetProtoId()+" gives container pid 0.");
		return;
	} 
	
	Item@item=map.AddItem(ent.HexX,ent.HexY,pid,1);
	if(!(@item!=null))
	return;
	int trapslevel=0; 
	
	if((((flags)&((0x2)))!=0))
	{
		uint spawner=GetSpawnerType(type);
		trapslevel=GetTrapsLevel(spawner);
		MakeSpawnerContainer(item,spawner);
		bool perk=false;
		for(uint i=0,j=critters.length();i<j;i++)
		if(critters[i].Param[(459)]>0)
		{
			perk=true;
			break;
		}
		if(perk)
		{
			array<Item@>items;
			for(uint i=0,j=item.GetItems(0,items);i<j;i++)
			{
				if(items[i].IsStackable())
				items[i].SetCount((items[i].GetCount()*25)/20);
				else if(Random(1,100)<=19)
				item.AddItem(items[i].GetProtoId(),1,0);
			}
		} 
		
		array<Item@>items;
		for(uint i=0,j=item.GetItems(0,items);i<j;i++)
		if(items[i].IsDeteriorable())
		{
			SetWear(items[i],Random(15,30));
			SetMinWear(items[i],Random(5,15));
		}
	}
	else
	trapslevel=5;
	if(trapslevel>=Random(1,100))
	MakeTraps(map,ent.HexX,ent.HexY,trapslevel);
	array<Item@>dummy;
	
}
