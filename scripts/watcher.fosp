

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                                                                                                                                                                      

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                          

void single(Critter&player,int p0,int p1,int p2,string@p3,int[]@p4){single(player,p0,p1,p2);}void single(Critter&player,int p0,int p1,int p2)
{
	if(p0==0)
	{
		player.Say((11),"Missing critter id");
		return;
	}
	
	__watcher(player,p0,(0));
}

void map(Critter&player,int p0,int p1,int p2,string@p3,int[]@p4){map(player,p0,p1,p2);}void map(Critter&player,int p0,int p1,int p2)
{
	__watcher(player,0,(1));
}

void event(Critter&player,int p0,int p1,int p2,string@p3,int[]@p4){event(player,p0,p1,p2);}void event(Critter&player,int p0,int p1,int p2)
{
	__watcher(player,0,(2));
}

void find(Critter&player,int p0,int p1,int p2,string@p3,int[]@p4){find(player,p0,p1,p2);}void find(Critter&player,int p0,int p1,int p2)
{
	array<Critter@>critters;
	
	if(p0==0)
	{
		player.GetMap().GetCritters(0,(0x0F)|(0x20),critters);
	}
	else if(p0==1)
	{
		array<Map@>maps;
		uint allmaps=GetAllMaps(0,maps);
		
		for(uint x=0;x<maps.length();x++)
		{
			if((@maps[x]!=null))
			{
				maps[x].GetCritters(0,(0x0F)|(0x20),critters);
			}
		}
	}
	else
	{
		player.Say((11),"Unknown find number ("+p0+")");
		return;
	}
	
	bool found=false;
	for(uint c=0;c<critters.length();c++)
	{
		if(critters[c].Param[((99))]==(5414))
		{
			found=true;
			string info;
			switch(critters[c].ParamBase[((98))])
			{
				case(0):
				info="single (master:"+critters[c].ParamBase[((90))]+", victim:"+critters[c].ParamBase[((91))]+")";
				break;
				case(1):
				info="map (master:"+critters[c].ParamBase[((90))]+")";
				break;
				case(2):
				info="event (master:"+critters[c].ParamBase[((90))]+")";
				break;
				default:
				info="unknown ("+critters[c].ParamBase[((98))]+")";
				break;
			}
			
			info+=" ["+critters[c].GetMapId()+"]";
			
			player.Say((11),"Watcher("+critters[c].Id+"): "+info);
		}
	}
	if(!found)
	{
		if(p0==0)
		{
			player.Say((11),"No watchers on current map.");
		}
		else if(p0==1)
		{
			player.Say((11),"No watchers found in world.");
		}
		return;
	}
}  

void __watcher(Critter&player,int p0,int p1)
{
	Critter@victim;
	
	if(player.GetMapId()==0)
	{
		player.Say((11),"No way!");
		return;
	}
	if(p1<(0)||p1>(2))
	{
		player.Say((11),"Invalid p1");
		return;
	}
	
	if(p1==(0))
	{
		@victim=GetCritter(p0);
		if(!(@victim!=null))
		{
			player.Say((11),"Victim don't exists ("+p0+")");
			return;
		}
		;
	}
	Critter@npc=AddNpc(player.GetMap(),(77),player.HexX,player.HexY,Random(0,5),0,"watcher@watcher_init",0,0,1,false,1);
	
	npc.ParamBase[((90))]=player.Id;
	if(p1==(0))
	npc.ParamBase[((91))]=p0;
	
	npc.ParamBase[((98))]=p1;
	
	npc.ParamBase[((99))]=(5414);
	
	if(p1==(0))
	watcher_report(npc,"Watching: "+victim.Name+" ("+victim.Id+")");
	else if(p1==(1))
	watcher_report(npc,"Watching all map ["+npc.GetMapId()+"]");
	else if(p1==(2))
	watcher_report(npc,"Watching event map ["+npc.GetMapId()+"]");
}

void watcher_init(Critter&npc,bool firstTime)
{
	if(firstTime)
	{
		
		(npc.ParamBase[(534)]=npc.Param[(534)]|((0x00008000)));
		(npc.ParamBase[(534)]=npc.Param[(534)]|((0x00010000)));
		
		npc.ParamBase[(101)]=1000;
		npc.ParamBase[(9)]=100;
		
		npc.ParamBase[(208)]=300;
		
		npc.ParamBase[(510)]=1;
		npc.ParamBase[(511)]=1;
		npc.ParamBase[(523)]=1;
		npc.ParamBase[(531)]=1;
		npc.ParamBase[(532)]=1;
		npc.ParamBase[(527)]=1;
		
		npc.ChangeCrType(56);
		
		npc.SetEvent((1),"watcher_finish");
		npc.SetEvent((15),"watcher_attack");
		npc.SetEvent((28),"watcher_someone_attack");
		npc.SetEvent((26),"watcher_someone_dead");
		
		if(npc.ParamBase[((98))]==(0)||npc.ParamBase[((98))]==(1))
		{
			npc.SetEvent((32),"watcher_someone_dropitem");
			npc.SetEvent((30),"watcher_someone_useitem");
		}
		npc.SetEvent((31),"watcher_someone_useskill");
	}
	return;
}

void watcher_report(Critter&npc,string what)
{
	Critter@master=GetCritter(npc.Param[((90))]);
	if(!(@master!=null))
	return;
	
	uint16 undef;
	uint16 hour=0;
	uint16 minute=0;
	uint16 seconds=0;
	uint16 miliseconds=0;
	GetTime(undef,undef,undef,undef,hour,minute,seconds,miliseconds);
	what=(hour<10?"0":"")+hour+":"+(minute<10?"0":"")+minute+":"+(seconds<10?"0":"")+seconds+"."+miliseconds+"> "+what;
	
	master.Say((11),what);
}

string watcher_ontext(Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	string text="on ";
	
	if((@onItem!=null))
	text+="item "+onItem.GetProtoId();
	else if((@onCritter!=null))
	text+=onCritter.Name;
	else if((@onScenery!=null))
	text+="scenery "+onScenery.ProtoId;
	else
	return("");
	
	return(text);
}  

void watcher_finish(Critter&npc,bool deleted)

{
	watcher_report(npc,"Watcher finished"+(deleted?" (npc deleted)":""));
}

bool watcher_attack(Critter&npc,Critter&victim)

{
	
	npc.ClearEnemyStack();
	npc.DropPlanes();
	return true;
}

void watcher_someone_attack(Critter&npc,Critter&sadist,Critter&victim)

{
	if(npc.ParamBase[((98))]==(0)&&(sadist.Id!=uint(npc.Param[((91))])))
	return;
	if((npc.ParamBase[((98))]==(2)||npc.ParamBase[((98))]==(1))&&
	(!sadist.IsPlayer()||!victim.IsPlayer()))
	return;
	
	watcher_report(npc,sadist.Name+" attacks "+victim.Name);
}

void watcher_someone_dead(Critter&npc,Critter&victim,Critter@sadist)

{
	if(npc.ParamBase[((98))]==(0)&&
	(sadist.Id!=uint(npc.Param[((91))])||victim.Id!=uint(npc.Param[((91))])))
	return;
	if(npc.ParamBase[((98))]==(1)&&!(sadist.IsPlayer()||victim.IsPlayer()))
	return;
	if(npc.ParamBase[((98))]==(2)&&!(sadist.IsPlayer()&&victim.IsPlayer()))
	return;
	
	watcher_report(npc,sadist.Name+" killed "+victim.Name);
}

void watcher_someone_dropitem(Critter&npc,Critter&fromCr,Item&item)

{
	if(npc.ParamBase[((98))]==(0)&&(fromCr.Id!=uint(npc.Param[((91))])))
	return;
	if(npc.ParamBase[((98))]==(1)&&!fromCr.IsPlayer())
	return;
	
	watcher_report(npc,fromCr.Name+" drops item "+item.GetProtoId()+(item.GetCount()>1?" ("+item.GetCount()+")":""));
}

void watcher_someone_useitem(Critter&npc,Critter&fromCr,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)

{
	if(npc.ParamBase[((98))]==(0)&&(fromCr.Id!=uint(npc.Param[((91))])))
	return;
	if(npc.ParamBase[((98))]==(1)&&(!fromCr.IsPlayer()||!onCritter.IsPlayer()))
	return;
	
	watcher_report(npc,fromCr.Name+" uses item "+item.GetProtoId()+" "+watcher_ontext(onCritter,onItem,onScenery));
}

void watcher_someone_useskill(Critter&npc,Critter&fromCr,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)

{
	if(npc.ParamBase[((98))]==(0)&&(fromCr.Id!=uint(npc.Param[((91))])))
	return;
	if(npc.ParamBase[((98))]==(1)&&(!fromCr.IsPlayer()||!onCritter.IsPlayer()))
	return;
	if(npc.ParamBase[((98))]==(2)&&!fromCr.IsPlayer())
	return;
	
	if(npc.ParamBase[((98))]!=(2))
	{
		string skillname=skill;
		switch(skill)
		{
			case(-1):
			skillname="pick from ground";
			break;
			case(-2):
			skillname="put in container";
			break;
			case(-3):
			skillname="take from container";
			break;
			case(-4):
			skillname="take all from container";
			break;
			case(-5):
			skillname="loot critter";
			break;
			case(-6):
			skillname="push critter";
			break;
			case(208):
			skillname="sneak";
			break;
			case(209):
			skillname="Robbery";
			break;
			case(210):
			skillname="Engineering";
			break;
			case(211):
			skillname="traps";
			break;
			case(206):
			skillname="first aid";
			break;
			case(207):
			skillname="doctor";
			break;
			case(212):
			skillname="science";
			break;
			case(213):
			skillname="repair";
			break;
		}
		watcher_report(npc,fromCr.Name+" uses "+skillname+" "+watcher_ontext(onCritter,onItem,onScenery));
	}
	else
	{
		if(skill==(212)&&(@onItem!=null))
		watcher_report(npc,fromCr.Name+" uses science on item "+onItem.GetProtoId());
	}
}
