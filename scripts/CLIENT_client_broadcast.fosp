

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}                                                           

shared interface IConfigVar
{
	string GetName();
	string GetValue();
	array<string>GetValueAsArray();
	array<string>GetValueAsArray(string&delimeter);
	void SetValue(int val);
	void SetValue(uint val);
	void SetValue(string&val);
	void SetValue(array<string>&val);
	void SetValue(array<string>&val,string&delimeter);
};

shared interface IConfigSection
{
	string GetName();
	bool AddVar(string&var,string&val);
	bool DeleteVar(string&var);
	bool DeleteVar(string&var,bool caseSensitive);
	IConfigVar@GetVar(string&var);
	IConfigVar@GetVar(string&varname,bool caseSensitive);
	void GetVars(array<string>&list);
	bool SetVar(string&varname,string val);
	bool VarExists(string&var);
	bool VarExists(string&var,bool caseSensitive);
};

shared interface IConfigFile
{
	bool IsVirtual();
	string GetName();
	bool AddSection(string&section);
	IConfigSection@GetSection(string&section);
	IConfigSection@GetSection(string&sectioname,bool caseSensitive);
	void GetSections(array<string>&list);
	bool SectionExists(string&section);
	bool SectionExists(string&section,bool caseSensitive);
};  

import IConfigFile@NewConfig(string&filename)from"config_file";
import bool LoadConfig(string&filename)from"config_file";
import bool SaveConfig(string&filename)from"config_file";
import bool UnloadConfig(string&filename)from"config_file";

import IConfigFile@GetConfigFile(string&filename)from"config_file";
import IConfigFile@GetConfigFile(string&filename,bool caseSensitive)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname)from"config_file";
import IConfigSection@GetConfigSection(string&filename,string&sectioname,bool caseSensitive)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname)from"config_file";
import IConfigVar@GetConfigVar(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import string@GetConfigValue(string&filename,string&section,string@varname)from"config_file";
import string@GetConfigValue(string&filename,string&sectioname,string@varname,bool caseSensitive)from"config_file";

import bool SetConfigValue(string&filename,string&sectioname,string@varname,string&value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,bool value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,int value)from"config_file";
import bool SetConfigValue(string&filename,string&sectioname,string@varname,uint value)from"config_file";                                                                                                                                                                                            

import uint COLOR_RGB_STRING(string&r,string&g,string&b)from"client_utils";
import uint COLOR_RGBA_STRING(string&r,string&g,string&b,string&a)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b,uint8&a)from"client_utils";

import string RandomString(uint8 length)from"client_utils";

import bool string2bool(string@text)from"client_utils";
import uint string2uint(string@text)from"client_utils";
import uint rgb_string2uint(string&text)from"client_utils";
import uint rgba_string2uint(string&text)from"client_utils";

import int string2int(string&text)from"client_utils";
import uint font_string2uint(string&text)from"client_utils";
import uint range_string2int(string&text,int&from,int&to)from"client_utils";
import uint range_string2uint(string&text,uint&from,uint&to)from"client_utils";
import void vis_string2bool(string&text,bool&head,bool&msgbox)from"client_utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";               

class CBroadcast
{
	int type;
	uint time;
	string message;
	uint extra;
	uint kind;
	
	CBroadcast(int type,int time,string message,uint extra)
	{
		this.type=type;
		this.time=time;
		this.message=message;
		this.extra=extra;
		
		;;
	}
	
	CBroadcast(int type,int time,string message,uint extra,uint kind)
	{
		this.type=type;
		this.time=time;
		this.message=message;
		this.extra=extra;
		this.kind=kind;
		
		;;
	}
};
array<CBroadcast>Broadcast;

int TimeToSeconds(uint&time)
{
	if((__FullSecond)>time)
	return(0);
	uint ret=(time-(__FullSecond));
	ret/=((1)*__TimeMultiplier);
	
	return int(ret);
}

int FindTimerTC(uint location)
{
	if(Broadcast.length()==0)
	return(-1);
	
	for(uint b=0;b<Broadcast.length();b++)
	{
		if(Broadcast[b].type==((3))&&Broadcast[b].extra==location)
		return(b);
	}
	return(-1);
}

int FindEventCT(uint location,uint kind)
{
	if(Broadcast.length()==0)
	return(-1);
	
	for(uint b=0;b<Broadcast.length();b++)
	{
		if(Broadcast[b].type==(9)&&Broadcast[b].extra==location&&Broadcast[b].kind==kind)
		return(b);
	}
	return(-1);
}

int FindInfluence(uint location)
{
	if(Broadcast.length()==0)
	return(-1);
	
	for(uint b=0;b<Broadcast.length();b++)
	{
		if(Broadcast[b].type==(4)&&Broadcast[b].extra==location)
		return(b);
	}
	return(-1);
}

void BroadcastProcess()
{
	if(Broadcast.length()==0)
	return;
	
	for(uint b=0;b<Broadcast.length();b++)
	{
		if((__FullSecond)>=Broadcast[b].time)
		{
			Broadcast.removeAt(b);
			;;
			;;
			return;
		}
	}
}

void BroadcastDraw()
{
	if(Broadcast.length()==0)
	return;
	
	CritterCl@chosen=GetChosen();
	if(!(@chosen!=null))
	return;
	
	uint lines=0;
	
	for(uint b=0;b<Broadcast.length();b++)
	{
		if(Broadcast[b].type==(1))
		{
			array<string@>@msg=split(Broadcast[b].message,"\n");
			int seconds=TimeToSeconds(Broadcast[b].time);
			int minutes=seconds/60;
			seconds=seconds%60;
			int hours=minutes/60;
			int days=hours/24;
			int weeks=days/7;
			string time=(minutes<10?"0":"")+minutes+":"+(seconds<10?"0":"")+seconds;
			string text=Broadcast[b].message;
			text=ReplaceText(text,"%COUNTDOWN%",time);
			text=ReplaceText(text,"%COUNTDOWN_HUMAN%",
			(weeks>0
			?weeks+" week"+(weeks>1?"s":"")+" "
			:(days>0
			?days+" day"+(days>1?"s":"")+" "
			:(hours>0
			?hours+" hour"+(hours>1?"s":"")+" "
			:(minutes>0
			?minutes+" minute"+(minutes>1?"s":"")+" "
			:"less than one minute")))));
			DrawText(text  
			
			,0,(50)+(lines*(12)),__ScreenWidth,
			(12)*msg.length(),(Broadcast[b].extra<=0?((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0xC8)&0xFF)))):Broadcast[b].extra),
			(5),(0x0004)|(0x0200));
			lines+=msg.length();
		}
	}
	
	for(uint b=0;b<Broadcast.length();b++)
	{
		if(Broadcast[b].type==(8))
		{
			array<string@>@msg=split(Broadcast[b].message,"\n");
			int seconds=TimeToSeconds(Broadcast[b].time);
			int minutes=seconds/60;
			seconds=seconds%60;
			int hours=minutes/60;
			int days=hours/24;
			int weeks=days/7;
			string time=(minutes<10?"0":"")+minutes+":"+(seconds<10?"0":"")+seconds;
			string text=Broadcast[b].message;
			text=ReplaceText(text,"%COUNTDOWN%",time);
			text=ReplaceText(text,"%COUNTDOWN_HUMAN%",
			(weeks>0
			?weeks+" week"+(weeks>1?"s":"")+" "
			:(days>0
			?days+" day"+(days>1?"s":"")+" "
			:(hours>0
			?hours+" hour"+(hours>1?"s":"")+" "
			:(minutes>0
			?minutes+" minute"+(minutes>1?"s":"")+" "
			:"less than one minute")))));
			DrawText(text  
			
			,0,(50)+(lines*(12)),__ScreenWidth,
			(12)*msg.length(),(Broadcast[b].extra<=0?0:Broadcast[b].extra),
			(5),(0x0004)|(0x0200));
			lines+=msg.length();
		}
	}
	
	for(uint b=0;b<Broadcast.length();b++)
	{
		if(Broadcast[b].type==(6))
		{
			DrawText(Broadcast[b].message  
			
			,0,(50)+(lines*(12)),__ScreenWidth,(12)*(Broadcast[b].extra==0?2:1),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(5),(0x0004)|(0x0200));
			lines+=(Broadcast[b].extra==0?2:1);
		}
	}
	
	for(uint b=0;b<Broadcast.length();b++)
	{
		if(Broadcast[b].type==(2))
		{
			DrawText(Broadcast[b].message  
			
			,0,(50)+(lines*(12)),__ScreenWidth,(12)*(Broadcast[b].extra==0?2:1),((uint((0xFF<<24)|(((0xFF)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),(5),(0x0004)|(0x0200));
			lines+=(Broadcast[b].extra==0?2:1);
		}
	}
	for(uint b=0;b<Broadcast.length();b++)
	{
		if(Broadcast[b].type==(9))
		{
			int seconds=TimeToSeconds(Broadcast[b].time);
			int minutes=seconds/60;
			seconds=seconds%60;
			int hours=minutes/60;
			int days=hours/24;
			int weeks=days/7;
			string time=(minutes<10?"0":"")+minutes+":"+(seconds<10?"0":"")+seconds;
			string text=Broadcast[b].message;
			text=ReplaceText(text,"%COUNTDOWN%",time);
			text=ReplaceText(text,"%COUNTDOWN_HUMAN%",
			(weeks>0
			?weeks+" week"+(weeks>1?"s":"")+" "
			:(days>0
			?days+" day"+(days>1?"s":"")+" "
			:(hours>0
			?hours+" hour"+(hours>1?"s":"")+" "
			:(minutes>0
			?minutes+" minute"+(minutes>1?"s":"")+" "
			:"less than one minute")))));
			DrawText(text  
			
			,0,(50)+(lines*(12)),__ScreenWidth,(12),0,(5),(0x0004)|(0x0200));
			lines++;
		}
	}
	string@val=GetConfigValue("FOnlineAT.cfg","AfterTimes","DisplayTC");
	bool TC=string2bool(val);
	if(TC)
	{
		for(uint b=0;b<Broadcast.length();b++)
		{
			if(Broadcast[b].type==((3)))
			{
				int seconds=TimeToSeconds(Broadcast[b].time);
				int minutes=seconds/60;
				seconds=seconds%60;
				string time=(minutes<10?"0":"")+minutes+":"+(seconds<10?"0":"")+seconds;
				string text=Broadcast[b].message;
				text=ReplaceText(text,"%COUNTDOWN%",time);
				DrawText(text  
				
				,0,(50)+(lines*(12)),__ScreenWidth,(12),0,(5),(0x0004)|(0x0200));
				lines++;
			}
			else if(Broadcast[b].type==(4))
			{
				DrawText(Broadcast[b].message  
				
				,0,(50)+(lines*(12)),__ScreenWidth,(12),(uint((0xFF<<24)|(((243)&0xFF)<<16)|(((99)&0xFF)<<8)|((29)&0xFF))),(5),(0x0004)|(0x0200));
				lines++;
			}
		}
	}
}              

void _ReceiveDump(int type,int time,int setup,string@message,array<int>@data)
{
	;;
	if(message==""||message==" "){
		Broadcast.resize(0);
		return;
	}
	array<string@>@dump=split(message,"|");
	
	;;
	Broadcast.resize(0);
	for(uint u=0;u<dump.length();u++)
	{
		array<string@>@rec=split(dump[u],"&");
		if(rec.length()!=5)
		{
			;;
			continue;
		}
		;;
		array<string@>@sdata=split(rec[4],"^");
		int t=0;
		int i=0;
		int s=0;
		string m="";
		array<int>d;
		if(!StrToInt(rec[0],t))
		{
			;;
			continue;
		}
		if(!StrToInt(rec[1],i))
		{
			;;
			continue;
		}
		if(!StrToInt(rec[2],s))
		{
			;;
			continue;
		}
		m=rec[3];
		if(sdata.length()>0)
		{
			bool ok=true;
			for(uint sd=0;sd<sdata.length();sd++)
			{
				int x=0;
				StrToInt(sdata[sd],x);
				d.insertLast(x);
			}
			if(!ok)
			continue;
		}
		_Receive(t,i,s,m,d);
	}
	;;
}

int FindBaseControl(uint location)
{
	if(Broadcast.length()==0)
	return(-1);
	
	for(uint b=0;b<Broadcast.length();b++)
	{
		if(Broadcast[b].type==(6)&&Broadcast[b].extra==location)
		return(b);
	}
	return(-1);
} 

void _Receive(int type,int time,int setup,string@message,array<int>@data)
{
	if(!(@message!=null)||message==" ")
	message="";
	
	string _data="";
	if((@data!=null)&&data.length()>0)
	{
		for(uint d=0;d<data.length();d++)
		{
			if(d>0)
			_data+=",";
			_data+=""+data[d];
		}
	}
	
	;;
	int oldB;
	bool isError=true;
	switch(type)
	{
		case(1):
		Broadcast.insertLast(CBroadcast(type,(__FullSecond)+time,message,setup));
		Message("|"+(setup<=0?((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0xC8)&0xFF)))):setup)+" "+message);
		isError=false;
		break;
		case(8):
		Broadcast.insertLast(CBroadcast(type,(__FullSecond)+time,message,setup));
		
		isError=false;
		break;
		case(6):
		oldB=FindBaseControl(data[0]);
		
		if(oldB>=0)
		{
			Broadcast[oldB].message=message;
			Broadcast[oldB].time=(__FullSecond)+time;
		}
		else
		{
			Broadcast.insertLast(CBroadcast(type,(__FullSecond)+time,message,data[0]));
		}
		
		isError=false;
		break;
		case(7):
		Broadcast.insertLast(CBroadcast(type,(__FullSecond)+time,message,setup));
		Message("|"+((uint((0xFF<<24)|(((0xAB)&0xFF)<<16)|(((0xAB)&0xFF)<<8)|((0xAB)&0xFF))))+" "+message);
		isError=false;
		break;
		case(2):
		{
			array<string@>@msg=split(message,"|");
			if(msg.length()!=2)
			break;
			Broadcast.insertLast(CBroadcast(type,(__FullSecond)+time,
			(setup==0
			?"GM help requested: the character "+msg[0]+" has requested help.\n"+msg[1]
			:msg[0]+" is requesting help from "+msg[1]),
			setup));
			isError=false;
		};
		break;
		case(9):
		if(data.length()==0)
		break;
		if(setup==((1)))
		{
			
			string _dx="";
			if((@data!=null)&&data.length()>0)
			{
				for(uint d=0;d<data.length();d++)
				{
					if(d>0)
					_dx+=",";
					_dx+=""+data[d];
				}
			}
			if(data.length()!=2)
			{
				Message("Invalid broadcast data, info saved in logfile.");
				
			}
			
			int old=FindEventCT(data[0],data[1]);
			string town=GetMsgStr((4),((data[0]+100)*1000+0));
			
			uint kind=data[1];
			string description;
			
			switch(kind)
			{
				case(1):description="1st wave of reinforcements is comming to location";break;
				case(2):description="2nd wave of reinforcements is comming to location";break;
				case(3):description="3rd wave of reinforcements is comming to location";break;
				case(4):description="4th wave of reinforcements is comming to location";break;
				case(5):description="5th wave of reinforcements is comming to location";break;
				case(6):description="6th wave of reinforcements is comming to location";break;
				case(7):description="7th wave of reinforcements is comming to location";break;
				case(8):description="8th wave of reinforcements is comming to location";break;
				case(9):description="9th wave of reinforcements is comming to location";break;
				case(10):description="10th wave of reinforcements is comming to location";break;
				default:description="Unknown event";break;
			} 
			
			if(message==""||message==" ")
			message="";
			else
			{
				
				message=ReplaceText(message,"%TOWN%",town);
			}
			
			if(old>=0)
			{
				Broadcast[old].message=message;
				Broadcast[old].time=time;
			}
			else
			{
				Broadcast.insertLast(CBroadcast(type,time,message,data[0],data[1]));
			}
			isError=false;
		}
		else if(setup==((0)))
		{
			for(uint d=0;d<data.length();d++)
			{
				for(uint e=0;e<data.length();e++)
				{
					int old=FindEventCT(data[d],data[e]);
					if(old>=0)
					{
						Broadcast[old].time=0;
					}
				}
			}
			isError=false;
		}
		break;
		case((3)):
		if(data.length()==0)
		break;
		if(setup==(1))
		{
			
			string _dx="";
			if((@data!=null)&&data.length()>0)
			{
				for(uint d=0;d<data.length();d++)
				{
					if(d>0)
					_dx+=",";
					_dx+=""+data[d];
				}
			}
			if(data.length()!=2)
			{
				Message("Invalid broadcast data, info saved in logfile.");
				
			}
			
			int old=FindTimerTC(data[0]);
			string town=GetMsgStr((4),((data[0]+100)*1000+0));  
			
			message=message+" are taking "+town+". %COUNTDOWN% left until taken.";     
			
			if(old>=0)
			{
				Broadcast[old].message=message;
				Broadcast[old].time=time;
			}
			else
			{
				Broadcast.insertLast(CBroadcast(type,time,message,data[0]));
			}
			isError=false;
		}
		else if(setup==(0))
		{
			for(uint d=0;d<data.length();d++)
			{
				int old=FindTimerTC(data[d]);
				if(old>=0)
				{
					Broadcast[old].time=0;
				}
			}
			isError=false;
		}
		break;
		case(4):
		{
			if(data.length()==0)
			break; 
			
			string _dx="";
			if((@data!=null)&&data.length()>0)
			{
				for(uint d=0;d<data.length();d++)
				{
					if(d>0)
					_dx+=",";
					_dx+=""+data[d];
				}
			}
			if(data.length()!=1)
			{
				Message("Invalid broadcast data, info saved in logfile.");
				
			}
			
			int old=FindInfluence(data[0]); 
			
			if(old>=0)
			{
				Broadcast[old].message=message;
				Broadcast[old].time=time;
			}
			else
			{
				Broadcast.insertLast(CBroadcast(type,time,message,data[0]));
			}
			isError=false;
		};
		break;
		default:
		;;
		break;
	}
	
	if(isError)
	{
		Message("ERROR Broadcast message corrupted:");
		Message("ERROR 0<"+type+"> 1<"+time+"> 2<"+setup+"> 3<"+message+"> 4<"+_data+">");
		return;
	}
	
	;;
	
	return;
}

