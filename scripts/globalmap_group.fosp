

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                         

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                            

uint[][]PositionDirs=
{
	{0},
	
	{1,4,3,2,1,0,5,2,3,4,5,0,1},
	{1,5,0,1,2,3,4,1,0,5,4,3,2},
	{1,4,2},
	{1,5,1},
	{2,1,2,0,0,1,2,3,3,0,0,4,5,3,3,4,5},
	{2,1,2,4,5},
	{2,4,4,0,0,4,4,3,3,0,0,2,2,3,3,2,2},
	{2,5,5,0,0,5,5,3,3,0,0,1,1,3,3,1,1},
	{2,1,2,0,0,0,0,1,2,3,3,3,3,0,0,0,0,4,5,3,3,3,3,4,5}
};                                                                                                                                                                           

shared interface IZone
{
	uint GetX();
	uint GetY();
	uint GetTerrain();
	uint8 GetFactor();
	void SetFactor(uint8 factor);
	int GetValue();
	void SetValue(int val);
	void AddValue(int val);
	void SubValue(uint val);
	bool ContainsFlag(uint flag);
	void SetQuantity(uint group,uint quantity);
	void ChangeQuantity(uint group,int mod);
	uint GetBaseQuantity(uint group);
	uint GetQuantity(uint group);
	uint GetLocationPids(array<uint16>&pids);
}; 

import IZone@GetZone(uint wx,uint wy)from"worldmap";           

import uint WorldmapGetPlayers(uint zx,uint zy,array<Critter@>&players)from"worldmap_players";
import int WorldmapGetPlayerTime(Critter&player)from"worldmap_players";   

class CTrackedGroup
{
	uint LeaderId;
	uint TrackerId;
	float X;
	float Y;
	
	uint Trackers;
	
	CTrackedGroup(uint trackerId,uint leaderId,float x,float y)
	{
		LeaderId=leaderId;
		TrackerId=trackerId;
		X=x;
		Y=y;
		Trackers=1;
	}
};

array<CTrackedGroup>TrackedList; 

array<uint>Trackers; 

void Roll(array<Critter@>@group,Critter@tracked,int&out trackerRoll,int&out trackedRoll)
{
	Critter@tracker=group[0];
	
	int roll=Random(0,99);
	Critter@trackerGuide=GetMostSkilled(group,(217));
	
	array<Critter@>trackedGroup;
	
	tracked.GetFollowGroup((0x0F),trackedGroup);
	tracker.Say((11),"trackedgroup len: "+trackedGroup.length());
	
	Critter@trackedGuide=@tracked;
	
	trackerRoll=(((roll+trackerGuide.Param[(217)]-trackedGuide.Param[(217)])>(99))?(99):(((roll+trackerGuide.Param[(217)]-trackedGuide.Param[(217)])<(0))?(0):(roll+trackerGuide.Param[(217)]-trackedGuide.Param[(217)])));
	
	roll=Random(0,99);
	trackedRoll=(((roll+trackedGuide.Param[(217)]-trackerGuide.Param[(217)])>(99))?(99):(((roll+trackedGuide.Param[(217)]-trackerGuide.Param[(217)])<(0))?(0):(roll+trackedGuide.Param[(217)]-trackerGuide.Param[(217)])));       
	
}  

void SetTrackingCoords(array<Critter@>@group,float x,float y,float&toX,float&toY)
{
	Critter@leader=group[0];
	
	GameVar@var=GetLocalVar((3001),leader.Id);
	for(uint i=0;i<TrackedList.length();i++)
	{ 
		
		if(uint(var.GetValue())==TrackedList[i].LeaderId)
		{
			
			Critter@tracked=GetCritter(var.GetValue());
			
			int trackerRoll=0;
			int trackedRoll=0;
			Roll(group,tracked,trackerRoll,trackedRoll);    
			
			if(trackerRoll<trackedRoll+25)
			tracked.Say((11),"You are followed.");
			
			if(trackerRoll+25<trackedRoll)
			{
				LooseTrack(leader,false);
				return;
			}
			
			toX=TrackedList[i].X;
			toY=TrackedList[i].Y;
		}
		
		if(group[0].Id==TrackedList[i].LeaderId)
		{
			TrackedList[i].X=x;
			TrackedList[i].Y=y;
		}
	}
}

void SetTrackingCoords(array<Critter@>@group,float x,float y)
{
	
	float d1,d2;
	SetTrackingCoords(group,x,y,d1,d2);
}    

void TrackLocation(Critter&player)
{
	for(uint i=0;i<TrackedList.length();i++)
	{
		if(player.Id==TrackedList[i].LeaderId)
		{
			TrackedList[i].X=player.WorldX;
			TrackedList[i].Y=player.WorldY;
		}
	}
}    

bool TrackLocation(array<Critter@>@group,float x,float y)
{
	Critter@tracker=group[0];
	
	GameVar@var=GetLocalVar((3001),tracker.Id);
	for(uint i=0;i<TrackedList.length();i++)
	{
		
		if(uint(var.GetValue())==TrackedList[i].LeaderId)
		{
			Critter@tracked=GetCritter(var.GetValue());
			if(!(@tracked!=null))
			{
				LooseTrack(tracker,false);
				return false;
			}
			Map@map=tracked.GetMap();
			if(!(@map!=null))
			return false; 
			
			int trackerRoll=0;
			int trackedRoll=0;
			Roll(group,tracked,trackerRoll,trackedRoll); 
			
			if(trackerRoll>trackedRoll)
			{
				
				tracker.ShowScreen((2),1,"answer_Enter");
				tracker.Say((18),"Do you want to enter this location?");
				tracker.Say((19+(0)),"Yes"); 
				
				return true;
			}
			
			{
				tracker.TransitToMap(map.Id,0);
				for(uint i=0,num=group.length();i<num;i++)
				group[i].TransitToMap(map.Id,0);
				return false;
			}
		}
	}
	return false;
}

void repro(Critter&cr,int p0,int p1,int p2)
{
	Critter@pl=GetCritter(p0);
	Track(cr,pl);
	
	array<Critter@>group;
	group.insertLast(cr);
	
	pl.ToDead(0,null);
	
	TrackLocation(group,cr.WorldX,cr.WorldY);
}

void track(Critter&cr,int p0,int p1,int p2)
{
	Critter@pl=GetCritter(p0);
	Track(cr,pl);
}

void answer_Enter(Critter&tracker,uint i,string&s)
{
	
	GameVar@var=GetLocalVar((3001),tracker.Id);
	Critter@tracked=GetCritter(var.GetValue());
	if(!(@tracked!=null)||!(@tracked.GetMap()!=null))
	{
		tracker.Say((11),"You weren't able to enter this location.");
	}
	else
	{
		Map@map=tracked.GetMap();
		array<Critter@>group;
		uint num=tracker.GetFollowGroup((0x0F),group);
		tracker.TransitToMap(map.Id,0);
		for(uint i=0;i<num;i++)
		group[i].TransitToMap(map.Id,0);
	}
}         

void AskAboutAvailable(Critter@askedLeader)
{
	array<Critter@>available;
	
	uint zx=((askedLeader.WorldX)/(50));
	uint zy=((askedLeader.WorldY)/(50));
	
	WorldmapGetPlayers(zx-1,zy-1,available);
	WorldmapGetPlayers(zx,zy-1,available);
	WorldmapGetPlayers(zx+1,zy-1,available);
	
	WorldmapGetPlayers(zx-1,zy,available);
	WorldmapGetPlayers(zx,zy,available);
	WorldmapGetPlayers(zx+1,zy,available);
	
	WorldmapGetPlayers(zx-1,zy+1,available);
	WorldmapGetPlayers(zx,zy+1,available);
	WorldmapGetPlayers(zx+1,zy+1,available);   
	
	array<uint>list;
	if(available.length()==0)
	return;
	
	{;}; 
	
	for(int i=available.length()-1;i>=0;i--)
	{
		Critter@cr=GetCritter(available[i].Id);
		
		if(!(@cr!=null)||cr.GetMapId()!=0)
		continue;
		
		if(WorldmapGetPlayerTime(cr)>int((((1)*__TimeMultiplier*60))))
		continue;
		
		if(askedLeader.Id==cr.Id)
		continue;
		
		Critter@leader=GetCritter(cr.Param[(81)]);
		
		if((@leader!=null)&&leader.WorldX==cr.WorldX&&leader.WorldY==cr.WorldY)
		continue; 
		
		if((sqrt(((cr.WorldX)-(
		askedLeader.WorldX))*((cr.WorldX)-(
		askedLeader.WorldX))+((cr.WorldY)-(askedLeader.WorldY))*((cr.WorldY)-(askedLeader.WorldY))))<=(24))
		{
			{;};
			list.insertLast(cr.Id);
			if(list.length()==(10))
			break;
		}
		
	}
	
	if(list.length()>0)
	{
		{;};
		askedLeader.ShowScreen((2),list.length(),"answer_ChooseTracked");
		askedLeader.Say((18),"Choose group you want to track:");
		for(uint i=0;i<list.length();i++)
		askedLeader.Say((19+(i)),GetSafePlayerName(list[i]));
		
		SetAnyData("TrackingAvailable_"+askedLeader.Id,list);
	}
}   

void answer_ChooseTracked(Critter&player,uint answerI,string&answerS)
{
	
	array<uint>list;
	if(!IsAnyData("TrackingAvailable_"+player.Id))
	return;
	GetAnyData("TrackingAvailable_"+player.Id,list);
	if(answerI>list.length())
	{
		Log("ERR: Improper answer");
		return;
	}
	
	GameVar@var=GetLocalVar((3001),player.Id);
	var=list[answerI];
	Critter@tracked=GetCritter(list[answerI]);
	
	EraseAnyData("TrackingAvailable_"+player.Id);
	
	if(!(@tracked!=null))
	return;
	Track(player,tracked);
	player.Say((11),"Tracking "+tracked.Name+", wait.");
}   

void Track(Critter@tracker,Critter@tracked)
{
	for(uint i=0;i<TrackedList.length();i++)
	{
		if(TrackedList[i].LeaderId==tracked.Id)
		{
			TrackedList[i].Trackers++;
			return;
		}
	}
	TrackedList.insertLast(CTrackedGroup(tracker.Id,tracked.Id,tracked.WorldX,tracked.WorldY));
}     

void LooseTrack(Critter@tracker,bool canceled)
{
	GameVar@var=GetLocalVar((3001),tracker.Id);
	
	if(var.GetValue()==0)
	return;
	
	tracker.ShowScreen((2),0,"");
	if(canceled)
	tracker.Say((18),"You are no longer tracking "+GetSafePlayerName(var.GetValue()));
	else
	tracker.Say((18),"You've lost the track.");  
	
	for(uint i=0;i<TrackedList.length();i++)
	{
		if(TrackedList[i].LeaderId==uint(var.GetValue()))
		{
			TrackedList[i].Trackers--;
			break;
		}
	}
	var=0;
	
	uint j=0;
	if(TrackedList.length()>1)
	{
		for(uint i=0;i<TrackedList.length()-1;i++)
		{
			if(TrackedList[i].Trackers==0)
			{
				TrackedList[i]=TrackedList[i+1];
				
				TrackedList[i+1].Trackers=0;
				j++;
			}
		}
	}
	else
	{
		TrackedList.resize(0);
		{;};
		return;
	}
	TrackedList.resize(TrackedList.length()-j);
	{;};
}                                                                                                                                                                                                                                                                                                                                      

import uint GetGlobalMapRelief(uint x,uint y)from"worldmap";
import void FindEncounter(array<Critter@>&group,Item@car,uint x,uint y,uint&encounterDescriptor,bool&waitForAnswer,bool empty)from"worldmap";
import void InviteToEncounter(array<Critter@>&group,Item@car,uint encounterDescriptor,int combatMode,uint&mapId,uint16&hexX,uint16&hexY,uint8&dir)from"worldmap";
import array<Critter@>WorldmapGetPlayers(uint zx,uint zy)from"worldmap_players";
import void WorldmapUpdateGroup(array<Critter@>&group)from"worldmap_players";
import void WorldmapUpdatePlayer(Critter@player)from"worldmap_players";
import void WorldmapRemovePlayer(Critter@player)from"worldmap_players";
import void CarMessage(Critter@cr,Item@car,int msg)from"car";

funcdef void FGlobalProcessFunc(int processType,Critter&cr,Item@car,float&curX,float&curY,float&toX,float&toY,float&speed,uint&encounterDescriptor,bool&waitForAnswer);

array<FGlobalProcessFunc@>GlobalProcessFunctions=
{
	GlobalProcessMove,
	GlobalProcessEnter,
	GlobalProcessStartFast,
	GlobalProcessStart,
	GlobalProcessSetMove,
	GlobalProcessStopped,
	GlobalProcessNpcIdle,
	GlobalProcessKick,
};         

void global_process(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{
	
	FGlobalProcessFunc@func=GlobalProcessFunctions[processType];
	func(processType,cr,car,curX,curY,toX,toY,speed,encounterDescriptor,waitForAnswer); 
	
	switch(processType)
	{
		case(0):
		case(4):
		{
			break;
		}
		case(1):
		{
			break;
		}
		case(2):
		{
			break;
		}
		case(5):
		case(7):
		{
			break;
		}
		case(6):
		{
			break;
		}
		default:
	}
} 

void GlobalProcessMove(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{
	MoveGlobalGroup(cr,car,curX,curY,toX,toY,speed);
	int curXi=int(curX);
	int curYi=int(curY);
	int oldXi=curXi;
	int oldYi=curYi;
	
	if(++cr.GlobalMapMoveCounter%(__EncounterTime/__GlobalMapMoveTime)==0)
	{
		array<Critter@>@group=cr.GetGlobalGroup();
		Critter@leader=group[0];
		int groupIgnore=0;
		for(uint c=1,g=group.length();c<g;c++)
		{
			if(group[c].IsPlayer()&&group[c].GetAccess()>=(1))
			groupIgnore++;
		} 
		
		if((speed>0.1f&&int(group.length()-groupIgnore)>int(leader.Param[(3)]<3?3:leader.Param[(3)]+leader.Param[(399)]))&&(not(@car!=null)))
		{
			leader.SayMsg((11),(3),(10248));
			speed=0.0f;
			return;
		} 
		
		if(leader.IsPlayer()&&leader.GetAccess()==(3))
		leader.Say((11),"Players in zone: "+WorldmapGetPlayers(oldXi/(50),oldYi/(50)).length()); 
		
		WorldmapUpdateGroup(group);
		
		if(GetGlobalMapRelief(curXi,curYi)!=0)
		{
			FindEncounter(group,car,curXi,curYi,encounterDescriptor,waitForAnswer,false);  
			
		}
	}
	
	Critter@[]@group=cr.GetGlobalGroup();
	uint players=0;
	for(uint i=0;i<group.length();i++)
	{
		if(group[i].IsPlayer())
		{
			group[i].AddScore((8),1);
			players++;
		}
		
	}
	if(players>1&&cr.IsPlayer())cr.AddScore((15),players-1);
	
}

void GlobalProcessEnter(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{
	array<Critter@>@group=cr.GetGlobalGroup();
	int movementType=((@car!=null)?car.Proto.Car_MovementType:(0));
	int curXi=int(curX);
	int curYi=int(curY);
	
	if(movementType==(2)&&GetGlobalMapRelief(curXi,curYi)==0)
	{
		
		bool landFounded=false;
		const int maxx=__GlobalMapWidth*__GlobalMapZoneLength;
		const int maxy=__GlobalMapHeight*__GlobalMapZoneLength;
		for(int ox=-1;ox<=1;ox++)
		{
			for(int oy=-1;oy<=1;oy++)
			{
				int xx=curXi+ox;
				int yy=curYi+oy;
				if(xx>=0&&xx<maxx&&yy>=0&&yy<maxy&&GetGlobalMapRelief(xx,yy)!=0)
				{
					FindEncounter(cr.GetGlobalGroup(),car,xx,yy,encounterDescriptor,waitForAnswer,true);
					ox=oy=2;
					landFounded=true;
				}
			}
		}
		
		if(!landFounded)
		FindEncounter(cr.GetGlobalGroup(),car,curXi,curYi,encounterDescriptor,waitForAnswer,true);
	}
	else
	{
		FindEncounter(cr.GetGlobalGroup(),car,curXi,curYi,encounterDescriptor,waitForAnswer,true);
	}
}

void GlobalProcessStartFast(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{
	array<Critter@>@group=cr.GetGlobalGroup();
	
	int curZoneX=int(curX)/__GlobalMapZoneLength;
	int curZoneY=int(curY)/__GlobalMapZoneLength;
	ScanZone(group,curZoneX,curZoneY); 
	
	WorldmapUpdateGroup(group);
}

void GlobalProcessStart(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{
	
	array<Critter@>@group=cr.GetGlobalGroup();
	
	bool strangers=false;
	if(group.length>1)
	{
		for(uint i=0;i<group.length();i++)
		{
			if(cr.IsPlayer()&&group[i].IsPlayer()&&((GetGroupIndex(cr)!=GetGroupIndex(group[i]))||GetGroupIndex(cr)<0||GetGroupIndex(group[i])<0))strangers=true;
			
		}
		if(strangers)
		{
			cr.Say((11),"|4291317840 You are being followed by strangers. Be careful: check your party and kick them if necessary.");
			cr.PlaySound("encoalert.ogg",true);
		}
	}
}

void GlobalProcessSetMove(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{
	array<Critter@>@group=cr.GetGlobalGroup();
	Critter@leader=group[0];
	int curXi=int(curX);
	int curYi=int(curY);
	int toXi=int(toX);
	int toYi=int(toY); 
	
	if(leader.IsPlayer()&&leader.GetAccess()==(3))
	leader.Say((11),"Players in target zone: "+WorldmapGetPlayers(toXi/(50),toYi/(50)).length()); 
	
	LooseTrack(leader,true);
	
	if((int(group.length())>int(leader.Param[(3)]<3?3:leader.Param[(3)]+leader.Param[(399)]))&&(not(@car!=null)))
	{
		leader.SayMsg((11),(3),(10248));
		return;
	}
	
	speed=(6.0f);
	if((@car!=null))
	{
		uint strNum=0;
		if(group.length()>car.Proto.Car_CrittersCapacity)
		strNum=(10247);
		else if(car.Charge==0)
		strNum=(10245);
		else if(car.Deterioration>=(car.Proto.Car_MaxDeterioration))
		strNum=(10246);
		if(strNum!=0)
		{
			CarMessage(leader,car,strNum);
			speed=0;
			return;
		}
		
		speed=car.Proto.Car_Speed*(6.0f)/10.0f;  
		
		if(car.Proto.Car_MovementType==(2))
		{
			if(GetGlobalMapRelief(curXi,curYi)!=0)
			{
				const int maxx=__GlobalMapWidth*__GlobalMapZoneLength;
				const int maxy=__GlobalMapHeight*__GlobalMapZoneLength;
				const int[]ox={-1,0,1,0};
				const int[]oy={0,-1,0,1};
				for(int i=1,ii=__GlobalMapZoneLength;i<=ii;i++)
				{
					for(int j=0;j<4;j++)
					{
						int xx=curXi+ox[j]*i;
						int yy=curYi+oy[j]*i;
						if(xx>=0&&xx<maxx&&yy>=0&&yy<maxy&&GetGlobalMapRelief(xx,yy)==0)
						{
							curX=float(xx);
							curY=float(yy);
							
							j=4;
							i=ii;
						}
					}
				}
			}
		}
	}
	else
	{
		
		speed=(speed*(100+cr.Param[(344)]*25))/100;
		speed=(speed*(100+cr.Param[(453)]*5))/100;
		speed=(speed*(100+cr.Param[(3)]*2))/100;
		if(cr.IsPlayer()&&cr.GetAccess()>=(1))
		speed+=float(GetLvar(cr,(1337)))/1000.0f;
		speed+=float(cr.Param[(217)])/100.f;
		speed*=1.3;
	}
}

void GlobalProcessStopped(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{
	array<Critter@>@group=cr.GetGlobalGroup();
	Critter@leader=group[0]; 
	
	WorldmapUpdateGroup(group);
	
	toX=curX;
	toY=curY;
	speed=-1;
}

void GlobalProcessNpcIdle(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{  
	
	if(curX==toX&&curY==toY)
	{
		if((((cr.Param[(534)]&((0x00000020)))!=0)))
		{
			if((__FullSecond)-uint(cr.FollowerVar[(935)])>((10)*__TimeMultiplier))
			cr.FollowerVarBase[(935)]=(__FullSecond);
			else
			return;
			
			if(cr.FollowerVarBase[(934)]==0)
			cr.FollowerVarBase[(934)]=(__FullSecond);
			
			if(((__FullSecond)-uint(cr.FollowerVar[(934)]))>(((14)*__TimeMultiplier*86400)))
			{
				Log("Garbaging follower "+cr.Id+", PID="+cr.GetProtoId()+", master:"+cr.FollowerVar[(933)]);
				FLog((10),"Garbaging follower "+cr.Id+", PID="+cr.GetProtoId()+", master:"+cr.FollowerVar[(933)]);
				DeleteNpc(cr);
			}
			
			if((@cr.GetGlobalGroup()!=null))
			{
				array<Critter@>members;
				members=cr.GetGlobalGroup();
				for(uint i=0;i<members.length();i++)
				if(int(members[i].Id)==cr.FollowerVar[(933)])
				{
					return;
				}
				RejoinMaster(cr,true);
			}
			else
			RejoinMaster(cr,true);
			
		}  
		
	}
}

void GlobalProcessKick(int processType,Critter&cr,Item@car,
float&curX,float&curY,float&toX,float&toY,float&speed,
uint&encounterDescriptor,bool&waitForAnswer)
{
	int curXi=int(curX);
	int curYi=int(curY);
	if(GetGlobalMapRelief(curXi,curYi)==0)
	{
		
		array<Critter@>@group=cr.GetGlobalGroup();
		group[0].SayMsg((11),(3),(10251));
		return;
	}
	
	cr.LeaveGlobalGroup();
}  

void RejoinMaster(Critter&cr,bool TeleportToMap)
{
	Critter@master=GetCritter(cr.FollowerVar[(933)]);
	if((@master!=null))
	{
		if(master.GetMapId()==0)
		{
			array<Critter@>@group=master.GetGlobalGroup();
			if(group.length>9)
			return;
			
			cr.LeaveGlobalGroup();
			TransferToNPCMap(cr);
			cr.TransitToGlobalGroup(master.Id);
			cr.FollowerVarBase[(934)]=0;
			(cr.FollowerVarBase[(941)]=((cr.FollowerVarBase[(941)])&(~((0x2)))));
		}
		else if(TeleportToMap&&!(((cr.FollowerVarBase[(941)])&((0x2)))!=0))
		{
			cr.TransitToMap(master.GetMapId(),master.HexX,master.HexY,cr.Dir);
			cr.FollowerVarBase[(934)]=0;
		}
	}
}   

uint e_AskAboutAvailable(array<uint>@values)
{
	Critter@leader=GetCritter(values[0]);
	if((@leader!=null))
	AskAboutAvailable(leader);
	
	return 0;
}   

void global_invite(Critter&leader,Item@car,uint encounterDescriptor,int combatMode,uint&mapId,uint16&hexX,uint16&hexY,uint8&dir)
{
	array<Critter@>@group=leader.GetGlobalGroup();
	
	SetTrackingCoords(group,group[0].WorldX,group[0].WorldY);
	
	LooseTrack(group[0],false);
	
	if(encounterDescriptor==uint(-1))
	{
		array<Location@>locations;
		if(GetLocations(leader.WorldX,leader.WorldY,0,locations)!=0)
		{
			Location@loc=locations[0];
			Map@map=loc.GetMapByIndex(0);
			if((@map!=null)&&map.GetEntireCoords(0,0,hexX,hexY))
			{
				mapId=map.Id;
				dir=0xFF;
			}
		}
		return;
	}
	
	InviteToEncounter(group,car,encounterDescriptor,combatMode,mapId,hexX,hexY,dir);
}

void ScanZone(array<Critter@>&group,int zx,int zy)
{
	array<uint>locIds1,locIds2;
	bool locIds2Founded=false;
	
	GetZoneLocationIds(zx,zy,1,locIds1);
	
	for(uint i=0;i<group.length();i++)
	{
		Critter@cr=group[i];
		if(!cr.IsPlayer())
		continue;
		
		int lookLen=cr.ParamBase[(346)]!=0?2:1;
		
		if(lookLen==2&&!locIds2Founded)
		{
			GetZoneLocationIds(zx,zy,2,locIds2);
			locIds2Founded=true;
		} 
		
		int mapw=__GlobalMapWidth;
		int maph=__GlobalMapHeight;
		for(int x=-lookLen;x<=lookLen;x++)
		{
			for(int y=-lookLen;y<=lookLen;y++)
			{
				int zx_=zx+x;
				int zy_=zy+y;
				if(zx_>=0&&zx_<mapw&&zy_>=0&&zy_<maph)
				{
					int fog=(zx==zx_&&zy==zy_?(3):(1));
					if(cr.GetFog(zx_,zy_)<fog)
					cr.SetFog(zx_,zy_,fog);
				}
			}
		} 
		
		array<uint>@locIds=lookLen==1?locIds1:locIds2;
		for(uint j=0;j<locIds.length();j++)
		{
			uint locId=locIds[j];
			if(!cr.IsKnownLoc(true,locId))
			{
				Location@loc=GetLocation(locId);
				if((@loc!=null))
				cr.SetKnownLoc(true,locId);
			}
		}
	}
}

void MoveGlobalGroup(Critter&cr,Item@car,float&curX,float&curY,float&toX,float&toY,float&speed)
{
	int movementType=((@car!=null)?car.Proto.Car_MovementType:(0));
	
	int curXi=int(curX);
	int curYi=int(curY);
	
	float lastDist=(sqrt(((curX)-(toX))*((curX)-(toX))+((curY)-(toY))*((curY)-(toY)))); 
	
	float speedPix=speed*float(__GlobalMapMoveTime)/1000.0f;
	float speedAngle=atan2(toY-curY,toX-curX);
	float speedX=cos(speedAngle)*speedPix;
	float speedY=sin(speedAngle)*speedPix;
	
	float speedMod=1.0f;
	if(movementType==(0))
	{  
		
		switch(GetGlobalMapRelief(curXi,curYi))
		{
			case 0x0:
			speedMod=1.00f;
			break;
			case 0x1:
			speedMod=0.55f;
			break;
			case 0x2:
			speedMod=0.60f;
			break;
			case 0x3:
			speedMod=0.65f;
			break;
			case 0x4:
			speedMod=0.70f;
			break;
			case 0x5:
			speedMod=0.75f;
			break;
			case 0x6:
			speedMod=0.80f;
			break;
			case 0x7:
			speedMod=0.85f;
			break;
			case 0x8:
			speedMod=0.90f;
			break;
			case 0x9:
			speedMod=0.95f;
			break;
			case 0xA:
			speedMod=1.00f;
			break;
			case 0xB:
			speedMod=1.10f;
			break;
			case 0xC:
			speedMod=1.20f;
			break;
			case 0xD:
			speedMod=1.30f;
			break;
			case 0xE:
			speedMod=1.40f;
			break;
			case 0xF:
			speedMod=1.50f;
			break;
			default:
			break;
		}
		if(speedMod<1.0f&&cr.Param[(342)]!=0)
		speedMod=speedMod/2.0f+0.5f;
	}
	
	if((@car!=null)&&speedMod!=1.0f)
	{
		float pass=float(car.Proto.Car_Passability);
		if(pass>100.0f&&speedMod<1.0f)
		speedMod+=(1.0f-speedMod)*(pass-100.0f)/100.0f;
		else if(pass>100.0f&&speedMod>1.0f)
		speedMod-=(speedMod-1.0f)*(pass-100.0f)/100.0f;
		else if(pass<100.0f&&speedMod<1.0f)
		speedMod-=(1.0f-speedMod)*(100.0f-pass)/100.0f;
		else if(pass<100.0f&&speedMod>1.0f)
		speedMod+=(speedMod-1.0f)*(100.0f-pass)/100.0f;
	} 
	
	curX+=speedX*speedMod;
	curY+=speedY*speedMod;
	
	int oldXi=curXi;
	int oldYi=curYi;
	curXi=int(curX);
	curYi=int(curY);  
	
	if(oldXi!=curXi||oldYi!=curYi)
	{
		
		int gmWidth=__GlobalMapWidth*__GlobalMapZoneLength;
		int gmHeight=__GlobalMapHeight*__GlobalMapZoneLength;
		if(curXi<0||curYi<0||curXi>=gmWidth||curYi>=gmHeight)
		{
			if(curXi<0)
			curXi=0;
			if(curXi>=gmWidth)
			curXi=gmWidth-1;
			if(curYi<0)
			curYi=0;
			if(curYi>=gmHeight)
			curYi=gmHeight-1; 
			
			curX=float(curXi);
			curY=float(curYi);
			speed=0.0f;
			return;
		} 
		
		int relief=GetGlobalMapRelief(oldXi,oldYi);
		int steps=((((((curXi-oldXi)>0)?(curXi-oldXi):(-(curXi-oldXi))))>((((curYi-oldYi)>0)?(curYi-oldYi):(-(curYi-oldYi)))))?((((curXi-oldXi)>0)?(curXi-oldXi):(-(curXi-oldXi)))):((((curYi-oldYi)>0)?(curYi-oldYi):(-(curYi-oldYi)))));
		int newXi=oldXi;
		int newYi=oldYi;
		if(steps>0)
		{
			float xx=float(oldXi);
			float yy=float(oldYi);
			float oxx=float(curXi-oldXi)/float(steps);
			float oyy=float(curYi-oldYi)/float(steps);
			
			for(int i=0;i<steps;i++)
			{
				xx+=oxx;
				yy+=oyy;
				int xxi=int(xx>=0.0f?xx+0.5f:xx-0.5f);
				int yyi=int(yy>=0.0f?yy+0.5f:yy-0.5f);
				
				uint relief_=GetGlobalMapRelief(xxi,yyi);
				if(movementType==(0)&&relief!=0&&relief_==0)
				break;
				if(movementType==(2)&&relief_!=0)
				break;
				
				newXi=xxi;
				newYi=yyi;
			}
		}
		
		if(newXi!=curXi||newYi!=curYi)
		{
			
			curX=float(newXi);
			curY=float(newYi);
			speed=0.0f;
			return;
		} 
		
		int oldZoneX=oldXi/__GlobalMapZoneLength;
		int oldZoneY=oldYi/__GlobalMapZoneLength;
		int curZoneX=curXi/__GlobalMapZoneLength;
		int curZoneY=curYi/__GlobalMapZoneLength; 
		
		if(oldZoneX!=curZoneX||oldZoneY!=curZoneY)
		{
			array<Critter@>@group=cr.GetGlobalGroup();
			ScanZone(group,curZoneX,curZoneY);
		} 
		
		float curDist=(sqrt(((curX)-(toX))*((curX)-(toX))+((curY)-(toY))*((curY)-(toY))));
		if(curDist<=0.01f||curDist>lastDist)
		{
			curX=toX;
			curY=toY;
			speed=0.0f;
			return;
		}
	} 
	
	if((@car!=null))
	{
		int fuel=car.Charge;
		int deterioration=car.Deterioration;
		
		if(fuel==0||deterioration>=int(car.Proto.Car_MaxDeterioration))
		{
			uint strNum=(fuel<=0?(10245):(10246));
			CarMessage(cr,car,strNum);
			speed=0.0f;
			return;
		} 
		
		fuel-=car.Proto.Car_FuelConsumption*__GlobalMapMoveTime/500;
		deterioration+=car.Proto.Car_DeteriorationRate*__GlobalMapMoveTime/500;
		if(fuel<0)
		fuel=0;
		if(deterioration>int(car.Proto.Car_MaxDeterioration))
		deterioration=int(car.Proto.Car_MaxDeterioration);
		
		if(fuel!=int(car.Charge)||deterioration!=int(car.Deterioration))
		{
			car.Charge=fuel;
			car.Deterioration=deterioration;
			car.Update();
		}
	}
}
