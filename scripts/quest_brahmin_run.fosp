                        

uint __GetColor(int r,int g,int b,int a=0xFF)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	a=(((a)>(255))?(255):(((a)<(0))?(0):(a)));
	return(uint(((a)<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno=0;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          

import void AddReputation(Critter@cr,uint index,int val)from"reputations";
import void SubReputation(Critter@cr,uint index,int val)from"reputations";
import void AddReputation(Critter@cr,uint index,int val,int cap)from"reputations";
import void SubReputation(Critter@cr,uint index,int val,int cap)from"reputations";
import uint ReputationIndex(uint locid)from"reputations";
import void ProcessProfitReputation(Critter@cr,uint index,int profit)from"reputations";

import void InitGroups()from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index)from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index,float fraction)from"reputations_modifiers";
import void ApplyReputationModifiers(Critter&cr,uint index,int num,int den)from"reputations_modifiers";
import int GetReputationModifier(uint fac1,uint fac2)from"reputations_modifiers";
import int GetGroupsStatus(uint fac1,uint fac2)from"reputations_modifiers";
import int GetGroupsStatus(Critter&c1,Critter&c2)from"reputations_modifiers";
import void ReputationsInit(Critter&cr)from"reputations_modifiers";
import void FeedReputations(Critter@cr,uint index,int cap)from"reputations_modifiers";                                                                                                                                                                                                                                                                                                                                                                                                                       

import Location@GetLocationOf(Critter&critter)from"utils";
import string GetLocationName(uint locId)from"utils";
import string GetLocationName(Location@loc)from"utils";
import bool ReadPids(array<int>&out pids,bool removeinvalid)from"utils";
import void ReadDefines(string@fileName,dictionary&items,array<string>@defines)from"utils";
import bool ParseDefine(const string&in line,string&out spid,int&out id)from"utils";
import int SkipWhitespaces(const string&in str,int start)from"utils";
import int SkipNonWhitespaces(const string&in str,int start)from"utils";
import bool IsParameterTag(string&str)from"utils";
import string GetParameterString(array<string@>@arr,string&parameter)from"utils";
import int GetIndexOfString(array<string@>@arr,string&str)from"utils";
import string GetConcatenatedString(array<string@>@arr,uint startindex,int stopindex)from"utils";
import string GetConditionOfCritter(Critter@cr)from"utils";
import string GetExtConditionOfCritter(Critter@cr)from"utils";
import uint GetAllOnlinePlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players)from"utils";
import uint GetAuthenticatedPlayers(array<Critter@>&out players,bool ignorePriviledges)from"utils";
import uint GetNumberOfPlayersOnline()from"utils";
import void SetTurnBasedAvailability(Location@loc)from"utils";
import bool IsGuarded(Map@map)from"utils";
import bool IsPublic(Map@map)from"utils";
import bool IsEncounterMap(Map@map)from"utils";
import bool IsTown(Map@map)from"utils";
import bool IsDungeon(Map@map)from"utils";
import bool IsBaseControl(Map@map)from"utils";

import uint GetMapType(Map@map)from"utils";
import void LockDoor(uint x,uint y,Map@map,uint complexity,uint lockid)from"utils";
import void UnlockDoor(uint x,uint y,Map@map)from"utils";
import void ClearContainer(Item@container)from"utils";
import void MoveItemsCritterToCont(Critter&crFrom,Item&contTo,uint specid)from"utils";
import string GetCritterInfo(Critter&cr)from"utils";
import bool AddExpTeam(Critter&critter,int xp)from"utils";
import void ClearEnemyStack(Critter&critter)from"utils";
import void ClearEnemyStacksOnMap(Map@map)from"utils";
import bool IsCurrentEnemy(Critter&cr,uint targetId)from"utils";
import string@GetSafePlayerName(uint id)from"utils";
import string GetSafePlayerName(uint id,string&onSuccess,string&onError)from"utils";
import IDateTime@GetCurrentDateTime()from"utils";
import string GetCurrentDateTimeString()from"utils";
import string GetCurrentDateTimeString(bool date,bool time)from"utils";
import Critter@GetMostSkilled(array<Critter@>@group,int skill)from"utils";
import string GetAuthString(Critter&player)from"utils";
import string GetAuthString(int accesslevel)from"utils";
import bool CanRequestHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player)from"utils";
import void SetRequestedHelp(Critter&player,int minutes)from"utils";
import Critter@GetOnlineGM()from"utils";
import void Preprocess(Critter&player,string&commandString)from"utils";
import bool IsHumanoid(Critter@cr)from"utils";
import uint GetGroupIndex(Critter&cr)from"utils";
import uint GetGroupIndex(int st)from"utils";
import void SetGroupIndex(Critter&cr,uint val)from"utils";
import uint GetGroupRank(Critter&cr)from"utils";
import void SetGroupRank(Critter&cr,uint val)from"utils";
import uint GetGroupMode(Critter&cr)from"utils";
import void SetGroupMode(Critter&cr,uint val)from"utils";
import void SetGroupInfo(Critter&cr,uint faction,uint rank,uint mode)from"utils";
import void SetGroupInfoPack(Critter&cr,uint packInfo)from"utils";
import void ClearEvents(Critter&cr)from"utils";

import int GetGvar(uint gvar)from"utils";
import void SetGvar(uint gvar,uint value)from"utils";
import int GetLLvar(Location&location,uint llvar)from"utils";
import int GetLLvar(uint locationId,uint llvar)from"utils";
import void SetLLvar(Location&location,uint llvar,uint value)from"utils";
import int GetLMvar(Map&map,uint llvar)from"utils";
import int GetLMvar(uint mapId,uint llvar)from"utils";
import void SetLMvar(Map&map,uint llvar,uint value)from"utils";
import int GetLIvar(Item&item,uint llvar)from"utils";
import int GetLIvar(uint itemId,uint llvar)from"utils";
import void SetLIvar(Item&item,uint llvar,uint value)from"utils";
import int GetLvar(Critter&critter,uint lvar)from"utils";
import int GetLvar(uint id,uint lvar)from"utils";
import void SetLvar(Critter&critter,uint lvar,uint value)from"utils";
import void SetLvar(uint id,uint lvar,uint value)from"utils";
import int GetUvar(uint uvar,uint key,uint index)from"utils";
import void SetUvar(uint uvar,uint key,uint index,uint value)from"utils";

import uint GetContainerValue(Item@container)from"utils";
import uint BaseItemValue(uint pid,bool ammo)from"utils";
import uint BaseItemValue(uint pid,uint broken,uint det,bool ammo)from"utils";
import uint BaseItemValue(Item@item)from"utils";
import uint BaseItemValue(Item@item,uint proc)from"utils";
import uint BaseSingleItemValue(Item@item)from"utils";
import uint BaseSingleItemValue(Item@item,uint proc)from"utils";

import void SetBloodType(Critter@cr)from"utils";
import string GetBloodType(Critter@cr)from"utils";
import string GetBloodRandom()from"utils";

import void LogCommandUsage(Critter&player,string&commandString)from"utils";
import void DropTimeouts(Critter&cr)from"utils";

import bool HasItem(Critter@cr,uint pid)from"utils";
import bool HasSomeWeapon(Critter@cr)from"utils";
import uint GetBestWeaponSkill(Critter@cr)from"utils";
import void GiveBag(uint bag,Critter@cr)from"utils";
import void SetQuestGarbager(uint time,uint playerid,uint locid,uint var,uint val)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,bool isMob,uint level)from"utils";
import Critter@AddNpc(Map@map,uint16 pid,uint16 x,uint16 y,uint8 dir,array<int>params,uint dialogId,string&script,uint aiPack,uint bagId,uint teamId,uint factionRank,uint factionMode,bool isMob,uint level)from"utils";
import void AddScore(Critter@cr,uint score,uint points)from"utils";

import bool ReloadWeapon(Critter&cr)from"utils";
import Item@GetRadio(Critter&cr)from"utils";
import Item@GetRepairTool(Critter&cr)from"utils";
import Item@GetEquippedItem(Critter&cr,uint Pid)from"utils";
import Item@GetEquippedItem(Critter&cr,array<uint>&Pids)from"utils";
import Item@GetEquippedItemByType(Critter&cr,uint ItemType)from"utils"; 

import bool SkillRoll(Critter@cr,int skill,int bonus)from"utils";
import int SkillCheck(Critter&cr,int skill,int skillused,Item@item,int bonus)from"utils";
import string SkillName(uint8 skill)from"utils";
import void ChangeCrTypeSafe(Critter&cr,uint8 crType)from"utils";

import bool Pickable(Item@item)from"utils";

import void TransferItemsToContOnMap(Critter&cr,Map@map,int entid,int contpid,int itemtypes)from"utils";
import void TransferItemsFromContOnMap(Critter&cr,Map@map,int entid,int contpid)from"utils";

import string IpToString(uint ip)from"utils";

import void VerboseAction(Critter&cr,string&text)from"utils";
import void VerboseAction(Critter&cr,Critter&target,string&text)from"utils";
import void VerboseExperience(Critter&cr,int xpDiff,int levelDiff)from"utils";

import void SetChosenActions(Critter&cr,array<int>&actions)from"utils";

import void HexLine(uint16 x0,uint16 y0,uint16 x1,uint16 y1,array<uint16>@xList,array<uint16>@yList)from"utils";
import void HexCircle(uint16 x0,uint16 y0,uint16 radius,array<uint16>@xList,array<uint16>@yList)from"utils";

import void StartPersonalDataCleanup()from"utils";

import bool IsPersonalData(Location&location,string&name)from"utils";
import bool GetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Location&location,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Location&location,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Location&location,string&name)from"utils";

import bool IsPersonalData(Map&map,string&name)from"utils";
import bool GetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Map&map,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Map&map,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Map&map,string&name)from"utils";

import bool IsPersonalData(Critter&critter,string&name)from"utils";
import bool GetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Critter&critter,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Critter&critter,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Critter&critter,string&name)from"utils";

import bool IsPersonalData(Item&item,string&name)from"utils";
import bool GetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import uint GetPersonalData(Item&item,array<string>&names,array<array<uint8>>&values)from"utils";
import bool SetPersonalData(Item&item,string&name,array<uint8>&value)from"utils";
import bool UnsetPersonalData(Item&item,string&name)from"utils";

import bool FindPreferredGridApprox(Map&map,uint16&hx,uint16&hy)from"utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";    

import int FindInArray(array<int>&arr,int value)from"utils";
import int FindInArray(array<uint>&arr,uint value)from"utils";
import int FindInArray(array<uint16>&arr,uint16 value)from"utils";
import int FindInArray(array<uint8>&arr,uint8 value)from"utils";
import bool FindInArray(array<int>&arr,int id,int&index)from"utils";
import bool FindInArray(array<uint>&arr,uint id,int&index)from"utils";
import bool FindInArray(array<uint8>&arr,uint8 id,int&index)from"utils";
import int FindInArray(array<string>&arr,string&value)from"utils";
import int FindInArray(array<string@>@arr,string&value)from"utils";
import bool Present(int what,array<int>&where)from"utils";
import bool Present(uint what,array<uint>&where)from"utils";
import bool Present(uint16 what,array<uint16>&where)from"utils";
import bool Present(string&what,array<string>&where)from"utils";
import bool Present(string&what,array<string@>@where)from"utils";

import uint CreateLocationForGroup(Critter&player,uint16 pid,uint16 worldX,uint16 worldY,array<Critter@>&)from"utils";
import bool FindFirstFreeHex(Map@map,uint16&x,uint16&y,uint8 dir,uint16 maxSteps)from"utils";
import bool FindNearestFreeHex(Map&map,uint16&x,uint16&y,uint radius)from"utils";

import bool GetItemCoordinates(Item&item,uint&mapID,uint16&x,uint16&y)from"utils";
import bool ItemOnHex(uint16 pid,Map@map,uint16 x,uint16 y)from"utils";

import void PrintCallstack()from"utils";
import void PrintCallstack(int level)from"utils";

import bool LocationHasCritters(Location&loc,uint findType)from"utils";
import uint LocationGetCritters(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint LocationGetPlayersAndFollowers(Location&loc,uint findType,array<Critter@>@critters)from"utils";
import uint MapGetPlayersAndFollowers(Map&map,uint findType,array<Critter@>@critters)from"utils";
import uint CritterGetPlayersAndFollowers(Critter&critter,bool lookOnMe,uint findType,array<Critter@>@critters)from"utils";
import bool LocationHasItems(Location&loc,uint16 protoId)from"utils";
import uint LocationGetItems(Location&loc,uint16 protoId,array<Item@>@items)from"utils";
import void LocationDeleteItems(Location&loc,uint16 protoId)from"utils";

import bool IsDisposableEncounter(Location@loc)from"utils";

import bool IsT4Item(Item&item)from"utils";
import bool IsT3Item(Item&item)from"utils";
import uint16 AddT3Item()from"utils";
import uint16 AddT4Item()from"utils";
import uint16 AddImplant()from"utils";
import uint16 AddT4BP()from"utils";
import uint16 AddRareAmmo()from"utils";
import uint16 AddTypicalAmmo()from"utils";

import void SetDeterioration(Item&item)from"utils";  

shared class CPosition
{
	uint x;
	uint y;
	uint dir;
};

shared interface IRect
{
	bool IsWithin(Critter&cr);
};

shared class Rect:IRect
{
	uint x1;
	uint y1;
	uint x2;
	uint y2;
	
	Rect(uint x1,uint y1,uint x2,uint y2)
	{
		this.x1=x1;
		this.y1=y1;
		this.x2=x2;
		this.y2=y2;
	}
	
	bool IsWithin(Critter&cr)
	{
		return((cr.HexX>=this.x1&&cr.HexX<=this.x2)&&(cr.HexY>=this.y1&&cr.HexY<=this.y2));
	}
};

shared interface IDateTime
{
	uint16 get_Year();
	uint16 get_Month();
	uint16 get_DayOfWeek();
	uint16 get_Day();
	uint16 get_Hour();
	uint16 get_Minute();
	uint16 get_Second();
	uint16 get_Milliseconds();
	string@ToString();
};                                                                                                                                                                                                                                                                                                                                                                                                                                     

import void InitLogs()from"logging";
import void FLog(uint logindex,string&text)from"logging";
import void ILog(string&section,string&text)from"logging";
import void GMLog(Critter&cr,string&text)from"logging";
import void CloseLogs()from"logging";
import uint AddLog(string&filename)from"logging";
import uint AddLog(string&filename,uint index)from"logging";                                                         

import void WLog(string&type,string&message)from"debug";
import void WLog(string&type,string&message,int level)from"debug";
import void InitDebug()from"debug";          

import void InitEconomy()from"economy";
import void SendLevelThresholds(Critter&)from"economy"; 

import bool BankAccountExists(uint bankid,uint account)from"economy";
import bool BankAccountRemoveMoney(uint bankid,uint account,uint amount)from"economy";
import bool BankHasAccess(uint bankid,uint account,uint playerid)from"economy";
import int BankGetAccountBalance(uint bankid,uint account)from"economy";
import int BankGetAccountID(uint bankid,uint playerid)from"economy";
import uint BankAddAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankCreateAccount(uint bankid,uint playerid)from"economy";
import uint BankDepositMoney(uint bankid,uint playerid,uint account,int amount)from"economy";
import uint BankGetAccessCount(uint bankid,uint account)from"economy";
import uint BankGetAccountOwner(uint bankid,uint account)from"economy";
import uint BankGetAccountType(uint bankid,uint account)from"economy";
import uint BankGetCreditRating(uint bankid,uint account)from"economy";
import uint BankGetLoan(uint bankid,uint account)from"economy";
import uint BankRemoveAccess(uint bankid,uint account,uint playerid)from"economy";
import uint BankSetAccountType(uint bankid,uint account,uint accounttype)from"economy";
import uint BankSetCreditRating(uint bankid,uint account,uint rating)from"economy";
import uint BankSetLoan(uint bankid,uint account,uint loan)from"economy";
import uint BankTakeLoan(uint bankid,uint account,uint amount)from"economy";
import uint BankTransferMoney(uint bankid,uint fromaccount,uint toaccount,uint amount)from"economy";
import uint BankWithdrawMoney(uint bankid,uint playerid,uint account,int amount)from"economy"; 

import bool BanksTransferFromCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import bool BanksTransferToCritter(Critter&critter,uint amount,uint type,bool virtual)from"economy";
import uint BanksGetTotalMoney()from"economy";
import void BanksAddMoney(uint amount)from"economy";
import void BanksRemoveMoney(uint amount)from"economy"; 

import bool BankAddMoney(uint bankid,uint amount)from"economy";
import bool BankRemoveMoney(uint bankid,uint amount)from"economy";
import bool BankSetMoney(uint bankid,uint amount)from"economy";
import uint BankGetLoanInterest(uint bankid)from"economy";
import uint BankGetNumberOfAccounts(uint bankid)from"economy";
import float BankGetSaveInterest(uint bankid)from"economy";
import uint BankGetTotalMoney(uint bankid)from"economy";
import uint BankGetTotalBalance(uint bankid)from"economy";
import float BankGetReserveRatio(uint bankid)from"economy";
import uint BankSetLoanInterest(uint bankid,uint interest)from"economy";
import uint BankSetSaveInterest(uint bankid,float interest)from"economy";
import bool BankTransferFromCritter(uint bankId,Critter&critter,uint amount,uint type,bool virtual)from"economy";

import void SaveBankData()from"economy";   

import int GetItemSellModifier(Critter&player,Critter&trader)from"economy";
import int GetItemBuyModifier(Critter&player,Critter&trader)from"economy";
import uint GetItemCost(Item&item,Critter&cr,Critter&trader,bool sell)from"economy";
import uint GetItemCostPlain(Item&item,Critter&cr,Critter&trader)from"economy";

import array<int>GetTraderLevels(Critter@npc)from"economy";
import uint GetTraderLevel(Critter@npc,uint type)from"economy";

import uint ItemLevel(Item&item)from"economy";
import uint ItemLevel(uint pid)from"economy";
import uint TraderCapacity(Critter@npc)from"economy";
import uint TraderCapacity(Critter@npc,uint type,uint level)from"economy";
import uint TraderMoneyCapacity(Critter@npc)from"economy";
import uint TradingItemType(Item&item)from"economy";
import uint TradingItemType(uint pid)from"economy";                                                                                                          

const string@FD_Bank_Result2String(uint res)
{
	if(res==(1))
	return"FD_BANK_RESULT_SUCCESS";
	else if(res==(2))
	return"FD_BANK_RESULT_UNKNOWN";
	else if(res==(3))
	return"FD_BANK_RESULT_TOO_MANY_ACCOUNTS";
	else if(res==(4))
	return"FD_BANK_RESULT_ALREADY_HAS_ACCOUNT";
	else if(res==(5))
	return"FD_BANK_RESULT_NOT_ENOUGH_MONEY";
	else if(res==(6))
	return"FD_BANK_RESULT_BANK_FULL";
	else if(res==(7))
	return"FD_BANK_RESULT_BANK_EMPTY";
	else if(res==(8))
	return"FD_BANK_RESULT_DATA_ERROR";
	else if(res==(9))
	return"FD_BANK_RESULT_INVALID_PLAYER";
	else if(res==(10))
	return"FD_BANK_RESULT_NO_ACCOUNT";
	else
	return"FD_Result: Unknown error code";
}                        

import void AddWaitPlan(Critter&critter,uint waittime)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target,uint minhp)from"npc_common";
import bool AttackCritter(Critter&attacker,Critter&target)from"npc_common";
import bool CanUseWeapon(Critter&critter,Item@weapon)from"npc_common";
import bool CanUseWeapon(Critter&critter,uint proto)from"npc_common";
import void ClearIllegalFlags(Critter&critter)from"npc_common";
import bool HasIntelligentBrain(Critter&follower)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int reason)from"npc_common";
import void SetCritterIllegalFlag(Critter&critter,int location,int reason)from"npc_common";
import bool HasSameScript(Critter&critter1,Critter&critter2)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter)from"npc_common";
import bool IsFlaggedAsIllegal(Critter&critter,int location)from"npc_common";
import bool IsInLocation(Critter&critter,int locationPID)from"npc_common";
import bool MoveByDir(Critter&critter,uint8 dir,uint steps,bool run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,bool Run)from"npc_common";
import void MoveRandom(Critter&npc,uint maxDist,uint stepDist,bool Run)from"npc_common";
import void TransferToNPCMap(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter)from"npc_common";
import void UnsetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import void UnsetCritterIllegalFlag(uint id,int location)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter)from"npc_common";
import int GetCritterIllegalFlag(Critter&critter,int location)from"npc_common";
import bool HasUnusableWeapon(Critter&critter,uint bag)from"npc_common";
import bool HasUnusableWeapon(Critter&critter)from"npc_common";
import bool HasUnusableWeapon(uint crpid,uint bag)from"npc_common";
import Item@ArmBestWeapon(Critter&critter)from"npc_common";
import Item@ArmFavoriteWeapon(Critter&critter)from"npc_common";
import void PutAwayItems(Critter&critter)from"npc_common";
import void DropAllItems(Critter&critter)from"npc_common";
import void PickAllItemsOnHex(Critter&critter)from"npc_common";
import void Heal(Critter&cr)from"npc_common";
import void TryReportOffense(Critter@cr,Critter@offender,int reputationdrop)from"npc_common";
import uint GetCrittersWithScript(Map&map,uint16 pid,uint findType,string&scriptName,string&funcDeclaration,array<Critter@>@critters)from"npc_common";
import uint GetCrittersLoc(Location&loc,uint16 pid,uint findType,array<Critter@>@critters)from"npc_common";
import uint GetNearGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,array<Critter@>@crits)from"npc_common";
import uint GetNearFactionGuards(Map@map,uint16 hexX,uint16 hexY,uint radius,uint faction,array<Critter@>@crits)from"npc_common";
import string GenerateNewName(Critter&critter)from"npc_common";
import string GetStoredName(Critter&critter)from"npc_common";
import string GetStoredFirstName(Critter&critter)from"npc_common";
import bool Flee(Critter&cr)from"npc_common";
import bool Flee(Critter&cr,bool Run)from"npc_common";
import void FindFreeHexes(Map@map,uint16 hexX,uint16 hexY,int&num,array<uint16>&coordsX,array<uint16>&coordsY)from"npc_common";
import bool FindNearestFreeHex(Map@map,uint16 hexX,uint16 hexY,uint16&outX,uint16&outY)from"npc_common";
import void SetDeleteEvent(Critter&cr,uint time)from"npc_common";
import void DropDeleteEvent(Critter&cr)from"npc_common";              

import bool IsNight()from"world_common";
import bool IsDay()from"world_common";
import bool IsMorning()from"world_common";
import bool IsAfternoon()from"world_common";
import bool IsEvening()from"world_common";
import bool IsHospital(Map@map)from"world_common";
import bool IsCave(Map@map)from"world_common";
import bool IsMine(Map@map)from"world_common";
import bool IsJail(Map@map)from"world_common";
import bool IsBase(Map@map)from"world_common";
import bool IsTent(Map@map)from"world_common";
import bool IsWarzone(Map@map)from"world_common

import bool AddMiscPlane(Critter&npc,uint priority,uint waitMinute,string@funcName)from"npc_planes";
import bool AddMiscPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint waitSecond,string@funcName)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)from"npc_planes";
import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)from"npc_planes";
import bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen,bool run)from"npc_planes";
import bool AddHealCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";
import bool AddDoctorCritterPlane(Critter&npc,uint priority,Critter@target,bool run)from"npc_planes";

import uint EraseAttackPlane(Critter&npc,uint priority,Critter&target)from"npc_planes";
import uint EraseAttackPlane(Critter&npc,uint priority,uint critId)from"npc_planes";           

const uint herdsmanPid=(142);

const uint brahminPid=(523);

const uint reputationNeeded=50;

const uint brahminStartingCount=10;

const uint herdsmanLifeParam=200;

const bool brahminLootEnabled=false;

const int reputationPenaltyForDeathByPlayer=15;

const int reputationPenaltyForDeath=5;

const uint cooldownInMinutes=5;

const uint capsReward=5;

const uint xpReward=10;

const uint questTimeLimitInMinutes=60; 

uint16[]locProtoIds={(78),(78)};
uint16[]locXCoord={1880,1920};
uint16[]locYCoord={1630,1040};                      

bool d_CheckReputationTooLow(Critter&player,Critter@npc,int factionReputationIndex)
{
	return(player.Reputation[factionReputationIndex]<reputationNeeded);
}

bool d_CheckQuestRetakable(Critter&player,Critter@npc)
{
	uint cooldownValue=GetLvar(player,(7316));
	return(__FullSecond>cooldownValue||cooldownValue==0);
}

void r_RewardPlayer(Critter&player,Critter@npc)
{
	int brahminCount=GetLvar(player,(7312));
	int distance=GetLvar(player,(7314));
	uint reward=capsReward*distance*brahminCount/(50);
	BanksTransferToCritter(player,reward,(0),false);
	
	SetLvar(player,(7311),(8));
	uint cooldownVal=__FullSecond+((cooldownInMinutes)*__TimeMultiplier*60);
	SetLvar(player,(7316),cooldownVal);
}

void r_InitiateRun(Critter&player,Critter@npc,int destinationInd,int factionReputationIndex)
{
	if(uint(destinationInd)>=locProtoIds.length()||uint(destinationInd)>=locXCoord.length()||
	uint(destinationInd)>=locYCoord.length())
	Log("Brahmin Run Error - destination location index too large");
	
	Critter@[]critters={player};
	uint locId=CreateLocation(locProtoIds[destinationInd],locXCoord[destinationInd],locYCoord[destinationInd],critters);
	Location@loc=GetLocation(locId);
	if(!(@loc!=null))
	return;
	loc.Color=((uint(((120)<<24)|(((255)&0xFF)<<16)|(((128)&0xFF)<<8)|((0)&0xFF))));
	loc.Update();
	loc.AutoGarbage=false;
	
	SetLvar(player,(7312),brahminStartingCount);
	
	SetLvar(player,(7313),factionReputationIndex);
	
	SetLvar(player,(7315),locId);
	
	SetLvar(player,(7317),0);  
	
	Location@playerLoc=GetLocationOf(player);
	if(!(@playerLoc!=null))
	return;
	int xCoordLen=loc.WorldX-playerLoc.WorldX;
	int yCoordLen=loc.WorldY-playerLoc.WorldY;
	int pathLength=sqrt(xCoordLen*xCoordLen+yCoordLen*yCoordLen);
	
	SetLvar(player,(7314),pathLength); 
	
	player.TransitToGlobal(true);
	
	SetLvar(player,(7311),(1));
	
	player.SetEventExt((0),"quest_brahmin_run@_BrahminRunMapEnter");
	
	SetQuestGarbager(questTimeLimitInMinutes,player.Id,locId,(7311),(9));
} 

void r_HerdsmanEncounterLeave(Critter&player,Critter@herdsman)
{
	if(player.Param[(238)]<=0&&deleteBrahminAndHerdsmanFromEncounter(player,herdsman))
	player.TransitToGlobal(true);
} 

bool d_HerdsmanCannotSetOut(Critter&player,Critter@herdsman)
{
	uint cooldownValue=GetLvar(herdsman,(7316));
	return(__FullSecond<cooldownValue);
}

bool d_PlayerNotARunner(Critter&player,Critter@herdsman)
{
	uint ownerId=herdsman.Param[(933)];
	return(ownerId!=player.Id);
}

bool d_BrahminAndHerdsmanAttacked(Critter&player,Critter@herdsman)
{
	if(player.Param[(238)]>0)
	return true;
	if(herdsman.Param[(238)]>0)
	return true;
	Map@map=herdsman.GetMap();
	if((@map!=null))
	{
		uint ownerId;
		array<Critter@>brahmin;
		map.GetCritters(brahminPid,(0x0F),brahmin);
		for(uint i=0;i<brahmin.length();i++)
		{
			ownerId=brahmin[i].Param[(933)];
			if(ownerId!=player.Id)
			{
				continue;
			}
			if(brahmin[i].Param[(238)]>0)
			return true;
		}
	}
	return false;
} 

bool d_CheckCorrectLocation(Critter&player,Critter@npc)
{
	return(uint(GetLvar(player,(7315)))==npc.GetMap().GetLocation().Id);
}   

bool _BrahminRunMapEnter(Critter&player,Map&map)
{
	if(!player.IsPlayer()||GetLvar(player,(7311))!=(1))
	{
		player.SetEventExt((0),"");
		return false;
	}
	
	if(!(@map!=null))
	return false;
	
	if(map.GetLocation().Id==uint(GetLvar(player,(7315))))
	{
		finishQuest(player,(7),((7311)*1000+7));
		int brahminCount=GetLvar(player,(7312));
		int distance=GetLvar(player,(7314));
		uint reward=xpReward*distance*brahminCount/(50);
		AddExpTeam(player,reward);
		map.GetLocation().AutoGarbage=true;
	}
	else if(IsHospital(map))
	{
		finishQuest(player,(6),((7311)*1000+6));
	}
	else if(IsTown(map))
	{
		finishQuest(player,(4),((7311)*1000+4));
	}
	else
	{
		if(IsEncounterMap(map))
		brahminRunEncounter(player,map);
		return false;
	}
	return false;
} 

void brahminRunEncounter(Critter&player,Map@map)
{
	int numberOfBrahmin=GetLvar(player,(7312));
	
	GameVar@herdLocVar=GetLocalVar((7317),player.Id);
	uint herdLocId=herdLocVar.GetValue();
	
	array<Critter@>brahmin;
	brahmin.resize(numberOfBrahmin);
	
	if(!(@map!=null))
	return;
	
	Location@loc=map.GetLocation();
	if((@loc!=null))
	{
		
		if(loc.Id==herdLocId)
		return;
		herdLocVar=loc.Id;
	}
	
	array<Critter@>critters;
	uint critterCount=map.GetCritters(0,(0x0F)|(0x20),critters);
	uint8 dirToSpawn;
	if(critterCount>0)
	{
		uint xSum=0;
		uint ySum=0;
		for(uint i=0;i<critterCount;i++)
		{
			xSum+=critters[i].HexX;
			ySum+=critters[i].HexY;
		}
		uint16 xAvg=xSum/critterCount;
		uint16 yAvg=ySum/critterCount;
		dirToSpawn=GetDirection(xAvg,yAvg,player.HexX,player.HexY);
	}
	else
	{
		dirToSpawn=Random(0,5);
	}
	
	uint16 hexX=player.HexX;
	uint16 hexY=player.HexY;
	uint16 xSpawn=0;
	uint16 ySpawn=0;
	uint8 spawnDir=(dirToSpawn+3)%6;
	map.MoveHexByDir(hexX,hexY,dirToSpawn,Random(3,6));
	FindNearestFreeHex(map,hexX,hexY,xSpawn,ySpawn);
	
	map.MoveHexByDir(hexX,hexY,dirToSpawn,3);
	
	array<uint16>brahmaHexX;
	array<uint16>brahmaHexY;
	int spawnedBrahminNumber=numberOfBrahmin;
	FindFreeHexes(map,hexX,hexY,spawnedBrahminNumber,brahmaHexX,brahmaHexY); 
	
	int[]params={(7),herdsmanLifeParam,(933),player.Id,(536),1};
	Critter@herdsman=AddNpc(map,herdsmanPid,xSpawn,ySpawn,spawnDir,params,(10282),"quest_brahmin_run@_HerdsmanInit",(147),0,0,false,1);
	if((@herdsman!=null))
	{
		uint cooldownVal=__FullSecond+((10)*__TimeMultiplier);
		SetLvar(herdsman,(7316),cooldownVal);
	}
	
	for(int i=0;i<spawnedBrahminNumber;i++)
	{
		@brahmin[i]=map.AddNpc(brahminPid,brahmaHexX[i],brahmaHexY[i],spawnDir,null,null,"_BrahminInit");
		if((@brahmin[i]!=null))
		{
			brahmin[i].ParamBase[(933)]=player.Id;
			if(!brahminLootEnabled)
			brahmin[i].ParamBase[(532)]=1;
		}
		
	} 
	
	for(uint j=0;j<critterCount;j++)
	{
		if(critters[j].CheckEnemyInStack(player.Id))
		{
			if((@herdsman!=null))
			{
				AddAttackPlane(critters[j],Random(50,70),herdsman);
				critters[j].AddEnemyInStack(herdsman.Id);
			}
			for(int i=0;i<spawnedBrahminNumber;i++)
			{
				AddAttackPlane(critters[j],Random(50,70),brahmin[i]);
				critters[j].AddEnemyInStack(brahmin[i].Id);
			}
		}
	}
}  

void _HerdsmanInit(Critter&herdsman,bool firstTime)
{
	herdsman.SetEvent((16),"_BrahminRunNPCAttacked");
	herdsman.SetEvent((2),"_HerdsmanKilled");
	
	herdsman.SetEvent((0),"_HerdsmanIdle");
	herdsman.SetEvent((1),"_HerdsmanFinish");
}

void _BrahminInit(Critter&brahmin,bool firstTime)
{
	brahmin.SetEvent((16),"_BrahminRunNPCAttacked");
	brahmin.SetEvent((2),"_BrahminKilled");
	brahmin.SetEvent((1),"_BrahminFinish");
}

bool _BrahminRunNPCAttacked(Critter&cr,Critter&attacker)
{
	if(!(@attacker!=null))
	return true;
	uint16 hexX=cr.HexX;
	uint16 hexY=cr.HexY;
	uint8 dir=GetDirection(attacker.HexX,attacker.HexY,hexX,hexY);
	Map@map=cr.GetMap();
	if(!(@map!=null))
	return true;
	map.MoveHexByDir(hexX,hexY,dir,8);
	cr.DropPlanes();
	AddWalkPlane(cr,(20),hexX,hexY,dir,true,0);
	return true;
}

void _BrahminKilled(Critter&brahmin,Critter@killer)
{
	uint playerId=brahmin.Param[(933)];
	Critter@questingPlayer=GetCritter(playerId);
	
	punishGroup(killer,questingPlayer);
	
	GameVar@brahminCounterVar=GetLocalVar((7312),playerId);
	brahminCounterVar=brahminCounterVar.GetValue()-1; 
	
	if(brahminCounterVar.GetValue()<1)
	{
		if(GetLvar(questingPlayer,(7311))!=(1))
		return;
		
		finishQuest(questingPlayer,(2),((7311)*1000+2));
	}
}

void _HerdsmanKilled(Critter&herdsman,Critter@killer)
{
	uint playerId=herdsman.Param[(933)];
	Critter@questingPlayer=GetCritter(playerId);
	
	punishGroup(killer,questingPlayer);
	
	if(!(@questingPlayer!=null))
	return;
	
	if(GetLvar(questingPlayer,(7311))!=(1))
	return;
	
	finishQuest(questingPlayer,(3),((7311)*1000+3));
}

void _HerdsmanIdle(Critter&herdsman)
{
	Critter@questingPlayer=GetCritter(herdsman.Param[(933)]);
	if(!(@questingPlayer!=null))
	return;
	Location@playerLoc=GetLocationOf(questingPlayer);
	Location@herdsmanLoc=GetLocationOf(questingPlayer);
	uint playerLocId=((@playerLoc!=null)?playerLoc.Id:0);
	uint herdsmanLocId=((@herdsmanLoc!=null)?herdsmanLoc.Id:0);
	if(playerLocId==herdsmanLocId)
	return;   
	
	if(!deleteBrahminAndHerdsmanFromEncounter(questingPlayer,herdsman))
	{
		if(GetLvar(questingPlayer,(7311))==(1))
		finishQuest(questingPlayer,(5),((7311)*1000+5));
		herdsman.SetEvent((0),"");
		herdsman.ParamBase[(933)]=0;
	} 
	
}

void _HerdsmanFinish(Critter&herdsman,bool deleted)
{ 
	
	if(!herdsman.IsDead()&&herdsman.Param[(238)]>0)
	{
		_HerdsmanKilled(herdsman,null);
		return;
	}
	Critter@questingPlayer=GetCritter(herdsman.Param[(933)]);
	if(playerTravelsWithCar(questingPlayer))
	{
		if(GetLvar(questingPlayer,(7311))!=(1))
		return;
		
		finishQuest(questingPlayer,(5),((7311)*1000+5));
	}
	
}

void _BrahminFinish(Critter&brahmin,bool deleted)
{ 
	
	if(!brahmin.IsDead()&&brahmin.Param[(238)]>0)
	_BrahminKilled(brahmin,null);
}  

void punishGroup(Critter@killer,Critter@questingPlayer)
{
	if(!(@questingPlayer!=null))
	return;
	int cap;
	int penalty;
	Critter@groupLeader;
	if((@killer!=null))
	@groupLeader=killer.GetFollowLeader();
	if((@killer!=null)&&killer.IsPlayer()&&
	(killer.Id==questingPlayer.Id||((@groupLeader!=null)&&groupLeader.Id==questingPlayer.Id)))
	{
		
		cap=-2000000000;
		penalty=reputationPenaltyForDeathByPlayer;
		
	}
	else
	{
		cap=0;
		penalty=reputationPenaltyForDeath;
	}
	
	uint factionRepIndex=GetLvar(questingPlayer,(7313));
	
	array<Critter@>group(1);
	@group[0]=questingPlayer;
	questingPlayer.GetFollowGroup((0x10),group);
	
	for(uint i=0;i<group.length();i++)
	{
		SubReputation(group[i],factionRepIndex,penalty,cap);
	}
} 

bool deleteBrahminAndHerdsmanFromEncounter(Critter@questingPlayer,Critter@herdsman)
{
	if(herdsman.Param[(238)]>0)
	return false;
	Map@map=herdsman.GetMap();
	if((@map!=null))
	{
		uint ownerId=herdsman.Param[(933)];
		
		array<Critter@>brahmin;
		uint brahminCount=map.GetCritters(brahminPid,(0x03),brahmin);
		array<bool>belongToPlayer(brahminCount);
		for(uint i=0;i<brahminCount;i++)
		{
			ownerId=brahmin[i].Param[(933)];
			if(ownerId!=questingPlayer.Id)
			{
				belongToPlayer[i]=false;
				continue;
			}
			else
			belongToPlayer[i]=true;
			if(brahmin[i].Param[(238)]>0)
			return false;
		}
		for(uint i=0;i<brahmin.length();i++)
		{
			if(belongToPlayer[i])
			{
				DeleteNpc(brahmin[i]);
			}
		}
		DeleteNpc(herdsman);
	}
	return true;
} 

void finishQuest(Critter&player,int questValue,uint message)
{
	player.SetEventExt((0),"");
	
	SetLvar(player,(7311),questValue);
	uint cooldownVal=__FullSecond+((cooldownInMinutes)*__TimeMultiplier*60);
	SetLvar(player,(7316),cooldownVal);
	
	scrapTargetLocation(player.Id);
} 

void scrapTargetLocation(uint playerId)
{
	Location@loc=GetLocation(GetLvar(playerId,(7315)));
	if((@loc!=null))
	{
		loc.AutoGarbage=true;
	}
} 

bool playerTravelsWithCar(Critter@player)
{
	if(!(@player!=null))
	return false;
	
	array<Critter@>globalGroup=player.GetGlobalGroup();
	for(uint i=0,j=globalGroup.length();i<j;i++)
	{
		if(globalGroup[i].GetItemsByType((13),null)>0)
		return true;
	}
	return false;
}                      

