//
// FOnline: 2238
// Rotators
//
// parameters.fos
//

#include "_macros.fos"
#include "MsgStr.h"
# include "_defines.fos"
#include "lexems_h.fos"

#ifdef __CLIENT
# include "_client_defines.fos"

import void   SetChosenTabLevelUp(bool enable)  from "chosen_tabs";
import string critter_description(CritterCl& cr, int lookType) from "client_interface";
import int    GUI_GetActiveScreen() from "client_gui";
#endif

#ifdef __SERVER
# include "achievements_h.fos"
# include "backend_h.fos"
# include "logging_h.fos"

import Critter@ GetMaster(Critter& follower) from "follower";
import void     PerkUp(Critter& cr, uint perk, int from) from "perks";
import void     PerkDown(Critter& cr, uint perk, int tolevel) from "perks";
import bool     IsHumanoid(Critter@ cr) from "utils";
import void     VerboseExperience(Critter& cr, int xpDiff, int levelDiff) from "utils";
import void 	AddScore(Critter@ cr, uint score, uint points) from "utils";

int getParamDialog_Reputation(Critter@ master, Critter@ slave, uint index)
{
    if(!valid(master))
        return 0;
    //if(valid(slave) && master.Param[PE_SEX_APPEAL] != 0 && master.Param[ST_GENDER] != slave.Param[ST_GENDER])
     //   return MAX(master.Param[index], 250);
    return master.Param[index];
}

void changedParam_Hp(Critter& cr, uint, int oldValue)   // server
{
    int curHp = cr.Param[ST_CURRENT_HP];
    if(curHp <= 0 && cr.IsLife())
        cr.ParamBase[ST_CURRENT_HP] = 1;
    if(cr.Param[PE_DEAD_MAN_WALKING] != 0)
    {
        if(curHp < __DeadHitPoints && !cr.IsDead())
            cr.ParamBase[ST_CURRENT_HP] = __DeadHitPoints + 1;
    }
    else if(curHp < __DeadHitPoints && !cr.IsDead())
        cr.ParamBase[ST_CURRENT_HP] = __DeadHitPoints / 2 + 1;
    int maxHp = cr.Param[ST_MAX_LIFE];
    if(curHp > maxHp)
    {
        cr.ParamBase[ST_CURRENT_HP] = maxHp;
        curHp = maxHp;
    }
    /* set health level */

    if(cr.IsDead())
        cr.ParamBase[ST_HEALTH_LEVEL] = -1024;
    else if(curHp == maxHp)
        cr.ParamBase[ST_HEALTH_LEVEL] = 4;
    else
        cr.ParamBase[ST_HEALTH_LEVEL] = (3 * curHp) / maxHp + 1;

}
int chbonus(Critter& cr)
{
	int real_ch = cr.ParamBase[ST_CHARISMA];
	if(cr.Param[PE_GAIN_CHARISMA]>0) real_ch += cr.Param[PE_GAIN_CHARISMA] * 2; //perk
	if(cr.Param[TRAIT_SKILLED]>0) real_ch += 1; //gifted
	if(cr.Param[PE_IMP_CHARISMA]>0) real_ch += cr.Param[PE_IMP_CHARISMA];//implant
	if(cr.Param[PE_CHOSEN]>0) real_ch += 3; //perk
	if(cr.Param[PE_SOLDIER]>0) real_ch += 1; //perk
	
	switch(real_ch)
	{
	case 1:
	case 2:
	case 3:
	case 4:
	return 0;
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
	return 1;
	case 10:
	case 11:
	case 12:
	case 13:
	case 14:
	return 2;
	case 15:
	case 16:
	case 17:
	case 18:
	case 19:
	return 3;
	case 20:
	return 4;
	}
	
	return 0;
}
void changedParam_Experience(Critter& cr, uint, int oldValue)   // server
{
    int exp = cr.ParamBase[ST_EXPERIENCE] - oldValue;
    int levelDiff = 0;
	int expk = 0;
	int chbonuse = 0;
		for(int i = 0; i < cr.ParamBase[ST_CHARISMA]; i++)
			if(i%5==0)
				chbonuse++;
    if(exp > 0)
    {
		if(cr.Param[EXP_BLOCKED]==0)
			{
			exp += exp * (((cr.Param[PE_SWIFT_LEARNER] + cr.Trait[TRAIT_LONER]) * (10 - cr.Param[PE_SOLDIER])) + ( cr.Param[ST_CHARISMA] * 2 ) ) / 100 ;
			
			}
			if(cr.Param[EXP_BLOCKED]>0 && cr.Param[PE_CHOSEN] > 0 || cr.Param[PE_DEATHCLAW] > 0 || cr.Param[PE_MUTANT] > 0 || cr.Param[PE_KILLER] > 0 || cr.Param[PE_PRIEST] > 0 || cr.Param[PE_HUNTER] > 0 || cr.Param[PE_ASSASIN] > 0 || cr.Param[PE_SOLDIER] > 0 || cr.Param[PE_RANDOM] > 0 || cr.Param[PE_SNIPER] > 0 || cr.Param[PE_INFANTRY] > 0 || cr.Param[PE_CYBORG] > 0 || cr.Param[PE_PARAMEDIC] > 0 || cr.Param[PE_LEADER] > 0)
			cr.ParamBase[EXP_BLOCKED]=0;
        LogExperience(cr, exp, -2);                                                      // special case to catch 'all experience'
        uint level = cr.Param[ST_LEVEL], oldLevel = level;
        //if(level >= __LevelCap && !__LevelCapAddExperience)
        //   return;

        cr.ParamBase[ST_EXPERIENCE] = oldValue + exp;

        if(level >= __LevelCap)
        {
            if(_IsFollower(cr))
			{
                VerboseExperience(cr, exp, 0);
            return;
			}
        }
		//official seki nerf
		if( level >= 2000)
		{
		if(cr.Param[ST_EXPERIENCE] > 1001000001)//confert to new system
			cr.ParamBase[ST_EXPERIENCE] = 0;
		if(cr.Param[ST_EXPERIENCE] > 9999 && cr.Param[ST_EXPERIENCE] < 2000000000) //now for every 10 000 exp get 10k exp stat
			{
			expk = (cr.Param[ST_EXPERIENCE] / 10000);
			cr.ParamBase[ST_EXP_10K] += expk;
			cr.ParamBase[ST_EXPERIENCE] = cr.Param[ST_EXPERIENCE] % 10000;
			cr.Say(SAY_NETMSG, "|-1 Seki, you have " + cr.Param[ST_EXP_10K] + "0000 Experience points, You need " + cr.Param[ST_LEVEL] + "0000 to Level Up");
			}
		if(cr.Param[ST_EXP_10K] > int(level))
			{
			level++;
			cr.ParamBase[ST_EXP_10K] = 0;
            cr.ParamBase[ST_LEVEL]++;
			
			if(cr.Trait[TRAIT_SKILLED] != 0)
                cr.ParamBase[ST_UNSPENT_SKILL_POINTS] += cr.ParamBase[ST_INTELLECT] - cr.Param[PE_SOLDIER];   	
			else cr.ParamBase[ST_UNSPENT_SKILL_POINTS] += 5 + cr.ParamBase[ST_INTELLECT] * 3 - cr.Param[PE_SOLDIER]; 
                cr.ParamBase[ST_UNSPENT_SKILL_POINTS] += cr.Param[PE_EDUCATED] * 2 - cr.Param[PE_SOLDIER]; 
			if((level % 5) == 0 && (level >= 55))
				cr.ParamBase[ST_UNSPENT_PERKS] += (1 + chbonuse);
				
				
			}
		return;
		}
        int perkUp = 3;
        while(true)
        {
            if(cr.Param[ST_EXPERIENCE] >= NextLevelNeedExp(cr))
            {
                level++;
                cr.ParamBase[ST_LEVEL]++;
				//AddScore(cr, SCORE_RITCH, 1);

                 // Czwarty tag skill
				    // if(cr.Param[ST_LEVEL]==12) cr.ParamBase[ST_UNSPENT_TAG]=1;

// Skill points
                if(cr.Trait[TRAIT_SKILLED] != 0)
                    cr.ParamBase[ST_UNSPENT_SKILL_POINTS] += cr.Param[ST_INTELLECT] - cr.Param[PE_SOLDIER];   	
				else cr.ParamBase[ST_UNSPENT_SKILL_POINTS] += 5 + cr.Param[ST_INTELLECT] * 3 - cr.Param[PE_SOLDIER]; 
                cr.ParamBase[ST_UNSPENT_SKILL_POINTS] += cr.Param[PE_EDUCATED] * 2 - cr.Param[PE_SOLDIER]; 


				//druto
				
				if(level < 30)			//	<= __LevelCap
				{
					cr.ParamBase[ST_MAX_LIFE] += cr.ParamBase[ST_ENDURANCE] / 2;                 // Add max hp
					if((cr.Param[ST_ENDURANCE]%2==1) && cr.Param[ST_LEVEL]%2==0) cr.ParamBase[ST_MAX_LIFE]+=1;  // Add additional 1 HP when odd EN numbers
					
					if((level % perkUp) == 0 && (level <= __LevelCap))
						cr.ParamBase[ST_UNSPENT_PERKS] = 1;
						
						
				
				}
				else if(level <= 99)		// raise HP until lvl 100
				{
					if(cr.Param[ST_LEVEL]%2 == 0)	cr.ParamBase[ST_MAX_LIFE] += 1;		// +1 HP for every odd value, max 35
				}
				if((level % 5) == 0 && (level >= 55))
						cr.ParamBase[ST_UNSPENT_PERKS] += 1 + chbonus(cr);
				if((level > 24) && (level < 30) && cr.Param[ST_UNSPENT_PERKS]!=0) 
                    cr.Say(SAY_NETMSG, "|0xCC0000 Remember to choose your Perk! If you don't do that until level 30, it will be lost!");
				if(level==30) cr.ParamBase[ST_UNSPENT_PERKS]=0;
            }
            else
                break;
        }
        levelDiff = level - oldLevel;
    }
}

void changedParam_Level(Critter& cr, uint a, int oldLevel)   // server
{
    if(cr.IsPlayer())
    {
        if(cr.Param[ST_LEVEL] == int(__LevelCap) && cr.GetScore(SCORE_ZOMBY) == 0)
            AddAchievement(cr, ACHIEVEMENT_MAN_OF_STEEL);
        return;
    }

    if(!_IsFollower(cr))
        return;
    else
    {
        Critter@ master = GetMaster(cr);
        if(valid(master) && IsLexem(cr, "$name"))
            master.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_FOLLOWER_GAIN_LEVELUP, "$name" + GetLexem(cr, "$name"));
    }

    if(cr.Param[ST_DIALOG_ID] == 0)       // JIC
        return;

    cr.SayMsg(SAY_SOCIAL, TEXTMSG_DLG, DLGSTR(cr.Param[ST_DIALOG_ID], STR_FOLLOWER_LEVELUP));
}

void changedParam_Perks(Critter& cr, uint perk, int oldValue)   // server
{
    int curValue = cr.Param[perk];
    if(curValue > oldValue)
        for(int i = oldValue; i < curValue; i++)
            PerkUp(cr, perk, i);
    else if(curValue < oldValue)
        for(int i = oldValue - 1; i >= curValue; i--)
            PerkDown(cr, perk, i);

    if(oldValue != curValue && cr.IsPlayer())
        FLog(LOG_PERKS, cr.Name + "(" + cr.Id + ") changing perk " + perk + " value: " + oldValue + " -> " + curValue);
}

void changedParam_Hide(Critter& cr, uint, int oldValue)   // server
{
    cr.RefreshVisible();
}

void changedParam_FastShot(Critter& cr, uint, int oldValue)   // server
{
    cr.ParamBase[MODE_NO_AIM] = (cr.Trait[TRAIT_FAST_SHOT] != 0 ? 1 : 0);
}


int NextLevelNeedExp(Critter& cr)   // Export
{
    int level = cr.Param[ST_LEVEL];
    return NUMERICAL_NUMBER(level) * 1000;
}

#endif

#ifdef __CLIENT
void changedParam_Level(CritterCl& cr, uint, int oldValue)   // client
{
    if(cr.ParamBase[ST_LEVEL] > oldValue && cr.IsChosen())
    {
        PlaySound("LEVELUP.ACM");
        Message(TEXTMSG_GAME, STR_GAIN_LEVELUP, FOMB_GAME);
        SetChosenTabLevelUp(true);
    }
}

void changedParam_Experience(CritterCl& cr, uint, int oldValue)   // client
{
    int curValue = cr.ParamBase[ST_EXPERIENCE];
	
	//if(cr.Param[ST_LEVEL] >= 2000)
	//{
	//if(cr.Param[ST_EXP_10K] > 0)
	//Message("|-1 Seki, you have " + cr.Param[ST_EXP_10K] + "0000 You need " + cr.Param[ST_LEVEL] + "0000 to Level Up", FOMB_GAME);
	//}
    if(curValue > oldValue && cr.IsChosen())
        Message(ReplaceText(GetMsgStr(TEXTMSG_GAME, STR_GAIN_EXPERIENCE), "VALUE", curValue - oldValue), FOMB_GAME);
}

void changedParam_UnspentPerks(CritterCl& cr, uint, int oldValue)   // client
{
    if(cr.Param[ST_UNSPENT_PERKS] > 0 && GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER)
        ShowScreen(CLIENT_SCREEN_PERK, 0, 0, 0);
}

void changedParam_UnspentTag(CritterCl& cr, uint, int oldValue)   // client
{
    
}

void changedParam_Hide(CritterCl& cr, uint, int oldValue)   // client
{
    critter_description(cr, CRITTER_ONLY_NAME);
}
#endif

#ifndef __CLIENT
int GetMaxLife(Critter& cr)
{
    int val = cr.ParamBase[ST_MAX_LIFE] + cr.ParamBase[ST_MAX_LIFE_EXT] + cr.ParamBase[ST_STRENGTH] + cr.ParamBase[ST_ENDURANCE] * 2;
    return CLAMP(val, 1, 9999);
}
#endif

// Parameters generation
// For server and client
// Both generation need be equal
// Input for player: 7 special, 3 tag skills, 2 traits, age, gender
// Imput for npc: data from prototype

#ifndef __CLIENT
# define _param_    cr.ParamBase
void CritterGenerate(Critter& cr)   // Export to main@critter_init
#endif
#ifdef __CLIENT
# define _param_    data
void CritterGenerate(array<int>& data)     // Export to client_main@player_data_generate
#endif
{
    if(_param_[ST_LEVEL] == 0)
        _param_[ST_LEVEL] = 1;

    if(_param_[TRAIT_SMALL_FRAME] != 0)
        _param_[ST_ACTION_POINTS] += 1;
   // if(_param_[TRAIT_BRUISER] != 0)
   //     _param_[ST_STRENGTH] += 4;
    /*if(_param_[TRAIT_GOOD_NATURED]!=0)
       {
            _param_[SK_FIRST_AID]+=15;
            _param_[SK_DOCTOR]+=15;
            _param_[SK_SPEECH]+=15;
            _param_[SK_BARTER]+=15;
            _param_[SK_SMALL_GUNS]-=10;
            _param_[SK_BIG_GUNS]-=10;
            _param_[SK_ENERGY_WEAPONS]-=10;
            _param_[SK_UNARMED]-=10;
            _param_[SK_MELEE_WEAPONS]-=10;
            _param_[SK_THROWING]-=10;
       }*/
    // if(_param_[TRAIT_GIFTED]!=0)
    // {
    //	for(uint i=ST_STRENGTH;i<=ST_LUCK;i++) _param_[i]++;
    //	for(uint i=SKILL_BEGIN;i<=SKILL_END;i++) _param_[i]-=10;
    // }
	int blodymess = 0;
	if(_param_[TRAIT_BLOODY_MESS] != 0)
		blodymess = 20;
    _param_[SK_SMALL_GUNS] += 5 + 4 * _param_[ST_AGILITY] - blodymess;
    _param_[SK_BIG_GUNS] += 0 + 2 * _param_[ST_AGILITY] - blodymess;
    _param_[SK_ENERGY_WEAPONS] += 0 + 2 * _param_[ST_AGILITY] - blodymess;
    _param_[SK_UNARMED] += 30 + 2 * (_param_[ST_AGILITY] + _param_[ST_STRENGTH]) - blodymess;
    _param_[SK_LEARNING] = 0 + 6 * _param_[ST_INTELLECT] - blodymess;
    _param_[SK_THROWING] += 0 + 4 * _param_[ST_AGILITY] - blodymess;
    _param_[SK_FIRST_AID] += 0 + 2 * (_param_[ST_PERCEPTION] + _param_[ST_INTELLECT]) - blodymess;
    _param_[SK_DOCTOR] += 5 + _param_[ST_PERCEPTION] + _param_[ST_INTELLECT] - blodymess;
    _param_[SK_SNEAK] += 5 + 3 * _param_[ST_AGILITY] - blodymess;
    _param_[SK_LOCKPICK] += 10 + _param_[ST_PERCEPTION] + _param_[ST_AGILITY] - blodymess;
    _param_[SK_ENGINE] += 0 + 4 * _param_[ST_INTELLECT] - blodymess;
    _param_[SK_TRAPS] += 10 + _param_[ST_PERCEPTION] + _param_[ST_AGILITY] - blodymess;
    _param_[SK_SCIENCE] += 0 + 4 * _param_[ST_INTELLECT] - blodymess;
    _param_[SK_REPAIR] += 0 + 3 * _param_[ST_INTELLECT] - blodymess;
    _param_[SK_SPEECH] += 0 + 5 * _param_[ST_CHARISMA] - blodymess;
    _param_[SK_BARTER] += 0 + 4 * _param_[ST_CHARISMA] - blodymess;
    _param_[SK_CRAFTING] += 5 + 3 * _param_[ST_INTELLECT] - blodymess;
    _param_[SK_OUTDOORSMAN] += 0 + 2 * (_param_[ST_ENDURANCE] + _param_[ST_INTELLECT]) - blodymess;

   // if(_param_[TAG_SKILL1] != 0)
     //   _param_[_param_[TAG_SKILL1]] += 20;
    //if(_param_[TAG_SKILL2] != 0)
    //    _param_[_param_[TAG_SKILL2]] += 20;
    //if(_param_[TAG_SKILL3] != 0)
     //   _param_[_param_[TAG_SKILL3]] += 20;

    if(_param_[TRAIT_KAMIKAZE] != 0)
    {
        //_param_[ST_ARMOR_CLASS] += 40;
        for(uint i = ST_NORMAL_RESIST; i <= ST_EXPLODE_RESIST; i++)
            _param_[i] -= 10;
    }
    if(_param_[TRAIT_FINESSE] != 0)
        _param_[ST_CRITICAL_CHANCE] += 15;
    if(_param_[TRAIT_FAST_SHOT] != 0)
        _param_[MODE_NO_AIM] = 1;
   // if(_param_[TRAIT_BONEHEAD] != 0)
    //    _param_[ST_INTELLECT] -= 2;
	/*if(_param_[TRAIT_SKILLED] != 0)
		{
		_param_[ST_STRENGTH] += 1;
		_param_[ST_PERCEPTION] += 1;
		_param_[ST_ENDURANCE] += 1;
		_param_[ST_CHARISMA] += 1;
		_param_[ST_INTELLECT] += 1;
		_param_[ST_AGILITY] += 1;
		_param_[ST_LUCK] += 1;
		}*/
		
    #ifdef __CLIENT
    // Runtime calculations, only for client registration
    _param_[ST_ARMOR_CLASS] += 3 * _param_[ST_AGILITY];
	_param_[ST_MAX_LIFE] += _param_[ST_STRENGTH] + 100 + _param_[ST_ENDURANCE]/3;
	uint apeki = 0;
	switch(_param_[ST_AGILITY])
	{
	case 1:
	case 2:
	apeki = 0; break;
	case 3:
	case 4:
	apeki = 1; break;
	case 5:
	case 6:
	case 7:
	apeki = 2; break;
	case 8:
	case 9:
	case 10:
	apeki = 3; break;
	case 11:
	case 12:
	case 13:
	apeki = 4; break;
	case 14:
	case 15:
	case 16:
	apeki = 5; break;
	case 17:
	case 18:
	case 19:
	apeki = 6; break;
	case 20:
	apeki = 7; break;
	}
    _param_[ST_ACTION_POINTS] += 5 + apeki;
    _param_[ST_CARRY_WEIGHT] += (50 * (1 + (_param_[TRAIT_SMALL_FRAME] > 0 ? 3*_param_[ST_STRENGTH] : 5*_param_[ST_STRENGTH])/100))*1000;
    _param_[ST_MELEE_DAMAGE] += _param_[TRAIT_BRUISER] > 0 ? 3 * _param_[ST_STRENGTH] : 2 * _param_[ST_STRENGTH] ;
    _param_[ST_POISON_RESISTANCE] += _param_[ST_ENDURANCE] * 5;
    _param_[ST_RADIATION_RESISTANCE] += _param_[ST_ENDURANCE] * _param_[TRAIT_SMALL_FRAME] > 0 ? 1 : 2;
    _param_[ST_SEQUENCE] += _param_[ST_PERCEPTION] * 2;
		
	_param_[ST_HEALING_RATE] += _param_[ST_ENDURANCE];
    if(_param_[TRAIT_FAST_METABOLISM] != 0)
	{
        _param_[ST_HEALING_RATE] += 10;
	}
	
    _param_[ST_CRITICAL_CHANCE] += _param_[ST_LUCK];
    #endif
    _param_[ST_CURRENT_HP] = _param_[ST_MAX_LIFE];
    _param_[ST_CURRENT_AP] = _param_[ST_ACTION_POINTS] * 100;

    _param_[ST_HEALTH_LEVEL] = 4;
}

#ifdef __CLIENT
# include "MsgStr.h"
// Check valid of input data
bool CritterGenerateCheck(array<int>& data)     // Export to client_main@player_data_check
{
    // Check special
    int special = 0;
    for(uint i = ST_STRENGTH; i <= ST_LUCK; i++)
    {
		if(data[i] < 1 || data[i] > 10)
        {
            Message(GetMsgStr(TEXTMSG_GAME, STR_NET_WRONG_SPECIAL));
            return false;
        }
        special += data[i];
    }
	if((data[ST_INTELLECT]<3 && data[TRAIT_BONEHEAD]!=0))
		{
			Message("Incorrect SPECIAL data.");
			return false;
		}
	
    if(special != __StartSpecialPoints)
    {
        Message(GetMsgStr(TEXTMSG_GAME, STR_NET_WRONG_SPECIAL));
        return false;
    }
    // Check choosed tag skills
    /*if((data[TAG_SKILL1] < int(SKILL_BEGIN) || data[TAG_SKILL1] > int(SKILL_END)) ||
       (data[TAG_SKILL2] < int(SKILL_BEGIN) || data[TAG_SKILL2] > int(SKILL_END)) ||
       (data[TAG_SKILL3] < int(SKILL_BEGIN) || data[TAG_SKILL3] > int(SKILL_END)))
    {
        Message(GetMsgStr(TEXTMSG_GAME, STR_NET_WRONG_TAGSKILL));
        return false;
    }*/
    return true;
}
#endif

#ifndef __CLIENT
void NpcProcessLevel(Critter& npc)   // Export
{
    int level = npc.Param[ST_LEVEL];
    if(level == 0)
        return;
    level--; // number of levelups is one less
    npc.ParamBase[ST_MAX_LIFE] += (GetMaxLife(npc) * level) / 20;
    npc.ParamBase[ST_CURRENT_HP] = npc.Param[ST_MAX_LIFE];
    for(uint i = SKILL_BEGIN; i <= SKILL_END; i++)
        npc.ParamBase[i] += (npc.Param[i] * level) / 20;
}
// backward compatibility
void NpcSetLevel(Critter& npc, int level)   // export
{
    int oldlevel = npc.Param[ST_LEVEL];
    npc.ParamBase[ST_LEVEL] = level;
    level -= oldlevel;
    npc.ParamBase[ST_MAX_LIFE] += (2 + (npc.Param[ST_ENDURANCE] >> 1)) * level;
    npc.ParamBase[ST_CURRENT_HP] = npc.Param[ST_MAX_LIFE];
    for(uint i = SKILL_BEGIN; i <= SKILL_END; i++)
        npc.ParamBase[i] += 5 * level;
}
#endif
#endif

uint CheckPlayerName( const string& name )
{
    // Length
    if( name.length() < __MinNameLength || name.length() > __MaxNameLength )
        return STR_NET_LOGINPASS_WRONG;

    // Valid letters
    string allLetters = __ValidNameLettersCommon + __ValidNameLettersCulture1 + __ValidNameLettersCulture2;
    for( uint i = 0, j = name.length(); i < j; i++ )
        if( findFirst( allLetters, name[ i ] ) == -1 )
            return STR_NET_PASS_WRONG_CHARS;

    // Spaces
    if( name[ 0 ] == " " || name[ -1 ] == " " )
        return STR_NET_BEGIN_END_SPACES;
    for( int i = 0, j = name.length() - 1; i < j; i++ )
        if( name[ i ] == " " && name[ i + 1 ] == " " )
            return STR_NET_TWO_SPACE;

    // Different cultures
    uint letters1 = 0;
    uint letters2 = 0;
    for( int i = 0, j = name.length() - 1; i < j; i++ )
    {
        if( findFirst( __ValidNameLettersCulture1, name[ i ] ) != -1 )
            letters1++;
        else if( findFirst( __ValidNameLettersCulture2, name[ i ] ) != -1 )
            letters2++;
    }
    if( letters1 > 0 && letters2 > 0 )
        return STR_NET_DIFFERENT_LANG;

    // Too many common symbols
    if( ( letters1 + letters2 ) * 100 / name.length() < 70 )
        return STR_NET_MANY_SYMBOLS;

    // All fine, return zero
    return 0;
}
