

int week_patch=1;
int doubleloot=1;
bool dropchance(float chance)
{
	if(chance==0)
	return false;
	if(Random(0,100)<chance)
	return true;
	
	return false;
	
}

bool can_tc_modoc=false;
bool can_tc_klamath=false;
bool can_tc_gecko=false;
bool can_tc_bh=false;
bool can_tc_redding=false;
bool can_tc_den=false;
bool can_tc_necro=false;
bool can_tc_reno=false;

uint when_tc_modoc=0;
uint when_tc_klamath=0;
uint when_tc_gecko=0;
uint when_tc_bh=0;
uint when_tc_redding=0;
uint when_tc_den=0;
uint when_tc_necro=0;
uint when_tc_reno

shared class Sprite
{
	Sprite()
	{
		Id=0;
		Width=0;
		Height=0;
		FrmCount=0;
	}
	
	bool Load(string&name,int path)
	{
		if(name.length()>0)
		{
			Id=LoadSprite(name,path);
			Filename=name;
		}
		else
		Id=0;
		RefreshData();
		return Id!=0;
	}
	
	void LoadHash(uint nameHash,uint8 dir)
	{
		Id=LoadSprite(nameHash,dir);
		RefreshData();
	}
	
	void LoadByIni(string&iniKey,int path)
	{
		string@name=GetIfaceIniStr(iniKey);
		if(@name!=null&&name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Draw(int x,int y)
	{
		if(Id!=0)
		DrawSprite(Id,-1,x,y,0);
	}
	
	private void RefreshData()
	{
		if(Id!=0)
		{
			Width=GetSpriteWidth(Id,0);
			Height=GetSpriteHeight(Id,0);
			FrmCount=GetSpriteCount(Id);
		}
		else
		{
			Width=0;
			Height=0;
			FrmCount=0;
			Filename="";
		}
	}
	
	uint Id;
	int Width;
	int Height;
	uint FrmCount;
	string Filename;
};     

shared interface IControl
{
	void SetParent(IControl@parent); 
	
	bool IsVisible();
	bool IsActive();
	
	void Disable();
	void Enable();
	
	void Show(bool showAll=false);
	void Show(int left,int top);
	void Hide(); 
	
	void ShowWindow();
	void ShowWindow(int left,int top);
	void HideWindow();
	void Center();
	
	int Left();
	int Right();
	int Top();
	int Bottom();
	int Width();
	int Height();
	
	IControl@Position(int,int);
	IControl@Position(string&iniKey);
	IControl@Left(int);
	IControl@Top(int);
	IControl@Width(int);
	IControl@Height(int);
	IControl@Size(int,int);
	
	void Init();
	void Draw();
	void Update();
	bool MouseDown(int x,int y,int click);
	bool MouseUp(int x,int y,int click);
	void MouseMove(int fromX,int fromY,int toX,int toY);
	bool KeyDown(uint8 key,string&keyText);
	void KeyUp(uint8 key,string&keyText);
};   

class Control:IControl
{
	
	IControl@parent;
	
	array<IControl@>controls; 
	
	int left;
	int top;
	int width;
	int height;     
	
	bool active;
	
	bool visible;
	
	bool focus; 
	
	bool mousePressed;
	int mouseX;
	int mouseY;
	
	Control()
	{
		active=true;
		visible=true;
		focus=false;
		
		mousePressed=false;
		mouseX=0;
		mouseY=0;
		
		left=top=width=height=0;
	}
	
	Control(int left,int top,int width,int height)
	{
		active=true;
		visible=true;
		focus=false;
		
		mousePressed=false;
		mouseX=0;
		mouseY=0;
		
		this.left=left;
		this.top=top;
		this.width=width;
		this.height=height;
	}    
	
	bool IsVisible(){return visible;}
	bool IsActive(){return active;}   
	
	int Left()
	{
		if((@parent!=null))
		return parent.Left()+left;
		else
		return left;
	}
	int Top()
	{
		if((@parent!=null))
		return parent.Top()+top;
		else
		return top;
	}
	int Right(){return Left()+Width();}
	int Bottom(){return Top()+Height();}
	int Height(){return height;}
	int Width(){return width;}
	
	IControl@Position(int x,int y){left=x;top=y;return this;}
	IControl@Left(int x){left=x;return this;}
	IControl@Top(int y){top=y;return this;}
	IControl@Width(int w){width=w;return this;}
	IControl@Height(int h){height=h;return this;}
	IControl@Size(int w,int h){height=h;width=w;return this;}
	
	IControl@Position(string&iniKey)
	{
		left=0;
		top=0;
		width=0;
		height=0; 
		
		string@str=GetIfaceIniStr(iniKey);
		if(@str==null||str=="")
		return this;
		
		array<string@>@valuesStr=split(str," ");
		if(valuesStr.length()!=4)
		return this;
		
		array<int>values(4);
		for(int i=0;i<4;i++)
		if(!StrToInt(valuesStr[i],values[i]))
		return this;
		
		left=values[0];
		top=values[1];
		width=values[2]-values[0]+1;
		height=values[3]-values[1]+1;
		return this;
	}   
	
	bool IsInside(int x,int y)
	{
		return(x>=Left())&&(x<Right())&&(y>=Top())&&(y<Bottom());
	}   
	
	void SetParent(IControl@control)
	{
		@parent=control;
	}   
	
	void Enable()
	{
		active=true;
		OnEnabled();
	}
	void Disable()
	{
		active=false;
		OnDisabled();
	}   
	
	void Show(bool showAll=false)
	{
		visible=true;
		if(showAll)
		{
			for(uint i=0,j=controls.length();i<j;i++)
			controls[i].Show(showAll);
		}
		OnShow();
	}
	void Show(int left,int top)
	{
		this.left=left;
		this.top=top;
		visible=true;
		OnShow();
	}
	void Hide()
	{
		visible=false;
		for(uint i=0,j=controls.length();i<j;i++)
		controls[i].Hide();
		OnHide();
	}
	
	void ShowWindow()
	{
		Message("This control does not have window attached.");
	}
	void ShowWindow(int x,int y)
	{
		Message("This control does not have window attached.");
	}
	void HideWindow()
	{
		Message("This control does not have window attached.");
	}  
	
	void Center()
	{
		Position(parent.Width()/2-Width()/2,parent.Height()/2-Height()/2);
	}
	void Init()
	{
		for(uint i=0,j=controls.length();i<j;i++)
		controls[i].Init();
	}  
	
	void SetFocus(bool focused)
	{
		this.focus=focused;
		
		if(focused)
		GotFocus();
		else
		LostFocus();
	}   
	
	void AddControl(IControl@control)
	{
		control.SetParent(this);
		controls.insertLast(@control);
	}    
	
	bool MouseDown(int x,int y,int click)
	{
		bool intercepted=false;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].MouseDown(x,y,click)?true:intercepted;
		}
		if(!intercepted)
		{
			if(click!=(4)&&click!=(3))
			{
				if(IsInside(x,y))
				{
					mousePressed=true;
					mouseX=x;
					mouseY=y;
					SetFocus(true);
					intercepted=true;
				}
				else
				{
					SetFocus(false);
				}
			}
		}
		return intercepted;
	}
	bool MouseUp(int x,int y,int click)
	{
		bool intercepted=false;
		if(IsInside(x,y)&&mousePressed)
		{
			
			Click();
			intercepted=true;
		}
		
		mousePressed=false;
		
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].MouseUp(x,y,click)?true:intercepted;
		}
		return intercepted;
	}
	void MouseMove(int fromX,int fromY,int toX,int toY)
	{
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			controls[i].MouseMove(fromX,fromY,toX,toY);
		}
	}
	bool KeyDown(uint8 key,string&keyText)
	{
		bool intercepted=false;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].KeyDown(key,keyText)?true:intercepted;
		}
		return intercepted;
	}
	void KeyUp(uint8 key,string&keyText)
	{
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			controls[i].KeyUp(key,keyText);
		}
	}   
	
	void Draw()
	{
		for(uint i=0,j=controls.length();i<j;i++)
		if(controls[i].IsVisible())
		controls[i].Draw();
	}  
	
	void Update()
	{
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsActive())
			controls[i].Update();
		}
	}        
	
	void Click()
	{}  
	
	void GotFocus()
	{}  
	
	void LostFocus()
	{}  
	
	void OnShow()
	{}  
	
	void OnHide()
	{}  
	
	void OnEnabled()
	{}  
	
	void OnDisabled()
	{}
};      

class CButton:Control
{
	string caption;
	Sprite spriteUp;
	Sprite spriteDown;
	
	int textBorder;
	
	CButton(int left,int top,string@caption)
	{
		super(left,top,119,30);
		spriteUp.Load("wm_tab.png",(4));
		spriteDown.Load("wm_blanktab.png",(4));
		this.caption=caption;
		textBorder=30;
	}
	CButton(int left,int top,int width,int height,string&down)
	{ 
		
		if(!spriteDown.Load(down,(4)))
		Message("Couldn't load sprite: "+down);
		super(left,top,(((width)>(spriteDown.Width))?(width):(spriteDown.Width)),(((height)>(spriteDown.Height))?(height):(spriteDown.Height)));
		textBorder=0;
	}
	CButton(int left,int top,int width,int height,string&up,string&down)
	{
		if(!spriteUp.Load(up,(4)))
		Message("Couldn't load sprite(up): "+up);
		if(!spriteDown.Load(down,(4)))
		Message("Couldn't load sprite(down): "+down);
		super(left,top,(((width)>(spriteUp.Width))?(width):(spriteUp.Width)),(((height)>(spriteUp.Height))?(height):(spriteUp.Height)));
		textBorder=0;
	}
	CButton(string&iniKey,string&down)
	{ 
		
		if(!spriteDown.Load(down,(4)))
		Message("Couldn't load sprite: "+down);
		Control::Position(iniKey);
		textBorder=0;
	}  
	
	void SetCaption(string@caption){this.caption=caption;}
	
	void Draw()
	{
		if(mousePressed)
		{
			if(spriteDown.Id!=0)
			DrawSprite(spriteDown.Id,0,Left(),Top(),0);
		}
		else
		{
			if(spriteUp.Id!=0)
			DrawSprite(spriteUp.Id,0,Left(),Top(),0);
		}
		int color=active?0:int(0xffaaaaaa);
		if(caption!="")
		DrawText(caption,Left()+textBorder,Top(),Width()-textBorder,Height(),color,(5),(0x0008)|(0x0200));
	}
}; 

class CDialogRedButton:Control
{
	Sprite spriteDown;
	
	CDialogRedButton(int left,int top)
	{
		super(left,top,16,16);
		spriteDown.Load("di_rdbt1.frm",(4));
	}  
	
	void Draw()
	{
		if(mousePressed)
		DrawSprite(spriteDown.Id,0,Left(),Top(),0);
	}
};

class CSmallButton:Control
{
	Sprite spriteDown;
	
	CSmallButton(int left,int top)
	{
		super(left,top,16,16);
		spriteDown.Load("lilreddn.frm",(4));
	}  
	
	void Draw()
	{
		if(mousePressed)
		DrawSprite(spriteDown.Id,0,Left(),Top(),0);
	}
};

class CSmallArrowUp:Control
{
	Sprite spriteDown;
	
	CSmallArrowUp(int left,int top)
	{
		super(left,top,16,16); 
		
	}  
	
	void Draw()
	{ 
		
	}
};

class CSmallArrowDown:Control
{
	Sprite spriteDown;
	
	CSmallArrowDown(int left,int top)
	{
		super(left,top,16,16); 
		
	}  
	
	void Draw()
	{ 
		
	}
};   

class CLabel:Control
{
	int font;
	int color;
	int format;
	string@caption;
	
	CLabel(int left,int top,int width,int height,string@caption)
	{
		super(left,top,width,height);
		@this.caption=@caption;
		this.color=0;
		font=(5);
		format=(0x0008)|(0x0200);
	}
	CLabel(int left,int top,int width,int height,string@caption,int font)
	{
		super(left,top,width,height);
		@this.caption=@caption;
		this.color=0;
		this.font=font;
		format=(0x0008)|(0x0200);
	}
	void SetCaption(string@caption)
	{
		@this.caption=@caption;
	}
	void set_Caption(string@caption)
	{
		@this.caption=@caption;
	}
	string@get_Caption()
	{
		return@caption;
	}
	void SetColor(uint color)
	{
		this.color=color;
	}
	void set_Color(uint color)
	{
		this.color=color;
	}
	void SetFont(uint font)
	{
		this.font=font;
	}
	void set_Font(uint font)
	{
		this.font=font;
	}
	void SetFormat(uint format)
	{
		this.format=format;
	}
	void Draw()
	{
		DrawText(caption,Left(),Top(),Width(),Height(),color,font,format);
	}
};   

class CTextBox:Control
{
	
	string text;
	
	string drawnText;
	uint cursorPos;
	
	uint cursorTime;
	
	uint cursorChangedTime;
	
	int showCursor;
	
	string cursor1;
	string cursor2; 
	
	int color;
	int format;
	int font;
	uint maxlength;
	
	CTextBox(int left,int top,int width,int height,string@text)
	{
		super(left,top,width,height);
		this.text=text;
		cursorPos=text.rawLength();
		cursorTime=400;
		cursorChangedTime=0;
		showCursor=0;
		cursor1="!";
		cursor2=".";
		drawnText=text;
		
		color=0;
		font=(5);
		format=(0x0200);
		maxlength=0;
	}  
	
	string@Text()
	{
		return text;
	}  
	
	string@GetCursor()
	{
		if(showCursor==0)
		return"";
		else if(showCursor==1)
		return cursor1;
		else
		return cursor2;
	}
	void SetColor(uint color)
	{
		this.color=color;
	}
	void SetFormat(uint format)
	{
		this.format=format;
	}
	void SetText(string@text)
	{
		this.text=text;
		cursorPos=text.rawLength();
		RefreshDrawnText();
	}
	void SetMaxLength(uint ml)
	{
		maxlength=ml;
	}  
	
	void ShowCursor(int show)
	{
		showCursor=show;
		RefreshDrawnText();
	}  
	
	void RefreshDrawnText()
	{
		if(showCursor>0)
		{
			if(cursorPos==text.rawLength())
			drawnText=text+GetCursor();
			else
			drawnText=substring(text,0,cursorPos)+GetCursor()+substring(text,cursorPos,text.rawLength()-cursorPos);
		}
		else
		drawnText=text;
	}                                   
	
	void InsertChar(uint8 key,string&keyText)
	{
		text=substring(text,0,cursorPos)+keyText+substring(text,cursorPos,text.length()-cursorPos);
		cursorPos++;
	}
	
	void Draw()
	{
		uint tick=GetTick();
		
		if(tick-cursorChangedTime>cursorTime)
		{
			cursorChangedTime=tick;
			if(showCursor==1)
			ShowCursor(2);
			else if(focus)
			ShowCursor(1);
			else
			ShowCursor(0);
		} 
		
		DrawText(drawnText,Left(),Top(),Width(),Height(),color,font,format);
	}
	
	bool KeyDown(uint8 key,string&keyText)
	{
		if(focus)
		{
			
			if(key==0x0E)
			{
				if(text.rawLength()>0&&cursorPos>0)
				{
					text=substring(text,0,cursorPos-1)+substring(text,cursorPos,text.rawLength()-cursorPos);
					cursorPos--;
				}
			}
			else if(key==0xD3)
			{
				if(text.rawLength()>0&&cursorPos<text.rawLength())
				{
					text=substring(text,0,cursorPos)+substring(text,cursorPos+1,text.rawLength()-cursorPos-1);
				}
			}
			
			else if(key==0xC7)
			{
				cursorPos=0;
			}
			else if(key==0xCF)
			{
				cursorPos=text.rawLength();
			}
			
			else if(key==0xCB)
			{
				if(cursorPos>0)
				cursorPos--;
			}
			else if(key==0xCD)
			{
				if(cursorPos<text.rawLength())
				cursorPos++;
			}
			
			else if(key==0x01||key==0x1C||key==0x9C)
			{
				SetFocus(false);
			}
			else
			{
				if(maxlength==0||maxlength>text.rawLength())
				InsertChar(key,keyText);
			}
			
			RefreshDrawnText();
			return true;
		}
		return Control::KeyDown(key,keyText);
	}
};   

class CSprite:Control
{
	Sprite sprite;
	
	CSprite(string@spriteName,int path=(4))
	{
		super();
		sprite.Load(spriteName,path);
	}
	CSprite(uint nameHash,int path=(4))
	{
		super();
		sprite.LoadHash(nameHash,path);
	}
	CSprite(int left,int top,int width,int height,string@spriteName,int path=(4))
	{
		super(left,top,width,height);
		sprite.Load(spriteName,path);
	}
	
	void Draw()
	{
		DrawSprite(sprite.Id,-1,Left(),Top(),0);
		Control::Draw();
	}
};   

class CSpriteEx:CSprite
{
	int index;
	bool scratch;
	bool center;
	uint color;
	bool applyOffsets;
	
	CSpriteEx(string@spriteName)
	{
		super(spriteName);
		Init();
	}
	
	CSpriteEx(uint nameHash,int path=(4))
	{
		super(nameHash,path);
		Init();
	}
	
	CSpriteEx(int left,int top,int width,int height,string@spriteName)
	{
		super(left,top,width,height,spriteName);
		Init();
	}
	
	private void Init()
	{
		CSprite::Init();
		this.index=-1;
		this.scratch=false;
		this.center=false;
		this.color=0;
		this.applyOffsets=true;
	}
	
	void Draw()
	{
		if(this.sprite.Id>0)
		DrawSprite(this.sprite.Id,this.index,Left(),Top(),this.sprite.Width,this.sprite.Height,this.scratch,this.center,this.color,this.applyOffsets);
		Control::Draw();
	}
};   

class CListBox:Control
{
	array<string@>elements;
	
	uint start;
	
	uint index;
	
	uint textHeight;
	
	CListBox(int left,int top,int width,int height)
	{
		super(left,top,width,height);
		start=0;
		textHeight=12;
	}   
	
	uint GetRowCount()
	{
		return height/textHeight;
	}  
	
	uint GetIndex()
	{
		return index;
	}  
	
	void AddElement(string@elem)
	{
		elements.insertLast(elem);
	}  
	
	void Scroll(int d)
	{
		start=(((int(start)+d)>(int(elements.length()-1)))?(int(elements.length()-1)):(((int(start)+d)<(0))?(0):(int(start)+d)));
	}  
	
	void Draw()
	{
		for(uint i=start,j=(((elements.length())<(start+uint(Height()/textHeight)))?(elements.length()):(start+uint(Height()/textHeight)));i<j;i++)
		{
			DrawText(elements[i],Left(),Top()+(i-start)*textHeight,Width(),textHeight,i==index?0xffffffff:0,(5),(0x0200));
		}
	}   
	
	void Click()
	{
		uint el=start+(mouseY-Top())/textHeight;
		if(el<elements.length())
		index=el;
		Control::Click();
	}
};   

class CContextButton:CButton
{
	uint crId;
	uint itemId;
	uint16 hexX;
	uint16 hexY;
	
	CContextButton(string caption)
	{
		super(0,0,caption);
		hexX=0;
		hexY=0;
	}   
	
	void SetCritter(CritterCl@cr)
	{
		crId=itemId=0;
		if((@cr!=null))
		crId=cr.Id;
	}  
	
	void SetItem(ItemCl@item)
	{
		crId=itemId=0;
		if((@item!=null))
		itemId=item.Id;
	}  
	
	void SetHex(uint16 x,uint16 y)
	{
		this.hexX=x;
		this.hexY=y;
	}
};   

class Window:Control,IGUIScreenCallbackFocus,IGUIScreenCallbackShow
{
	IGUIScreenOpt@screen;
	
	int Left(){return screen.GetPosX();}
	int Top(){return screen.GetPosY();}
	int Width(){return screen.GetWidth();}
	int Height(){return screen.GetHeight();}
	
	bool autoMode;
	
	Window()
	{
		super();
		autoMode=false;
	}
	
	void Init()
	{
		@screen=GUI_GetScreenOptions();
		Control::Init();
	}
	
	IControl@Position(int x,int y)
	{
		screen.Position(x,y);
		return this;
	}
	IControl@Size(int w,int h)
	{
		screen.Size(w,h);
		return this;
	}  
	
	void Center()
	{
		Position(__ScreenWidth/2-Width()/2,__ScreenHeight/2-Height()/2);
	} 
	
	void OnShow(int p0,int p1,int p2)
	{
		if(p0!=0||p1!=0)
		Show(p0,p1);
		else
		Show();
	}
	
	void Show(int x,int y)
	{
		screen.Position(x,y);
		Control::Show(x,y);
	} 
	
	void ShowWindow()
	{
		GUI_ShowScreen(screen.GetIndex(),0,0,0);
	}
	void ShowWindow(int x,int y)
	{
		screen.Position(x,y);
		GUI_ShowScreen(screen.GetIndex(),x,y,0);
	}
	void HideWindow()
	{
		GUI_HideScreen(screen.GetIndex(),0,0,0);
		Disable();
	}
	void OnLostFocus()
	{
		HideWindow();
		Disable();
	}
	
	bool MouseDown(int x,int y,int click)
	{
		bool intercepted=false;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible()&&controls[i].IsActive())
			intercepted=controls[i].MouseDown(x,y,click)?true:intercepted;
		}
		if(!intercepted)
		{
			if(click!=(4)&&click!=(3))
			{
				if(IsInside(x,y))
				{
					mousePressed=true;
					mouseX=x;
					mouseY=y;
					SetFocus(true);
					intercepted=true;
				}
				else
				{
					SetFocus(false);
				}
				
				return false;
			}
		}
		return intercepted;
	}   
	
	void Auto(bool v){autoMode=v;}
	bool Auto(){return autoMode;}
};       

import void GUI_Init()from"client_gui";
import void GUI_GetActiveScreens(array<int>&result)from"client_gui";
import int GUI_GetActiveScreen()from"client_gui";
import int GUI_GetActiveMainScreen()from"client_gui";
import int GUI_GetMainScreen()from"client_gui";
import void GUI_ShowScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";
import void GUI_Render(bool mainScreen)from"client_gui";

import void GUI_Update(uint dt)from"client_gui";
import bool GUI_MouseDown(int x,int y,int click)from"client_gui";
import bool GUI_MouseUp(int x,int y,int click)from"client_gui";
import void GUI_MouseMove(int fromX,int fromY,int toX,int toY)from"client_gui";
import bool GUI_KeyDown(uint8 key,string&keyText)from"client_gui";
import bool GUI_KeyUp(uint8 key,string&keyText)from"client_gui";
import void GUI_InputLost()from"client_gui";
import bool GUI_IsKeyPressed(uint8 key)from"client_gui"; 

import void GUI_GetIniCoords(string&ini,int&left,int&top,int&right,int&bottom)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import IGUIScreenOpt@GUI_GetScreen(int screenIndex)from"client_gui"; 

import IGUIElementTextOpt@GUI_AddText(int screenIndex)from"client_gui";
import IGUIElementTextOpt@GUI_AddText(int screenIndex,string@text,int x,int y)from"client_gui";
import IGUIElementImageOpt@GUI_AddImage(int screenIndex)from"client_gui";
import IGUIElementImageOpt@GUI_AddImage(int screenIndex,string@sprName,int patch,int x,int y)from"client_gui";
import IGUIElementButtonOpt@GUI_AddButton(int screenIndex)from"client_gui";
import IGUIElementButtonOpt@GUI_AddButton(int screenIndex,int x,int y)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui"; 

import void SetScreenPos(int screenIndex,int posX,int posY)from"client_gui";
import IGUIElementEditBoxOpt@GUI_AddEditBox(int screenIndex)from"client_gui";
import IGUIElementEditBoxOpt@GUI_AddEditBox(int screenIndex,int x,int y)from"client_gui";
import void SetPipBoyCallbackShow(IGUIScreenCallbackShow@callback)from"client_gui";     

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
};
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
};

shared interface IGUIScreenCallbackFocus
{
	void OnLostFocus();
};

shared interface IGUIScreenCallbackMouseClick{bool OnMouseClick(int click);}
shared interface IGUIScreenCallbackMouseMove{bool OnMouseMove(int x,int y);}

shared interface IGUIScreenCallbackKeyPress
{
	bool OnKeyPress(uint8 key,string&keyText);
}

shared interface IGUIScreenCallbackMouseDown
{
	bool OnMouseDown(int click);
}
shared interface IGUIScreenCallbackMove{void OnMove(int posX,int posY);}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@SetCallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@SetCallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@SetCallbackMove(IGUIScreenCallbackMove@callback);
	
	IGUIScreenOpt@SetCallbackFocus(IGUIScreenCallbackFocus@callback);
	IGUIScreenOpt@SetCallbackMouseDown(IGUIScreenCallbackMouseDown@callback);
	IGUIScreenOpt@SetCallbackKeyPress(IGUIScreenCallbackKeyPress@callback);
	
	IControl@Control();
	IGUIScreenOpt@Control(IControl@control);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@Size(int w,int h);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@SizeByMultipleImages(int horizontalCount,int verticalCount);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@Hardcoded(bool enabled); 
	
	int GetPosX();
	int GetPosY();
	int GetWidth();
	int GetHeight();
	int GetIndex();
};

shared interface IGUIElementCallbackInit{void OnInit(int id);}
shared interface IGUIElementCallbackDraw{void OnDraw(int id);}
shared interface IGUIElementCallbackKeyPress{bool OnKeyPress(uint8 key,string&keyText);}
shared interface IGUIElementCallbackMouseDown{void OnMouseDown(int click);}
shared interface IGUIElementCallbackMouseClick{void OnMouseClick(int id,int click);}
shared interface IGUIElementCallbackMouseMove{void OnMouseMove(int x,int y);}
shared interface IGUIElementCallbackValueChange{void OnValueChange(int newValue);}
shared interface IGUIElementCallbackStateChange{void OnStateChange(bool state);}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackMouseMove(IGUIElementCallbackMouseMove@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@Visible(bool visible);
	IGUIElementOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementOpt@AbsolutePosition(int x,int y);
	IGUIElementOpt@CollisionTransparent(bool collisionTransparent);
	IGUIElementOpt@AddText(int id,string@text,int x,int y,int width,int height,int font,uint color,int flags);
	IGUIElementOpt@AddImage(int id,string@sprName,int x,int y);
	IGUIElementOpt@AddImage(int id,int patch,string@sprName,int x,int y);
	IGUIElementCallbackInit@GetCallbackInit();
	
	void MouseDown(int click);
	void MouseUp(int click,bool IsCollision);
	void MouseMove(int x,int y);
	
	void Draw(int screenX,int screenY);
	void Update(uint dt);
	void SetFocused(bool state);
	void SetVisible(bool visible);
	void SetAbsolutePosition(bool absolutePosition);
	
	void SetCollisionTransparent(bool collisionTransparent);
	void InputLost();
	
	IGUIElementOpt@GetNewInstance(); 
	
	bool IsVisible();
	bool IsFocused();
	bool IsAbsolutePosition();
	bool IsCollisionTransparent();
	bool IsCollision(int screenX,int screenY,int mouseX,int mouseY);
	int GetId();
	int GetPosX();
	int GetPosY();
	int GetHeight();
	int GetWidth();
	
	bool KeyPress(uint8 key,string&keyText);
	void KeyUp(uint8 key,string&keyText);
}

shared interface IGUIElementTextOpt
{
	IGUIElementTextOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementTextOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementTextOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementTextOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementTextOpt@CallbackMouseMove(IGUIElementCallbackMouseMove@callback);
	
	IGUIElementTextOpt@Position(int x,int y);
	IGUIElementTextOpt@Position(int x,int y,int w,int h);
	IGUIElementTextOpt@Position(string&iniKey);
	IGUIElementTextOpt@AbsolutePosition(int x,int y);
	IGUIElementTextOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementTextOpt@Text(string@text);
	IGUIElementTextOpt@Text(string@text,int font,uint color);
	IGUIElementTextOpt@Text(string@text,int font,uint color,int flags);
	IGUIElementTextOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementTextOpt@Visible(bool visible);
	IGUIElementTextOpt@TextBoxSize(int width,int height);
	IGUIElementTextOpt@TextOptions(int font,uint color);
	IGUIElementTextOpt@TextOptions(int font,uint color,int flags);
	IGUIElementTextOpt@TextOptions(int font,uint color,uint colorDown,int flags);
	IGUIElementTextOpt@TextColor(uint color);
	
	void Draw(int screenX,int screenY);
	void SetText(string&text);
	void SetVisible(bool visible);
	void SetFocused(bool state); 
	
	bool IsVisible();
	string@GetText();
	int GetFont();
	uint GetTextColor(); 
	
	int GetId();
}

shared interface IGUIElementImageOpt
{
	IGUIElementImageOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementImageOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementImageOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementImageOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	
	IGUIElementImageOpt@Position(int x,int y);
	IGUIElementImageOpt@Position(int x,int y,int w,int h);
	IGUIElementImageOpt@Position(string&iniKey);
	IGUIElementImageOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementImageOpt@Visible(bool visible); 
	
	void SetVisible(bool visible);
	void SetPosX(int x);
	void SetPosY(int y);
	void SetFocused(bool state);
	void SetAbsolutePosition(bool absolute);
	void Draw(int screenX,int screenY);  
	
	bool IsVisible();
	int GetPosX();
	int GetPosY();
	int GetImageWidth();
	int GetImageHeight();
	
	bool IsCollision(int screenX,int screenY,int mouseX,int mouseY);
}

shared interface IGUIElementButtonOpt
{
	IGUIElementButtonOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementButtonOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementButtonOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementButtonOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	
	IGUIElementButtonOpt@Position(int x,int y);
	IGUIElementButtonOpt@Position(int x,int y,int w,int h);
	IGUIElementButtonOpt@Position(string&iniKey);
	IGUIElementButtonOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementButtonOpt@Text(string@text);
	IGUIElementButtonOpt@Text(string@text,int font,uint color);
	IGUIElementButtonOpt@Text(string@text,int font,uint color,int flags);
	IGUIElementButtonOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementButtonOpt@Visible(bool visible);
	IGUIElementButtonOpt@TextShift(int deltaX,int deltaY,int deltaDownX,int deltaDownY);
	IGUIElementButtonOpt@TextWidth(int width);
	IGUIElementButtonOpt@UpPic(string@sprName);
	IGUIElementButtonOpt@DownPic(string@sprName);
	IGUIElementButtonOpt@ClickableZone(int width,int height);
	IGUIElementButtonOpt@ClickableZone(int x,int y,int width,int height);
	
	void SetVisible(bool visible);
	void SetFocused(bool state);
	void Hide();
	void Show();
	
	bool IsVisible();
	string getText();
	int GetPosX();
	int GetPosY();
}

shared interface IGUIElementEditBoxOpt
{
	IGUIElementEditBoxOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementEditBoxOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementEditBoxOpt@CallbackMouseDown(IGUIElementCallbackMouseDown@callback);
	IGUIElementEditBoxOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementEditBoxOpt@CallbackMouseMove(IGUIElementCallbackMouseMove@callback);
	IGUIElementEditBoxOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	
	IGUIElementEditBoxOpt@Position(int x,int y);
	IGUIElementEditBoxOpt@Position(int x,int y,int w,int h);
	IGUIElementEditBoxOpt@Position(string&iniKey);
	IGUIElementEditBoxOpt@AbsolutePosition(bool absolutePosition);
	IGUIElementEditBoxOpt@Text(string@text);
	IGUIElementEditBoxOpt@Text(string@text,int font,uint color);
	IGUIElementEditBoxOpt@Text(string@text,int font,uint color,int flags);
	IGUIElementEditBoxOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementEditBoxOpt@Visible(bool visible);
	IGUIElementEditBoxOpt@TextBoxSize(int width,int height);
	IGUIElementEditBoxOpt@TextOptions(int font,uint color);
	IGUIElementEditBoxOpt@TextOptions(int font,uint color,int flags);
	IGUIElementEditBoxOpt@TextOptions(int font,uint color,uint colorDown,int flags);
	IGUIElementEditBoxOpt@TextColor(uint color);
	IGUIElementEditBoxOpt@VisibleText(string@text);
	IGUIElementEditBoxOpt@BackgroundPic(string@sprName);
	IGUIElementEditBoxOpt@MaxLen(int maxLen);
	IGUIElementEditBoxOpt@EditBoxSize(int width,int height);
	IGUIElementEditBoxOpt@LeftMargin(int lMargin);
	IGUIElementEditBoxOpt@RightMargin(int rMargin);
	IGUIElementEditBoxOpt@UpMargin(int uMargin);
	IGUIElementEditBoxOpt@DownMargin(int dMargin);
	IGUIElementEditBoxOpt@Margins(int lMargin,int rMargin,int uMargin,int dMargin);
	IGUIElementEditBoxOpt@PasswordMode(bool isPasswordMode);
	IGUIElementEditBoxOpt@PasswordChar(string@passChar);
	IGUIElementEditBoxOpt@NumericMode(bool isNumericMode);
	
	void Draw(int screenX,int screenY);
	void setVisible(bool visible);
	void setFocused(bool state);
	void NoInput(bool var);
	
	string@getText();
	bool isVisible();
	
	int getId();
}

shared class CSection
{
	
	dictionary indices;
	
	array<string@>values;
	
	string name;   
	
	void SetName(string&name)
	{
		this.name=name;
	}  
	
	void AddProperty(string@name,string@value)
	{
		
		values.insertLast(value);
		indices.set(name,values.length()-1);
	}  
	
	string@GetValue(string&property)
	{
		uint id=0;
		if(indices.get(property,id))
		{
			return values[id];
		}
		else
		return null;
	}
};   

shared class CConfig
{
	
	array<CSection@>sections;
	
	dictionary indices;
	
	CConfig(string&fileName)
	{
		file f;
		
		if(f.open(fileName,"r")>=0)
		{
			Parse(f);
		}
		else
		{   
			
		}
	}   
	
	string@GetValue(string&sectionName,string&property)
	{
		uint id=0;
		if(indices.get(sectionName,id))
		{
			CSection@section=sections[id];
			return section.GetValue(property);
		}
		else
		return null;
	}   
	
	void AddSection(CSection@section)
	{
		
		sections.insertLast(section);
		indices.set(section.name,sections.length()-1);
	}  
	
	void Parse(file&f)
	{
		
		string str;
		int l=f.readString(f.getSize(),str);
		f.close(); 
		
		array<string@>@lines=split(str,"\n");    
		
		uint sectionCount=0;
		for(uint i=0;i<lines.length();i++)
		{
			string@line=lines[i];
			
			if(line.rawGet(0)=='[')
			{
				CSection@section=ParseSection(lines,i);
				AddSection(section);
				sectionCount++;
			}
		}    
		
	}  
	
	CSection@ParseSection(array<string@>@lines,uint&i)
	{    
		
		CSection@section=CSection();
		string@name=substring(lines[i],1,lines[i].rawLength()-2);    
		
		section.SetName(name);
		i++;
		for(uint j=lines.length();i<j;i++)
		{
			string@line=lines[i];     
			
			if(line.rawLength()<2)
			break;
			
			if(line.rawGet(0)=='[')
			{
				i--;
				break;
			}
			
			else
			{
				array<string@>@prop=split(line,"=");
				if(prop.length()==2)
				section.AddProperty(prop[0],prop[1]);
				else
				{    
					
					Log("Error while parsing property line: "+line);
				}
			}
		}
		return section;
	}
}

class CSpawnNpcOKButton:CSmallButton
{
	
	uint pid;
	uint16 hexX;
	uint16 hexY;
	uint8 dir;
	uint dialog;
	string script;
	uint ai;
	uint bag;
	uint team;
	uint mob;
	uint level;
	
	CSpawnNpcWindow@window;
	CSpawnNpcOKButton(int left,int top,CSpawnNpcWindow@window)
	{
		super(left,top);
		@this.window=@window;
	} 
	
	void SetParams(uint pid,uint16 hexX,uint16 hexY,uint8 dir,uint dialog,string script,uint ai,uint bag,uint team,uint mob,uint level)
	{
		this.pid=pid;
		this.hexX=hexX;
		this.hexY=hexY;
		this.dir=dir;
		this.dialog=dialog;
		this.script=script;
		this.ai=ai;
		this.bag=bag;
		this.team=team;
		this.mob=mob;
		this.level=level;
	}
	void Click()
	{
		window.HideWindow();
		window.UpdateParams();
		
		int[]params={pid,hexX,hexY,dir,dialog,0,ai,bag,team,mob,level};
		RunServerScript("dev_menu@SpawnCritter",0,0,0,script,params);
	}
};  

class CSpawnNpcCancelButton:CSmallButton
{
	CSpawnNpcWindow@window;
	CSpawnNpcCancelButton(int left,int top,CSpawnNpcWindow@window)
	{
		super(left,top);
		@this.window=@window;
	}
	
	void Click(){window.HideWindow();}
};

class CSpawnNpcList:CListBox
{
	CSpawnNpcWindow@window;
	
	CSpawnNpcList(CSpawnNpcWindow@window)
	{
		super(42,36,195,140);
		
		@this.window=window;
	}
	
	void Click()
	{
		CListBox::Click();
		
		window.SetCritter(elements[GetIndex()]);
	}
};   

class CSpawnNpcScrollDown:CSmallArrowDown
{
	CListBox@list;
	
	CSpawnNpcScrollDown(int left,int top,CListBox@list)
	{
		super(left,top);
		@this.list=@list;
	}
	
	void Click(){list.Scroll(1);}
};
class CSpawnNpcScrollUp:CSmallArrowDown
{
	CListBox@list;
	
	CSpawnNpcScrollUp(int left,int top,CListBox@list)
	{
		super(left,top);
		@this.list=@list;
	}
	
	void Click(){list.Scroll(-1);}
};              

class CSpawnNpcWindow:Window
{
	uint crId;
	CConfig@crits;
	
	uint pid;
	uint16 hexX;
	uint16 hexY;
	uint8 dir;
	uint dialog;
	uint script;
	uint ai;
	uint team;
	uint bag;
	uint mob;
	uint level; 
	
	string@crName;
	
	CSpawnNpcOKButton@ok;
	CSpawnNpcCancelButton@cancel;
	CListBox@list;
	CSpawnNpcScrollDown@down;
	CSpawnNpcScrollUp@up;
	CLabel@desc;
	
	CTextBox@pidTxt;
	CTextBox@dialogTxt;
	CTextBox@scriptTxt;
	CTextBox@aiTxt;
	CTextBox@teamTxt;
	CTextBox@bagTxt;
	CTextBox@mobTxt;
	CTextBox@levelTxt;
	
	CSpawnNpcWindow()
	{
		crId=pid=hexX=hexY=dir=dialog=script=ai=team=bag=mob=level=0;
	}
	
	void Init()
	{
		int w=573;
		int h=230;
		
		@list=CSpawnNpcList(this);
		AddControl(@list);
		
		@up=CSpawnNpcScrollUp(26,44,@list);
		@down=CSpawnNpcScrollDown(26,58,@list);
		AddControl(down);
		AddControl(up);
		
		@ok=CSpawnNpcOKButton(49,187,this);
		AddControl(@ok);
		@cancel=CSpawnNpcCancelButton(154,186,this);
		AddControl(@cancel);
		AddControl(CLabel(80,183,40,20,"OK",(7)));
		AddControl(CLabel(172,183,60,20,"CANCEL",(7)));
		CLabel@temp=CLabel(278,25,100,15,"Description:");
		temp.SetColor(0xff000000);
		temp.SetFormat(0);
		AddControl(temp);
		@desc=CLabel(278,40,200,50,"desc");
		desc.SetColor(0xff000000);
		desc.SetFormat(0);
		AddControl(@desc);
		
		@temp=CLabel(278,90,50,15,"ProtoId:");
		temp.SetColor(0xff000000);
		temp.SetFormat(0);
		AddControl(@temp);
		@pidTxt=CTextBox(330,90,50,15,"");
		pidTxt.SetColor(0xff000000);
		pidTxt.SetFormat(0);
		AddControl(@pidTxt);
		
		@temp=CLabel(278,105,50,15,"Dialog:");
		temp.SetColor(0xff000000);
		temp.SetFormat(0);
		AddControl(@temp);
		@dialogTxt=CTextBox(330,105,50,15,"");
		dialogTxt.SetColor(0xff000000);
		dialogTxt.SetFormat(0);
		AddControl(@dialogTxt);
		
		@temp=CLabel(278,120,50,15,"Script:");
		temp.SetColor(0xff000000);
		temp.SetFormat(0);
		AddControl(@temp);
		@scriptTxt=CTextBox(330,120,50,15,"");
		scriptTxt.SetColor(0xff000000);
		scriptTxt.SetFormat(0);
		AddControl(@scriptTxt);
		
		@temp=CLabel(278,135,50,15,"AiPack:");
		temp.SetColor(0xff000000);
		temp.SetFormat(0);
		AddControl(@temp);
		@aiTxt=CTextBox(330,135,50,15,"");
		aiTxt.SetColor(0xff000000);
		aiTxt.SetFormat(0);
		AddControl(@aiTxt);
		
		@temp=CLabel(278,150,50,15,"TeamId:");
		temp.SetColor(0xff000000);
		temp.SetFormat(0);
		AddControl(@temp);
		@teamTxt=CTextBox(330,150,50,15,"");
		teamTxt.SetColor(0xff000000);
		teamTxt.SetFormat(0);
		AddControl(@teamTxt);
		
		@temp=CLabel(278,165,50,15,"Bag:");
		temp.SetColor(0xff000000);
		temp.SetFormat(0);
		AddControl(@temp);
		@bagTxt=CTextBox(330,165,50,15,"");
		bagTxt.SetColor(0xff000000);
		bagTxt.SetFormat(0);
		AddControl(@bagTxt);
		
		@temp=CLabel(278,180,50,15,"Level:");
		temp.SetColor(0xff000000);
		temp.SetFormat(0);
		AddControl(@temp);
		@levelTxt=CTextBox(330,180,50,15,"");
		levelTxt.SetColor(0xff000000);
		levelTxt.SetFormat(0);
		AddControl(@levelTxt); 
		
		@crits=CConfig("spawnnpc.cfg");
		for(uint i=0,j=crits.sections.length();i<j;i++)
		{
			list.AddElement(crits.sections[i].name);
		}
		Window::Init();
	}   
	
	void SetHex(uint16 hexX,uint16 hexY)
	{
		this.hexX=hexX;
		this.hexY=hexY;
	}  
	
	void SetCritter(string@name)
	{
		@this.crName=@name;
		string@val;
		
		desc.SetCaption(crits.GetValue(name,"desc"));
		
		pid=0;
		@val=@crits.GetValue(name,"pid");
		if((@val!=null))
		{
			pidTxt.SetText(@val);
			StrToInt(val,pid);
		}
		else
		pidTxt.SetText("");
		dialog=0;
		@val=@crits.GetValue(name,"dialog");
		if((@val!=null))
		{
			dialogTxt.SetText(@val);
			StrToInt(val,dialog);
		}
		else
		dialogTxt.SetText("");
		string script="";
		@val=@crits.GetValue(name,"script");
		if((@val!=null))
		{
			scriptTxt.SetText(@val);
			script=val;
		}
		else
		scriptTxt.SetText("");
		ai=0;
		@val=@crits.GetValue(name,"ai");
		if((@val!=null))
		{
			aiTxt.SetText(@val);
			StrToInt(val,ai);
		}
		else
		aiTxt.SetText("");
		bag=0;
		@val=@crits.GetValue(name,"bag");
		if((@val!=null))
		{
			bagTxt.SetText(@val);
			StrToInt(val,bag);
		}
		else
		bagTxt.SetText("");
		team=0;
		@val=@crits.GetValue(name,"team");
		if((@val!=null))
		{
			teamTxt.SetText(@val);
			StrToInt(val,team);
		}
		else
		teamTxt.SetText("");
		mob=0;
		@val=@crits.GetValue(name,"mob");
		if((@val!=null))
		{
			
			StrToInt(val,mob);
		} 
		
		level=0;
		@val=@crits.GetValue(name,"level");
		if((@val!=null))
		{
			levelTxt.SetText(@val);
			StrToInt(val,level);
		}
		else
		levelTxt.SetText("");
		
		ok.SetParams(pid,hexX,hexY,uint8(Random(0,5)),dialog,script,ai,bag,team,mob,level);
	}  
	
	void UpdateParams()
	{
		uint _pid=0;
		if(StrToInt(pidTxt.Text(),_pid))
		pid=_pid;
		uint _dialog=0;
		if(StrToInt(dialogTxt.Text(),_dialog))
		dialog=_dialog;
		
		uint _ai=0;
		if(StrToInt(aiTxt.Text(),_ai))
		ai=_ai;
		uint _team=0;
		if(StrToInt(teamTxt.Text(),_team))
		team=_team;
		uint _bag=0;
		if(StrToInt(bagTxt.Text(),_bag))
		bag=_bag;
		uint _level=0;
		if(StrToInt(levelTxt.Text(),_level))
		level=_level;
		
		ok.SetParams(pid,hexX,hexY,uint8(Random(0,5)),dialog,scriptTxt.Text(),ai,bag,team,mob,level);
	}
	
	void Show()
	{
		if(Auto())
		ok.Click();
	}
};          

import uint COLOR_RGB_STRING(string&r,string&g,string&b)from"client_utils";
import uint COLOR_RGBA_STRING(string&r,string&g,string&b,string&a)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b)from"client_utils";
import void COLOR_RGB_UNPACK(uint color,uint8&r,uint8&g,uint8&b,uint8&a)from"client_utils";

import string RandomString(uint8 length)from"client_utils";

import bool string2bool(string@text)from"client_utils";
import uint string2uint(string@text)from"client_utils";
import uint rgb_string2uint(string&text)from"client_utils";
import uint rgba_string2uint(string&text)from"client_utils";

import int string2int(string&text)from"client_utils";
import uint font_string2uint(string&text)from"client_utils";
import uint range_string2int(string&text,int&from,int&to)from"client_utils";
import uint range_string2uint(string&text,uint&from,uint&to)from"client_utils";
import void vis_string2bool(string&text,bool&head,bool&msgbox)from"client_utils";           

import bool StrToInt(string@s,uint64&inout val)from"strtoint";
import bool StrToInt(string@s,uint&inout val)from"strtoint";
import bool StrToInt(string@s,uint16&inout val)from"strtoint";
import bool StrToInt(string@s,uint8&inout val)from"strtoint";
import bool StrToInt(string@s,int64&inout val)from"strtoint";
import bool StrToInt(string@s,int16&inout val)from"strtoint";
import bool StrToInt(string@s,int8&inout val)from"strtoint";     

bool Authorized=false;
bool IsAuthorized(){return Authorized;}

void Authorize(int p0,int p1,int p2,string@+p3,array<int>@+p4)
{
	Authorized=true;
} 

CContextMenu DevMenu;
CXpWindow XpWindow;
CSpawnNpcWindow SpawnWindow;

void InitDevMenu()
{
	GUI_CreateScreen((41),null)
	.Control(DevMenu)
	.SetCallbackShow(DevMenu)
	.SetCallbackFocus(DevMenu)
	.CanMove(true)
	.Modal(false)
	.Multiinstance(false);
	GUI_CreateScreen((42),"input_box.png")
	.Control(XpWindow)
	.SetCallbackShow(XpWindow)
	.CanMove(true)
	.Modal(true)
	.Multiinstance(false);
	GUI_CreateScreen((43),"perk.png")
	.Control(SpawnWindow)
	.SetCallbackShow(SpawnWindow)
	.CanMove(true)
	.Modal(true)
	.Multiinstance(false);
}

bool DevMenuProcessKey(uint8 key,string&keyText)
{
	switch(key)
	{
		case 0x01:
		if(IsPossessMode())
		{
			Unpossess();
			return true;
		}
		break;
	}
	return(false);
}   

class CKillerButton:CContextButton
{
	CKillerButton()
	{
		super("Kill");
	}
	
	void SetCritter(CritterCl@cr)
	{
		if(cr.Cond==(3))
		caption="Revive";
		else
		caption="Kill";
		CContextButton::SetCritter(cr);
	}   
	
	void Click()
	{
		if(crId!=0)
		RunServerScriptUnsafe("dev_menu@unsafe_KillCritter",crId,0,0,null,null);
		parent.HideWindow();
	}
};  

class CNeutralizeButton:CContextButton
{
	CNeutralizeButton()
	{
		super("Neutralize");
	}
	
	void SetCritter(CritterCl@cr)
	{
		if(cr.IsKnockout())
		caption="Wake";
		else
		caption="Neutralize";
		CContextButton::SetCritter(cr);
	}   
	
	void Click()
	{
		if(crId!=0)
		RunServerScriptUnsafe("dev_menu@unsafe_NeutralizeCritter",crId,0,0,null,null);
	}
};   

class CCleanButton:CContextButton
{
	CCleanButton()
	{
		super("Remove");
	}
	
	void SetCritter(CritterCl@cr)
	{
		caption="Remove critter";
		CContextButton::SetCritter(cr);
	}
	void SetItem(ItemCl@item)
	{
		caption="Remove item";
		CContextButton::SetItem(item);
	}  
	
	void Click()
	{
		if(crId!=0)
		RunServerScriptUnsafe("dev_menu@unsafe_RemoveCritter",crId,0,0,null,null);
		else if(itemId!=0)
		RunServerScriptUnsafe("dev_menu@unsafe_RemoveItem",itemId,0,0,null,null);
		parent.HideWindow();
	}
};     

uint PossessedCritterId;
uint GetPossessedCritterId(){return PossessedCritterId;}   

bool IsPossessMode()
{
	return PossessedCritterId!=0;
}

class CPossessButton:CContextButton
{
	CPossessButton()
	{
		super("Possess");
	}
	
	void Click()
	{
		PossessedCritterId=crId;       
		
		parent.HideWindow();
	}
};  

void Unpossess()
{
	PossessedCritterId=0;   
	
}   

class CPickButton:CContextButton
{
	CPickButton()
	{
		super("Pick item");
	}
	
	void Click()
	{
		RunServerScriptUnsafe("dev_menu@unsafe_PickItem",PossessedCritterId,itemId,0,null,null);
		parent.HideWindow();
	}
};

class CAttackButton:CContextButton
{
	CAttackButton()
	{
		super("Attack");
	}
	
	void Click()
	{
		RunServerScriptUnsafe("dev_menu@unsafe_Attack",PossessedCritterId,crId,0,null,null);
		parent.HideWindow();
	}
};   

class CMoveToButton:CContextButton
{
	CMoveToButton()
	{
		super("Move to");
	}
	
	void Click()
	{
		RunServerScriptUnsafe("dev_menu@unsafe_MoveTo",PossessedCritterId,hexX,hexY,null,null);
		parent.HideWindow();
	}
};  

class CStopButton:CContextButton
{
	CStopButton()
	{
		super("Stop");
	}
	void Click()
	{
		RunServerScriptUnsafe("dev_menu@unsafe_Stop",PossessedCritterId,0,0,null,null);
		parent.HideWindow();
	}
};   

class CTradeButton:CContextButton
{
	CTradeButton()
	{
		super("Trade");
	}
	
	void SetCritter(CritterCl@cr)
	{
		caption="Trade";
		CContextButton::SetCritter(cr);
	}
	void SetItem(ItemCl@item)
	{
		caption="Browse items";
		CContextButton::SetItem(item);
	}  
	
	void Click()
	{
		RunServerScriptUnsafe("dev_menu@unsafe_Trade",crId,itemId,0,null,null);
		parent.HideWindow();
	}
};   

class CTeleportButton:CContextButton
{
	CTeleportButton()
	{
		super("Teleport");
	}
	
	void Click()
	{
		RunServerScriptUnsafe("dev_menu@unsafe_Teleport",0,hexX,hexY,null,null);
		parent.HideWindow();
	}
};   

class CAirstrikeButton:CContextButton
{
	CAirstrikeButton()
	{
		super("Airstrike");
	}
	
	void Click()
	{
		RunServerScript("dev_menu@Airstrike",0,hexX,hexY,null,null);
	}
};    

class CXpButton:CContextButton
{
	CXpButton()
	{
		super("Give XP");
	}
	
	void Click()
	{
		XpWindow.Auto(GUI_IsKeyPressed(0x2A));
		XpWindow.SetCritter(crId);
		XpWindow.ShowWindow();
	}
};   

class CXpOKButton:CDialogRedButton
{
	CXpWindow@window;
	CXpOKButton(int left,int top,CXpWindow@window)
	{
		super(left,top);
		@this.window=@window;
	}
	void Click()
	{
		parent.HideWindow();
		RunServerScript("dev_menu@GiveXp",window.CrId(),window.Xp(),0,window.Message(),null);
	}
};
class CXpCancelButton:CDialogRedButton
{
	CXpWindow@window;
	CXpCancelButton(int left,int top,CXpWindow@window)
	{
		super(left,top);
		@this.window=@window;
	}
	
	void Click(){parent.HideWindow();}
};
class CXpWindow:Window
{
	CTextBox@message;
	CTextBox@amount;
	CXpOKButton@ok;
	CXpCancelButton@cancel;
	uint crId;
	
	void Init()
	{
		
		int w=288;
		int h=257;
		
		@message=CTextBox(50,35,196,140,"You've done a good job!");
		AddControl(@message);
		@amount=CTextBox(54,188,195,14,"1000");
		AddControl(@amount);
		
		@ok=CXpOKButton(62,214,this);
		AddControl(@ok);
		@cancel=CXpCancelButton(167,214,this);
		AddControl(@cancel);
		AddControl(CLabel(95,210,40,20,"OK",(7)));
		AddControl(CLabel(185,210,60,20,"CANCEL",(7)));
		
		Window::Init();
	}   
	
	uint CrId(){return crId;}
	uint Xp()
	{
		uint xp=0;
		if(!StrToInt(amount.Text(),xp))
		::Message("Incorrect xp amount");
		return xp;
	}
	string@Message(){return message.Text();}
	
	void SetCritter(uint crId){this.crId=crId;}
	
	void OnShow()
	{
		if(Auto())
		ok.Click();
	}
};  

class CSpawnNpcButton:CContextButton
{
	CSpawnNpcButton()
	{
		super("Spawn critter");
	}
	
	void Click()
	{
		SpawnWindow.Auto(GUI_IsKeyPressed(0x2A));
		SpawnWindow.SetHex(hexX,hexY);
		SpawnWindow.ShowWindow();
	}
};   

class CSwitchStateButton:CContextButton
{
	CSwitchStateButton()
	{
		super("Open/Close");
	}
	
	void SetItem(ItemCl@item)
	{
		if((((item.LockerCondition)&((0x01)))!=0))
		caption="Close";
		else
		caption="Open";
		CContextButton::SetItem(item);
	}  
	
	void Click()
	{
		RunServerScriptUnsafe("dev_menu@unsafe_SwitchState",itemId,0,0,null,null);
		parent.HideWindow();
	}
};   

class CContextMenu:Window
{
	CButton@title;
	CKillerButton@killer;
	CPossessButton@possess;
	CCleanButton@clean;
	CTradeButton@trade;
	CTeleportButton@teleport;
	CAirstrikeButton@airstrike;
	CXpButton@xp;
	CSpawnNpcButton@spawnNpc; 
	
	CPickButton@pick;
	CAttackButton@attack;
	CMoveToButton@moveTo;
	CStopButton@stop;
	CNeutralizeButton@neutralize; 
	
	CSwitchStateButton@switchstate;
	
	void Init()
	{     
		
		visible=false;
		
		int top=0;
		
		@title=CButton(0,top+=30,"<<Context>>");
		title.Disable();
		AddControl(@title);
		
		@spawnNpc=CSpawnNpcButton();
		AddControl(@spawnNpc); 
		
		@xp=CXpButton();
		AddControl(@xp);
		@possess=CPossessButton();
		AddControl(@possess);
		@trade=CTradeButton();
		AddControl(@trade);
		@killer=CKillerButton();
		AddControl(@killer);
		@clean=CCleanButton();
		AddControl(@clean);
		@teleport=CTeleportButton();
		AddControl(@teleport);
		@airstrike=CAirstrikeButton();
		AddControl(@airstrike);
		
		@pick=CPickButton();
		AddControl(@pick);
		@attack=CAttackButton();
		AddControl(@attack);
		@moveTo=CMoveToButton();
		AddControl(@moveTo);
		@stop=CStopButton();
		AddControl(@stop); 
		
		@switchstate=CSwitchStateButton();
		AddControl(@switchstate);
		
		Window::Init();
	}
	
	int Width(){return title.Width();}   
	
	void OnShow()
	{
		
		for(uint i=0,j=controls.length();i<j;i++)
		{
			controls[i].Hide();
			controls[i].Disable();
		}
		
		uint x=Left();
		uint y=Top(); 
		
		CritterCl@cr=GetMonitorCritter(x,y);
		ItemCl@item=GetMonitorItem(x,y);
		CritterCl@chosen=GetChosen(); 
		
		title.Show();  
		
		if((@cr!=null))
		{
			
			if(cr.IsChosen())
			title.SetCaption("<<You - "+cr.Id+">>");
			else if(cr.IsPlayer())
			title.SetCaption("<<Player - "+cr.Id+">>");
			else
			title.SetCaption("<<"+(cr.Id-(5000000))+">>");   
			
			if(cr.IsPlayer())
			{
				xp.SetCritter(cr);
				xp.Show();
			}
			if(!cr.IsChosen())
			{
				possess.SetCritter(cr);
				possess.Show();
			}
			
			killer.SetCritter(cr);
			killer.Show();
			
			if(!cr.IsPlayer())
			{
				clean.SetCritter(cr);
				clean.Show();
			}
			
			if(IsPossessMode()&&PossessedCritterId!=cr.Id)
			{
				attack.SetCritter(cr);
				attack.Show();
			}
			if(!cr.IsPlayer())
			{ 
				
			}
			
			if(chosen.Id!=cr.Id)
			{
				trade.SetCritter(cr);
				trade.Show();
			}
		}
		
		else if((@item!=null)&&item.GetType()!=(0)&&item.GetType()!=(10)&&item.GetType()!=(11))
		{
			
			title.SetCaption("<<Item>>");
			clean.SetItem(item);
			clean.Show();
			
			if(IsPossessMode())
			{
				pick.SetItem(item);
				pick.Show();
			}
			if(item.GetType()==(8))
			{
				trade.SetItem(item);
				trade.Show();
			}
			
			uint16 hexX=0;
			uint16 hexY=0;
			GetMonitorHex(x,y,hexX,hexY);
			teleport.SetHex(hexX,hexY);
			teleport.Show();
		}
		
		else
		{
			
			uint16 hexX=0;
			uint16 hexY=0;
			GetMonitorHex(x,y,hexX,hexY);
			title.SetCaption("<<Hex>>");
			teleport.SetHex(hexX,hexY);
			teleport.Show();
			if(IsPossessMode())
			{
				moveTo.SetHex(hexX,hexY);
				moveTo.Show();
			}
			spawnNpc.SetHex(hexX,hexY);
			spawnNpc.Show();
			airstrike.SetHex(hexX,hexY);
			airstrike.Show();
		} 
		
		int top=-30;
		for(uint i=0,j=controls.length();i<j;i++)
		{
			if(controls[i].IsVisible())
			{
				controls[i].Enable();
				controls[i].Show(0,top+=30);
			}
		}
		title.Disable();
		
		screen.Size(Width(),top+30);
	}
};

